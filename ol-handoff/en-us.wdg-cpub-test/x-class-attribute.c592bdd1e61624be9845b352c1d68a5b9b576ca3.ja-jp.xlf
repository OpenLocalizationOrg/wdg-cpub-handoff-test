<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">daca0d528ae54849d010e3799fa6ee299fe7d3f2</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\xaml-platform\x-class-attribute.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">93074f79542a28e0cce2dba19ed66bd26070dfc7</mda:meta><mda:meta type="olxliffhash">203199fc0ccbb8ef9b9655460795ccb5055f4398</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Configures XAML compilation to join partial classes between markup and code-behind.</source>
					<target>Configures XAML compilation to join partial classes between markup and code-behind.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</source>
					<target>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>x:Class attribute'</source>
					<target>x:Class attribute'</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>x:Class attribute</source>
					<target>x:Class attribute</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Configures XAML compilation to join partial classes between markup and code-behind.</source>
					<target>Configures XAML compilation to join partial classes between markup and code-behind.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</source>
					<target>The code partial class is defined in a separate code file, and the markup partial class is created by code generation during XAML compilation.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>namespace</source>
					<target>namespace</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Optional.</source>
					<target>Optional.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
				</originalData>
				<segment state="initial">
					<source>Specifies a namespace that contains the partial class identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">classname</pc>.</source>
					<target>Specifies a namespace that contains the partial class identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">classname</pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">_</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
					<data id="id6">_</data>
				</originalData>
				<segment state="initial">
					<source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> is specified, a dot (.) separates <pc dataRefEnd="id4" dataRefStart="id3" id="p2">namespace</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">classname</pc>.</source>
					<target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> is specified, a dot (.) separates <pc dataRefEnd="id4" dataRefStart="id3" id="p2">namespace</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">classname</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">_</data>
					<data id="id4">_</data>
				</originalData>
				<segment state="initial">
					<source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> is omitted, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">classname</pc> is assumed to have no namespace.</source>
					<target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> is omitted, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">classname</pc> is assumed to have no namespace.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>classname</source>
					<target>classname</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Required.</source>
					<target>Required.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</source>
					<target>Specifies the name of the partial class that connects the loaded XAML and your code-behind for that XAML.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242324)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> root in the application definition of a compiled application.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> can be declared as an attribute for any element that is the root of a XAML file/object tree and is being compiled by build actions, or for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> root in the application definition of a compiled application.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Declaring <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc> build action, results in a compile-time error.</source>
					<target>Declaring <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> on any element other than a page root or application root, and under any circumstances for a XAML file that is not compiled with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc> build action, results in a compile-time error.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The class used as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> cannot be a nested class.</source>
					<target>The class used as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> cannot be a nested class.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> attribute must be a string that specifies the fully qualified name of a class.</source>
					<target>The value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> attribute must be a string that specifies the fully qualified name of a class.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</source>
					<target>You can omit namespace information so long as that is how the code-behind is structured also (your class definition starts at the class level).</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The code-behind file for a page or application definition must be within a code file that is included as part of the project.</source>
					<target>The code-behind file for a page or application definition must be within a code file that is included as part of the project.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The code-behind class must be public.</source>
					<target>The code-behind class must be public.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The code-behind class must be partial.</source>
					<target>The code-behind class must be partial.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>CLR language rules</source>
					<target>CLR language rules</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</source>
					<target>Although your code-behind file can be a C++ file, there are certain conventions that still follow the CLR language form, so that there is no difference in the XAML syntax.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In particular, the separator between the namespace and classname components of any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</source>
					<target>In particular, the separator between the namespace and classname components of any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Class</pc> value is always a dot ("."), even though the separator between namespace and classname in the C++ code file associated with the XAML is "::".</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> part of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Class</pc> value.</source>
					<target>If you declare nested namespaces in C++, then the separator between the successive nested namespace strings should also be "." rather than "::" when you specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">namespace</pc> part of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Class</pc> value.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>