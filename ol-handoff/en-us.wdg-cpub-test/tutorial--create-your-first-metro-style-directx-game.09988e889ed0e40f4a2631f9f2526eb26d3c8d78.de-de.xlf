<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">00a9b36a1c018f253f6a243fdb41f93de01e2cb1</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\tutorial--create-your-first-metro-style-directx-game.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">b7234145438b96d504d42c08e9af1e395bca490d</mda:meta><mda:meta type="olxliffhash">bb0daf296eaeadcd556e230cdd7c98da4d141a30</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Create a simple Universal Windows Platform (UWP) game with DirectX</source>
					<target>Create a simple Universal Windows Platform (UWP) game with DirectX</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>In this set of tutorials, you learn how to create a basic Universal Windows Platform (UWP) game with DirectX and C++.</source>
					<target>In this set of tutorials, you learn how to create a basic Universal Windows Platform (UWP) game with DirectX and C++.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>DirectX game sample</source>
					<target>DirectX game sample</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>game sample, Universal Windows Platform (UWP)</source>
					<target>game sample, Universal Windows Platform (UWP)</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>Direct3D 11 game</source>
					<target>Direct3D 11 game</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Create a simple Universal Windows Platform (UWP) game with DirectX</source>
					<target>Create a simple Universal Windows Platform (UWP) game with DirectX</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>In this set of tutorials, you learn how to create a basic Universal Windows Platform (UWP) game with DirectX and C++.</source>
					<target>In this set of tutorials, you learn how to create a basic Universal Windows Platform (UWP) game with DirectX and C++.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>We cover all the major parts of a game, including the processes for loading assets such as arts and meshes, creating a main game loop, implementing a simple rendering pipeline, and adding sound and controls.</source>
					<target>We cover all the major parts of a game, including the processes for loading assets such as arts and meshes, creating a main game loop, implementing a simple rendering pipeline, and adding sound and controls.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>We show you the UWP game development techniques and considerations.</source>
					<target>We show you the UWP game development techniques and considerations.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>We don't provide a complete end-to-end game.</source>
					<target>We don't provide a complete end-to-end game.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Rather, we focus on key UWP DirectX game development concepts, and call out Windows Runtime specific considerations around those concepts.</source>
					<target>Rather, we focus on key UWP DirectX game development concepts, and call out Windows Runtime specific considerations around those concepts.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Objective</source>
					<target>Objective</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>To use the basic concepts and components of a UWP DirectX game, and to become more comfortable designing UWP games with DirectX.</source>
					<target>To use the basic concepts and components of a UWP DirectX game, and to become more comfortable designing UWP games with DirectX.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>What you need to know before starting</source>
					<target>What you need to know before starting</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Before we get started with this tutorial, you need to be familiar with these subjects.</source>
					<target>Before we get started with this tutorial, you need to be familiar with these subjects.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Microsoft C++ with Component Extensions (C++/CX).</source>
					<target>Microsoft C++ with Component Extensions (C++/CX).</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>This is an update to Microsoft C++ that incorporates automatic reference counting, and is the language for developing a UWP games with DirectX 11.1 or later versions.</source>
					<target>This is an update to Microsoft C++ that incorporates automatic reference counting, and is the language for developing a UWP games with DirectX 11.1 or later versions.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Basic linear algebra and Newtonian physics concepts.</source>
					<target>Basic linear algebra and Newtonian physics concepts.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Basic graphics programming terminology.</source>
					<target>Basic graphics programming terminology.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Basic Windows programming concepts.</source>
					<target>Basic Windows programming concepts.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/dd370990.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/hh404569)</data>
				</originalData>
				<segment state="initial">
					<source>Basic familiarity with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct2D</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Direct3D 11</pc> APIs.</source>
					<target>Basic familiarity with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct2D</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Direct3D 11</pc> APIs.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The Windows Store Direct3D shooting game sample</source>
					<target>The Windows Store Direct3D shooting game sample</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>This sample implements a simple first-person shooting gallery, where the player fires balls at moving targets.</source>
					<target>This sample implements a simple first-person shooting gallery, where the player fires balls at moving targets.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Hitting each target awards a set number of points, and the player can progress through 6 levels of increasing challenge.</source>
					<target>Hitting each target awards a set number of points, and the player can progress through 6 levels of increasing challenge.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>At the end of the levels, the points are tallied, and the player is awarded a final score.</source>
					<target>At the end of the levels, the points are tallied, and the player is awarded a final score.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The sample demonstrates the game concepts:</source>
					<target>The sample demonstrates the game concepts:</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Interoperation between DirectX 11.1 and the Windows Runtime</source>
					<target>Interoperation between DirectX 11.1 and the Windows Runtime</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>A first-person 3D perspective and camera</source>
					<target>A first-person 3D perspective and camera</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Stereoscopic 3D effects</source>
					<target>Stereoscopic 3D effects</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Collision detection between objects in 3D</source>
					<target>Collision detection between objects in 3D</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Handling player input for mouse, touch, and Xbox 360 controller controls</source>
					<target>Handling player input for mouse, touch, and Xbox 360 controller controls</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Audio mixing and playback</source>
					<target>Audio mixing and playback</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>A basic game state machine</source>
					<target>A basic game state machine</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>the game sample in action</source>
					<target>the game sample in action</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Topic</source>
					<target>Topic</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Set up the game project</source>
					<target>Set up the game project</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>The first step in assembling your game is to set up a project in Microsoft Visual Studio in such a way that you minimize the amount of code infrastructure work you need to do.</source>
					<target>The first step in assembling your game is to set up a project in Microsoft Visual Studio in such a way that you minimize the amount of code infrastructure work you need to do.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>You can save yourself a lot of time and hassle by using the right template and configuring the project specifically for game development.</source>
					<target>You can save yourself a lot of time and hassle by using the right template and configuring the project specifically for game development.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>We step you through the setup and configuration of a simple game project.</source>
					<target>We step you through the setup and configuration of a simple game project.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Define the game's UWP app framework</source>
					<target>Define the game's UWP app framework</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>The first part of coding a UWP with DirectX game is building the framework that lets the game object interact with Windows.</source>
					<target>The first part of coding a UWP with DirectX game is building the framework that lets the game object interact with Windows.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This includes Windows Runtime properties like suspend/resume event handling, window focus, and snapping, plus as the events, interactions and transitions for the user interface.</source>
					<target>This includes Windows Runtime properties like suspend/resume event handling, window focus, and snapping, plus as the events, interactions and transitions for the user interface.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>We go over how the sample game is structured, and how it defines the high-level state machine for the player and system interaction.</source>
					<target>We go over how the sample game is structured, and how it defines the high-level state machine for the player and system interaction.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Define the main game object</source>
					<target>Define the main game object</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</source>
					<target>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Assemble the rendering framework</source>
					<target>Assemble the rendering framework</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Now, it's time to look at how the sample game uses that structure and state to display its graphics.</source>
					<target>Now, it's time to look at how the sample game uses that structure and state to display its graphics.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Here, we look at how to implement a rendering framework, starting from the initialization of the graphics device through the presentation of the graphics objects for display.</source>
					<target>Here, we look at how to implement a rendering framework, starting from the initialization of the graphics device through the presentation of the graphics objects for display.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Add a user interface</source>
					<target>Add a user interface</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>You've seen how the sample game implements the main game object as well as the basic rendering framework.</source>
					<target>You've seen how the sample game implements the main game object as well as the basic rendering framework.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Now, let's look at how the sample game provides feedback about game state to the player.</source>
					<target>Now, let's look at how the sample game provides feedback about game state to the player.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Here, you learn how you can add simple menu options and heads-up display components on top of the 3-D graphics pipeline output.</source>
					<target>Here, you learn how you can add simple menu options and heads-up display components on top of the 3-D graphics pipeline output.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Add controls</source>
					<target>Add controls</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</source>
					<target>Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Add sound</source>
					<target>Add sound</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee415813)</data>
				</originalData>
				<segment state="initial">
					<source>In this step, we examine how the shooting game sample creates an object for sound playback using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAudio2</pc> APIs.</source>
					<target>In this step, we examine how the shooting game sample creates an object for sound playback using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAudio2</pc> APIs.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Extend the game sample</source>
					<target>Extend the game sample</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Congratulations!</source>
					<target>Congratulations!</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>At this point, you understand the key components of a basic UWP DirectX 3D game.</source>
					<target>At this point, you understand the key components of a basic UWP DirectX 3D game.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>You can set up the framework for a game, including the view provider and rendering pipeline, and implement a basic game loop.</source>
					<target>You can set up the framework for a game, including the view provider and rendering pipeline, and implement a basic game loop.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>You can also create a basic user interface overlay, and incorporate sounds and controls.</source>
					<target>You can also create a basic user interface overlay, and incorporate sounds and controls.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>You're on your way to creating a game of your own, and here are some resources to further your knowledge of DirectX game development.</source>
					<target>You're on your way to creating a game of your own, and here are some resources to further your knowledge of DirectX game development.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>