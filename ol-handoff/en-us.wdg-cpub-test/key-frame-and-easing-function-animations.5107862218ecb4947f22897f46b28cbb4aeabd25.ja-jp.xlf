<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">4df0df529760ff9d203e32a17fa19c190a346bf0</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\graphics\key-frame-and-easing-function-animations.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">b452aaf795be70453d2fcd479699d1263f3e59a9</mda:meta><mda:meta type="olxliffhash">8bc240b98d242d213ecb6c796ae58214551676cb</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Key-frame animations and easing function animations</source>
					<target>Key-frame animations and easing function animations</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Linear key-frame animations, key-frame animations with a KeySpline value, or easing functions are three different techniques for approximately the same scenario.</source>
					<target>Linear key-frame animations, key-frame animations with a KeySpline value, or easing functions are three different techniques for approximately the same scenario.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Key-frame animations and easing function animations</source>
					<target>Key-frame animations and easing function animations</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Linear key-frame animations, key-frame animations with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</source>
					<target>Linear key-frame animations, key-frame animations with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](storyboarded-animations.md)</data>
				</originalData>
				<segment state="initial">
					<source>Make sure you've read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> topic.</source>
					<target>Make sure you've read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> topic.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](storyboarded-animations.md)</data>
				</originalData>
				<segment state="initial">
					<source>This topic builds on the animation concepts that were explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> and won't go over them again.</source>
					<target>This topic builds on the animation concepts that were explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> and won't go over them again.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](storyboarded-animations.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR210517)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.fillbehavior)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> describes how to target animations, storyboards as resources, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Timeline</pc></pc> property values such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Duration</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">FillBehavior</pc></pc>, and so on.</source>
					<target>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> describes how to target animations, storyboards as resources, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Timeline</pc></pc> property values such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Duration</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">FillBehavior</pc></pc>, and so on.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Animating using key-frame animations</source>
					<target>Animating using key-frame animations</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Key-frame animations permit more than one target value that is reached at a point along the animation timeline.</source>
					<target>Key-frame animations permit more than one target value that is reached at a point along the animation timeline.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>In other words each key frame can specify a different intermediate value, and the last key frame reached is the final animation value.</source>
					<target>In other words each key frame can specify a different intermediate value, and the last key frame reached is the final animation value.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>By specifying multiple values to animate, you can make more complex animations.</source>
					<target>By specifying multiple values to animate, you can make more complex animations.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Key-frame animations also enable different interpolation logic, which are each implemented as a different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrame</pc> subclass per animation type.</source>
					<target>Key-frame animations also enable different interpolation logic, which are each implemented as a different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrame</pc> subclass per animation type.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Specifically, each key-frame animation type has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Discrete</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Linear</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Spline</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Easing</pc> variation of its <pc dataRefEnd="id10" dataRefStart="id9" id="p5">KeyFrame</pc> class for specifying its key frames.</source>
					<target>Specifically, each key-frame animation type has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Discrete</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Linear</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Spline</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Easing</pc> variation of its <pc dataRefEnd="id10" dataRefStart="id9" id="p5">KeyFrame</pc> class for specifying its key frames.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243130)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210316)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/BR210446)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">[</data>
					<data id="id18">](https://msdn.microsoft.com/library/windows/apps/BR210269)</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, to specify an animation that targets a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> and uses key frames, you could declare key frames with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">LinearDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">SplineDoubleKeyFrame</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">EasingDoubleKeyFrame</pc></pc>.</source>
					<target>For example, to specify an animation that targets a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> and uses key frames, you could declare key frames with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">LinearDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">SplineDoubleKeyFrame</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">EasingDoubleKeyFrame</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use any and all of these types within a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrames</pc> collection, to change the interpolation each time a new key frame is reached.</source>
					<target>You can use any and all of these types within a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrames</pc> collection, to change the interpolation each time a new key frame is reached.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For interpolation behavior, each key frame controls the interpolation until its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> time is reached.</source>
					<target>For interpolation behavior, each key frame controls the interpolation until its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> time is reached.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is reached at that time also.</source>
					<target>Its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is reached at that time also.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>If there are more key frames beyond, the value then becomes the starting value for the next key frame in a sequence.</source>
					<target>If there are more key frames beyond, the value then becomes the starting value for the next key frame in a sequence.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>At the start of the animation, if no key frame with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> of "0:0:0" exists, the starting value is whatever the non-animated value of the property is.</source>
					<target>At the start of the animation, if no key frame with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> of "0:0:0" exists, the starting value is whatever the non-animated value of the property is.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">/</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>This is similar to how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation acts if there is no <pc dataRefEnd="id10" dataRefStart="id9" id="p4">From</pc>.</source>
					<target>This is similar to how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation acts if there is no <pc dataRefEnd="id10" dataRefStart="id9" id="p4">From</pc>.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The duration of a key-frame animation is implicitly the duration equal to the highest <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> value set in any of its key frames.</source>
					<target>The duration of a key-frame animation is implicitly the duration equal to the highest <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> value set in any of its key frames.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You can set an explicit <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> if you want, but be careful it's not shorter than a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">KeyTime</pc> in your own key frames or you'll cut off part of the animation.</source>
					<target>You can set an explicit <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> if you want, but be careful it's not shorter than a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">KeyTime</pc> in your own key frames or you'll cut off part of the animation.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210517)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">/</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">/</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>In addition to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, you can set all the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Timeline</pc></pc> based properties on a key-frame animation, like you can with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">From</pc><ph dataRef="id11" id="ph1" /><pc dataRefEnd="id13" dataRefStart="id12" id="p6">To</pc><ph dataRef="id14" id="ph2" /><pc dataRefEnd="id16" dataRefStart="id15" id="p7">By</pc> animation, because the key-frame animation classes also derive from <pc dataRefEnd="id18" dataRefStart="id17" id="p8">Timeline</pc>.</source>
					<target>In addition to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, you can set all the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Timeline</pc></pc> based properties on a key-frame animation, like you can with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">From</pc><ph dataRef="id11" id="ph1" /><pc dataRefEnd="id13" dataRefStart="id12" id="p6">To</pc><ph dataRef="id14" id="ph2" /><pc dataRefEnd="id16" dataRefStart="id15" id="p7">By</pc> animation, because the key-frame animation classes also derive from <pc dataRefEnd="id18" dataRefStart="id17" id="p8">Timeline</pc>.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>These are:</source>
					<target>These are:</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.autoreverse)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoReverse</pc></pc>: once the last key frame is reached, the frames are repeated in reverse order from the end.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoReverse</pc></pc>: once the last key frame is reached, the frames are repeated in reverse order from the end.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>This doubles the apparent duration of the animation.</source>
					<target>This doubles the apparent duration of the animation.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.begintime)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc></pc>: delays the start of the animation.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc></pc>: delays the start of the animation.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The timeline for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> values in the frames doesn't start counting until <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc> is reached, so there's no risk of cutting off frames</source>
					<target>The timeline for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> values in the frames doesn't start counting until <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc> is reached, so there's no risk of cutting off frames</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.fillbehavior)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillBehavior</pc></pc>: controls what happens when the last key frame is reached.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillBehavior</pc></pc>: controls what happens when the last key frame is reached.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FillBehavior</pc> has no effect on any intermediate key frames.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FillBehavior</pc> has no effect on any intermediate key frames.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.repeatbehaviorproperty)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RepeatBehavior</pc></pc>:</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RepeatBehavior</pc></pc>:</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Forever</pc>, then the key frames and their timeline repeat infinitely.</source>
					<target>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Forever</pc>, then the key frames and their timeline repeat infinitely.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>If set to an iteration count, the timeline repeats that many times.</source>
					<target>If set to an iteration count, the timeline repeats that many times.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242377)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, the timeline repeats until that time is reached.</source>
					<target>If set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, the timeline repeats until that time is reached.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>This might truncate the animation part way through the key frame sequence, if it's not an integer factor of the timeline's implicit duration.</source>
					<target>This might truncate the animation part way through the key frame sequence, if it's not an integer factor of the timeline's implicit duration.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.speedratioproperty)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SpeedRatio</pc></pc> (not commonly used)</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SpeedRatio</pc></pc> (not commonly used)</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Linear key frames</source>
					<target>Linear key frames</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Linear key frames result in a simple linear interpolation of the value until the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</source>
					<target>Linear key frames result in a simple linear interpolation of the value until the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">/</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](storyboarded-animations.md)</data>
				</originalData>
				<segment state="initial">
					<source>This interpolation behavior is the most similar to the simpler <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animations described in the <pc dataRefEnd="id10" dataRefStart="id9" id="p4">Storyboarded animations</pc> topic.</source>
					<target>This interpolation behavior is the most similar to the simpler <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animations described in the <pc dataRefEnd="id10" dataRefStart="id9" id="p4">Storyboarded animations</pc> topic.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Here's how to use a key-frame animation to scale the render height of a rectangle, using linear key frames.</source>
					<target>Here's how to use a key-frame animation to scale the render height of a rectangle, using linear key frames.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>This example runs an animation where the height of the rectangle increases slightly and linearly for the first 4 seconds, then scales rapidly for the last second until the rectangle is double the starting height.</source>
					<target>This example runs an animation where the height of the rectangle increases slightly and linearly for the first 4 seconds, then scales rapidly for the last second until the rectangle is double the starting height.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Discrete key frames</source>
					<target>Discrete key frames</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Discrete key frames don't use any interpolation at all.</source>
					<target>Discrete key frames don't use any interpolation at all.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached, the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc> is simply applied.</source>
					<target>When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached, the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc> is simply applied.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Depending on which UI property is being animated, this often produces an animation that appears to "jump".</source>
					<target>Depending on which UI property is being animated, this often produces an animation that appears to "jump".</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Be certain that this is the aesthetic behavior that you really want.</source>
					<target>Be certain that this is the aesthetic behavior that you really want.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>You can minimize the apparent jumps by increasing the number of key frames you declare, but if a smooth animation is your goal, you might be better off using linear or spline key frames instead.</source>
					<target>You can minimize the apparent jumps by increasing the number of key frames you declare, but if a smooth animation is your goal, you might be better off using linear or spline key frames instead.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Discrete key frames are the only way to animate a value that isn't of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Color</pc></pc>, with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">DiscreteObjectKeyFrame</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Discrete key frames are the only way to animate a value that isn't of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Color</pc></pc>, with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">DiscreteObjectKeyFrame</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>We'll discuss this in more detail later in this topic.</source>
					<target>We'll discuss this in more detail later in this topic.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Spline key frames</source>
					<target>Spline key frames</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A spline key frame create a variable transition between values according to the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> property.</source>
					<target>A spline key frame create a variable transition between values according to the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> property.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>This property specifies the first and second control points of a Bezier curve, which describes the acceleration of the animation.</source>
					<target>This property specifies the first and second control points of a Bezier curve, which describes the acceleration of the animation.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210307)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc></pc> defines a function over time relationship where the function-time graph is the shape of that Bezier curve.</source>
					<target>Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc></pc> defines a function over time relationship where the function-time graph is the shape of that Bezier curve.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Typically you specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value in a XAML shorthand attribute string that has four <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc> values separated by spaces or commas.</source>
					<target>Typically you specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value in a XAML shorthand attribute string that has four <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc> values separated by spaces or commas.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>These values are "X,Y" pairs for two control points of the Bezier curve.</source>
					<target>These values are "X,Y" pairs for two control points of the Bezier curve.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>"X" is time and "Y" is the function modifier to the value.</source>
					<target>"X" is time and "Y" is the function modifier to the value.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Each value should always be between 0 and 1 inclusive.</source>
					<target>Each value should always be between 0 and 1 inclusive.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Without control point modification to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>, the straight line from 0,0 to 1,1 is the representation of a function over time for a linear interpolation.</source>
					<target>Without control point modification to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>, the straight line from 0,0 to 1,1 is the representation of a function over time for a linear interpolation.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Your control points change the shape of that curve and thus the behavior of the function over time for the spline animation.</source>
					<target>Your control points change the shape of that curve and thus the behavior of the function over time for the spline animation.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>It's probably best to see this visually as a graph.</source>
					<target>It's probably best to see this visually as a graph.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://samples.msdn.microsoft.com/Silverlight/SampleBrowser/index.htm#/?sref=KeySplineExample)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can run the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Silverlight key-spline visualizer sample</pc> in a browser to see how the control points modify the curve and how a sample animation runs when using it as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc> value.</source>
					<target>You can run the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Silverlight key-spline visualizer sample</pc> in a browser to see how the control points modify the curve and how a sample animation runs when using it as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc> value.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210446)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This next example shows three different key frames applied to an animation, with the last one being a key spline animation for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> value (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SplineDoubleKeyFrame</pc></pc>).</source>
					<target>This next example shows three different key frames applied to an animation, with the last one being a key spline animation for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> value (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SplineDoubleKeyFrame</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note the string "0.6,0.0 0.9,0.00" applied for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>.</source>
					<target>Note the string "0.6,0.0 0.9,0.00" applied for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This produces a curve where the animation appears to run slowly at first but then rapidly reaches the value just before the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</source>
					<target>This produces a curve where the animation appears to run slowly at first but then rapidly reaches the value just before the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>This is just one easing function example.</source>
					<target>This is just one easing function example.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>We'll cover more in the next section.</source>
					<target>We'll cover more in the next section.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Easing functions</source>
					<target>Easing functions</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Easing functions allow you to apply custom mathematical formulas to your animations.</source>
					<target>Easing functions allow you to apply custom mathematical formulas to your animations.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Mathematical operations are often useful to produce animations that simulate real-world physics in a 2-D coordinate system.</source>
					<target>Mathematical operations are often useful to produce animations that simulate real-world physics in a 2-D coordinate system.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>For example, you may want an object to realistically bounce or behave as though it were on a spring.</source>
					<target>For example, you may want an object to realistically bounce or behave as though it were on a spring.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">/</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You could use key frame or even <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.</source>
					<target>You could use key frame or even <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Easing functions can be applied to animations in three ways:</source>
					<target>Easing functions can be applied to animations in three ways:</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>By using an easing keyframe in a keyframe animation, as described in the previous section.</source>
					<target>By using an easing keyframe in a keyframe animation, as described in the previous section.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.easingdoublekeyframe.easingfunction.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210279)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EasingColorKeyFrame.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingDoubleKeyFrame.EasingFunction</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EasingPointKeyFrame.EasingFunction</pc></pc>.</source>
					<target>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EasingColorKeyFrame.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingDoubleKeyFrame.EasingFunction</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EasingPointKeyFrame.EasingFunction</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">/</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">/</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>By setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EasingFunction</pc> property on one of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">From</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">To</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">By</pc> animation types.</source>
					<target>By setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EasingFunction</pc> property on one of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">From</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">To</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">By</pc> animation types.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243075)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.doubleanimation.easingfunction.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210354)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ColorAnimation.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleAnimation.EasingFunction</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointAnimation.EasingFunction</pc></pc>.</source>
					<target>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ColorAnimation.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleAnimation.EasingFunction</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointAnimation.EasingFunction</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209037)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209034)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>By setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> as part of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VisualTransition</pc></pc>.</source>
					<target>By setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> as part of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VisualTransition</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209037)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/JJ819808)</data>
				</originalData>
				<segment state="initial">
					<source>This is specific to defining visual states for controls; for more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Storyboards for visual states</pc>.</source>
					<target>This is specific to defining visual states for controls; for more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Storyboards for visual states</pc>.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Here is a list of the easing functions:</source>
					<target>Here is a list of the easing functions:</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243049)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243057)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc>: Creates a bouncing effect.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc>: Creates a bouncing effect.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243063)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc>: Creates an animation that accelerates or decelerates using a circular function.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc>: Creates an animation that accelerates or decelerates using a circular function.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243126)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t3.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t3.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210282)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElasticEase</pc></pc>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElasticEase</pc></pc>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210294)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExponentialEase</pc></pc>: Creates an animation that accelerates or decelerates using an exponential formula.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExponentialEase</pc></pc>: Creates an animation that accelerates or decelerates using an exponential formula.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210399)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.powerease.power)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PowerEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = tp where p is equal to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Power</pc></pc> property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PowerEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = tp where p is equal to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Power</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210403)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t2.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t2.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210405)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuarticEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t4.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuarticEase</pc></pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t4.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210407)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuinticEase</pc></pc>: Create an animation that accelerates or decelerates using the formula f(t) = t5.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuinticEase</pc></pc>: Create an animation that accelerates or decelerates using the formula f(t) = t5.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210439)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SineEase</pc></pc>: Creates an animation that accelerates or decelerates using a sine formula.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SineEase</pc></pc>: Creates an animation that accelerates or decelerates using a sine formula.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Some of the easing functions have their own properties.</source>
					<target>Some of the easing functions have their own properties.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243057)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.bounceease.bounces.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.bounceease.bounciness.aspx)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc> has two properties <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bounces</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Bounciness</pc></pc> that modify the function-over-time behavior of that particular <pc dataRefEnd="id14" dataRefStart="id13" id="p7">BounceEase</pc>.</source>
					<target>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc> has two properties <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bounces</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Bounciness</pc></pc> that modify the function-over-time behavior of that particular <pc dataRefEnd="id14" dataRefStart="id13" id="p7">BounceEase</pc>.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243126)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210275)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Other easing functions such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc> don't have properties other than the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingMode</pc></pc> property that all easing functions share, and always produce the same function-over-time behavior.</source>
					<target>Other easing functions such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc> don't have properties other than the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingMode</pc></pc> property that all easing functions share, and always produce the same function-over-time behavior.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Some of these easing functions have a bit of overlap, depending on how you set properties on the easing functions that have properties.</source>
					<target>Some of these easing functions have a bit of overlap, depending on how you set properties on the easing functions that have properties.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210403)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210399)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.powerease.power)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc> is exactly the same as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PowerEase</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Power</pc></pc> equal to 2.</source>
					<target>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc> is exactly the same as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PowerEase</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Power</pc></pc> equal to 2.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243063)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210294)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>And <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc> is basically a default-value <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExponentialEase</pc></pc>.</source>
					<target>And <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc> is basically a default-value <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExponentialEase</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243049)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">/</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc> easing function is unique because it can change the value outside of the normal range as set by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc><ph dataRef="id7" id="ph1" /><pc dataRefEnd="id9" dataRefStart="id8" id="p4">To</pc> or values of key frames.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc> easing function is unique because it can change the value outside of the normal range as set by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc><ph dataRef="id7" id="ph1" /><pc dataRefEnd="id9" dataRefStart="id8" id="p4">To</pc> or values of key frames.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>It starts the animation by changing the value in the opposite direction as would be expected from a normal <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc> behavior, goes back to the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">From</pc> or starting value again, and then runs the animation as normal.</source>
					<target>It starts the animation by changing the value in the opposite direction as would be expected from a normal <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc> behavior, goes back to the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">From</pc> or starting value again, and then runs the animation as normal.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>In an earlier example, we showed how to declare an easing function for a key-frame animation.</source>
					<target>In an earlier example, we showed how to declare an easing function for a key-frame animation.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">/</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This next sample applies an easing function to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation.</source>
					<target>This next sample applies an easing function to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">/</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">/</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>When an easing function is applied to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation, it's changing the function- over-time characteristics of how the value interpolates between the <pc dataRefEnd="id10" dataRefStart="id9" id="p4">From</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p5">To</pc> values over the <pc dataRefEnd="id14" dataRefStart="id13" id="p6"><pc dataRefEnd="id16" dataRefStart="id15" id="p7">Duration</pc></pc> of the animation.</source>
					<target>When an easing function is applied to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">To</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">By</pc> animation, it's changing the function- over-time characteristics of how the value interpolates between the <pc dataRefEnd="id10" dataRefStart="id9" id="p4">From</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p5">To</pc> values over the <pc dataRefEnd="id14" dataRefStart="id13" id="p6"><pc dataRefEnd="id16" dataRefStart="id15" id="p7">Duration</pc></pc> of the animation.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Without an easing function, that would be a linear interpolation.</source>
					<target>Without an easing function, that would be a linear interpolation.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Discrete object value animations</source>
					<target>Discrete object value animations</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>One type of animation deserves special mention because it's the only way you can apply an animated value to properties that aren't of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Point</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc></pc>.</source>
					<target>One type of animation deserves special mention because it's the only way you can apply an animated value to properties that aren't of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Point</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This is the key-frame animation <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc>.</source>
					<target>This is the key-frame animation <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.object.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Animating using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Object</pc></pc> values is different because there's no possibility of interpolating the values between the frames.</source>
					<target>Animating using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Object</pc></pc> values is different because there's no possibility of interpolating the values between the frames.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210342)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>When the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyTime</pc></pc> is reached, the animated value is immediately set to the value specified in the key frame's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Value</pc>.</source>
					<target>When the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyTime</pc></pc> is reached, the animated value is immediately set to the value specified in the key frame's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Value</pc>.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Because there's no interpolation, there's only one key frame you use in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectAnimationUsingKeyFrames</pc> key frames collection: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DiscreteObjectKeyFrame</pc></pc>.</source>
					<target>Because there's no interpolation, there's only one key frame you use in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectAnimationUsingKeyFrames</pc> key frames collection: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DiscreteObjectKeyFrame</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210344)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc></pc> of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteObjectKeyFrame</pc></pc> is often set using property element syntax, because the object value you are trying to set often is not expressible as a string to fill <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Value</pc> in attribute syntax.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc></pc> of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteObjectKeyFrame</pc></pc> is often set using property element syntax, because the object value you are trying to set often is not expressible as a string to fill <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Value</pc> in attribute syntax.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185588)</data>
				</originalData>
				<segment state="initial">
					<source>You can still use attribute syntax if you use a reference such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc>.</source>
					<target>You can still use attribute syntax if you use a reference such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc>.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR228076)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>One place you'll see an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> used in the default templates is when a template property references a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Brush</pc></pc> resource.</source>
					<target>One place you'll see an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> used in the default templates is when a template property references a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Brush</pc></pc> resource.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242962)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR208807)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>These resources are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> objects, not just a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Color</pc></pc> value, and they use resources that are defined as system themes (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ThemeDictionaries</pc></pc>).</source>
					<target>These resources are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> objects, not just a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Color</pc></pc> value, and they use resources that are defined as system themes (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ThemeDictionaries</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR209665)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>They can be assigned directly to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc>-type value such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock.Foreground</pc></pc> and don't need to use indirect targeting.</source>
					<target>They can be assigned directly to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc>-type value such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock.Foreground</pc></pc> and don't need to use indirect targeting.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>But because a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrush</pc> is not <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc>, you have to use a <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ObjectAnimationUsingKeyFrames</pc> to use the resource.</source>
					<target>But because a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrush</pc> is not <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc>, you have to use a <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ObjectAnimationUsingKeyFrames</pc> to use the resource.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use more than one <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiscreteObjectKeyFrame</pc></pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ObjectAnimationUsingKeyFrames</pc></pc> frame set.</source>
					<target>You can use more than one <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiscreteObjectKeyFrame</pc></pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ObjectAnimationUsingKeyFrames</pc></pc> frame set.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242760)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This might be an interesting way to create a "slide show" animation by animating the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc>, as an example scenario for where multiple object values might be useful.</source>
					<target>This might be an interesting way to create a "slide show" animation by animating the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc>, as an example scenario for where multiple object values might be useful.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>Property-path syntax</source>
					<target>Property-path syntax</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>Dependency properties overview</source>
					<target>Dependency properties overview</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Storyboard</source>
					<target>Storyboard</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>Storyboard.TargetProperty</source>
					<target>Storyboard.TargetProperty</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>