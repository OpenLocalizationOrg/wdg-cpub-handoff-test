<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">9f449718b718beb9512b2d05828d2ad326c1a38c</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\input-and-devices\handle-pointer-input.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">7dcb60d07b8ea1de1a116b8d41f5933a6b7fad2d</mda:meta><mda:meta type="olxliffhash">da4cc431a0d94ab63f1592bf68b1b7bc2958be7d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Receive, process, and manage input data from pointing devices, such as touch, mouse, pen/stylus, and touchpad, in Universal Windows Platform (UWP) apps.</source>
					<target>Receive, process, and manage input data from pointing devices, such as touch, mouse, pen/stylus, and touchpad, in Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Handle pointer input</source>
					<target>Handle pointer input</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Handle pointer input</source>
					<target>Handle pointer input</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Receive, process, and manage input data from pointing devices, such as touch, mouse, pen/stylus, and touchpad, in Universal Windows Platform (UWP) apps.</source>
					<target>Receive, process, and manage input data from pointing devices, such as touch, mouse, pen/stylus, and touchpad, in Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Windows.Devices.Input</source>
					<target>Windows.Devices.Input</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Input</source>
					<target>Windows.UI.Input</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Xaml.Input</source>
					<target>Windows.UI.Xaml.Input</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Important</source>
					<target>Important</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>If you implement your own interaction support, keep in mind that users expect an intuitive experience involving direct interaction with the UI elements in your app.</source>
					<target>If you implement your own interaction support, keep in mind that users expect an intuitive experience involving direct interaction with the UI elements in your app.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt185406)</data>
				</originalData>
				<segment state="initial">
					<source>We recommend that you model your custom interactions on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Controls list</pc> to keep things consistent and discoverable.</source>
					<target>We recommend that you model your custom interactions on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Controls list</pc> to keep things consistent and discoverable.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The platform controls provide the full Universal Windows Platform (UWP) user interaction experience, including standard interactions, animated physics effects, visual feedback, and accessibility.</source>
					<target>The platform controls provide the full Universal Windows Platform (UWP) user interaction experience, including standard interactions, animated physics effects, visual feedback, and accessibility.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Create custom interactions only if there is a clear, well-defined requirement and basic interactions don't support your scenario.</source>
					<target>Create custom interactions only if there is a clear, well-defined requirement and basic interactions don't support your scenario.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Pointers</source>
					<target>Pointers</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Many interaction experiences involve the user identifying the object they want to interact with by pointing at it using input devices such as touch, mouse, pen/stylus, and touchpad.</source>
					<target>Many interaction experiences involve the user identifying the object they want to interact with by pointing at it using input devices such as touch, mouse, pen/stylus, and touchpad.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Because the raw Human Interface Device (HID) data provided by these input devices includes many common properties, the info is promoted into a unified input stack and exposed as consolidated, device-agnostic pointer data.</source>
					<target>Because the raw Human Interface Device (HID) data provided by these input devices includes many common properties, the info is promoted into a unified input stack and exposed as consolidated, device-agnostic pointer data.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Your UWP apps can then consume this data without worrying about the input device being used.</source>
					<target>Your UWP apps can then consume this data without worrying about the input device being used.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Device-specific info is also promoted from the raw HID data should your app require it.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Device-specific info is also promoted from the raw HID data should your app require it.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227968)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh943076)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Each input point (or contact) on the input stack is represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pointer</pc></pc> object exposed through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PointerRoutedEventArgs</pc></pc> parameter provided by various pointer events.</source>
					<target>Each input point (or contact) on the input stack is represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pointer</pc></pc> object exposed through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PointerRoutedEventArgs</pc></pc> parameter provided by various pointer events.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>In the case of multi-pen or multi-touch input, each contact is treated as a unique input point.</source>
					<target>In the case of multi-pen or multi-touch input, each contact is treated as a unique input point.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Pointer events</source>
					<target>Pointer events</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Pointer events expose basic info such as detection state (in range or in contact) and device type, and extended info such as location, pressure, and contact geometry.</source>
					<target>Pointer events expose basic info such as detection state (in range or in contact) and device type, and extended info such as location, pressure, and contact geometry.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>In addition, specific device properties such as which mouse button a user pressed or whether the pen eraser tip is being used are also available.</source>
					<target>In addition, specific device properties such as which mouse button a user pressed or whether the pen eraser tip is being used are also available.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](identify-input-devices.md)</data>
				</originalData>
				<segment state="initial">
					<source>If your app needs to differentiate between input devices and their capabilities, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Identify input devices</pc>.</source>
					<target>If your app needs to differentiate between input devices and their capabilities, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Identify input devices</pc>.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>UWP apps can listen for the following pointer events:</source>
					<target>UWP apps can listen for the following pointer events:</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208918)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CapturePointer</pc></pc> to constrain pointer input to a specific UI element.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CapturePointer</pc></pc> to constrain pointer input to a specific UI element.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>When a pointer is captured by an element, only that object receives the pointer input events, even when the pointer moves outside the bounding area of the object.</source>
					<target>When a pointer is captured by an element, only that object receives the pointer input events, even when the pointer moves outside the bounding area of the object.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208971)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227976)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>You typically capture the pointer within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event handler as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IsInContact</pc></pc> (mouse button pressed, touch or stylus in contact) must be true for <pc dataRefEnd="id10" dataRefStart="id9" id="p5">CapturePointer</pc> to be successful.</source>
					<target>You typically capture the pointer within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event handler as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IsInContact</pc></pc> (mouse button pressed, touch or stylus in contact) must be true for <pc dataRefEnd="id10" dataRefStart="id9" id="p5">CapturePointer</pc> to be successful.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Event</source>
					<target>Event</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerCanceled<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208964)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerCanceled<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208964)</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Occurs when a pointer is canceled by the platform.</source>
					<target>Occurs when a pointer is canceled by the platform.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Touch pointers are canceled when a pen is detected within range of the input surface.</source>
					<target>Touch pointers are canceled when a pen is detected within range of the input surface.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>An active contact is not detected for more than 100 ms.</source>
					<target>An active contact is not detected for more than 100 ms.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Monitor/display is changed (resolution, settings, multi-mon configuration).</source>
					<target>Monitor/display is changed (resolution, settings, multi-mon configuration).</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>The desktop is locked or the user has logged off.</source>
					<target>The desktop is locked or the user has logged off.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The number of simultaneous contacts exceeded the number supported by the device.</source>
					<target>The number of simultaneous contacts exceeded the number supported by the device.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerCaptureLost<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208965)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerCaptureLost<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208965)</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Occurs when another UI element captures the pointer, the pointer was released, or another pointer was programmatically captured.</source>
					<target>Occurs when another UI element captures the pointer, the pointer was released, or another pointer was programmatically captured.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Note<ph dataRef="id1" id="ph1" />  There is no corresponding pointer capture event.</source>
					<target>Note<ph dataRef="id1" id="ph1" />  There is no corresponding pointer capture event.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerEntered<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208968)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerEntered<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208968)</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Occurs when a pointer enters the bounding area of an element.</source>
					<target>Occurs when a pointer enters the bounding area of an element.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</source>
					<target>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Touch requires a finger contact to fire this event, either from a direct touch down on the element or from moving into the bounding area of the element.</source>
					<target>Touch requires a finger contact to fire this event, either from a direct touch down on the element or from moving into the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</source>
					<target>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Like touch, pen fires this event with a direct pen down on the element or from moving into the bounding area of the element.</source>
					<target>Like touch, pen fires this event with a direct pen down on the element or from moving into the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that, when true, fires this event.</source>
					<target>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that, when true, fires this event.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerExited<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208969)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerExited<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208969)</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Occurs when a pointer leaves the bounding area of an element.</source>
					<target>Occurs when a pointer leaves the bounding area of an element.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</source>
					<target>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Touch requires a finger contact and fires this event when the pointer moves out of the bounding area of the element.</source>
					<target>Touch requires a finger contact and fires this event when the pointer moves out of the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</source>
					<target>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Like touch, pen fires this event when moving out of the bounding area of the element.</source>
					<target>Like touch, pen fires this event when moving out of the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that fires this event when the state changes from true to false.</source>
					<target>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that fires this event when the state changes from true to false.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerMoved<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208970)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerMoved<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208970)</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Occurs when a pointer changes coordinates, button state, pressure, tilt, or contact geometry (for example, width and height) within the bounding area of an element.</source>
					<target>Occurs when a pointer changes coordinates, button state, pressure, tilt, or contact geometry (for example, width and height) within the bounding area of an element.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</source>
					<target>This can happen in slightly different ways for touch, touchpad, mouse, and pen input.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Touch requires a finger contact and fires this event only when in contact within the bounding area of the element.</source>
					<target>Touch requires a finger contact and fires this event only when in contact within the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</source>
					<target>Mouse and touchpad both have an on-screen cursor that is always visible and fires this event even if no mouse or touchpad button is pressed.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Like touch, pen fires this event when in contact within the bounding area of the element.</source>
					<target>Like touch, pen fires this event when in contact within the bounding area of the element.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that, when true and within the bounding area of the element, fires this event.</source>
					<target>However, pen also has a hover state ([<ph dataRef="id1" id="ph1" />IsInRange<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br227977)) that, when true and within the bounding area of the element, fires this event.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerPressed<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208971)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerPressed<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208971)</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Occurs when the pointer indicates a press action (such as a touch down, mouse button down, pen down, or touchpad button down) within the bounding area of an element.</source>
					<target>Occurs when the pointer indicates a press action (such as a touch down, mouse button down, pen down, or touchpad button down) within the bounding area of an element.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />CapturePointer<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208918) must be called from the handler for this event.</source>
					<target>[<ph dataRef="id1" id="ph1" />CapturePointer<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208918) must be called from the handler for this event.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerReleased<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208972)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerReleased<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208972)</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Occurs when the pointer indicates a release action (such as a touch up, mouse button up, pen up, or touchpad button up) within the bounding area of an element or, if the pointer is captured, outside the bounding area.</source>
					<target>Occurs when the pointer indicates a release action (such as a touch up, mouse button up, pen up, or touchpad button up) within the bounding area of an element or, if the pointer is captured, outside the bounding area.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>[<ph dataRef="id1" id="ph1" />PointerWheelChanged<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208973)</source>
					<target>[<ph dataRef="id1" id="ph1" />PointerWheelChanged<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208973)</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Occurs when the mouse wheel is rotated.</source>
					<target>Occurs when the mouse wheel is rotated.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Mouse input is associated with a single pointer assigned when mouse input is first detected.</source>
					<target>Mouse input is associated with a single pointer assigned when mouse input is first detected.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Clicking a mouse button (left, wheel, or right) creates a secondary association between the pointer and that button through the [<ph dataRef="id1" id="ph1" />PointerMoved<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208970) event.</source>
					<target>Clicking a mouse button (left, wheel, or right) creates a secondary association between the pointer and that button through the [<ph dataRef="id1" id="ph1" />PointerMoved<ph dataRef="id2" id="ph2" />](https://msdn.microsoft.com/library/windows/apps/br208970) event.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Example</source>
					<target>Example</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Here's some code examples from a basic pointer tracking app that show how to listen for and handle pointer events and get various properties for active pointers.</source>
					<target>Here's some code examples from a basic pointer tracking app that show how to listen for and handle pointer events and get various properties for active pointers.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Create the UI</source>
					<target>Create the UI</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">`targetContainer`</data>
				</originalData>
				<segment state="initial">
					<source>For this example, we use a rectangle (<ph dataRef="id1" id="ph1" />) as the target object for pointer input.</source>
					<target>For this example, we use a rectangle (<ph dataRef="id1" id="ph1" />) as the target object for pointer input.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>The color of the target changes when the pointer status changes.</source>
					<target>The color of the target changes when the pointer status changes.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Details for each pointer are displayed in a floating text block that moves with the pointer.</source>
					<target>Details for each pointer are displayed in a floating text block that moves with the pointer.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The pointer events themselves are displayed to the left of the rectangle (for reporting event sequence).</source>
					<target>The pointer events themselves are displayed to the left of the rectangle (for reporting event sequence).</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>This is the Extensible Application Markup Language (XAML) for this example.</source>
					<target>This is the Extensible Application Markup Language (XAML) for this example.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Listen for pointer events</source>
					<target>Listen for pointer events</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh943076)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In most cases, we recommend that you get pointer info through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerRoutedEventArgs</pc></pc> of the event handler.</source>
					<target>In most cases, we recommend that you get pointer info through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerRoutedEventArgs</pc></pc> of the event handler.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242038)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh943077)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/hh943078)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/hh943076)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>If the event argument doesn't expose the pointer details required, you can get access to extended <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPoint</pc></pc> info exposed through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetCurrentPoint</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GetIntermediatePoints</pc></pc> methods of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">PointerRoutedEventArgs</pc></pc>.</source>
					<target>If the event argument doesn't expose the pointer details required, you can get access to extended <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPoint</pc></pc> info exposed through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetCurrentPoint</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GetIntermediatePoints</pc></pc> methods of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">PointerRoutedEventArgs</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">`targetContainer`</data>
				</originalData>
				<segment state="initial">
					<source>For this example, we use a rectangle (<ph dataRef="id1" id="ph1" />) as the target object for pointer input.</source>
					<target>For this example, we use a rectangle (<ph dataRef="id1" id="ph1" />) as the target object for pointer input.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>The color of the target changes when the pointer status changes.</source>
					<target>The color of the target changes when the pointer status changes.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The following code sets up the target object, declares global variables, and identifies the various pointer event listeners for the target.</source>
					<target>The following code sets up the target object, declares global variables, and identifies the various pointer event listeners for the target.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Handle pointer events</source>
					<target>Handle pointer events</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Next, we use UI feedback to demonstrate basic pointer event handlers.</source>
					<target>Next, we use UI feedback to demonstrate basic pointer event handlers.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208971)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, add the pointer to the pointer array used for tracking the pointers of interest, and display the pointer details.</source>
					<target>We add the event to the event log, add the pointer to the pointer array used for tracking the pointers of interest, and display the pointer details.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208971)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208972)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerPressed</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PointerReleased</pc></pc> events do not always occur in pairs.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerPressed</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PointerReleased</pc></pc> events do not always occur in pairs.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208969)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208964)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208965)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Your app should listen for and handle any event that might conclude a pointer down action (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerExited</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PointerCanceled</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointerCaptureLost</pc></pc>).</source>
					<target>Your app should listen for and handle any event that might conclude a pointer down action (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerExited</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PointerCanceled</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointerCaptureLost</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208968)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerEntered</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerEntered</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, add the pointer to the pointer collection, and display the pointer details.</source>
					<target>We add the event to the event log, add the pointer to the pointer collection, and display the pointer details.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208970)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log and update the pointer details.</source>
					<target>We add the event to the event log and update the pointer details.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Mouse input is associated with a single pointer assigned when mouse input is first detected.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Mouse input is associated with a single pointer assigned when mouse input is first detected.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208971)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Clicking a mouse button (left, wheel, or right) creates a secondary association between the pointer and that button through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event.</source>
					<target>Clicking a mouse button (left, wheel, or right) creates a secondary association between the pointer and that button through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerPressed</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208972)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerReleased</pc></pc> event is fired only when that same mouse button is released (no other button can be associated with the pointer until this event is complete).</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerReleased</pc></pc> event is fired only when that same mouse button is released (no other button can be associated with the pointer until this event is complete).</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208970)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Because of this exclusive association, other mouse button clicks are routed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event.</source>
					<target>Because of this exclusive association, other mouse button clicks are routed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208973)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerWheelChanged</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerWheelChanged</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, add the pointer to the pointer array (if necessary), and display the pointer details.</source>
					<target>We add the event to the event log, add the pointer to the pointer array (if necessary), and display the pointer details.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208972)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerReleased</pc></pc> event where contact with the digitizer is terminated.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerReleased</pc></pc> event where contact with the digitizer is terminated.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, remove the pointer from the pointer collection, and update the pointer details.</source>
					<target>We add the event to the event log, remove the pointer from the pointer collection, and update the pointer details.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208969)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerExited</pc></pc> event where contact with the digitizer is maintained.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerExited</pc></pc> event where contact with the digitizer is maintained.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</source>
					<target>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208964)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerCanceled</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerCanceled</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</source>
					<target>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208965)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerCaptureLost</pc></pc> event.</source>
					<target>This handler manages a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerCaptureLost</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</source>
					<target>We add the event to the event log, remove the pointer from the pointer array, and update the pointer details.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208965)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208972)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerCaptureLost</pc></pc> can occur instead of <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PointerReleased</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerCaptureLost</pc></pc> can occur instead of <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PointerReleased</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Pointer capture can be lost for various reasons.</source>
					<target>Pointer capture can be lost for various reasons.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Get pointer properties</source>
					<target>Get pointer properties</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242038)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh943077)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/hh943078)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/hh943076)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>As stated earlier, you must get most extended pointer info from a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Input.PointerPoint</pc></pc> object obtained through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetCurrentPoint</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GetIntermediatePoints</pc></pc> methods of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">PointerRoutedEventArgs</pc></pc>.</source>
					<target>As stated earlier, you must get most extended pointer info from a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Input.PointerPoint</pc></pc> object obtained through the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetCurrentPoint</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GetIntermediatePoints</pc></pc> methods of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">PointerRoutedEventArgs</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>First, we create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> for each pointer.</source>
					<target>First, we create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> for each pointer.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Then we provide a way to update the pointer info in an existing <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> associated with that pointer.</source>
					<target>Then we provide a way to update the pointer info in an existing <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> associated with that pointer.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Finally, we query various pointer properties.</source>
					<target>Finally, we query various pointer properties.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>Complete example</source>
					<target>Complete example</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>The following is the C# code for this example.</source>
					<target>The following is the C# code for this example.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>For links to more complex samples, see Related articles at the bottom of this page .</source>
					<target>For links to more complex samples, see Related articles at the bottom of this page .</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>Samples</source>
					<target>Samples</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Basic input sample</source>
					<target>Basic input sample</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>Low latency input sample</source>
					<target>Low latency input sample</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>User interaction mode sample</source>
					<target>User interaction mode sample</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=619895)</data>
					<data id="id3">
</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus visuals sample</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Archive samples</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus visuals sample</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Archive samples</pc></target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Input: XAML user input events sample</source>
					<target>Input: XAML user input events sample</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Input: Device capabilities sample</source>
					<target>Input: Device capabilities sample</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Input: Manipulations and gestures (C++) sample</source>
					<target>Input: Manipulations and gestures (C++) sample</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Input: Touch hit testing sample</source>
					<target>Input: Touch hit testing sample</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>XAML scrolling, panning, and zooming sample</source>
					<target>XAML scrolling, panning, and zooming sample</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Input: Simplified ink sample</source>
					<target>Input: Simplified ink sample</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>