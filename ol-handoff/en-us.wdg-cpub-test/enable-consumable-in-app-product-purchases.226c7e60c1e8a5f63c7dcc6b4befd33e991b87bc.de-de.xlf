<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">3a2875a75f0af3ae843206c5c4fa3982ec8dc006</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\monetize\enable-consumable-in-app-product-purchases.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">c1f9380a5ace9ab15654b3d80ef08d844d0ab6be</mda:meta><mda:meta type="olxliffhash">6a0ab1a7124233c989232dde2f5986a614095a76</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Offer consumable in-app products&amp;\#8212;items that can be purchased, used, and purchased again&amp;\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</source>
					<target>Offer consumable in-app products&amp;\#8212;items that can be purchased, used, and purchased again&amp;\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Enable consumable in-app product purchases</source>
					<target>Enable consumable in-app product purchases</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>in-app offer code sample</source>
					<target>in-app offer code sample</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Enable consumable in-app product purchases</source>
					<target>Enable consumable in-app product purchases</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Offer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</source>
					<target>Offer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.</source>
					<target>This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This topic covers the purchase and fulfillment reporting of consumable in-app products.</source>
					<target>This topic covers the purchase and fulfillment reporting of consumable in-app products.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](enable-in-app-product-purchases.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you are unfamiliar with in-app products, please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list in-app products in the Store.</source>
					<target>If you are unfamiliar with in-app products, please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list in-app products in the Store.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh779766)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh779765)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>When you code and test new in-app products for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</source>
					<target>When you code and test new in-app products for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</source>
					<target>This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\<ph dataRef="id1" id="ph1" />package name<ph dataRef="id2" id="ph2" />\\LocalState\\Microsoft\\Windows Store\\ApiData.</source>
					<target>To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\<ph dataRef="id1" id="ph1" />package name<ph dataRef="id2" id="ph2" />\\LocalState\\Microsoft\\Windows Store\\ApiData.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</source>
					<target>The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=627610)</data>
				</originalData>
				<segment state="initial">
					<source>This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</source>
					<target>This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</source>
					<target>This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Step 1: Making the purchase request</source>
					<target>Step 1: Making the purchase request</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263381)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The initial purchase request is made with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> like any other purchase made through the Store.</source>
					<target>The initial purchase request is made with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> like any other purchase made through the Store.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled.</source>
					<target>The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.</source>
					<target>It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>The following example shows a consumable in-app product purchase request.</source>
					<target>The following example shows a consumable in-app product purchase request.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.</source>
					<target>You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Step 2: Tracking local fulfillment of the consumable</source>
					<target>Step 2: Tracking local fulfillment of the consumable</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">productId</pc>), and which transaction that fulfillment is associated with (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">transactionId</pc>).</source>
					<target>When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">productId</pc>), and which transaction that fulfillment is associated with (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">transactionId</pc>).</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Your app is responsible for the accurately reporting fulfillment to the Store.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Your app is responsible for the accurately reporting fulfillment to the Store.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>This step is essential to maintaining a fair and reliable purchase experience for your customers.</source>
					<target>This step is essential to maintaining a fair and reliable purchase experience for your customers.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263392)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn263381)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The following example demonstrates use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc> properties from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestProductPurchaseAsync</pc></pc> call in the previous step to identify the purchased product for fulfillment.</source>
					<target>The following example demonstrates use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc> properties from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RequestProductPurchaseAsync</pc></pc> call in the previous step to identify the purchased product for fulfillment.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.</source>
					<target>An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>This next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.</source>
					<target>This next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Step 3: Reporting product fulfillment to the Store</source>
					<target>Step 3: Reporting product fulfillment to the Store</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263380)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
				</originalData>
				<segment state="initial">
					<source>After local fulfillment is completed, your app must make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportConsumableFulfillmentAsync</pc></pc> call that includes the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">productId</pc> and the transaction the product purchase is included in.</source>
					<target>After local fulfillment is completed, your app must make a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportConsumableFulfillmentAsync</pc></pc> call that includes the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">productId</pc> and the transaction the product purchase is included in.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Step 4: Identifying unfulfilled purchases</source>
					<target>Step 4: Identifying unfulfilled purchases</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263379)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your app can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> method to check for unfulfilled consumable in-app products at any time.</source>
					<target>Your app can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> method to check for unfulfilled consumable in-app products at any time.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.</source>
					<target>This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263379)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following example demonstrates how <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.</source>
					<target>The following example demonstrates how <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetUnfulfilledConsumablesAsync</pc></pc> can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Enable in-app product purchases</source>
					<target>Enable in-app product purchases</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Store sample (demonstrates trials and in-app purchases)</source>
					<target>Store sample (demonstrates trials and in-app purchases)</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Windows.ApplicationModel.Store</source>
					<target>Windows.ApplicationModel.Store</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>