<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">a145ae776cdb0485d5048bfb956b0f33494b7971</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\tiles-and-notifications-periodic-notification-overview.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">5663ca8b8869efb2ffed9e71c74a7340bc44d26f</mda:meta><mda:meta type="olxliffhash">ee8c18be81f2e144783d541daaa627f40503a961</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Periodic notifications, which are also called polled notifications, update tiles and badges at a fixed interval by downloading content from a cloud service.</source>
					<target>Periodic notifications, which are also called polled notifications, update tiles and badges at a fixed interval by downloading content from a cloud service.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Periodic notification overview</source>
					<target>Periodic notification overview</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Periodic notification overview</source>
					<target>Periodic notification overview</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Periodic notifications, which are also called polled notifications, update tiles and badges at a fixed interval by downloading content from a cloud service.</source>
					<target>Periodic notifications, which are also called polled notifications, update tiles and badges at a fixed interval by downloading content from a cloud service.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>To use periodic notifications, your client app code needs to provide two pieces of information:</source>
					<target>To use periodic notifications, your client app code needs to provide two pieces of information:</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The Uniform Resource Identifier (URI) of a web location for Windows to poll for tile or badge updates for your app</source>
					<target>The Uniform Resource Identifier (URI) of a web location for Windows to poll for tile or badge updates for your app</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>How often that URI should be polled</source>
					<target>How often that URI should be polled</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Periodic notifications enable your app to get live tile updates with minimal cloud service and client investment.</source>
					<target>Periodic notifications enable your app to get live tile updates with minimal cloud service and client investment.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Periodic notifications are a good delivery method for distributing the same content to a wide audience.</source>
					<target>Periodic notifications are a good delivery method for distributing the same content to a wide audience.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?linkid=231476)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can learn more by downloading the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Push and periodic notifications sample</pc> for Windows 8.1 and re-using its source code in your Windows 10 app.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can learn more by downloading the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Push and periodic notifications sample</pc> for Windows 8.1 and re-using its source code in your Windows 10 app.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>How it works</source>
					<target>How it works</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Periodic notifications require that your app hosts a cloud service.</source>
					<target>Periodic notifications require that your app hosts a cloud service.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The service will be polled periodically by all users who have the app installed.</source>
					<target>The service will be polled periodically by all users who have the app installed.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>At each polling interval, such as once an hour, Windows sends an HTTP GET request to the URI, downloads the requested tile or badge content (as XML) that is supplied in response to the request, and displays the content on the app's tile.</source>
					<target>At each polling interval, such as once an hour, Windows sends an HTTP GET request to the URI, downloads the requested tile or badge content (as XML) that is supplied in response to the request, and displays the content on the app's tile.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Note that periodic updates cannot be used with toast notifications.</source>
					<target>Note that periodic updates cannot be used with toast notifications.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465417)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252)</data>
				</originalData>
				<segment state="initial">
					<source>Toast is best delivered through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scheduled</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">push</pc> notifications.</source>
					<target>Toast is best delivered through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">scheduled</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">push</pc> notifications.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>URI location and XML content</source>
					<target>URI location and XML content</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Any valid HTTP or HTTPS web address can be used as the URI to be polled.</source>
					<target>Any valid HTTP or HTTPS web address can be used as the URI to be polled.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The cloud server's response includes the downloaded content.</source>
					<target>The cloud server's response includes the downloaded content.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tiles-and-notifications-adaptive-tiles-schema.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br212851)</data>
				</originalData>
				<segment state="initial">
					<source>The content returned from the URI must conform to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tile</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Badge</pc> XML schema specification, and must be UTF-8 encoded.</source>
					<target>The content returned from the URI must conform to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tile</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Badge</pc> XML schema specification, and must be UTF-8 encoded.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#expiry)</data>
					<data id="id3">[</data>
					<data id="id4">](#taggo)</data>
				</originalData>
				<segment state="initial">
					<source>You can use defined HTTP headers to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">expiration time</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">tag</pc> for the notification.</source>
					<target>You can use defined HTTP headers to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">expiration time</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">tag</pc> for the notification.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Polling Behavior</source>
					<target>Polling Behavior</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Call one of these methods to begin polling:</source>
					<target>Call one of these methods to begin polling:</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701684)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> (Tile)</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> (Tile)</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701611)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> (Badge)</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> (Badge)</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh967945)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdateBatch</pc></pc> (Tile)</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdateBatch</pc></pc> (Tile)</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>When you call one of these methods, the URI is immediately polled and the tile or badge is updated with the received contents.</source>
					<target>When you call one of these methods, the URI is immediately polled and the tile or badge is updated with the received contents.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>After this initial poll, Windows continues to provide updates at the requested interval.</source>
					<target>After this initial poll, Windows continues to provide updates at the requested interval.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701697)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Polling continues until you explicitly stop it (with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TileUpdater.StopPeriodicUpdate</pc></pc>), your app is uninstalled, or, in the case of a secondary tile, the tile is removed.</source>
					<target>Polling continues until you explicitly stop it (with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TileUpdater.StopPeriodicUpdate</pc></pc>), your app is uninstalled, or, in the case of a secondary tile, the tile is removed.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Otherwise, Windows continues to poll for updates to your tile or badge even if your app is never launched again.</source>
					<target>Otherwise, Windows continues to poll for updates to your tile or badge even if your app is never launched again.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The recurrence interval</source>
					<target>The recurrence interval</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>You specify the recurrence interval as a parameter of the methods listed above.</source>
					<target>You specify the recurrence interval as a parameter of the methods listed above.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Note that while Windows makes a best effort to poll as requested, the interval is not precise.</source>
					<target>Note that while Windows makes a best effort to poll as requested, the interval is not precise.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>The requested poll interval can be delayed by up to 15 minutes at the discretion of Windows.</source>
					<target>The requested poll interval can be delayed by up to 15 minutes at the discretion of Windows.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The start time</source>
					<target>The start time</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>You optionally can specify a particular time of day to begin polling.</source>
					<target>You optionally can specify a particular time of day to begin polling.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Consider an app that changes its tile content just once a day.</source>
					<target>Consider an app that changes its tile content just once a day.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>In such a case, we recommend that you poll close to the time that you update your cloud service.</source>
					<target>In such a case, we recommend that you poll close to the time that you update your cloud service.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>For example, if a daily shopping site publishes the day's offers at 8 AM, poll for new tile content shortly after 8 AM.</source>
					<target>For example, if a daily shopping site publishes the day's offers at 8 AM, poll for new tile content shortly after 8 AM.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>If you provide a start time, the first call to the method polls for content immediately.</source>
					<target>If you provide a start time, the first call to the method polls for content immediately.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Then, regular polling starts within 15 minutes of the provided start time.</source>
					<target>Then, regular polling starts within 15 minutes of the provided start time.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Automatic retry behavior</source>
					<target>Automatic retry behavior</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The URI is polled only if the device is online.</source>
					<target>The URI is polled only if the device is online.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>If the network is available but the URI cannot be contacted for any reason, this iteration of the polling interval is skipped, and the URI will be polled again at the next interval.</source>
					<target>If the network is available but the URI cannot be contacted for any reason, this iteration of the polling interval is skipped, and the URI will be polled again at the next interval.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>If the device is in an off, sleep, or hibernated state when a polling interval is reached, the URI is polled when the device returns from its off or sleep state.</source>
					<target>If the device is in an off, sleep, or hibernated state when a polling interval is reached, the URI is polled when the device returns from its off or sleep state.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Expiration of tile and badge notifications</source>
					<target>Expiration of tile and badge notifications</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>By default, periodic tile and badge notifications expire three days from the time they are downloaded.</source>
					<target>By default, periodic tile and badge notifications expire three days from the time they are downloaded.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>When a notification expires, the content is removed from the badge, tile, or queue and is no longer shown to the user.</source>
					<target>When a notification expires, the content is removed from the badge, tile, or queue and is no longer shown to the user.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>It is a best practice to set an explicit expiration time on all periodic tile and badge notifications, using a time that makes sense for your app or notification, to ensure that the content does not persist longer than it is relevant.</source>
					<target>It is a best practice to set an explicit expiration time on all periodic tile and badge notifications, using a time that makes sense for your app or notification, to ensure that the content does not persist longer than it is relevant.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>An explicit expiration time is essential for content with a defined life span.</source>
					<target>An explicit expiration time is essential for content with a defined life span.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>It also assures the removal of stale content if your cloud service becomes unreachable, or if the user disconnects from the network for an extended period of time.</source>
					<target>It also assures the removal of stale content if your cloud service becomes unreachable, or if the user disconnects from the network for an extended period of time.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Your cloud service sets an expiration date and time for a notification by including the X-WNS-Expires HTTP header in the response payload.</source>
					<target>Your cloud service sets an expiration date and time for a notification by including the X-WNS-Expires HTTP header in the response payload.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=253706)</data>
				</originalData>
				<segment state="initial">
					<source>The X-WNS-Expires HTTP header conforms to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTTP-date format</pc>.</source>
					<target>The X-WNS-Expires HTTP header conforms to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTTP-date format</pc>.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701684)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh967945)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StartPeriodicUpdateBatch</pc></pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdate</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StartPeriodicUpdateBatch</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>For example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your polling interval (such as one hour after receipt if you are polling every half-hour).</source>
					<target>For example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your polling interval (such as one hour after receipt if you are polling every half-hour).</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.</source>
					<target>As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Periodic notifications in the notification queue</source>
					<target>Periodic notifications in the notification queue</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh781199)</data>
				</originalData>
				<segment state="initial">
					<source>You can use periodic tile updates with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">notification cycling</pc>.</source>
					<target>You can use periodic tile updates with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">notification cycling</pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>By default, a tile on the Start screen shows the content of a single notification until it is replaced by a new notification.</source>
					<target>By default, a tile on the Start screen shows the content of a single notification until it is replaced by a new notification.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>When you enable cycling, up to five notifications are maintained in a queue and the tile cycles through them.</source>
					<target>When you enable cycling, up to five notifications are maintained in a queue and the tile cycles through them.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>If the queue has reached its capacity of five notifications, the next new notification replaces the oldest notification in the queue.</source>
					<target>If the queue has reached its capacity of five notifications, the next new notification replaces the oldest notification in the queue.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>However, by setting tags on your notifications, you can affect the queue's replacement policy.</source>
					<target>However, by setting tags on your notifications, you can affect the queue's replacement policy.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_tag)</data>
				</originalData>
				<segment state="initial">
					<source>A tag is an app-specific, case-insensitive string of up to 16 alphanumeric characters, specified in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Tag</pc> HTTP header in the response payload.</source>
					<target>A tag is an app-specific, case-insensitive string of up to 16 alphanumeric characters, specified in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Tag</pc> HTTP header in the response payload.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Windows compares the tag of an incoming notification with the tags of all notifications already in the queue.</source>
					<target>Windows compares the tag of an incoming notification with the tags of all notifications already in the queue.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>If a match is found, the new notification replaces the queued notification with the same tag.</source>
					<target>If a match is found, the new notification replaces the queued notification with the same tag.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>If no match is found, the default replacement rule is applied and the new notification replaces the oldest notification in the queue.</source>
					<target>If no match is found, the default replacement rule is applied and the new notification replaces the oldest notification in the queue.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>You can use notification queuing and tagging to implement a variety of rich notification scenarios.</source>
					<target>You can use notification queuing and tagging to implement a variety of rich notification scenarios.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>For example, a stock app could send five notifications, each about a different stock and each tagged with a stock name.</source>
					<target>For example, a stock app could send five notifications, each about a different stock and each tagged with a stock name.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>This prevents the queue from ever containing two notifications for the same stock, the older of which is out of date.</source>
					<target>This prevents the queue from ever containing two notifications for the same stock, the older of which is out of date.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh781199)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the notification queue</pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the notification queue</pc>.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Enabling the notification queue</source>
					<target>Enabling the notification queue</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465429)</data>
				</originalData>
				<segment state="initial">
					<source>To implement a notification queue, first enable the queue for your tile (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to use the notification queue with local notifications</pc>).</source>
					<target>To implement a notification queue, first enable the queue for your tile (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to use the notification queue with local notifications</pc>).</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>The call to enable the queue needs to be done only once in your app's lifetime, but there is no harm in calling it each time your app is launched.</source>
					<target>The call to enable the queue needs to be done only once in your app's lifetime, but there is no harm in calling it each time your app is launched.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Polling for more than one notification at a time</source>
					<target>Polling for more than one notification at a time</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>You must provide a unique URI for each notification that you'd like Windows to download for your tile.</source>
					<target>You must provide a unique URI for each notification that you'd like Windows to download for your tile.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh967945)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>By using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdateBatch</pc></pc> method, you can provide up to five URIs at once for use with the notification queue.</source>
					<target>By using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartPeriodicUpdateBatch</pc></pc> method, you can provide up to five URIs at once for use with the notification queue.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Each URI is polled for a single notification payload, at or near the same time.</source>
					<target>Each URI is polled for a single notification payload, at or near the same time.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Each polled URI can return its own expiration and tag value.</source>
					<target>Each polled URI can return its own expiration and tag value.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Guidelines for periodic notifications</source>
					<target>Guidelines for periodic notifications</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>How to set up periodic notifications for badges</source>
					<target>How to set up periodic notifications for badges</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>How to set up periodic notifications for tiles</source>
					<target>How to set up periodic notifications for tiles</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>