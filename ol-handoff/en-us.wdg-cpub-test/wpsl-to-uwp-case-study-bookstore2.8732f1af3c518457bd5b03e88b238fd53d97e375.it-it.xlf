<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">eecc51526190c2e2e4e2bbbf170d33f02b065980</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-case-study-bookstore2.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">d565cd5176072119a5bb60708d12f43677304a9b</mda:meta><mda:meta type="olxliffhash">525b60407703e571460f0fc3b64757fd87b9cdc6</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This case study, which builds on the info given in Bookstore, begins with a Windows Phone Silverlight app that displays grouped data in a LongListSelector.</source>
					<target>This case study, which builds on the info given in Bookstore, begins with a Windows Phone Silverlight app that displays grouped data in a LongListSelector.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight to UWP case study: Bookstore2</source>
					<target>Windows Phone Silverlight to UWP case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight to UWP case study: Bookstore2</source>
					<target>Windows Phone Silverlight to UWP case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore1.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</source>
					<target>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
					<target>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The jump list affords much quicker navigation than scrolling through the list of books.</source>
					<target>The jump list affords much quicker navigation than scrolling through the list of books.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</source>
					<target>We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](w8x-to-uwp-troubleshooting.md#targetplatformversion)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Downloads</source>
					<target>Downloads</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=522601)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2WPSL8 Windows Phone Silverlight app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2WPSL8 Windows Phone Silverlight app</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532952)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2Universal\_10 Windows 10 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2Universal\_10 Windows 10 app</pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The Windows Phone Silverlight app</source>
					<target>The Windows Phone Silverlight app</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</source>
					<target>The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It's a vertically-scrolling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> of books grouped by author.</source>
					<target>It's a vertically-scrolling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> of books grouped by author.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>You can zoom out to the jump list, and from there, you can navigate back into any group.</source>
					<target>You can zoom out to the jump list, and from there, you can navigate back into any group.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</source>
					<target>There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</source>
					<target>As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>how bookstore2wpsl8 looks</source>
					<target>how bookstore2wpsl8 looks</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Porting to a Windows 10 project</source>
					<target>Porting to a Windows 10 project</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</source>
					<target>It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Start by creating a new Blank Application (Windows Universal) project.</source>
					<target>Start by creating a new Blank Application (Windows Universal) project.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Name it Bookstore2Universal\_10.</source>
					<target>Name it Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</source>
					<target>These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
					<target>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</source>
					<target>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</source>
					<target>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>That command is what we mean by "including" files or folders in a project.</source>
					<target>That command is what we mean by "including" files or folders in a project.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</source>
					<target>Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>There's no need to do this for files that you're replacing in the destination.</source>
					<target>There's no need to do this for files that you're replacing in the destination.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
					<target>Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Copy MainPage.xaml and replace the file in the destination.</source>
					<target>Copy MainPage.xaml and replace the file in the destination.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</source>
					<target>We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</source>
					<target>Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</source>
					<target>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>In the imperative code in the view model source file, these porting changes are needed.</source>
					<target>In the imperative code in the view model source file, these porting changes are needed.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">`System.ComponentModel.DesignerProperties`</data>
					<data id="id2">`DesignMode`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> and then use the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Resolve</pc> command on it.</source>
					<target>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> and then use the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Resolve</pc> command on it.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">`IsInDesignTool`</data>
					<data id="id2">`DesignModeEnabled`</data>
				</originalData>
				<segment state="initial">
					<source>Delete the <ph dataRef="id1" id="ph1" /> property and use IntelliSense to add the correct property name: <ph dataRef="id2" id="ph2" />.</source>
					<target>Delete the <ph dataRef="id1" id="ph1" /> property and use IntelliSense to add the correct property name: <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`ImageSource`</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`BitmapImage`</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">`using System.Windows.Media;`</data>
					<data id="id2">`using System.Windows.Media.Imaging;`</data>
				</originalData>
				<segment state="initial">
					<source>Delete <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</source>
					<target>Delete <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</source>
					<target>Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore1.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](wpsl-to-uwp-case-study-bookstore1.md#binding-an-image)</data>
				</originalData>
				<segment state="initial">
					<source>Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>, update the implementation of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku.CoverImage</pc> property (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Binding an Image to a view model</pc>).</source>
					<target>Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>, update the implementation of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku.CoverImage</pc> property (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Binding an Image to a view model</pc>).</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>In MainPage.xaml, these initial porting changes are needed.</source>
					<target>In MainPage.xaml, these initial porting changes are needed.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">`phone:PhoneApplicationPage`</data>
					<data id="id2">`Page`</data>
				</originalData>
				<segment state="initial">
					<source>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (including the occurrences in property element syntax).</source>
					<target>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (including the occurrences in property element syntax).</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">`phone`</data>
					<data id="id2">`shell`</data>
				</originalData>
				<segment state="initial">
					<source>Delete the <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> namespace prefix declarations.</source>
					<target>Delete the <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> namespace prefix declarations.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</source>
					<target>Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">`SupportedOrientations="Portrait"`</data>
					<data id="id2">`Orientation="Portrait"`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Delete <ph dataRef="id1" id="ph1" />, and <ph dataRef="id2" id="ph2" />, and configure <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Portrait</pc> in the app package manifest in the new project.</source>
					<target>Delete <ph dataRef="id1" id="ph1" />, and <ph dataRef="id2" id="ph2" />, and configure <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Portrait</pc> in the app package manifest in the new project.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">`shell:SystemTray.IsVisible="True"`</data>
				</originalData>
				<segment state="initial">
					<source>Delete <ph dataRef="id1" id="ph1" />.</source>
					<target>Delete <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209818)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The types of the jump list item converters (which are present in the markup as resources) have moved to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Controls.Primitives</pc></pc> namespace.</source>
					<target>The types of the jump list item converters (which are present in the markup as resources) have moved to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Controls.Primitives</pc></pc> namespace.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Controls.Primitives</pc>.</source>
					<target>So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Controls.Primitives</pc>.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">`phone:`</data>
					<data id="id2">`Windows_UI_Xaml_Controls_Primitives:`</data>
				</originalData>
				<segment state="initial">
					<source>On the jump list item converter resources, change the prefix from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</source>
					<target>On the jump list item converter resources, change the prefix from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore1.md)</data>
					<data id="id3">`PhoneTextExtraLargeStyle`</data>
					<data id="id4"> **</data>
					<data id="id5">**</data>
					<data id="id6">`SubtitleTextBlockStyle`</data>
					<data id="id7">`PhoneTextSubtleStyle`</data>
					<data id="id8">`SubtitleTextBlockStyle`</data>
					<data id="id9">`PhoneTextNormalStyle`</data>
					<data id="id10">`CaptionTextBlockStyle`</data>
					<data id="id11">`PhoneTextTitle1Style`</data>
					<data id="id12">`HeaderTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>, replace all references to the <ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc> style with a reference to <ph dataRef="id6" id="ph2" />, replace <ph dataRef="id7" id="ph3" /> with <ph dataRef="id8" id="ph4" />, replace <ph dataRef="id9" id="ph5" /> with <ph dataRef="id10" id="ph6" />, and replace <ph dataRef="id11" id="ph7" /> with <ph dataRef="id12" id="ph8" />.</source>
					<target>Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>, replace all references to the <ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc> style with a reference to <ph dataRef="id6" id="ph2" />, replace <ph dataRef="id7" id="ph3" /> with <ph dataRef="id8" id="ph4" />, replace <ph dataRef="id9" id="ph5" /> with <ph dataRef="id10" id="ph6" />, and replace <ph dataRef="id11" id="ph7" /> with <ph dataRef="id12" id="ph8" />.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
				</originalData>
				<segment state="initial">
					<source>There is one exception in <ph dataRef="id1" id="ph1" />.</source>
					<target>There is one exception in <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`CaptionTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>The style of the second <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> should reference <ph dataRef="id3" id="ph1" />.</source>
					<target>The style of the second <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> should reference <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`AuthorGroupHeaderTemplate`</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">`SystemControlBackgroundAccentBrush`</data>
					<data id="id7">`PhoneAccentBrush`</data>
				</originalData>
				<segment state="initial">
					<source>Remove the FontFamily attribute from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> inside <ph dataRef="id3" id="ph1" /> and set the Background of the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Border</pc> to reference <ph dataRef="id6" id="ph2" /> instead of <ph dataRef="id7" id="ph3" />.</source>
					<target>Remove the FontFamily attribute from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> inside <ph dataRef="id3" id="ph1" /> and set the Background of the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Border</pc> to reference <ph dataRef="id6" id="ph2" /> instead of <ph dataRef="id7" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</data>
				</originalData>
				<segment state="initial">
					<source>Because of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">changes related to view pixels</pc>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</source>
					<target>Because of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">changes related to view pixels</pc>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Replacing the LongListSelector</source>
					<target>Replacing the LongListSelector</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Replacing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom</pc></pc> control will take several steps, so let's make a start on that.</source>
					<target>Replacing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom</pc></pc> control will take several steps, so let's make a start on that.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242878)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br209833)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> binds directly to the grouped data source, but a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc> contains <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GridView</pc></pc> controls, which bind indirectly to the data via a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">CollectionViewSource</pc></pc> adapter.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> binds directly to the grouped data source, but a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc> contains <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GridView</pc></pc> controls, which bind indirectly to the data via a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">CollectionViewSource</pc></pc> adapter.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`&lt;Page.Resources&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <ph dataRef="id3" id="ph1" />.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that the binding on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector.ItemsSource</pc> becomes the value of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource.Source</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LongListSelector.IsGroupingEnabled</pc> becomes <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource.IsSourceGrouped</pc>.</source>
					<target>Note that the binding on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector.ItemsSource</pc> becomes the value of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource.Source</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LongListSelector.IsGroupingEnabled</pc> becomes <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource.IsSourceGrouped</pc>.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> has a name (note: not a key, as you might expect) so that we can bind to it.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> has a name (note: not a key, as you might expect) so that we can bind to it.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">`phone:LongListSelector`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, replace the <ph dataRef="id1" id="ph1" /> with this markup, which will give us a preliminary <pc dataRefEnd="id3" dataRefStart="id2" id="p1">SemanticZoom</pc> to work with.</source>
					<target>Next, replace the <ph dataRef="id1" id="ph1" /> with this markup, which will give us a preliminary <pc dataRefEnd="id3" dataRefStart="id2" id="p1">SemanticZoom</pc> to work with.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> notion of flat list and jump list modes is answered in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc> notion of a zoomed-in and a zoomed-out view, respectively.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc> notion of flat list and jump list modes is answered in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc> notion of a zoomed-in and a zoomed-out view, respectively.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The zoomed-in view is a property, and you set that property to an instance of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc>.</source>
					<target>The zoomed-in view is a property, and you set that property to an instance of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc>.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In this case, the zoomed-out view is also set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc>, and both <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc> controls are bound to our <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc>.</source>
					<target>In this case, the zoomed-out view is also set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc>, and both <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc> controls are bound to our <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc>.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The zoomed-in view uses the same item template, group header template, and <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HideEmptyGroups</pc> setting (now named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HidesIfEmpty</pc>) as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LongListSelector</pc>'s flat list does.</source>
					<target>The zoomed-in view uses the same item template, group header template, and <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HideEmptyGroups</pc> setting (now named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HidesIfEmpty</pc>) as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LongListSelector</pc>'s flat list does.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`AuthorNameJumpListStyle`</data>
				</originalData>
				<segment state="initial">
					<source>And the zoomed-out view uses an item template very much like the one inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc>'s jump list style (<ph dataRef="id3" id="ph1" />).</source>
					<target>And the zoomed-out view uses an item template very much like the one inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc>'s jump list style (<ph dataRef="id3" id="ph1" />).</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Also, note that the zoomed-out view binds to a special property of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionGroups</pc>, which is a collection containing the groups rather than the items.</source>
					<target>Also, note that the zoomed-out view binds to a special property of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionGroups</pc>, which is a collection containing the groups rather than the items.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">`AuthorNameJumpListStyle`</data>
				</originalData>
				<segment state="initial">
					<source>We no longer need <ph dataRef="id1" id="ph1" />, at least not all of it.</source>
					<target>We no longer need <ph dataRef="id1" id="ph1" />, at least not all of it.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</source>
					<target>We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">`AuthorNameJumpListStyle`</data>
				</originalData>
				<segment state="initial">
					<source>So, we delete the <ph dataRef="id1" id="ph1" /> style and replace it with this data template.</source>
					<target>So, we delete the <ph dataRef="id1" id="ph1" /> style and replace it with this data template.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group</pc>.</source>
					<target>Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group</pc>.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>You can build and run the app now.</source>
					<target>You can build and run the app now.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Here's how it looks on the mobile emulator.</source>
					<target>Here's how it looks on the mobile emulator.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>the uwp app on mobile with initial source code changes</source>
					<target>the uwp app on mobile with initial source code changes</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</source>
					<target>The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</source>
					<target>For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</source>
					<target>If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#initial-styling-and-templating)</data>
					<data id="id3">[</data>
					<data id="id4">](#adaptive-ui)</data>
					<data id="id5">[</data>
					<data id="id6">](#final-styling)</data>
				</originalData>
				<segment state="initial">
					<source>So, in the next few sections (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initial styling and templating</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adaptive UI</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Final styling</pc>), we'll remedy those issues.</source>
					<target>So, in the next few sections (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initial styling and templating</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adaptive UI</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Final styling</pc>), we'll remedy those issues.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Initial styling and templating</source>
					<target>Initial styling and templating</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplate`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">`"0,0,0,9.6"`</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To space out the group headers nicely, edit <ph dataRef="id1" id="ph1" /> and set a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> of <ph dataRef="id4" id="ph2" /> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Border</pc>.</source>
					<target>To space out the group headers nicely, edit <ph dataRef="id1" id="ph1" /> and set a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> of <ph dataRef="id4" id="ph2" /> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Border</pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">`"9.6,0"`</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To space out the book items nicely, Edit <ph dataRef="id1" id="ph1" /> and set the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> to <ph dataRef="id4" id="ph2" /> on both <pc dataRefEnd="id6" dataRefStart="id5" id="p2">TextBlock</pc>s.</source>
					<target>To space out the book items nicely, Edit <ph dataRef="id1" id="ph1" /> and set the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> to <ph dataRef="id4" id="ph2" /> on both <pc dataRefEnd="id6" dataRefStart="id5" id="p2">TextBlock</pc>s.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">`TitlePanel`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">`"7.2,0,0,0"`</data>
				</originalData>
				<segment state="initial">
					<source>To lay out the app name and the page title a little better, inside <ph dataRef="id1" id="ph1" />, remove the top <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> on the second <pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc> by setting the value to <ph dataRef="id6" id="ph2" />.</source>
					<target>To lay out the app name and the page title a little better, inside <ph dataRef="id1" id="ph1" />, remove the top <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Margin</pc> on the second <pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc> by setting the value to <ph dataRef="id6" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">`TitlePanel`</data>
					<data id="id2">`0`</data>
				</originalData>
				<segment state="initial">
					<source>And on <ph dataRef="id1" id="ph1" /> itself, set the margin to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you)</source>
					<target>And on <ph dataRef="id1" id="ph1" /> itself, set the margin to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you)</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">`LayoutRoot`</data>
					<data id="id2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</data>
				</originalData>
				<segment state="initial">
					<source>Change <ph dataRef="id1" id="ph1" />'s Background to <ph dataRef="id2" id="ph2" />.</source>
					<target>Change <ph dataRef="id1" id="ph1" />'s Background to <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Adaptive UI</source>
					<target>Adaptive UI</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</source>
					<target>Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</source>
					<target>But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>We can use the adaptive Visual State Manager feature to achieve this.</source>
					<target>We can use the adaptive Visual State Manager feature to achieve this.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</source>
					<target>We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</data>
				</originalData>
				<segment state="initial">
					<source>Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective pixels</pc>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</source>
					<target>Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective pixels</pc>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</source>
					<target>We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>We're triggering on window width in this case, but it's possible to trigger on window height, too.</source>
					<target>We're triggering on window width in this case, but it's possible to trigger on window height, too.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</source>
					<target>A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</source>
					<target>Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</source>
					<target>On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</source>
					<target>From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</source>
					<target>Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</source>
					<target>Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>These steps describe how to do that.</source>
					<target>These steps describe how to do that.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</source>
					<target>By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</source>
					<target>If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Only the property values for the wide state are set via an actual Visual State in the markup.</source>
					<target>Only the property values for the wide state are set via an actual Visual State in the markup.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`x:Name="narrowSeZo"`</data>
				</originalData>
				<segment state="initial">
					<source>Make a copy of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> control in the markup and set <ph dataRef="id5" id="ph1" /> on the copy.</source>
					<target>Make a copy of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> control in the markup and set <ph dataRef="id5" id="ph1" /> on the copy.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">`x:Name="wideSeZo"`</data>
					<data id="id2">`Visibility="Collapsed"`</data>
				</originalData>
				<segment state="initial">
					<source>On the original, set <ph dataRef="id1" id="ph1" /> and also set <ph dataRef="id2" id="ph2" /> so that the wide one is not visible by default.</source>
					<target>On the original, set <ph dataRef="id1" id="ph1" /> and also set <ph dataRef="id2" id="ph2" /> so that the wide one is not visible by default.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">`wideSeZo`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, change the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">ListView</pc>s to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">GridView</pc>s in both the zoomed-in view and the zoomed-out view.</source>
					<target>In <ph dataRef="id1" id="ph1" />, change the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">ListView</pc>s to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">GridView</pc>s in both the zoomed-in view and the zoomed-out view.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplate`</data>
					<data id="id2">`ZoomedOutAuthorTemplate`</data>
					<data id="id3">`BookTemplate`</data>
					<data id="id4">`Wide`</data>
				</originalData>
				<segment state="initial">
					<source>Make a copy of these three resources <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> and append the word <ph dataRef="id4" id="ph4" /> to the keys of the copies.</source>
					<target>Make a copy of these three resources <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> and append the word <ph dataRef="id4" id="ph4" /> to the keys of the copies.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">`wideSeZo`</data>
				</originalData>
				<segment state="initial">
					<source>Also, update <ph dataRef="id1" id="ph1" /> so that it references the keys of these new resources.</source>
					<target>Also, update <ph dataRef="id1" id="ph1" /> so that it references the keys of these new resources.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplateWide`</data>
					<data id="id2">`&lt;TextBlock Style="{StaticResource SubheaderTextBlockStyle}" Text="{Binding Name}"/&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>Replace the contents of <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</source>
					<target>Replace the contents of <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">`ZoomedOutAuthorTemplateWide`</data>
				</originalData>
				<segment state="initial">
					<source>Replace the contents of <ph dataRef="id1" id="ph1" /> with:</source>
					<target>Replace the contents of <ph dataRef="id1" id="ph1" /> with:</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">`BookTemplateWide`</data>
				</originalData>
				<segment state="initial">
					<source>Replace the contents of <ph dataRef="id1" id="ph1" /> with:</source>
					<target>Replace the contents of <ph dataRef="id1" id="ph1" /> with:</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</source>
					<target>For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Creating and referencing an items panel template will give us the results we want.</source>
					<target>Creating and referencing an items panel template will give us the results we want.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Here's how the markup looks.</source>
					<target>Here's how the markup looks.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">`LayoutRoot`</data>
				</originalData>
				<segment state="initial">
					<source>Finally, add the appropriate Visual State Manager markup as the first child of <ph dataRef="id1" id="ph1" />.</source>
					<target>Finally, add the appropriate Visual State Manager markup as the first child of <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Final styling</source>
					<target>Final styling</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>All that remains are some final styling tweaks.</source>
					<target>All that remains are some final styling tweaks.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplate`</data>
					<data id="id2">`Foreground="White"`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, set <ph dataRef="id2" id="ph2" /> on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">TextBlock</pc> so that it looks correct when running on the mobile device family.</source>
					<target>In <ph dataRef="id1" id="ph1" />, set <ph dataRef="id2" id="ph2" /> on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">TextBlock</pc> so that it looks correct when running on the mobile device family.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">`FontWeight="SemiBold"`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">`AuthorGroupHeaderTemplate`</data>
					<data id="id5">`ZoomedOutAuthorTemplate`</data>
				</originalData>
				<segment state="initial">
					<source>Add <ph dataRef="id1" id="ph1" /> to the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">TextBlock</pc> in both <ph dataRef="id4" id="ph2" /> and <ph dataRef="id5" id="ph3" />.</source>
					<target>Add <ph dataRef="id1" id="ph1" /> to the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">TextBlock</pc> in both <ph dataRef="id4" id="ph2" /> and <ph dataRef="id5" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<originalData>
					<data id="id1">`narrowSeZo`</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</source>
					<target>In <ph dataRef="id1" id="ph1" />, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn251841)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209417)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">`Stretch`</data>
				</originalData>
				<segment state="initial">
					<source>We'll create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HeaderContainerStyle</pc></pc> for the zoomed-in view with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HorizontalContentAlignment</pc></pc> set to <ph dataRef="id9" id="ph1" />.</source>
					<target>We'll create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HeaderContainerStyle</pc></pc> for the zoomed-in view with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HorizontalContentAlignment</pc></pc> set to <ph dataRef="id9" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242817)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208817)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>And we'll create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemContainerStyle</pc></pc> for the zoomed-out view containing that same <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Setter</pc></pc>.</source>
					<target>And we'll create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemContainerStyle</pc></pc> for the zoomed-out view containing that same <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Setter</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Here's what that looks like.</source>
					<target>Here's what that looks like.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>That last sequence of styling operations leaves the app looking like this.</source>
					<target>That last sequence of styling operations leaves the app looking like this.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</source>
					<target>the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1"> 
![</data>
				</originalData>
				<segment state="initial">
					<source>The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window <ph dataRef="id1" id="ph1" />the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</source>
					<target>The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window <ph dataRef="id1" id="ph1" />the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</source>
					<target>The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a mobile device, zoomed-in view</source>
					<target>the ported windows 10 app running on a mobile device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device, zoomed-in view</source>
					<target>The ported Windows 10 app running on a Mobile device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a mobile device, zoomed-out view</source>
					<target>the ported windows 10 app running on a mobile device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device, zoomed-out view</source>
					<target>The ported Windows 10 app running on a Mobile device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>Making the view model more flexible</source>
					<target>Making the view model more flexible</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</source>
					<target>This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>.</source>
					<target>Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc>, where <pc dataRefEnd="id6" dataRefStart="id5" id="p2">T</pc> is BookSku.</source>
					<target>The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc>, where <pc dataRefEnd="id6" dataRefStart="id5" id="p2">T</pc> is BookSku.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>That means that the Author class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">is a</pc> group of BookSku.</source>
					<target>That means that the Author class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">is a</pc> group of BookSku.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>When we bind <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource.Source</pc> to Authors, the only thing we're communicating is that each Author in Authors is a group of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">something</pc>.</source>
					<target>When we bind <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource.Source</pc> to Authors, the only thing we're communicating is that each Author in Authors is a group of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">something</pc>.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We leave it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> to determine that Author is, in this case, a group of BookSku.</source>
					<target>We leave it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> to determine that Author is, in this case, a group of BookSku.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>That works: but it's not flexible.</source>
					<target>That works: but it's not flexible.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>What if we want Author to be <pc dataRefEnd="id2" dataRefStart="id1" id="p1">both</pc> a group of BookSku <pc dataRefEnd="id4" dataRefStart="id3" id="p2">and</pc> a group of the addresses where the author has lived?</source>
					<target>What if we want Author to be <pc dataRefEnd="id2" dataRefStart="id1" id="p1">both</pc> a group of BookSku <pc dataRefEnd="id4" dataRefStart="id3" id="p2">and</pc> a group of the addresses where the author has lived?</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>Author can't <pc dataRefEnd="id2" dataRefStart="id1" id="p1">be</pc> both of those groups.</source>
					<target>Author can't <pc dataRefEnd="id2" dataRefStart="id1" id="p1">be</pc> both of those groups.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>But, Author can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">have</pc> any number of groups.</source>
					<target>But, Author can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">have</pc> any number of groups.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>And that's the solution: use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">has-a-group</pc> pattern instead of, or in addition to, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">is-a-group</pc> pattern that we're using currently.</source>
					<target>And that's the solution: use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">has-a-group</pc> pattern instead of, or in addition to, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">is-a-group</pc> pattern that we're using currently.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>Here's how:</source>
					<target>Here's how:</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Change Author so that it no longer derives from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc>.</source>
					<target>Change Author so that it no longer derives from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc>.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">`private ObservableCollection&lt;BookSku&gt; bookSkus = new ObservableCollection&lt;BookSku&gt;();`</data>
				</originalData>
				<segment state="initial">
					<source>Add this field to Author: <ph dataRef="id1" id="ph1" />.</source>
					<target>Add this field to Author: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">`public ObservableCollection&lt;BookSku&gt; BookSkus { get { return this.bookSkus; } }`</data>
				</originalData>
				<segment state="initial">
					<source>Add this property to Author: <ph dataRef="id1" id="ph1" />.</source>
					<target>Add this property to Author: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>And of course we can repeat the above two steps to add as many groups to Author as we need.</source>
					<target>And of course we can repeat the above two steps to add as many groups to Author as we need.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">`this.BookSkus.Add(bookSku);`</data>
				</originalData>
				<segment state="initial">
					<source>Change the implementation of the AddBookSku method to <ph dataRef="id1" id="ph1" />.</source>
					<target>Change the implementation of the AddBookSku method to <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Now that Author <pc dataRefEnd="id2" dataRefStart="id1" id="p1">has</pc> at least one group, we need to communicate to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc> which of those groups it should use.</source>
					<target>Now that Author <pc dataRefEnd="id2" dataRefStart="id1" id="p1">has</pc> at least one group, we need to communicate to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc> which of those groups it should use.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To do that, add this property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>:</source>
					<target>To do that, add this property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>:</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, should you need to.</source>
					<target>Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, should you need to.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Let's make one last change to Author so that, if we use it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">without</pc> specifying <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource.ItemsPath</pc>, a default group of our choosing will be used:</source>
					<target>Let's make one last change to Author so that, if we use it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">without</pc> specifying <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource.ItemsPath</pc>, a default group of our choosing will be used:</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<originalData>
					<data id="id1">`ItemsPath="BookSkus"`</data>
				</originalData>
				<segment state="initial">
					<source>And now we can choose to remove <ph dataRef="id1" id="ph1" /> if we like and the app will still behave the same way.</source>
					<target>And now we can choose to remove <ph dataRef="id1" id="ph1" /> if we like and the app will still behave the same way.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>Conclusion</source>
					<target>Conclusion</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>This case study involved a more ambitious user interface than the previous one.</source>
					<target>This case study involved a more ambitious user interface than the previous one.</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<originalData>
					<data id="id1"> **</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>All of the facilities and concepts of the Windows Phone Silverlight<pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc>—and more—were found to be available to a UWP app in the form of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">GridView</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">CollectionViewSource</pc>.</source>
					<target>All of the facilities and concepts of the Windows Phone Silverlight<pc dataRefEnd="id2" dataRefStart="id1" id="p1">LongListSelector</pc>—and more—were found to be available to a UWP app in the form of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">GridView</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">CollectionViewSource</pc>.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</source>
					<target>We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>