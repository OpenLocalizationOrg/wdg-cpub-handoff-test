<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">397e9052630e502710429e61453740ab7828f1cf</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci\debug-test-perf\keep-the-ui-thread-responsive.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">9f14b1dbf02a63442aac42126dbeafadcc95249c</mda:meta><mda:meta type="olxliffhash">9b2300dfb328d972a2862cf88769ce2edf8635d5</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Keep the UI thread responsive</source>
					<target>Keep the UI thread responsive</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Users expect an app to remain responsive while it does computation, regardless of the type of machine.</source>
					<target>Users expect an app to remain responsive while it does computation, regardless of the type of machine.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>This means different things for different apps.</source>
					<target>This means different things for different apps.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</source>
					<target>For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</source>
					<target>Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</source>
					<target>Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</source>
					<target>Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</source>
					<target>Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The responsiveness of your app is related to the availability of the UI thread to process work.</source>
					<target>The responsiveness of your app is related to the availability of the UI thread to process work.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</source>
					<target>You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can't update the UI from a background thread but you can post a message to it with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to cause code to be run there.</source>
					<target>You can't update the UI from a background thread but you can post a message to it with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to cause code to be run there.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>For example many animations and transitions that don’t affect layout can run on this render thread.</source>
					<target>For example many animations and transitions that don’t affect layout can run on this render thread.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Delay element instantiation</source>
					<target>Delay element instantiation</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Some of the slowest stages in an app can include startup, and switching views.</source>
					<target>Some of the slowest stages in an app can include startup, and switching views.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Don't do more work than necessary to bring up the UI that the user sees initially.</source>
					<target>Don't do more work than necessary to bring up the UI that the user sees initially.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>For example, don't create the UI for progressively-disclosed UI and the contents of popups.</source>
					<target>For example, don't create the UI for progressively-disclosed UI and the contents of popups.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> to delay-instantiate elements.</source>
					<target>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> to delay-instantiate elements.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Programmatically insert elements into the tree on-demand.</source>
					<target>Programmatically insert elements into the tree on-demand.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunIdleAsync</pc></pc> queues work for the UI thread to process when it's not busy.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunIdleAsync</pc></pc> queues work for the UI thread to process when it's not busy.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Use asynchronous APIs</source>
					<target>Use asynchronous APIs</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</source>
					<target>To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</source>
					<target>An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>When you call an API from the UI thread, use the asynchronous version if it's available.</source>
					<target>When you call an API from the UI thread, use the asynchronous version if it's available.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt187335)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about programming with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Asynchronous programming</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Call asynchronous APIs in C\# or Visual Basic</pc>.</source>
					<target>For more info about programming with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> patterns, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Asynchronous programming</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Call asynchronous APIs in C\# or Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Offload work to background threads</source>
					<target>Offload work to background threads</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Write event handlers to return quickly.</source>
					<target>Write event handlers to return quickly.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</source>
					<target>In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can schedule work asynchronously by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator in C\#, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator in Visual Basic, or delegates in C++.</source>
					<target>You can schedule work asynchronously by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> operator in C\#, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator in Visual Basic, or delegates in C++.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>But this doesn't guarantee that the work you schedule will run on a background thread.</source>
					<target>But this doesn't guarantee that the work you schedule will run on a background thread.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> or a delegate, you run that delegate or method on the UI thread.</source>
					<target>Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> or a delegate, you run that delegate or method on the UI thread.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>You have to explicitly say when you want to run your app code on a background thread.</source>
					<target>You have to explicitly say when you want to run your app code on a background thread.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.run.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In C\#C\# and Visual Basic you can accomplish this by passing code to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task.Run</pc></pc>.</source>
					<target>In C\#C\# and Visual Basic you can accomplish this by passing code to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task.Run</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Remember that UI elements may only be accessed from the UI thread.</source>
					<target>Remember that UI elements may only be accessed from the UI thread.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Use the UI thread to access UI elements before launching the background work and/or use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreDispatcher.RunIdleAsync</pc></pc> on the background thread.</source>
					<target>Use the UI thread to access UI elements before launching the background work and/or use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreDispatcher.RunIdleAsync</pc></pc> on the background thread.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>An example of work that can be performed on a background thread is the calculating of computer AI in a game.</source>
					<target>An example of work that can be performed on a background thread is the calculating of computer AI in a game.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The code that calculates the computer's next move can take a lot of time to execute.</source>
					<target>The code that calculates the computer's next move can take a lot of time to execute.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">`NextMove-Click`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, the <ph dataRef="id1" id="ph1" /> handler returns at the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> in order to keep the UI thread responsive.</source>
					<target>In this example, the <ph dataRef="id1" id="ph1" /> handler returns at the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">await</pc> in order to keep the UI thread responsive.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">`ComputeNextMove`</data>
				</originalData>
				<segment state="initial">
					<source>But execution picks up in that handler again after <ph dataRef="id1" id="ph1" /> (which executes on a background thread) completes.</source>
					<target>But execution picks up in that handler again after <ph dataRef="id1" id="ph1" /> (which executes on a background thread) completes.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The remaining code in the handler updates the UI with the results.</source>
					<target>The remaining code in the handler updates the UI with the results.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR229621)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR229621timer)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  There's also a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ThreadPoolTimer</pc></pc> API for the UWP, which can be used for similar scenarios.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  There's also a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ThreadPoolTimer</pc></pc> API for the UWP, which can be used for similar scenarios.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187340)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Threading and async programming</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Threading and async programming</pc>.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Custom user interactions</source>
					<target>Custom user interactions</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>