<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">2a517942d67a59f7b9ce4449d24a9a4d9ff3471d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci\devices-sensors\use-the-orientation-sensor.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">86daf278fbe0b13451729caeb5d975db1ae837cb</mda:meta><mda:meta type="olxliffhash">a9dd322f5a01d4c891789177b7361ae0ec2acc87</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Use the orientation sensor</source>
					<target>Use the orientation sensor</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>Windows.Devices.Sensors</source>
					<target>Windows.Devices.Sensors</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>OrientationSensor</source>
					<target>OrientationSensor</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>SimpleOrientation</source>
					<target>SimpleOrientation</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Learn how to use the orientation sensors to determine the device orientation.</source>
					<target>Learn how to use the orientation sensors to determine the device orientation.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR206408)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR206371)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR206399)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>There are two different types of orientation sensor APIs included in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Sensors</pc></pc> namespace: <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OrientationSensor</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">SimpleOrientation</pc></pc>.</source>
					<target>There are two different types of orientation sensor APIs included in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Sensors</pc></pc> namespace: <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OrientationSensor</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">SimpleOrientation</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>While both of these sensors are orientation sensors, that term is overloaded and they are used for very different purposes.</source>
					<target>While both of these sensors are orientation sensors, that term is overloaded and they are used for very different purposes.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>However, since both are orientation sensors, they are both covered in this article.</source>
					<target>However, since both are orientation sensors, they are both covered in this article.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR206371)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OrientationSensor</pc></pc> API is used for 3-D apps two obtain a quaternion and a rotation matrix.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OrientationSensor</pc></pc> API is used for 3-D apps two obtain a quaternion and a rotation matrix.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>A quaternion can be most easily understood as a rotation of a point \[x,y,z\] about an arbitrary axis (contrasted with a rotation matrix, which represents rotations around three axes).</source>
					<target>A quaternion can be most easily understood as a rotation of a point \[x,y,z\] about an arbitrary axis (contrasted with a rotation matrix, which represents rotations around three axes).</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The mathematics behind quaternions is fairly exotic in that it involves the geometric properties of complex numbers and mathematical properties of imaginary numbers, but working with them is simple, and frameworks like DirectX support them.</source>
					<target>The mathematics behind quaternions is fairly exotic in that it involves the geometric properties of complex numbers and mathematical properties of imaginary numbers, but working with them is simple, and frameworks like DirectX support them.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>A complex 3-D app can use the Orientation sensor to adjust the user's perspective.</source>
					<target>A complex 3-D app can use the Orientation sensor to adjust the user's perspective.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>This sensor combines input from the accelerometer, gyrometer, and compass.</source>
					<target>This sensor combines input from the accelerometer, gyrometer, and compass.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR206399)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SimpleOrientation</pc></pc> API is used to determine the current device orientation in terms of definitions like portrait up, portrait down, landscape left, and landscape right.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SimpleOrientation</pc></pc> API is used to determine the current device orientation in terms of definitions like portrait up, portrait down, landscape left, and landscape right.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>It can also detect if a device is face-up or face-down.</source>
					<target>It can also detect if a device is face-up or face-down.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Rather than returning properties like "portrait up" or "landscape left", this sensor returns a rotation value: "Not rotated", "Rotated90DegreesCounterclockwise", and so on.</source>
					<target>Rather than returning properties like "portrait up" or "landscape left", this sensor returns a rotation value: "Not rotated", "Rotated90DegreesCounterclockwise", and so on.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The following table maps common orientation properties to the corresponding sensor reading.</source>
					<target>The following table maps common orientation properties to the corresponding sensor reading.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Orientation</source>
					<target>Orientation</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Corresponding sensor reading</source>
					<target>Corresponding sensor reading</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Portrait Up</source>
					<target>Portrait Up</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>NotRotated</source>
					<target>NotRotated</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Landscape Left</source>
					<target>Landscape Left</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Rotated90DegreesCounterclockwise</source>
					<target>Rotated90DegreesCounterclockwise</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Portrait Down</source>
					<target>Portrait Down</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Rotated180DegreesCounterclockwise</source>
					<target>Rotated180DegreesCounterclockwise</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Landscape Right</source>
					<target>Landscape Right</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Rotated270DegreesCounterclockwise</source>
					<target>Rotated270DegreesCounterclockwise</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>You should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C\#, and events.</source>
					<target>You should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C\#, and events.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The device or emulator that you're using must support a orientation sensor.</source>
					<target>The device or emulator that you're using must support a orientation sensor.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Create an OrientationSensor app</source>
					<target>Create an OrientationSensor app</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>This section is divided into two subsections.</source>
					<target>This section is divided into two subsections.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>The first subsection will take you through the steps necessary to create an orientation application from scratch.</source>
					<target>The first subsection will take you through the steps necessary to create an orientation application from scratch.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The following subsection explains the app you have just created.</source>
					<target>The following subsection explains the app you have just created.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Instructions</source>
					<target>Instructions</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new project, choosing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C\#</pc> project templates.</source>
					<target>Create a new project, choosing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C\#</pc> project templates.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Open your project's MainPage.xaml.cs file and replace the existing code with the following.</source>
					<target>Open your project's MainPage.xaml.cs file and replace the existing code with the following.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>You'll need to rename the namespace in the previous snippet with the name you gave your project.</source>
					<target>You'll need to rename the namespace in the previous snippet with the name you gave your project.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`namespace App1`</data>
					<data id="id4">`namespace OrientationSensorCS`</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationSensorCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</source>
					<target>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationSensorCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Open the file MainPage.xaml and replace the original contents with the following XML.</source>
					<target>Open the file MainPage.xaml and replace the original contents with the following XML.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.</source>
					<target>You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`x:Class="App1.MainPage"`</data>
					<data id="id4">`x:Class="OrientationSensorCS.MainPage"`</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationSensorCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</source>
					<target>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationSensorCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">`xmlns:local="using:App1"`</data>
					<data id="id2">`xmlns:local="using:OrientationSensorCS"`</data>
				</originalData>
				<segment state="initial">
					<source>You should also replace <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</source>
					<target>You should also replace <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> &gt; </data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Press F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Start Debugging</pc> to build, deploy, and run the app.</source>
					<target>Press F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Start Debugging</pc> to build, deploy, and run the app.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Once the app is running, you can change the orientation by moving the device or using the emulator tools.</source>
					<target>Once the app is running, you can change the orientation by moving the device or using the emulator tools.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> &gt; </data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Stop the app by returning to Visual Studio and pressing Shift+F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Stop Debugging</pc> to stop the app.</source>
					<target>Stop the app by returning to Visual Studio and pressing Shift+F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Stop Debugging</pc> to stop the app.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Explanation</source>
					<target>Explanation</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The previous example demonstrates how little code you'll need to write in order to integrate orientation-sensor input in your app.</source>
					<target>The previous example demonstrates how little code you'll need to write in order to integrate orientation-sensor input in your app.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app establishes a connection with the default orientation sensor in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</source>
					<target>The app establishes a connection with the default orientation sensor in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app establishes the report interval within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</source>
					<target>The app establishes the report interval within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate).</source>
					<target>This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate).</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum.</source>
					<target>If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Otherwise, it sets the value to the requested interval.</source>
					<target>Otherwise, it sets the value to the requested interval.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The new sensor data is captured in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadingChanged</pc> method.</source>
					<target>The new sensor data is captured in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReadingChanged</pc> method.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler.</source>
					<target>Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The app registers this event handler on the following line.</source>
					<target>The app registers this event handler on the following line.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>These new values are written to the TextBlocks found in the project's XAML.</source>
					<target>These new values are written to the TextBlocks found in the project's XAML.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Create a SimpleOrientation app</source>
					<target>Create a SimpleOrientation app</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>This section is divided into two subsections.</source>
					<target>This section is divided into two subsections.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The first subsection will take you through the steps necessary to create a simple orientation application from scratch.</source>
					<target>The first subsection will take you through the steps necessary to create a simple orientation application from scratch.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>The following subsection explains the app you have just created.</source>
					<target>The following subsection explains the app you have just created.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Instructions</source>
					<target>Instructions</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new project, choosing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C\#</pc> project templates.</source>
					<target>Create a new project, choosing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C\#</pc> project templates.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Open your project's MainPage.xaml.cs file and replace the existing code with the following.</source>
					<target>Open your project's MainPage.xaml.cs file and replace the existing code with the following.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>You'll need to rename the namespace in the previous snippet with the name you gave your project.</source>
					<target>You'll need to rename the namespace in the previous snippet with the name you gave your project.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`namespace App1`</data>
					<data id="id4">`namespace SimpleOrientationCS`</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleOrientationCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</source>
					<target>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleOrientationCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Open the file MainPage.xaml and replace the original contents with the following XML.</source>
					<target>Open the file MainPage.xaml and replace the original contents with the following XML.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.</source>
					<target>You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`x:Class="App1.MainPage"`</data>
					<data id="id4">`x:Class="SimpleOrientationCS.MainPage"`</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleOrientationCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</source>
					<target>For example, if you created a project named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleOrientationCS</pc>, you'd replace <ph dataRef="id3" id="ph1" /> with <ph dataRef="id4" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">`xmlns:local="using:App1"`</data>
					<data id="id2">`xmlns:local="using:SimpleOrientationCS"`</data>
				</originalData>
				<segment state="initial">
					<source>You should also replace <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</source>
					<target>You should also replace <ph dataRef="id1" id="ph1" /> with <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> &gt; </data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Press F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Start Debugging</pc> to build, deploy, and run the app.</source>
					<target>Press F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Start Debugging</pc> to build, deploy, and run the app.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Once the app is running, you can change the orientation by moving the device or using the emulator tools.</source>
					<target>Once the app is running, you can change the orientation by moving the device or using the emulator tools.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> &gt; </data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Stop the app by returning to Visual Studio and pressing Shift+F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Stop Debugging</pc> to stop the app.</source>
					<target>Stop the app by returning to Visual Studio and pressing Shift+F5 or select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Stop Debugging</pc> to stop the app.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Explanation</source>
					<target>Explanation</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>The previous example demonstrates how little code you'll need to write in order to integrate simple-orientation sensor input in your app.</source>
					<target>The previous example demonstrates how little code you'll need to write in order to integrate simple-orientation sensor input in your app.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app establishes a connection with the default sensor in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</source>
					<target>The app establishes a connection with the default sensor in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> method.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The new sensor data is captured in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationChanged</pc> method.</source>
					<target>The new sensor data is captured in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OrientationChanged</pc> method.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler.</source>
					<target>Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>The app registers this event handler on the following line.</source>
					<target>The app registers this event handler on the following line.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>These new values are written to a TextBlock found in the project's XAML.</source>
					<target>These new values are written to a TextBlock found in the project's XAML.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>OrientationSensor Sample</source>
					<target>OrientationSensor Sample</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>SimpleOrientation Sensor Sample</source>
					<target>SimpleOrientation Sensor Sample</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>