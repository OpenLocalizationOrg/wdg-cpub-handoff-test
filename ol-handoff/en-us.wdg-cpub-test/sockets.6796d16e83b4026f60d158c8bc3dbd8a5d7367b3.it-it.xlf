<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">ed83c7fcbe16c2c01b36f4a906622517e4b52502</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\networking\sockets.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">890787ade64de9339fbf7df1d77286728fa9b2aa</mda:meta><mda:meta type="olxliffhash">fc814c5718be9bf23f0f77f8c83d35c05b092969</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>You can use both Windows.Networking.Sockets and Winsock to communicate with other devices as a Universal Windows Platform (UWP) app developer.</source>
					<target>You can use both Windows.Networking.Sockets and Winsock to communicate with other devices as a Universal Windows Platform (UWP) app developer.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Sockets</source>
					<target>Sockets</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Sockets</source>
					<target>Sockets</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Windows.Networking.Sockets</source>
					<target>Windows.Networking.Sockets</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Winsock</source>
					<target>Winsock</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226960)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ms737523)</data>
				</originalData>
				<segment state="initial">
					<source>You can use both <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.Sockets</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Winsock</pc> to communicate with other devices as a Universal Windows Platform (UWP) app developer.</source>
					<target>You can use both <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.Sockets</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Winsock</pc> to communicate with other devices as a Universal Windows Platform (UWP) app developer.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This topic provides in-depth guidance on using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Networking.Sockets</pc> namespace to perform networking operations.</source>
					<target>This topic provides in-depth guidance on using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Networking.Sockets</pc> namespace to perform networking operations.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Basic TCP socket operations</source>
					<target>Basic TCP socket operations</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>A TCP socket provides low-level network data transfers in either direction for long-lived connections.</source>
					<target>A TCP socket provides low-level network data transfers in either direction for long-lived connections.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>TCP sockets are the underlying feature used by most of the network protocols used on the Internet.</source>
					<target>TCP sockets are the underlying feature used by most of the network protocols used on the Internet.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br226906)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br226960)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>This section shows how to enable a UWP app to send and receive data with a TCP stream socket using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamSocketListener</pc></pc> classes as part of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Networking.Sockets</pc></pc> namespace.</source>
					<target>This section shows how to enable a UWP app to send and receive data with a TCP stream socket using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamSocketListener</pc></pc> classes as part of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Networking.Sockets</pc></pc> namespace.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>For this section, we will be creating a very simple app that will function as an echo server and client to demonstrate basic TCP operations.</source>
					<target>For this section, we will be creating a very simple app that will function as an echo server and client to demonstrate basic TCP operations.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Creating a TCP echo server</source>
					<target>Creating a TCP echo server</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226906)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener</pc></pc> object and start listening for incoming TCP connections.</source>
					<target>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener</pc></pc> object and start listening for incoming TCP connections.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701494)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example implements the SocketListener\_ConnectionReceived event handler that was attached to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener.ConnectionReceived</pc></pc> event in the above example.</source>
					<target>The following code example implements the SocketListener\_ConnectionReceived event handler that was attached to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener.ConnectionReceived</pc></pc> event in the above example.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226906)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This event handler is called by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener</pc></pc> class every time a remote client has established a connection with the echo server.</source>
					<target>This event handler is called by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocketListener</pc></pc> class every time a remote client has established a connection with the echo server.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Creating a TCP echo client</source>
					<target>Creating a TCP echo client</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> object, establish a connection to the remote server, send a request, and receive a response.</source>
					<target>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> object, establish a connection to the remote server, send a request, and receive a response.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Basic UDP socket operations</source>
					<target>Basic UDP socket operations</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>A UDP socket provides low-level network data transfers in either direction for network communication that does not require an established connection.</source>
					<target>A UDP socket provides low-level network data transfers in either direction for network communication that does not require an established connection.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Because UDP sockets do not maintain connection on both endpoints they provide fast and simple solution for networking between remote machines.</source>
					<target>Because UDP sockets do not maintain connection on both endpoints they provide fast and simple solution for networking between remote machines.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>However, UDP sockets do not ensure integrity of the network packets or whether they make it to the remote destination at all.</source>
					<target>However, UDP sockets do not ensure integrity of the network packets or whether they make it to the remote destination at all.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Some examples of applications that use UDP sockets are local network discovery and local chat clients.</source>
					<target>Some examples of applications that use UDP sockets are local network discovery and local chat clients.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This section demonstrates the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> class to sending and receiving UDP messages by creating a simple echo server and client.</source>
					<target>This section demonstrates the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> class to sending and receiving UDP messages by creating a simple echo server and client.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Creating a UDP echo server</source>
					<target>Creating a UDP echo server</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> object and bind it to a specific port so that you can listen for incoming UDP messages.</source>
					<target>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> object and bind it to a specific port so that you can listen for incoming UDP messages.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Socket\_MessageReceived</pc> event handler to read a message that was received from a client and send the same message back.</source>
					<target>The following code example implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Socket\_MessageReceived</pc> event handler to read a message that was received from a client and send the same message back.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Creating a UDP echo client</source>
					<target>Creating a UDP echo client</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> object and bind it to a specific port so that you can listen for incoming UDP messages and send a UDP message to the UDP echo server.</source>
					<target>The following code example demonstrates how to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc> object and bind it to a specific port so that you can listen for incoming UDP messages and send a UDP message to the UDP echo server.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code example implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Socket\_MessageReceived</pc> event handler to read a message that was received from the UDP echo server.</source>
					<target>The following code example implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Socket\_MessageReceived</pc> event handler to read a message that was received from the UDP echo server.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Background operations and the socket broker</source>
					<target>Background operations and the socket broker</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>If your app receives connections or data on sockets, then you must be prepared to perform those operations properly while your app is not in the foreground.</source>
					<target>If your app receives connections or data on sockets, then you must be prepared to perform those operations properly while your app is not in the foreground.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>To do so, you use the socket broker.</source>
					<target>To do so, you use the socket broker.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](network-communications-in-the-background.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more information on how to use the socket broker, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Network communications in the background</pc>.</source>
					<target>For more information on how to use the socket broker, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Network communications in the background</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Batched sends</source>
					<target>Batched sends</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Starting with Windows 10, Windows.Networking.Sockets supports batched sends, a way for you to send multiple buffers of data together with much lower context-switching overhead than if you send each of the buffers separately.</source>
					<target>Starting with Windows 10, Windows.Networking.Sockets supports batched sends, a way for you to send multiple buffers of data together with much lower context-switching overhead than if you send each of the buffers separately.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>This is especially useful if your app is doing VoIP, VPN, or other tasks which involve moving a lot of data as efficiently as possible.</source>
					<target>This is especially useful if your app is doing VoIP, VPN, or other tasks which involve moving a lot of data as efficiently as possible.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Each call to WriteAsync on a socket triggers a kernel transition to reach the network stack.</source>
					<target>Each call to WriteAsync on a socket triggers a kernel transition to reach the network stack.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>When an app writes many buffers at a time, each write incurs a separate kernel transition, and this creates substantial overhead.</source>
					<target>When an app writes many buffers at a time, each write incurs a separate kernel transition, and this creates substantial overhead.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>The new batched sends pattern optimizes the frequency of kernel transitions.</source>
					<target>The new batched sends pattern optimizes the frequency of kernel transitions.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This functionality is currently limited to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> and connected <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DatagramSocket</pc></pc> instances.</source>
					<target>This functionality is currently limited to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket</pc></pc> and connected <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DatagramSocket</pc></pc> instances.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Here is an example of how an app would send a large number of buffers in a non-optimal way.</source>
					<target>Here is an example of how an app would send a large number of buffers in a non-optimal way.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>This example shows a more efficient way to send a large number of buffers.</source>
					<target>This example shows a more efficient way to send a large number of buffers.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Because this technique uses features unique to the C# language, it is only available to C# programmers.</source>
					<target>Because this technique uses features unique to the C# language, it is only available to C# programmers.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>By sending multiple packets at a time, this example enables the system to batch sends, and thus optimize kernel transitions for improved performance.</source>
					<target>By sending multiple packets at a time, this example enables the system to batch sends, and thus optimize kernel transitions for improved performance.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>This example shows another way to send a large number of buffers in a way that's compatible with batched sends.</source>
					<target>This example shows another way to send a large number of buffers in a way that's compatible with batched sends.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>And since it doesn't use any C#-specific features, it is applicable for all languages (though it is demonstrated here in C#).</source>
					<target>And since it doesn't use any C#-specific features, it is applicable for all languages (though it is demonstrated here in C#).</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Instead, it uses changed behavior in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OutputStream</pc> member of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">StreamSocket</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">DatagramSocket</pc></pc> classes that is new in Windows 10.</source>
					<target>Instead, it uses changed behavior in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OutputStream</pc> member of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">StreamSocket</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">DatagramSocket</pc></pc> classes that is new in Windows 10.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In earlier versions of Windows, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> returned immediately, and did not guarantee that all operations on the stream had completed yet.</source>
					<target>In earlier versions of Windows, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> returned immediately, and did not guarantee that all operations on the stream had completed yet.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>In Windows 10, the behavior has changed.</source>
					<target>In Windows 10, the behavior has changed.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> is now guaranteed to return after all operations on the output stream have completed.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> is now guaranteed to return after all operations on the output stream have completed.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>There are some important limitations imposed by using batched writes in your code.</source>
					<target>There are some important limitations imposed by using batched writes in your code.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You cannot modify the contents of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IBuffer</pc> instances being written until the asynchronous write is complete.</source>
					<target>You cannot modify the contents of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IBuffer</pc> instances being written until the asynchronous write is complete.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> pattern only works on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket.OutputStream</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DatagramSocket.OutputStream</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> pattern only works on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket.OutputStream</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DatagramSocket.OutputStream</pc>.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> pattern only works in Windows 10 and onward.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FlushAsync</pc> pattern only works in Windows 10 and onward.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In other cases, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task.WaitAll</pc> instead of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlushAsync</pc> pattern.</source>
					<target>In other cases, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task.WaitAll</pc> instead of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlushAsync</pc> pattern.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Port sharing for DatagramSocket</source>
					<target>Port sharing for DatagramSocket</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701190)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn895368)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows 10 introduces a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocketControl</pc></pc> property, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MulticastOnly</pc></pc>, which enables you to specify that the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">DatagramSocket</pc> in question is able to coexist with other Win32 or WinRT multicast sockets bound to the same address/port.</source>
					<target>Windows 10 introduces a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocketControl</pc></pc> property, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MulticastOnly</pc></pc>, which enables you to specify that the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">DatagramSocket</pc> in question is able to coexist with other Win32 or WinRT multicast sockets bound to the same address/port.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Providing a client certificate with the StreamSocket class</source>
					<target>Providing a client certificate with the StreamSocket class</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.StreamSocket</pc></pc> class supports using SSL/TLS to authenticate the server the app is talking to.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.StreamSocket</pc></pc> class supports using SSL/TLS to authenticate the server the app is talking to.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>In certain cases, the app also needs to authenticate itself to the server using a TLS client certificate.</source>
					<target>In certain cases, the app also needs to authenticate itself to the server using a TLS client certificate.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226893)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In Windows 10, you can provide a client certificate on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket.Control</pc></pc> object (this must be set before the TLS handshake is started).</source>
					<target>In Windows 10, you can provide a client certificate on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StreamSocket.Control</pc></pc> object (this must be set before the TLS handshake is started).</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>If the server requests the client certificate, Windows will respond with the certificate provided.</source>
					<target>If the server requests the client certificate, Windows will respond with the certificate provided.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Here is a code snippet showing how to implement this:</source>
					<target>Here is a code snippet showing how to implement this:</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Exceptions in Windows.Networking.Sockets</source>
					<target>Exceptions in Windows.Networking.Sockets</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207113)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The constructor for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostName</pc></pc> class used with sockets can throw an exception if the string passed is not a valid hostname (contains characters that are not allowed in a host name).</source>
					<target>The constructor for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostName</pc></pc> class used with sockets can throw an exception if the string passed is not a valid hostname (contains characters that are not allowed in a host name).</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If an app gets input from the user for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostName</pc>, the constructor should be in a try/catch block.</source>
					<target>If an app gets input from the user for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostName</pc>, the constructor should be in a try/catch block.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>If an exception is thrown, the app can notify the user and request a new hostname.</source>
					<target>If an exception is thrown, the app can notify the user and request a new hostname.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226960)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.Sockets</pc></pc> namespace has convenient helper methods and enumerations for handling errors when using sockets and WebSockets.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Networking.Sockets</pc></pc> namespace has convenient helper methods and enumerations for handling errors when using sockets and WebSockets.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>This can be useful for handling specific network exceptions differently in your app.</source>
					<target>This can be useful for handling specific network exceptions differently in your app.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241319)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br226882)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br226906)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>An error encountered on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamSocket</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">StreamSocketListener</pc></pc> operation is returned as an <pc dataRefEnd="id14" dataRefStart="id13" id="p7">HRESULT</pc> value.</source>
					<target>An error encountered on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatagramSocket</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamSocket</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">StreamSocketListener</pc></pc> operation is returned as an <pc dataRefEnd="id14" dataRefStart="id13" id="p7">HRESULT</pc> value.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701462)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh701457)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SocketError.GetStatus</pc></pc> method is used to convert a network error from a socket operation to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SocketErrorStatus</pc></pc> enumeration value.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SocketError.GetStatus</pc></pc> method is used to convert a network error from a socket operation to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SocketErrorStatus</pc></pc> enumeration value.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SocketErrorStatus</pc> enumeration values correspond to an error returned by the native Windows sockets operation.</source>
					<target>Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SocketErrorStatus</pc> enumeration values correspond to an error returned by the native Windows sockets operation.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SocketErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</source>
					<target>An app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SocketErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226842)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br226923)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>An error encountered on a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageWebSocket</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamWebSocket</pc></pc> operation is returned as an <pc dataRefEnd="id10" dataRefStart="id9" id="p5">HRESULT</pc> value.</source>
					<target>An error encountered on a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageWebSocket</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StreamWebSocket</pc></pc> operation is returned as an <pc dataRefEnd="id10" dataRefStart="id9" id="p5">HRESULT</pc> value.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701529)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh747818)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WebSocketError.GetStatus</pc></pc> method is used to convert a network error from a WebSocket operation to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WebErrorStatus</pc></pc> enumeration value.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WebSocketError.GetStatus</pc></pc> method is used to convert a network error from a WebSocket operation to a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WebErrorStatus</pc></pc> enumeration value.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebErrorStatus</pc> enumeration values correspond to an error returned by the native HTTP client operation.</source>
					<target>Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebErrorStatus</pc> enumeration values correspond to an error returned by the native HTTP client operation.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</source>
					<target>An app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WebErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For parameter validation errors, an app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> from the exception to learn more detailed information on the error that caused the exception.</source>
					<target>For parameter validation errors, an app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> from the exception to learn more detailed information on the error that caused the exception.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>Possible <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> values are listed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Winerror.h</pc> header file.</source>
					<target>Possible <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> values are listed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Winerror.h</pc> header file.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For most parameter validation errors, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> returned is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">E\_INVALIDARG</pc>.</source>
					<target>For most parameter validation errors, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HRESULT</pc> returned is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">E\_INVALIDARG</pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>The Winsock API</source>
					<target>The Winsock API</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ms740673)</data>
				</originalData>
				<segment state="initial">
					<source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Winsock</pc> in your UWP app, as well.</source>
					<target>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Winsock</pc> in your UWP app, as well.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>The supported Winsock API is based on that of Windows Phone 8.1Microsoft Silverlight and continues to support most of the types, properties and methods (some APIs that are considered obsolete have been removed).</source>
					<target>The supported Winsock API is based on that of Windows Phone 8.1Microsoft Silverlight and continues to support most of the types, properties and methods (some APIs that are considered obsolete have been removed).</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ms740673)</data>
				</originalData>
				<segment state="initial">
					<source>You can find more information on Winsock programming <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</source>
					<target>You can find more information on Winsock programming <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>