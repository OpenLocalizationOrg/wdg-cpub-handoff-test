<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">baa569843ced7cc52717a29d8aa24e3674645f0d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\simple-port-from-direct3d-9-to-11-1-part-1--initializing-direct3d.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">fc64d457d3d0ec570952b0761825dc1578c65220</mda:meta><mda:meta type="olxliffhash">e32b2f262dbe04adaca5e4c1960d6b5bf6ceddb7</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Initialize Direct3D 11</source>
					<target>Initialize Direct3D 11</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</source>
					<target>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Initialize Direct3D 11</source>
					<target>Initialize Direct3D 11</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Summary</source>
					<target>Summary</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Part 1: Initialize Direct3D 11</source>
					<target>Part 1: Initialize Direct3D 11</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Part 2: Convert the rendering framework</source>
					<target>Part 2: Convert the rendering framework</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Part 3: Port the game loop</source>
					<target>Part 3: Port the game loop</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</source>
					<target>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](walkthrough--simple-port-from-direct3d-9-to-11-1.md)</data>
				</originalData>
				<segment state="initial">
					<source>Part 1 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)</pc> walkthrough.</source>
					<target>Part 1 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)</pc> walkthrough.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Initialize the Direct3D device</source>
					<target>Initialize the Direct3D device</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174313)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In Direct3D 9, we created a handle to the Direct3D device by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDirect3D9::CreateDevice</pc></pc>.</source>
					<target>In Direct3D 9, we created a handle to the Direct3D device by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDirect3D9::CreateDevice</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174300)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We started by getting a pointer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDirect3D9 interface</pc></pc> and we specified a number of parameters to control the configuration of the Direct3D device and the swap chain.</source>
					<target>We started by getting a pointer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDirect3D9 interface</pc></pc> and we specified a number of parameters to control the configuration of the Direct3D device and the swap chain.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/dd144877)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Before doing this we called <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetDeviceCaps</pc></pc> to make sure we weren't asking the device to do something it couldn't do.</source>
					<target>Before doing this we called <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetDeviceCaps</pc></pc> to make sure we weren't asking the device to do something it couldn't do.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Direct3D 9</source>
					<target>Direct3D 9</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>In Direct3D 11, the device context and graphics infrastructure is considered separate from the device itself.</source>
					<target>In Direct3D 11, the device context and graphics infrastructure is considered separate from the device itself.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Initialization is divided into multiple steps.</source>
					<target>Initialization is divided into multiple steps.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>First we create the device.</source>
					<target>First we create the device.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>We get a list of the feature levels the device supports - this informs most of what we need to know about the GPU.</source>
					<target>We get a list of the feature levels the device supports - this informs most of what we need to know about the GPU.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Also, we don't need to create an interface just to access Direct3D.</source>
					<target>Also, we don't need to create an interface just to access Direct3D.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Instead we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11CreateDevice</pc></pc> core API.</source>
					<target>Instead we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11CreateDevice</pc></pc> core API.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>This gives us a handle to the device and the device's immediate context.</source>
					<target>This gives us a handle to the device and the device's immediate context.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The device context is used to set pipeline state and generate rendering commands.</source>
					<target>The device context is used to set pipeline state and generate rendering commands.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>After creating the Direct3D 11 device and context, we can take advantage of COM pointer functionality to get the most recent version of the interfaces, which include additional capability and are always recommended.</source>
					<target>After creating the Direct3D 11 device and context, we can take advantage of COM pointer functionality to get the most recent version of the interfaces, which include additional capability and are always recommended.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   D3D\_FEATURE\_LEVEL\_9\_1 (which corresponds to shader model 2.0) is the minimum level your Windows Store game is required to support.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   D3D\_FEATURE\_LEVEL\_9\_1 (which corresponds to shader model 2.0) is the minimum level your Windows Store game is required to support.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>(Your game's ARM packages will fail certification if you don't support 9\_1.) If your game also includes a rendering path for shader model 3 features, then you should include D3D\_FEATURE\_LEVEL\_9\_3 in the array.</source>
					<target>(Your game's ARM packages will fail certification if you don't support 9\_1.) If your game also includes a rendering path for shader model 3 features, then you should include D3D\_FEATURE\_LEVEL\_9\_3 in the array.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Create a swap chain</source>
					<target>Create a swap chain</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Direct3D 11 includes a device API called DirectX graphics infrastructure (DXGI).</source>
					<target>Direct3D 11 includes a device API called DirectX graphics infrastructure (DXGI).</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The DXGI interface allows us to (for example) control how the swap chain is configured and set up shared devices.</source>
					<target>The DXGI interface allows us to (for example) control how the swap chain is configured and set up shared devices.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>At this step in initializing Direct3D, we're going to use DXGI to create a swap chain.</source>
					<target>At this step in initializing Direct3D, we're going to use DXGI to create a swap chain.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Since we created the device, we can follow an interface chain back to the DXGI adapter.</source>
					<target>Since we created the device, we can follow an interface chain back to the DXGI adapter.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>The Direct3D device implements a COM interface for DXGI.</source>
					<target>The Direct3D device implements a COM interface for DXGI.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>First we need to get that interface and use it to request the DXGI adapter hosting the device.</source>
					<target>First we need to get that interface and use it to request the DXGI adapter hosting the device.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Then we use the DXGI adapter to create a DXGI factory.</source>
					<target>Then we use the DXGI adapter to create a DXGI factory.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ms682521)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   These are COM interfaces so your first response might be to use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">QueryInterface</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   These are COM interfaces so your first response might be to use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">QueryInterface</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft::WRL::ComPtr</pc></pc> smart pointers instead.</source>
					<target>You should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft::WRL::ComPtr</pc></pc> smart pointers instead.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230426.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Then just call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">As()</pc></pc> method, supplying an empty COM pointer of the correct interface type.</source>
					<target>Then just call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">As()</pc></pc> method, supplying an empty COM pointer of the correct interface type.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Now that we have the DXGI factory, we can use it to create the swap chain.</source>
					<target>Now that we have the DXGI factory, we can use it to create the swap chain.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Let's define the swap chain parameters.</source>
					<target>Let's define the swap chain parameters.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb173059)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We need to specify the surface format; we'll choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc> because it's compatible with Direct2D.</source>
					<target>We need to specify the surface format; we'll choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc> because it's compatible with Direct2D.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>We'll turn off display scaling, multisampling, and stereo rendering because they aren't used in this example.</source>
					<target>We'll turn off display scaling, multisampling, and stereo rendering because they aren't used in this example.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Since we are running directly in a CoreWindow we can leave the width and height set to 0 and get full-screen values automatically.</source>
					<target>Since we are running directly in a CoreWindow we can leave the width and height set to 0 and get full-screen values automatically.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Always set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SDKVersion</pc> parameter to D3D11\_SDK\_VERSION for UWP apps.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Always set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SDKVersion</pc> parameter to D3D11\_SDK\_VERSION for UWP apps.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb173077)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To ensure we aren't rendering more often than the screen can actually display, we set frame latency to 1 and use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL</pc></pc>.</source>
					<target>To ensure we aren't rendering more often than the screen can actually display, we set frame latency to 1 and use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>This saves power and is a store certification requirement; we'll learn more about presenting to the screen in part 2 of this walkthrough.</source>
					<target>This saves power and is a store certification requirement; we'll learn more about presenting to the screen in part 2 of this walkthrough.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br229642)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can use multithreading (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> work items) to continue other work while the rendering thread is blocked.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   You can use multithreading (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThreadPool</pc></pc> work items) to continue other work while the rendering thread is blocked.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Now we can set up the back buffer for rendering.</source>
					<target>Now we can set up the back buffer for rendering.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Configure the back buffer as a render target</source>
					<target>Configure the back buffer as a render target</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>First we have to get a handle to the back buffer.</source>
					<target>First we have to get a handle to the back buffer.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>(Note that the back buffer is owned by the DXGI swap chain, whereas in DirectX 9 it was owned by the Direct3D device.) Then we tell the Direct3D device to use it as the render target by creating a render target <pc dataRefEnd="id2" dataRefStart="id1" id="p1">view</pc> using the back buffer.</source>
					<target>(Note that the back buffer is owned by the DXGI swap chain, whereas in DirectX 9 it was owned by the Direct3D device.) Then we tell the Direct3D device to use it as the render target by creating a render target <pc dataRefEnd="id2" dataRefStart="id1" id="p1">view</pc> using the back buffer.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Now the device context comes into play.</source>
					<target>Now the device context comes into play.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>We tell Direct3D to use our newly-created render target view by using the device context interface.</source>
					<target>We tell Direct3D to use our newly-created render target view by using the device context interface.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>We'll retrieve the width and height of the back buffer so that we can target the whole window as our viewport.</source>
					<target>We'll retrieve the width and height of the back buffer so that we can target the whole window as our viewport.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Note that the back buffer is attached to the swap chain, so if the window size changes (for example, the user drags the game window to another monitor) the back buffer will need to be resized and some setup will need to be redone.</source>
					<target>Note that the back buffer is attached to the swap chain, so if the window size changes (for example, the user drags the game window to another monitor) the back buffer will need to be resized and some setup will need to be redone.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Now that we have a device handle and a full-screen render target, we are ready to load and draw geometry.</source>
					<target>Now that we have a device handle and a full-screen render target, we are ready to load and draw geometry.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](simple-port-from-direct3d-9-to-11-1-part-2--rendering.md)</data>
				</originalData>
				<segment state="initial">
					<source>Continue to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Part 2: Rendering</pc>.</source>
					<target>Continue to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Part 2: Rendering</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>