<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">afbaa1ee795a124f7e99da68fbef8c801d83f685</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\port-the-glsl.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">dfb68224adfc1f0514e4637c209ee97c07723677</mda:meta><mda:meta type="olxliffhash">f3e07ff021532d7cfa9390f3be4c634d70c77c74</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Port the GLSL</source>
					<target>Port the GLSL</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</source>
					<target>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Port the GLSL</source>
					<target>Port the GLSL</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>HLSL Semantics</source>
					<target>HLSL Semantics</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Shader Constants (HLSL)</source>
					<target>Shader Constants (HLSL)</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</source>
					<target>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In OpenGL ES 2.0, shaders return data after execution using intrinsics such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">gl\_Position</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">gl\_FragColor</pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">gl\_FragData\[n\]</pc> (where n is the index for a specific render target).</source>
					<target>In OpenGL ES 2.0, shaders return data after execution using intrinsics such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">gl\_Position</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">gl\_FragColor</pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">gl\_FragData\[n\]</pc> (where n is the index for a specific render target).</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>In Direct3D, there are no specific intrinsics, and the shaders return data as the return type of their respective main() functions.</source>
					<target>In Direct3D, there are no specific intrinsics, and the shaders return data as the return type of their respective main() functions.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Data that you want interpolated between shader stages, such as the vertex position or normal, is handled through the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">varying</pc> declaration.</source>
					<target>Data that you want interpolated between shader stages, such as the vertex position or normal, is handled through the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">varying</pc> declaration.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205574)</data>
				</originalData>
				<segment state="initial">
					<source>However, Direct3D doesn't have this declaration; rather, any data that you want passed between shader stages must be marked with an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL semantic</pc>.</source>
					<target>However, Direct3D doesn't have this declaration; rather, any data that you want passed between shader stages must be marked with an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL semantic</pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The specific semantic chosen indicates the purpose of the data, and is.</source>
					<target>The specific semantic chosen indicates the purpose of the data, and is.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>For example, you'd declare vertex data that you want interpolated between the fragment shader as:</source>
					<target>For example, you'd declare vertex data that you want interpolated between the fragment shader as:</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>or</source>
					<target>or</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Where POSITION is the semantic used to indicate vertex position data.</source>
					<target>Where POSITION is the semantic used to indicate vertex position data.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>POSITION is also a special case, since after interpolation, it cannot be accessed by the pixel shader.</source>
					<target>POSITION is also a special case, since after interpolation, it cannot be accessed by the pixel shader.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Therefore, you must specify input to the pixel shader with SV\_POSITION and the interpolated vertex data will be placed in that variable.</source>
					<target>Therefore, you must specify input to the pixel shader with SV\_POSITION and the interpolated vertex data will be placed in that variable.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Semantics can be declared on the body (main) methods of shaders.</source>
					<target>Semantics can be declared on the body (main) methods of shaders.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>For pixel shaders, SV\_TARGET\[n\], which indicates a render target, is required on the body method.</source>
					<target>For pixel shaders, SV\_TARGET\[n\], which indicates a render target, is required on the body method.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>(SV\_TARGET without a numeric suffix defaults to render target index 0.)</source>
					<target>(SV\_TARGET without a numeric suffix defaults to render target index 0.)</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Also note that vertex shaders are required to output the SV\_POSITION system value semantic.</source>
					<target>Also note that vertex shaders are required to output the SV\_POSITION system value semantic.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>This semantic resolves the vertex position data to coordinate values where x is between -1 and 1, y is between -1 and 1, z is divided by the original homogeneous coordinate w value (z/w), and w is 1 divided by the original w value (1/w).</source>
					<target>This semantic resolves the vertex position data to coordinate values where x is between -1 and 1, y is between -1 and 1, z is divided by the original homogeneous coordinate w value (z/w), and w is 1 divided by the original w value (1/w).</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Pixel shaders use the SV\_POSITION system value semantic to retrieve the pixel location on the screen, where x is between 0 and the render target width and y is between 0 and the render target height (each offset by 0.5).</source>
					<target>Pixel shaders use the SV\_POSITION system value semantic to retrieve the pixel location on the screen, where x is between 0 and the render target width and y is between 0 and the render target height (each offset by 0.5).</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Feature level 9\_x pixel shaders cannot read from the SV\_POSITION value.</source>
					<target>Feature level 9\_x pixel shaders cannot read from the SV\_POSITION value.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Constant buffers must be declared with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cbuffer</pc> and be associated with a specific starting register for lookup.</source>
					<target>Constant buffers must be declared with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">cbuffer</pc> and be associated with a specific starting register for lookup.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Direct3D 11: An HLSL constant buffer declaration</source>
					<target>Direct3D 11: An HLSL constant buffer declaration</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Here, the constant buffer uses register b0 to hold the packed buffer.</source>
					<target>Here, the constant buffer uses register b0 to hold the packed buffer.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>All registers are referred to in the form b\#.</source>
					<target>All registers are referred to in the form b\#.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb509581)</data>
				</originalData>
				<segment state="initial">
					<source>For more information on the HLSL implementation of constant buffers, registers, and data packing, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Shader Constants (HLSL)</pc>.</source>
					<target>For more information on the HLSL implementation of constant buffers, registers, and data packing, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Shader Constants (HLSL)</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Instructions</source>
					<target>Instructions</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Step 1: Port the vertex shader</source>
					<target>Step 1: Port the vertex shader</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>In our simple OpenGL ES 2.0 example, the vertex shader has three inputs: a constant model-view-projection 4x4 matrix, and two 4-coordinate vectors.</source>
					<target>In our simple OpenGL ES 2.0 example, the vertex shader has three inputs: a constant model-view-projection 4x4 matrix, and two 4-coordinate vectors.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>These two vectors contain the vertex position and its color.</source>
					<target>These two vectors contain the vertex position and its color.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>The shader transforms the position vector to perspective coordinates and assigns it to the gl\_Position intrinsic for rasterization.</source>
					<target>The shader transforms the position vector to perspective coordinates and assigns it to the gl\_Position intrinsic for rasterization.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The vertex color is copied to a varying variable for interpolation during rasterization, as well.</source>
					<target>The vertex color is copied to a varying variable for interpolation during rasterization, as well.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>OpenGL ES 2.0: Vertex shader for the cube object (GLSL)</source>
					<target>OpenGL ES 2.0: Vertex shader for the cube object (GLSL)</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Now, in Direct3D, the constant model-view-projection matrix is contained in a constant buffer packed at register b0, and the vertex position and color are specifically marked with the appropriate respective HLSL semantics: POSITION and COLOR.</source>
					<target>Now, in Direct3D, the constant model-view-projection matrix is contained in a constant buffer packed at register b0, and the vertex position and color are specifically marked with the appropriate respective HLSL semantics: POSITION and COLOR.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Since our input layout indicates a specific arrangement of these two vertex values, you create a struct to hold them and declare it as the type for the input parameter on the shader body function (main).</source>
					<target>Since our input layout indicates a specific arrangement of these two vertex values, you create a struct to hold them and declare it as the type for the input parameter on the shader body function (main).</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>(You could also specify them as two individual parameters, but that could get cumbersome.) You also specify an output type for this stage, which contains the interpolated position and color, and declare it as the return value for the body function of the vertex shader.</source>
					<target>(You could also specify them as two individual parameters, but that could get cumbersome.) You also specify an output type for this stage, which contains the interpolated position and color, and declare it as the return value for the body function of the vertex shader.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Direct3D 11: Vertex shader for the cube object (HLSL)</source>
					<target>Direct3D 11: Vertex shader for the cube object (HLSL)</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>The output data type, PixelShaderInput, is populated during rasterization and provided to the fragment (pixel) shader.</source>
					<target>The output data type, PixelShaderInput, is populated during rasterization and provided to the fragment (pixel) shader.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Step 2: Port the fragment shader</source>
					<target>Step 2: Port the fragment shader</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Our example fragment shader in GLSL is extremely simple: provide the gl\_FragColor intrinsic with the interpolated color value.</source>
					<target>Our example fragment shader in GLSL is extremely simple: provide the gl\_FragColor intrinsic with the interpolated color value.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>OpenGL ES 2.0 will write it to the default render target.</source>
					<target>OpenGL ES 2.0 will write it to the default render target.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>OpenGL ES 2.0: Fragment shader for the cube object (GLSL)</source>
					<target>OpenGL ES 2.0: Fragment shader for the cube object (GLSL)</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Direct3D is almost as simple.</source>
					<target>Direct3D is almost as simple.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>The only significant difference is that the body function of the pixel shader must return a value.</source>
					<target>The only significant difference is that the body function of the pixel shader must return a value.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Since the color is a 4-coordinate (RGBA) float value, you indicate float4 as the return type, and then specify the default render target as the SV\_TARGET system value semantic.</source>
					<target>Since the color is a 4-coordinate (RGBA) float value, you indicate float4 as the return type, and then specify the default render target as the SV\_TARGET system value semantic.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Direct3D 11: Pixel shader for the cube object (HLSL)</source>
					<target>Direct3D 11: Pixel shader for the cube object (HLSL)</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>The color for the pixel at the position is written to the render target.</source>
					<target>The color for the pixel at the position is written to the render target.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](draw-to-the-screen.md)</data>
				</originalData>
				<segment state="initial">
					<source>Now, let's see how to display the contents of that render target in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Draw to the screen</pc>!</source>
					<target>Now, let's see how to display the contents of that render target in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Draw to the screen</pc>!</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Previous step</source>
					<target>Previous step</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](port-the-vertex-buffers-and-data-config.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port the vertex buffers and data</pc> Next step</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port the vertex buffers and data</pc> Next step</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](draw-to-the-screen.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Draw to the screen</pc> Remarks</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Draw to the screen</pc> Remarks</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Understanding HLSL semantics and the packing of constant buffers can save you a bit of a debugging headache, as well as provide optimization opportunities.</source>
					<target>Understanding HLSL semantics and the packing of constant buffers can save you a bit of a debugging headache, as well as provide optimization opportunities.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb509706)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476896)</data>
				</originalData>
				<segment state="initial">
					<source>If you get a chance, read through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Variable Syntax (HLSL)</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Introduction to Buffers in Direct3D 11</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">How to: Create a Constant Buffer</pc>.</source>
					<target>If you get a chance, read through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Variable Syntax (HLSL)</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Introduction to Buffers in Direct3D 11</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">How to: Create a Constant Buffer</pc>.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>If not, though, here's a few starting tips to keep in mind about semantics and constant buffers:</source>
					<target>If not, though, here's a few starting tips to keep in mind about semantics and constant buffers:</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Always double check your renderer's Direct3D configuration code to make sure that the structures for your constant buffers match the cbuffer struct declarations in your HLSL, and that the component scalar types match across both declarations.</source>
					<target>Always double check your renderer's Direct3D configuration code to make sure that the structures for your constant buffers match the cbuffer struct declarations in your HLSL, and that the component scalar types match across both declarations.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh437833)</data>
				</originalData>
				<segment state="initial">
					<source>In your renderer's C++ code, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXMath</pc> types in your constant buffer declarations to ensure proper data packing.</source>
					<target>In your renderer's C++ code, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXMath</pc> types in your constant buffer declarations to ensure proper data packing.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>The best way to efficiently use constant buffers is to organize shader variables into constant buffers based on their frequency of update.</source>
					<target>The best way to efficiently use constant buffers is to organize shader variables into constant buffers based on their frequency of update.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>For example, if you have some uniform data that is updated once per frame, and other uniform data that is updated only when the camera moves, consider separating that data into two separate constant buffers.</source>
					<target>For example, if you have some uniform data that is updated once per frame, and other uniform data that is updated only when the camera moves, consider separating that data into two separate constant buffers.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Semantics that you have forgotten to apply or which you have applied incorrectly will be your earliest source of shader compilation (FXC) errors.</source>
					<target>Semantics that you have forgotten to apply or which you have applied incorrectly will be your earliest source of shader compilation (FXC) errors.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Double-check them!</source>
					<target>Double-check them!</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>The docs can be a bit confusing, as many older pages and samples refer to different versions of HLSL semantics prior to Direct3D 11.</source>
					<target>The docs can be a bit confusing, as many older pages and samples refer to different versions of HLSL semantics prior to Direct3D 11.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Make sure you know which Direct3D feature level you are targeting for each shader.</source>
					<target>Make sure you know which Direct3D feature level you are targeting for each shader.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The semantics for feature level 9\_\* are different from those for 11\_1.</source>
					<target>The semantics for feature level 9\_\* are different from those for 11\_1.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>The SV\_POSITION semantic resolves the associated post-interpolation position data to coordinate values where x is between 0 and the render target width, y is between 0 and the render target height, z is divided by the original homogeneous coordinate w value (z/w), and w is 1 divided by the original w value (1/w).</source>
					<target>The SV\_POSITION semantic resolves the associated post-interpolation position data to coordinate values where x is between 0 and the render target width, y is between 0 and the render target height, z is divided by the original homogeneous coordinate w value (z/w), and w is 1 divided by the original w value (1/w).</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
					<target>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Port the shader objects</source>
					<target>Port the shader objects</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Port the vertex buffers and data</source>
					<target>Port the vertex buffers and data</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Draw to the screen</source>
					<target>Draw to the screen</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>