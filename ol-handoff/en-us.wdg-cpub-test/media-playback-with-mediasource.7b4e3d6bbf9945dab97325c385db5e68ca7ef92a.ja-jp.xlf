<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">d1d2ed10c7b8654a95d4cc19ea22fce737ca11cc</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\audio-video-camera\media-playback-with-mediasource.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">84297e6d484d1772ff5a852f26de9359ff0c0571</mda:meta><mda:meta type="olxliffhash">7cc827dd1889697117fce75dc84b057495a59475</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The MediaSource class provides a common way to reference and play back media from different sources such as local or remote files and exposes a common model for accessing media data, regardless of the underlying media format.</source>
					<target>The MediaSource class provides a common way to reference and play back media from different sources such as local or remote files and exposes a common model for accessing media data, regardless of the underlying media format.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Media playback with MediaSource</source>
					<target>Media playback with MediaSource</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Media playback with MediaSource</source>
					<target>Media playback with MediaSource</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
					<target>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
					<target>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930905)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc></pc> class provides a common way to reference and play back media from different sources such as local or remote files and exposes a common model for accessing media data, regardless of the underlying media format.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc></pc> class provides a common way to reference and play back media from different sources such as local or remote files and exposes a common model for accessing media data, regardless of the underlying media format.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930939)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc></pc> class extends the functionality of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaSource</pc>, allowing you to manage and select from multiple audio, video, and metadata tracks contained in a media item.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc></pc> class extends the functionality of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaSource</pc>, allowing you to manage and select from multiple audio, video, and metadata tracks contained in a media item.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930955)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> allows you to create playback lists from one or more media playback items.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> allows you to create playback lists from one or more media playback items.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620020&amp;clcid=0x409)</data>
				</originalData>
				<segment state="initial">
					<source>The code in this article was adapted from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Video Playback SDK</pc> sample.</source>
					<target>The code in this article was adapted from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Video Playback SDK</pc> sample.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You can download this sample to see the code used in context or to use as a starting point for your own app.</source>
					<target>You can download this sample to see the code used in context or to use as a starting point for your own app.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Create and play a MediaSource</source>
					<target>Create and play a MediaSource</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> by calling one of the factory methods exposed by the class:</source>
					<target>Create a new instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> by calling one of the factory methods exposed by the class:</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>CreateFromAdaptiveMediaSource</source>
					<target>CreateFromAdaptiveMediaSource</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>CreateFromIMediaSource</source>
					<target>CreateFromIMediaSource</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>CreateFromMediaStreamSource</source>
					<target>CreateFromMediaStreamSource</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>CreateFromMseStreamSource</source>
					<target>CreateFromMseStreamSource</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>CreateFromStorageFile</source>
					<target>CreateFromStorageFile</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>CreateFromStream</source>
					<target>CreateFromStream</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>CreateFromStreamReference</source>
					<target>CreateFromStreamReference</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>CreateFromUri</source>
					<target>CreateFromUri</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242926)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn899085)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/dn652535)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/dn987010)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>After creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> you can play the source directly with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc></pc>, by calling <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SetPlaybackSource</pc></pc>, or with a <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">MediaPlayer</pc></pc>, by setting the <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Source</pc></pc> property.</source>
					<target>After creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> you can play the source directly with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc></pc>, by calling <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SetPlaybackSource</pc></pc>, or with a <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">MediaPlayer</pc></pc>, by setting the <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Source</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The following example shows how to play back a user-selected media file in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc>.</source>
					<target>The following example shows how to play back a user-selected media file in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn278962)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn640562)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You will need to include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Core</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Media.Playback</pc></pc> namespaces in order to complete this scenario.</source>
					<target>You will need to include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Core</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Media.Playback</pc></pc> namespaces in order to complete this scenario.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Using</source>
					<target>Using</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Declare a variable of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc>.</source>
					<target>Declare a variable of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>For the examples in this article, the media source is declared as a class member so that it can be accessed from multiple locations.</source>
					<target>For the examples in this article, the media source is declared as a class member so that it can be accessed from multiple locations.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>DeclareMediaSource</source>
					<target>DeclareMediaSource</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207847)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To allow the user to pick a media file to play, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc>.</source>
					<target>To allow the user to pick a media file to play, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/jj635275)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn930909)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>With the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> object returned from the picker's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PickSingleFileAsync</pc></pc> method, initialize a new MediaObject by calling <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaSource.CreateFromStorageFile</pc></pc>.</source>
					<target>With the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> object returned from the picker's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PickSingleFileAsync</pc></pc> method, initialize a new MediaObject by calling <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaSource.CreateFromStorageFile</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn899085)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, set the media source as the playback source for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> by calling the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetPlaybackSource</pc></pc> method.</source>
					<target>Finally, set the media source as the playback source for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> by calling the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetPlaybackSource</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>PlayMediaSource</source>
					<target>PlayMediaSource</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Handle multiple audio, video, and metadata tracks with MediaPlaybackItem</source>
					<target>Handle multiple audio, video, and metadata tracks with MediaPlaybackItem</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930905)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930939)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc></pc> for playback is convenient because it provides a common way to playback media from different kinds of sources, but more advanced behavior can be accessed by using a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaPlaybackItem</pc></pc>.</source>
					<target>Using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc></pc> for playback is convenient because it provides a common way to playback media from different kinds of sources, but more advanced behavior can be accessed by using a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaPlaybackItem</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>This includes the ability to access and manage multiple audio, video, and data tracks for a media item.</source>
					<target>This includes the ability to access and manage multiple audio, video, and data tracks for a media item.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Declare a variable to store your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc>.</source>
					<target>Declare a variable to store your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>DeclareMediaPlaybackItem</source>
					<target>DeclareMediaPlaybackItem</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> by calling the constructor and passing in an initialized <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> object.</source>
					<target>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> by calling the constructor and passing in an initialized <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> object.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930948)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930954)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn930952)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>If your app supports multiple audio, video, or data tracks in a media playback item, register event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioTracksChanged</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VideoTracksChanged</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TimedMetadataTracksChanged</pc></pc> events.</source>
					<target>If your app supports multiple audio, video, or data tracks in a media playback item, register event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioTracksChanged</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VideoTracksChanged</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TimedMetadataTracksChanged</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, set the playback source of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> to your <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc>.</source>
					<target>Finally, set the playback source of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> to your <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>PlayMediaPlaybackItem</source>
					<target>PlayMediaPlaybackItem</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> can only be associated with a single <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc>.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> can only be associated with a single <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc>.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>After creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> from a source, attempting to create another playback item from the same source will result in an error.</source>
					<target>After creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> from a source, attempting to create another playback item from the same source will result in an error.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Also, after creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> from a media source, you can't set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> object directly as the source for a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaPlayer</pc> but should instead use the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlaybackItem</pc>.</source>
					<target>Also, after creating a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> from a media source, you can't set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> object directly as the source for a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaPlayer</pc> but should instead use the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlaybackItem</pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930954)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VideoTracksChanged</pc></pc> event is raised after a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc> containing multiple video tracks is assigned as a playback source, and can be raised again if the list of video tracks changes for the item changes.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VideoTracksChanged</pc></pc> event is raised after a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc> containing multiple video tracks is assigned as a playback source, and can be raised again if the list of video tracks changes for the item changes.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>The handler for this event gives you the opportunity to update your UI to allow the user to switch between available tracks.</source>
					<target>The handler for this event gives you the opportunity to update your UI to allow the user to switch between available tracks.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209348)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example uses a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComboBox</pc></pc> to display the available video tracks.</source>
					<target>This example uses a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComboBox</pc></pc> to display the available video tracks.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>VideoComboBox</source>
					<target>VideoComboBox</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn930953)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VideoTracksChanged</pc> handler, loop through all of the tracks in the playback item's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VideoTracks</pc></pc> list.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VideoTracksChanged</pc> handler, loop through all of the tracks in the playback item's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VideoTracks</pc></pc> list.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209349)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For each track, a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComboBoxItem</pc></pc> is created.</source>
					<target>For each track, a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComboBoxItem</pc></pc> is created.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If the track does not already have a label, a label is generated from the track index.</source>
					<target>If the track does not already have a label, a label is generated from the track index.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208745)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag</pc></pc> property of the combo box item is set to the track index so that it can be identified later.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag</pc></pc> property of the combo box item is set to the track index so that it can be identified later.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Finally, the item is added to the combo box.</source>
					<target>Finally, the item is added to the combo box.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that these operations are performed within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> call because all UI changes must be made on the UI thread and this event is raised on a different thread.</source>
					<target>Note that these operations are performed within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> call because all UI changes must be made on the UI thread and this event is raised on a different thread.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>VideoTracksChanged</source>
					<target>VideoTracksChanged</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209776)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> handler for the combo box, the track index is retrieved from the selected item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Tag</pc> property.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> handler for the combo box, the track index is retrieved from the selected item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Tag</pc> property.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956634)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930953)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property of the media playback item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VideoTracks</pc></pc> list causes the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaElement</pc> or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaPlayer</pc> to switch the active video track to the specified index.</source>
					<target>Setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property of the media playback item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VideoTracks</pc></pc> list causes the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaElement</pc> or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaPlayer</pc> to switch the active video track to the specified index.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>VideoTracksSelectionChanged</source>
					<target>VideoTracksSelectionChanged</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Managing media items with multiple audio tracks works exactly the same as with video tracks.</source>
					<target>Managing media items with multiple audio tracks works exactly the same as with video tracks.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930948)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930947)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioTracksChanged</pc></pc> to update your UI with the audio tracks found in the playback item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioTracks</pc></pc> list.</source>
					<target>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioTracksChanged</pc></pc> to update your UI with the audio tracks found in the playback item's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioTracks</pc></pc> list.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930937)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>When the user selects an audio track, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioTracks</pc> list to cause the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaElement</pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer</pc> to switch the active audio track to the specified index.</source>
					<target>When the user selects an audio track, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedIndex</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioTracks</pc> list to cause the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaElement</pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer</pc> to switch the active audio track to the specified index.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>AudioComboBox</source>
					<target>AudioComboBox</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>AudioTracksChanged</source>
					<target>AudioTracksChanged</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>AudioTracksSelectionChanged</source>
					<target>AudioTracksSelectionChanged</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn956580)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In addition to audio and video, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> object may contain zero or more <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TimedMetadataTrack</pc></pc> objects.</source>
					<target>In addition to audio and video, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> object may contain zero or more <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TimedMetadataTrack</pc></pc> objects.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>A timed metadata track can contain subtitle or caption text, or it may contain custom data that is proprietary to your app.</source>
					<target>A timed metadata track can contain subtitle or caption text, or it may contain custom data that is proprietary to your app.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930899)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930892)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn956655)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>A timed metadata track contains a list of cues represented by objects that inherit from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMediaCue</pc></pc>, such as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataCue</pc></pc> or a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TimedTextCue</pc></pc>.</source>
					<target>A timed metadata track contains a list of cues represented by objects that inherit from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMediaCue</pc></pc>, such as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataCue</pc></pc> or a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TimedTextCue</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Each cue has a start time and a duration that determines when the cue is activated and for how long.</source>
					<target>Each cue has a start time and a duration that determines when the cue is activated and for how long.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930952)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Similar to audio tracks and video tracks, the timed metadata tracks for a media item can be discovered by handling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedMetadataTracksChanged</pc></pc> event of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc>.</source>
					<target>Similar to audio tracks and video tracks, the timed metadata tracks for a media item can be discovered by handling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedMetadataTracksChanged</pc></pc> event of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc>.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>With timed metadata tracks, however, the user may want to enable more than one metadata track at a time.</source>
					<target>With timed metadata tracks, however, the user may want to enable more than one metadata track at a time.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Also, depending on your app scenario, you may want to enable or disable metadata tracks automatically, without user intervention.</source>
					<target>Also, depending on your app scenario, you may want to enable or disable metadata tracks automatically, without user intervention.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209795)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For illustration purposes, this example adds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToggleButton</pc></pc> for each metadata track in a media item to allow the user to enable and disable the track.</source>
					<target>For illustration purposes, this example adds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToggleButton</pc></pc> for each metadata track in a media item to allow the user to enable and disable the track.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tag</pc> property of each button is set to the index of the associated metadata track so that it can be identified when the button is toggled.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tag</pc> property of each button is set to the index of the associated metadata track so that it can be identified when the button is toggled.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>MetaStackPanel</source>
					<target>MetaStackPanel</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>TimedMetadataTrackschanged</source>
					<target>TimedMetadataTrackschanged</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Because more than one metadata track can be active at a time, you don't simply set the active index for the metadata track list.</source>
					<target>Because more than one metadata track can be active at a time, you don't simply set the active index for the metadata track list.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn986977)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn987016)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Instead, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetPresentationMode</pc></pc> method, passing in the index of the track you want to toggle, and then providing a value from the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TimedMetadataTrackPresentationMode</pc></pc> enumeration.</source>
					<target>Instead, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetPresentationMode</pc></pc> method, passing in the index of the track you want to toggle, and then providing a value from the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TimedMetadataTrackPresentationMode</pc></pc> enumeration.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>The presentation mode you choose depends on the implementation of your app.</source>
					<target>The presentation mode you choose depends on the implementation of your app.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, the metadata track is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlatformPresented</pc> when enabled.</source>
					<target>In this example, the metadata track is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlatformPresented</pc> when enabled.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>For text-based tracks, this means that the system will automatically display the text cues in the track.</source>
					<target>For text-based tracks, this means that the system will automatically display the text cues in the track.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When the toggle button is toggled off, the presentation mode is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disabled</pc>, which means that no text is displayed and no cue events are raised.</source>
					<target>When the toggle button is toggled off, the presentation mode is set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disabled</pc>, which means that no text is displayed and no cue events are raised.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Cue events are discussed later in this article.</source>
					<target>Cue events are discussed later in this article.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>ToggleChecked</source>
					<target>ToggleChecked</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>ToggleUnchecked</source>
					<target>ToggleUnchecked</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Add external timed text with TimedTextSource</source>
					<target>Add external timed text with TimedTextSource</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>For some scenarios, you may have external files that contains timed text associated with a media item, such as separate files that contain subtitles for different locales.</source>
					<target>For some scenarios, you may have external files that contains timed text associated with a media item, such as separate files that contain subtitles for different locales.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956679)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource</pc></pc> class to load in external timed text files from a stream or URI.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource</pc></pc> class to load in external timed text files from a stream or URI.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example uses a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc> collection to store a list of the timed text sources for the media item using the source URI and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource</pc> object as the key/value pair in order to identify the tracks after they have been resolved.</source>
					<target>This example uses a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc> collection to store a list of the timed text sources for the media item using the source URI and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource</pc> object as the key/value pair in order to identify the tracks after they have been resolved.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>TimedTextSourceMap</source>
					<target>TimedTextSourceMap</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn708190)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedTextSource</pc> for each external timed text file by calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateFromUri</pc></pc>.</source>
					<target>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedTextSource</pc> for each external timed text file by calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateFromUri</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add an entry to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc> for the timed text source.</source>
					<target>Add an entry to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc> for the timed text source.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn965540)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource.Resolved</pc></pc> event to handle if the item failed to load or to set additional properties after the item was loaded successfully.</source>
					<target>Add a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource.Resolved</pc></pc> event to handle if the item failed to load or to set additional properties after the item was loaded successfully.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930916)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Register all of your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedTextSource</pc> objects with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> by adding them to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExternalTimedTextSources</pc></pc> collection.</source>
					<target>Register all of your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedTextSource</pc> objects with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaSource</pc> by adding them to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExternalTimedTextSources</pc></pc> collection.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that external timed text sources are added to directly the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> and not the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc> created from the source.</source>
					<target>Note that external timed text sources are added to directly the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaSource</pc> and not the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackItem</pc> created from the source.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To update your UI to reflect the external text tracks, register and handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedMetadataTracksChanged</pc> event as described previously in this article.</source>
					<target>To update your UI to reflect the external text tracks, register and handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedMetadataTracksChanged</pc> event as described previously in this article.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>TimedTextSource</source>
					<target>TimedTextSource</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn965540)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn965537)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource.Resolved</pc></pc> event, check the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Error</pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TimedTextSourceResolveResultEventArgs</pc></pc> passed into the handler to determine if an error occurred while trying to load the timed text data.</source>
					<target>In the handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedTextSource.Resolved</pc></pc> event, check the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Error</pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">TimedTextSourceResolveResultEventArgs</pc></pc> passed into the handler to determine if an error occurred while trying to load the timed text data.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>If the item was resolved successfully, you can use this handler to update additional properties of the resolved track.</source>
					<target>If the item was resolved successfully, you can use this handler to update additional properties of the resolved track.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This example adds a label for each track based on the URI previously stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc>.</source>
					<target>This example adds a label for each track based on the URI previously stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary</pc>.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>TimedTextSourceResolved</source>
					<target>TimedTextSourceResolved</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Add additional metadata tracks</source>
					<target>Add additional metadata tracks</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>You can dynamically create custom metadata tracks in code and associate them with a media source.</source>
					<target>You can dynamically create custom metadata tracks in code and associate them with a media source.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>The tracks you create can contain subtitle or caption text, or they can contain your proprietary app data.</source>
					<target>The tracks you create can contain subtitle or caption text, or they can contain your proprietary app data.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956580)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn956578)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedMetadataTrack</pc></pc> by calling the constructor and specifying an ID, the language identifier, and a value from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TimedMetadataKind</pc></pc> enumeration.</source>
					<target>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimedMetadataTrack</pc></pc> by calling the constructor and specifying an ID, the language identifier, and a value from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TimedMetadataKind</pc></pc> enumeration.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956583)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn956584)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Register handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CueEntered</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CueExited</pc></pc> events.</source>
					<target>Register handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CueEntered</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CueExited</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>These events are raised when the start time for a cue has been reached and when the duration for a cue has expired, respectively.</source>
					<target>These events are raised when the start time for a cue has been reached and when the duration for a cue has expired, respectively.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Create a new cue object, appropriate for the type of metadata track you created, and set the ID, start time, and duration for the track.</source>
					<target>Create a new cue object, appropriate for the type of metadata track you created, and set the ID, start time, and duration for the track.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930892)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example creates a data track, so a set of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataCue</pc></pc> objects are generated and a buffer containing app-specific data is provided for each cue.</source>
					<target>This example creates a data track, so a set of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataCue</pc></pc> objects are generated and a buffer containing app-specific data is provided for each cue.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930915)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To register the new track, add it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExternalTimedMetadataTracks</pc></pc> collection of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaSource</pc> object.</source>
					<target>To register the new track, add it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExternalTimedMetadataTracks</pc></pc> collection of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaSource</pc> object.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>AddDataTrack</source>
					<target>AddDataTrack</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CueEntered</pc> event is raised when a cue's start time has been reached as long as the associated track has a presentation mode of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ApplicationPresented</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Hidden</pc>, or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">PlatformPresented.</pc></source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CueEntered</pc> event is raised when a cue's start time has been reached as long as the associated track has a presentation mode of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ApplicationPresented</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Hidden</pc>, or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">PlatformPresented.</pc></target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Cue events are not raised for metadata tracks while the presentation mode for the track is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disabled</pc>.</source>
					<target>Cue events are not raised for metadata tracks while the presentation mode for the track is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disabled</pc>.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>This example simply outputs the custom data associated with the cue to the debug window.</source>
					<target>This example simply outputs the custom data associated with the cue to the debug window.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>DataCueEntered</source>
					<target>DataCueEntered</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn956655)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>This example adds a custom text track by specifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedMetadataKind.Caption</pc> when creating the track and using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TimedTextCue</pc></pc> objects to add cues to the track.</source>
					<target>This example adds a custom text track by specifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimedMetadataKind.Caption</pc> when creating the track and using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TimedTextCue</pc></pc> objects to add cues to the track.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>AddTextTrack</source>
					<target>AddTextTrack</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>TextCueEntered</source>
					<target>TextCueEntered</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Play a list of media items with MediaPlaybackList</source>
					<target>Play a list of media items with MediaPlaybackList</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930955)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> allows you to create a playlist of media items, which are represented by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc> objects.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> allows you to create a playlist of media items, which are represented by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackItem</pc> objects.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn930955)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Items in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackList</pc></pc> are rendered using gapless playback.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Items in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackList</pc></pc> are rendered using gapless playback.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>The system will use provided metadata in MP3 or AAC encoded files to determine the delay or padding compensation needed for gapless playback.</source>
					<target>The system will use provided metadata in MP3 or AAC encoded files to determine the delay or padding compensation needed for gapless playback.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>If the MP3 or AAC encoded files don't provide this metadata, then the system determines the delay or padding heuristically.</source>
					<target>If the MP3 or AAC encoded files don't provide this metadata, then the system determines the delay or padding heuristically.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>For lossless formats, such as PCM, FLAC, or ALAC, the system takes no action because these encoders don't introduce delay or padding.</source>
					<target>For lossless formats, such as PCM, FLAC, or ALAC, the system takes no action because these encoders don't introduce delay or padding.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To get started, declare a variable to store your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc>.</source>
					<target>To get started, declare a variable to store your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc>.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>DeclareMediaPlaybackList</source>
					<target>DeclareMediaPlaybackList</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> for each media item you want to add to your list using the same procedure described previously in this article.</source>
					<target>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackItem</pc> for each media item you want to add to your list using the same procedure described previously in this article.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Initialize your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> object and add the media playback items to it.</source>
					<target>Initialize your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> object and add the media playback items to it.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930957)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentItemChanged</pc></pc> event.</source>
					<target>Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentItemChanged</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>This event allows you to update your UI to reflect the currently playing media item.</source>
					<target>This event allows you to update your UI to reflect the currently playing media item.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, set the playback source of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> to your <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackList</pc>.</source>
					<target>Finally, set the playback source of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> to your <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlaybackList</pc>.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>PlayMediaPlaybackList</source>
					<target>PlayMediaPlaybackList</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn930930)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn930929)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItemChanged</pc> event handler, update your UI to reflect the currently playing item, which can be retrieved using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">NewItem</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">CurrentMediaPlaybackItemChangedEventArgs</pc></pc> object passed into the event.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItemChanged</pc> event handler, update your UI to reflect the currently playing item, which can be retrieved using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">NewItem</pc></pc> property of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">CurrentMediaPlaybackItemChangedEventArgs</pc></pc> object passed into the event.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Remember that if you update the UI from this event, you should do so within a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> so that the updates are made on the UI thread.</source>
					<target>Remember that if you update the UI from this event, you should do so within a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> so that the updates are made on the UI thread.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>MediaPlaybackListItemChanged</source>
					<target>MediaPlaybackListItemChanged</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt146455)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/mt146454)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MovePrevious</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MoveNext</pc></pc> to cause the media player to play the previous or next item in your <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlaybackList</pc>.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MovePrevious</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MoveNext</pc></pc> to cause the media player to play the previous or next item in your <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlaybackList</pc>.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>PrevButton</source>
					<target>PrevButton</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>NextButton</source>
					<target>NextButton</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt146457)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShuffleEnabled</pc></pc> property to specify whether the media player should play the items in your list in random order.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShuffleEnabled</pc></pc> property to specify whether the media player should play the items in your list in random order.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>ShuffleButton</source>
					<target>ShuffleButton</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt146452)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoRepeatEnabled</pc></pc> property to specify whether the media player should loop playback of your list.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoRepeatEnabled</pc></pc> property to specify whether the media player should loop playback of your list.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>RepeatButton</source>
					<target>RepeatButton</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>