<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">7a74240d63fbab318012f01b72495422a1e7aca0</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\getting-started-navigation.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">435ad916a9fa118383ae092016d23c2eb6c224fe</mda:meta><mda:meta type="olxliffhash">f879f79cd5e70c3ef185a2f8204ed82f615d46c8</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Getting started: Navigation</source>
					<target>Getting started: Navigation</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Getting started: Navigation</source>
					<target>Getting started: Navigation</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Getting started: Navigation</source>
					<target>Getting started: Navigation</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Adding navigation</source>
					<target>Adding navigation</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIViewControllers</pc> that define your app.</source>
					<target>iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIViewControllers</pc> that define your app.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</source>
					<target>In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>You can imagine your users hopping from page to page as they click on controls to work their way through the app.</source>
					<target>You can imagine your users hopping from page to page as they click on controls to work their way through the app.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958438)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation design basics</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation design basics</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</source>
					<target>One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>The following walkthrough shows you how to try this out.</source>
					<target>The following walkthrough shows you how to try this out.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design</pc> view.</source>
					<target>Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design</pc> view.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property from "Button" to "Go To Page".</source>
					<target>Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property from "Button" to "Go To Page".</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event, as shown in the following figure.</source>
					<target>Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event, as shown in the following figure.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view).</source>
					<target>If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view).</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>adding a button and its click event in visual studio</source>
					<target>adding a button and its click event in visual studio</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Let's add a new page.</source>
					<target>Let's add a new page.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New Item</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New Item</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc>.</source>
					<target>Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc>.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>adding a new page in visual studio</source>
					<target>adding a new page in visual studio</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Next, add a button to the BlankPage.xaml file.</source>
					<target>Next, add a button to the BlankPage.xaml file.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">` &lt;AppBarButton Icon="Back"/&gt;`</data>
					<data id="id4">`&lt;Grid&gt; &lt;/Grid&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, add <ph dataRef="id3" id="ph1" /> between the <ph dataRef="id4" id="ph2" /> elements.</source>
					<target>Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, add <ph dataRef="id3" id="ph1" /> between the <ph dataRef="id4" id="ph2" /> elements.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</source>
					<target>Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>adding a back button and its click event in visual studio</source>
					<target>adding a back button and its click event in visual studio</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`&lt;AppBarButton&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, the <ph dataRef="id3" id="ph1" /> element's Extensible Application Markup Language (XAML) code should now look like this:</source>
					<target>If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, the <ph dataRef="id3" id="ph1" /> element's Extensible Application Markup Language (XAML) code should now look like this:</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</source>
					<target>Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Finally, open the MainPage.xaml.cs file and add this code.</source>
					<target>Finally, open the MainPage.xaml.cs file and add this code.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>It opens BlankPage after the user taps the button.</source>
					<target>It opens BlankPage after the user taps the button.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Now, run the program.</source>
					<target>Now, run the program.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</source>
					<target>Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</source>
					<target>Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br242694)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/dn996568)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>As the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="p2">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Navigate</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">GoBack</pc></pc> methods.</source>
					<target>As the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="p2">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Navigate</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">GoBack</pc></pc> methods.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242693)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoForward</pc></pc>, which does what you might expect.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoForward</pc></pc>, which does what you might expect.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>This walkthrough creates a new instance of BlankPage each time you navigate to it.</source>
					<target>This walkthrough creates a new instance of BlankPage each time you navigate to it.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">released</pc>, automatically).</source>
					<target>(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">released</pc>, automatically).</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</source>
					<target>If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227506)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationCacheMode</pc></pc> behavior.</source>
					<target>This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationCacheMode</pc></pc> behavior.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242683)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CacheSize</pc></pc> property to manage how many pages in the navigation history can be cached.</source>
					<target>You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CacheSize</pc></pc> property to manage how many pages in the navigation history can be cached.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187344)</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?LinkID=242401)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML personality animations sample</pc>.</source>
					<target>For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML personality animations sample</pc>.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh452768)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Quickstart: Using single-page navigation</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Quickstart: Using single-page navigation</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Next step</source>
					<target>Next step</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Getting started: Animation</source>
					<target>Getting started: Animation</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>