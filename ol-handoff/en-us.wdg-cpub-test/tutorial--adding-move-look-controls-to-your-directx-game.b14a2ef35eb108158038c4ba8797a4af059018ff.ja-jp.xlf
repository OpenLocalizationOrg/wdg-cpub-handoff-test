<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">2bd8b00353a2566a539ecb71e98c09882db49585</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\tutorial--adding-move-look-controls-to-your-directx-game.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">58f6ea8f41c39081f37d3491d46acffc8f41bdaa</mda:meta><mda:meta type="olxliffhash">427912edbc81b35f2a33febbb1b686a35b534893</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Move-look controls for games</source>
					<target>Move-look controls for games</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Learn how to add traditional mouse and keyboard move-look controls (also known as mouselook controls) to your DirectX game.</source>
					<target>Learn how to add traditional mouse and keyboard move-look controls (also known as mouselook controls) to your DirectX game.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Move-look controls for games</source>
					<target>Move-look controls for games</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Learn how to add traditional mouse and keyboard move-look controls (also known as mouselook controls) to your DirectX game.</source>
					<target>Learn how to add traditional mouse and keyboard move-look controls (also known as mouselook controls) to your DirectX game.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>We also discuss move-look support for touch devices, with the move controller defined as the lower-left section of the screen that behaves like a directional input, and the look controller defined for the remainder of the screen, with the camera centering on the last place the player touched in that area.</source>
					<target>We also discuss move-look support for touch devices, with the move controller defined as the lower-left section of the screen that behaves like a directional input, and the look controller defined for the remainder of the screen, with the camera centering on the last place the player touched in that area.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>If this is an unfamiliar control concept to you, think of it this way: the keyboard (or the touch-based directional input box) controls your legs in this 3D space, and behaves as if your legs were only capable of moving forward or backward, or strafing left and right.</source>
					<target>If this is an unfamiliar control concept to you, think of it this way: the keyboard (or the touch-based directional input box) controls your legs in this 3D space, and behaves as if your legs were only capable of moving forward or backward, or strafing left and right.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>The mouse (or touch pointer) controls your head.</source>
					<target>The mouse (or touch pointer) controls your head.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>You use your head to look in a direction -- left or right, up or down, or somewhere in that plane.</source>
					<target>You use your head to look in a direction -- left or right, up or down, or somewhere in that plane.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>If there is a target in your view, you would use the mouse to center your camera view on that target, and then press the forward key to move towards it, or back to move away from it.</source>
					<target>If there is a target in your view, you would use the mouse to center your camera view on that target, and then press the forward key to move towards it, or back to move away from it.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>To circle the target, you would keep the camera view centered on the target, and move left or right at the same time.</source>
					<target>To circle the target, you would keep the camera view centered on the target, and move left or right at the same time.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>You can see how this is a very effective control method for navigating 3D environments!</source>
					<target>You can see how this is a very effective control method for navigating 3D environments!</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>These controls are commonly known as WASD controls in gaming, where the W, A, S, and D keys are used for x-z plane fixed camera movement, and the mouse is used to control camera rotation around the x and y axes.</source>
					<target>These controls are commonly known as WASD controls in gaming, where the W, A, S, and D keys are used for x-z plane fixed camera movement, and the mouse is used to control camera rotation around the x and y axes.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Objectives</source>
					<target>Objectives</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Add basic move-look controls to your DirectX game for both mouse and keyboard, and touch screens.</source>
					<target>Add basic move-look controls to your DirectX game for both mouse and keyboard, and touch screens.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Implement a first-person camera used to navigate a 3D environment.</source>
					<target>Implement a first-person camera used to navigate a 3D environment.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>A note on touch control implementations</source>
					<target>A note on touch control implementations</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>For touch controls, we implement two controllers: the move controller, which handles movement in the x-z plane relative to the camera's look point; and the look controller, which aims the camera's look point.</source>
					<target>For touch controls, we implement two controllers: the move controller, which handles movement in the x-z plane relative to the camera's look point; and the look controller, which aims the camera's look point.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Our move controller maps to the keyboard WASD buttons, and the look controller maps to the mouse.</source>
					<target>Our move controller maps to the keyboard WASD buttons, and the look controller maps to the mouse.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>But for touch controls, we need to define a region of the screen that serves as the directional inputs, or the virtual WASD buttons, with the remainder of the screen serving as the input space for the look controls.</source>
					<target>But for touch controls, we need to define a region of the screen that serves as the directional inputs, or the virtual WASD buttons, with the remainder of the screen serving as the input space for the look controls.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Our screen looks like this.</source>
					<target>Our screen looks like this.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>the move-look controller layout</source>
					<target>the move-look controller layout</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>When you move the touch pointer (not the mouse!) in the lower left of the screen, any movement upwards will make the camera move forward.</source>
					<target>When you move the touch pointer (not the mouse!) in the lower left of the screen, any movement upwards will make the camera move forward.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Any movement downwards will make the camera move backwards.</source>
					<target>Any movement downwards will make the camera move backwards.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>The same holds for left and right movement inside the move controller's pointer space.</source>
					<target>The same holds for left and right movement inside the move controller's pointer space.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Outside of that space, and it becomes a look controller -- you just touch or drag the camera to where you'd like it to face.</source>
					<target>Outside of that space, and it becomes a look controller -- you just touch or drag the camera to where you'd like it to face.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Set up the basic input event infrastructure</source>
					<target>Set up the basic input event infrastructure</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>First, we must create our control class that we use to handle input events from the mouse and keyboard, and update the camera perspective based on that input.</source>
					<target>First, we must create our control class that we use to handle input events from the mouse and keyboard, and update the camera perspective based on that input.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Because we're implementing move-look controls, we call it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc>.</source>
					<target>Because we're implementing move-look controls, we call it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Now, let's create a header that defines the state of the move-look controller and its first-person camera, plus the basic methods and event handlers that implement the controls and that update the state of the camera.</source>
					<target>Now, let's create a header that defines the state of the move-look controller and its first-person camera, plus the basic methods and event handlers that implement the controls and that update the state of the camera.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Our code contains 4 groups of private fields.</source>
					<target>Our code contains 4 groups of private fields.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Let's review the purpose of each one.</source>
					<target>Let's review the purpose of each one.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>First, we define some useful fields that hold our updated info about our camera view.</source>
					<target>First, we define some useful fields that hold our updated info about our camera view.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_position</pc> is the position of the camera (and therefore the viewplane) in the 3D scene, using scene coordinates.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_position</pc> is the position of the camera (and therefore the viewplane) in the 3D scene, using scene coordinates.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_pitch</pc> is the pitch of the camera, or its up-down rotation around the viewplane's x-axis, in radians.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_pitch</pc> is the pitch of the camera, or its up-down rotation around the viewplane's x-axis, in radians.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_yaw</pc> is the yaw of the camera, or its left-right rotation around the viewplane's y-axis, in radians.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_yaw</pc> is the yaw of the camera, or its left-right rotation around the viewplane's y-axis, in radians.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Now, let's define the fields that we use to store info about the status and position of our controllers.</source>
					<target>Now, let's define the fields that we use to store info about the status and position of our controllers.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>First, we'll define the fields we need for our touch-based move controller.</source>
					<target>First, we'll define the fields we need for our touch-based move controller.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>(There's nothing special needed for the keyboard implementation of the move controller.</source>
					<target>(There's nothing special needed for the keyboard implementation of the move controller.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>We just read keyboard events with specific handlers.)</source>
					<target>We just read keyboard events with specific handlers.)</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> indicates whether the move controller is in use.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> indicates whether the move controller is in use.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerID</pc> is the unique ID for the current move pointer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerID</pc> is the unique ID for the current move pointer.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>We use it to differentiate between the look pointer and the move pointer when we check the pointer ID value.</source>
					<target>We use it to differentiate between the look pointer and the move pointer when we check the pointer ID value.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveFirstDown</pc> is the point on the screen where the player first touched the move controller pointer area.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveFirstDown</pc> is the point on the screen where the player first touched the move controller pointer area.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>We use this value later to set a dead zone to keep tiny movements from jittering the view.</source>
					<target>We use this value later to set a dead zone to keep tiny movements from jittering the view.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerPosition</pc> is the point on the screen the player has currently moved the pointer to.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerPosition</pc> is the point on the screen the player has currently moved the pointer to.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We use it to determine what direction the player wanted to move by examining it relative to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveFirstDown</pc>.</source>
					<target>We use it to determine what direction the player wanted to move by examining it relative to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveFirstDown</pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveCommand</pc> is the final computed command for the move controller: up (forward), down (back), left, or right.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveCommand</pc> is the final computed command for the move controller: up (forward), down (back), left, or right.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Now, we define the fields we use for our look controller, both the mouse and touch implementations.</source>
					<target>Now, we define the fields we use for our look controller, both the mouse and touch implementations.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookInUse</pc> indicates whether the look control is in use.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookInUse</pc> indicates whether the look control is in use.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookPointerID</pc> is the unique ID for the current look pointer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookPointerID</pc> is the unique ID for the current look pointer.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>We use it to differentiate between the look pointer and the move pointer when we check the pointer ID value.</source>
					<target>We use it to differentiate between the look pointer and the move pointer when we check the pointer ID value.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastPoint</pc> is the last point, in scene coordinates, that was captured in the previous frame.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastPoint</pc> is the last point, in scene coordinates, that was captured in the previous frame.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastDelta</pc> is the computed difference between the current <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_position</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m\_lookLastPoint</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastDelta</pc> is the computed difference between the current <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_position</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m\_lookLastPoint</pc>.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Finally, we define 6 Boolean values for the 6 degrees of movement, which we use to indicate the current state of each directional move action (on or off):</source>
					<target>Finally, we define 6 Boolean values for the 6 degrees of movement, which we use to indicate the current state of each directional move action (on or off):</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_forward</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_back</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m\_left</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_right</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">m\_up</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6">m\_down</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_forward</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_back</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">m\_left</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_right</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">m\_up</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6">m\_down</pc>.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>We use the 6 event handlers to capture the input data we use to update the state of our controllers:</source>
					<target>We use the 6 event handlers to capture the input data we use to update the state of our controllers:</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc>.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>The player pressed the left mouse button with the pointer in our game screen, or touched the screen.</source>
					<target>The player pressed the left mouse button with the pointer in our game screen, or touched the screen.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>The player moved the mouse with the pointer in our game screen, or dragged the touch pointer on the screen.</source>
					<target>The player moved the mouse with the pointer in our game screen, or dragged the touch pointer on the screen.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>The player released the left mouse button with the pointer in our game screen, or stopped touching the screen.</source>
					<target>The player released the left mouse button with the pointer in our game screen, or stopped touching the screen.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnKeyDown</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnKeyDown</pc>.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>The player pressed a key.</source>
					<target>The player pressed a key.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnKeyUp</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnKeyUp</pc>.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The player released a key.</source>
					<target>The player released a key.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>And finally, we use these methods and properties to initialize, access, and update the controllers' state info.</source>
					<target>And finally, we use these methods and properties to initialize, access, and update the controllers' state info.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc>.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Our app calls this event handler to initialize the controls and attach them to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> object that describes our display window.</source>
					<target>Our app calls this event handler to initialize the controls and attach them to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> object that describes our display window.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc>.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Our app calls this method to set the (x, y, and z) coordinates of our controls in the scene space.</source>
					<target>Our app calls this method to set the (x, y, and z) coordinates of our controls in the scene space.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetOrientation</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetOrientation</pc>.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Our app calls this method to set the pitch and yaw of the camera.</source>
					<target>Our app calls this method to set the pitch and yaw of the camera.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc>.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Our app accesses this property to get the current position of the camera in the scene space.</source>
					<target>Our app accesses this property to get the current position of the camera in the scene space.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>You use this property as the method of communicating the current camera position to the app.</source>
					<target>You use this property as the method of communicating the current camera position to the app.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_LookPoint</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_LookPoint</pc>.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Our app accesses this property to get the current point toward which the controller camera is facing.</source>
					<target>Our app accesses this property to get the current point toward which the controller camera is facing.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Reads the state of the move and look controllers and updates the camera position.</source>
					<target>Reads the state of the move and look controllers and updates the camera position.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>You continually call this method from the app's main loop to refresh the camera controller data and the camera position in the scene space.</source>
					<target>You continually call this method from the app's main loop to refresh the camera controller data and the camera position in the scene space.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Now, you have here all the components you need to implement your move-look controls.</source>
					<target>Now, you have here all the components you need to implement your move-look controls.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>So, let's connect these pieces together.</source>
					<target>So, let's connect these pieces together.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Create the basic input events</source>
					<target>Create the basic input events</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The Windows Runtime event dispatcher provides 5 events we want instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> class to handle:</source>
					<target>The Windows Runtime event dispatcher provides 5 events we want instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> class to handle:</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>PointerPressed</source>
					<target>PointerPressed</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>PointerMoved</source>
					<target>PointerMoved</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>PointerReleased</source>
					<target>PointerReleased</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>KeyUp</source>
					<target>KeyUp</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>KeyDown</source>
					<target>KeyDown</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>These events are implemented on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> type.</source>
					<target>These events are implemented on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> type.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We assume that you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CoreWindow</pc> object to work with.</source>
					<target>We assume that you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CoreWindow</pc> object to work with.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465077)</data>
				</originalData>
				<segment state="initial">
					<source>If you don't know how to obtain one, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to set up your Universal Windows Platform (UWP) C++ app to display a DirectX view</pc>.</source>
					<target>If you don't know how to obtain one, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to set up your Universal Windows Platform (UWP) C++ app to display a DirectX view</pc>.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>As these events fire while our app is running, the handlers update the controllers' state info defined in our private fields.</source>
					<target>As these events fire while our app is running, the handlers update the controllers' state info defined in our private fields.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>First, let's populate the mouse and touch pointer event handlers.</source>
					<target>First, let's populate the mouse and touch pointer event handlers.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the first event handler, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed()</pc>, we get the x-y coordinates of the pointer from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> that manages our display when the user clicks the mouse or touches the screen in the look controller region.</source>
					<target>In the first event handler, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed()</pc>, we get the x-y coordinates of the pointer from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> that manages our display when the user clicks the mouse or touches the screen in the look controller region.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>OnPointerPressed</source>
					<target>OnPointerPressed</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>This event handler checks whether the pointer is not the mouse (for the purposes of this sample, which supports both mouse and touch) and if it is in the move controller area.</source>
					<target>This event handler checks whether the pointer is not the mouse (for the purposes of this sample, which supports both mouse and touch) and if it is in the move controller area.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If both criteria are true, it checks whether the pointer was just pressed, specifically, whether this click is unrelated to a previous move or look input, by testing if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> is false.</source>
					<target>If both criteria are true, it checks whether the pointer was just pressed, specifically, whether this click is unrelated to a previous move or look input, by testing if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> is false.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If so, the handler captures the point in the move controller area where the press happened and sets <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> to true, so that when this handler is called again, it won't overwrite the start position of the move controller input interaction.</source>
					<target>If so, the handler captures the point in the move controller area where the press happened and sets <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_moveInUse</pc> to true, so that when this handler is called again, it won't overwrite the start position of the move controller input interaction.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>It also updates the move controller pointer ID to the current pointer's ID.</source>
					<target>It also updates the move controller pointer ID to the current pointer's ID.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>If the pointer is the mouse or if the touch pointer isn't in the move controller area, it must be in the look controller area.</source>
					<target>If the pointer is the mouse or if the touch pointer isn't in the move controller area, it must be in the look controller area.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It sets <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastPoint</pc> to the current position where the user pressed the mouse button or touched and pressed, resets the delta, and updates the look controller's pointer ID to the current pointer ID.</source>
					<target>It sets <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_lookLastPoint</pc> to the current position where the user pressed the mouse button or touched and pressed, resets the delta, and updates the look controller's pointer ID to the current pointer ID.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>It also sets the state of the look controller to active.</source>
					<target>It also sets the state of the look controller to active.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>OnPointerMoved</source>
					<target>OnPointerMoved</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> event handler fires whenever the pointer moves (in this case, if a touch screen pointer is being dragged, or if the mouse pointer is being moved while the left button is pressed).</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> event handler fires whenever the pointer moves (in this case, if a touch screen pointer is being dragged, or if the mouse pointer is being moved while the left button is pressed).</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>If the pointer ID is the same as the move controller pointer's ID, then it's the move pointer; otherwise, we check if it's the look controller that's the active pointer.</source>
					<target>If the pointer ID is the same as the move controller pointer's ID, then it's the move pointer; otherwise, we check if it's the look controller that's the active pointer.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>If it's the move controller, we just update the pointer position.</source>
					<target>If it's the move controller, we just update the pointer position.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208276)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>We keep updating it as long the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event keeps firing, because we want to compare the final position with the first one we captured with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OnPointerPressed</pc> event handler.</source>
					<target>We keep updating it as long the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event keeps firing, because we want to compare the final position with the first one we captured with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OnPointerPressed</pc> event handler.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>If it's the look controller, things are a little more complicated.</source>
					<target>If it's the look controller, things are a little more complicated.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>We need to calculate a new look point and center the camera on it, so we calculate the delta between the last look point and the current screen position, and then we multiply versus our scale factor, which we can tweak to make the look movements smaller or larger relative to the distance of the screen movement.</source>
					<target>We need to calculate a new look point and center the camera on it, so we calculate the delta between the last look point and the current screen position, and then we multiply versus our scale factor, which we can tweak to make the look movements smaller or larger relative to the distance of the screen movement.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Using that value, we calculate the pitch and the yaw.</source>
					<target>Using that value, we calculate the pitch and the yaw.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Finally, we need to deactivate the move or look controller behaviors when the player stops moving the mouse or touching the screen.</source>
					<target>Finally, we need to deactivate the move or look controller behaviors when the player stops moving the mouse or touching the screen.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208279)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>We use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>, which we call when <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerReleased</pc></pc> is fired, to set <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_moveInUse</pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">m\_lookInUse</pc> to FALSE and turn off the camera pan movement, and to zero out the pointer ID.</source>
					<target>We use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>, which we call when <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerReleased</pc></pc> is fired, to set <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_moveInUse</pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">m\_lookInUse</pc> to FALSE and turn off the camera pan movement, and to zero out the pointer ID.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>OnPointerReleased</source>
					<target>OnPointerReleased</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>So far, we handled all the touch screen events.</source>
					<target>So far, we handled all the touch screen events.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Now, let's handle the key input events for a keyboard-based move controller.</source>
					<target>Now, let's handle the key input events for a keyboard-based move controller.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>OnKeyDown</source>
					<target>OnKeyDown</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>As long as one of these keys is pressed, this event handler sets the corresponding directional move state to true.</source>
					<target>As long as one of these keys is pressed, this event handler sets the corresponding directional move state to true.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>OnKeyUp</source>
					<target>OnKeyUp</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>And when the key is released, this event handler sets it back to false.</source>
					<target>And when the key is released, this event handler sets it back to false.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>, it checks these directional move states, and move the camera accordingly.</source>
					<target>When we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>, it checks these directional move states, and move the camera accordingly.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>This is a bit simpler than the touch implementation!</source>
					<target>This is a bit simpler than the touch implementation!</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Initialize the touch controls and the controller state</source>
					<target>Initialize the touch controls and the controller state</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Let's hook up the events now, and initialize all the controller state fields.</source>
					<target>Let's hook up the events now, and initialize all the controller state fields.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Initialize</source>
					<target>Initialize</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> takes a reference to the app's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> instance as a parameter and registers the event handlers we developed to the appropriate events on that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> takes a reference to the app's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> instance as a parameter and registers the event handlers we developed to the appropriate events on that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc>.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>It initializes the move and look pointer's IDs, sets the command vector for our touch screen move controller implementation to zero, and sets the camera looking straight ahead when the app starts.</source>
					<target>It initializes the move and look pointer's IDs, sets the command vector for our touch screen move controller implementation to zero, and sets the camera looking straight ahead when the app starts.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>Getting and setting the position and orientation of the camera</source>
					<target>Getting and setting the position and orientation of the camera</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Let's define some methods to get and set the position of the camera with respect to the viewport.</source>
					<target>Let's define some methods to get and set the position of the camera with respect to the viewport.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>Updating the controller state info</source>
					<target>Updating the controller state info</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Now, we perform our calculations that convert the pointer coordinate info tracked in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerPosition</pc> into new coordinate information respective of our world coordinate system.</source>
					<target>Now, we perform our calculations that convert the pointer coordinate info tracked in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_movePointerPosition</pc> into new coordinate information respective of our world coordinate system.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>Our app calls this method every time we refresh the main app loop.</source>
					<target>Our app calls this method every time we refresh the main app loop.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>So, it is here that we compute the new look point position info we want to pass to the app for updating the view matrix before projection into the viewport.</source>
					<target>So, it is here that we compute the new look point position info we want to pass to the app for updating the view matrix before projection into the viewport.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>Because we don't want jittery movement when the player uses our touch-based move controller, we set a virtual dead zone around the pointer with a diameter of 32 pixels.</source>
					<target>Because we don't want jittery movement when the player uses our touch-based move controller, we set a virtual dead zone around the pointer with a diameter of 32 pixels.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>We also add velocity, which is the command value plus a movement gain rate.</source>
					<target>We also add velocity, which is the command value plus a movement gain rate.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>(You can adjust this behavior to your liking, to slow down or speed up the rate of movement based on the distance the pointer moves in the move controller area.)</source>
					<target>(You can adjust this behavior to your liking, to slow down or speed up the rate of movement based on the distance the pointer moves in the move controller area.)</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>When we compute the velocity, we also translate the coordinates received from the move and look controllers into the movement of the actual look point we send to the method that computes our view matrix for the scene.</source>
					<target>When we compute the velocity, we also translate the coordinates received from the move and look controllers into the movement of the actual look point we send to the method that computes our view matrix for the scene.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>First, we invert the x coordinate, because if we click-move or drag left or right with the look controller, the look point rotates in the opposite direction in the scene, as a camera might swing about its central axis.</source>
					<target>First, we invert the x coordinate, because if we click-move or drag left or right with the look controller, the look point rotates in the opposite direction in the scene, as a camera might swing about its central axis.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>Then, we swap the y and z axes, because an up/down key press or touch drag motion (read as a y-axis behavior) on the move controller should translate into a camera action that moves the look point into or out of the screen (the z-axis).</source>
					<target>Then, we swap the y and z axes, because an up/down key press or touch drag motion (read as a y-axis behavior) on the move controller should translate into a camera action that moves the look point into or out of the screen (the z-axis).</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The final position of the look point for the player is the last position plus the calculated velocity, and this is what is read by the renderer when it calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> method (most likely during the setup for each frame).</source>
					<target>The final position of the look point for the player is the last position plus the calculated velocity, and this is what is read by the renderer when it calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> method (most likely during the setup for each frame).</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>After that, we reset the move command to zero.</source>
					<target>After that, we reset the move command to zero.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Updating the view matrix with the new camera position</source>
					<target>Updating the view matrix with the new camera position</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>We can obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</source>
					<target>We can obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>This pseudocode suggests the calling behavior you can implement:</source>
					<target>This pseudocode suggests the calling behavior you can implement:</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>Congratulations!</source>
					<target>Congratulations!</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>You've implemented basic move-look controls for both touch screens and keyboard/mouse input touch controls in your game!</source>
					<target>You've implemented basic move-look controls for both touch screens and keyboard/mouse input touch controls in your game!</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
					<target>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
					<target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>