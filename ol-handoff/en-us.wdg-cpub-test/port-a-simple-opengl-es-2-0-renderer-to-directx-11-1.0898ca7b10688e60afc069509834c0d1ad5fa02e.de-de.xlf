<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">b796fa67c9e190e421eaeceecf856610d2929b70</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\port-a-simple-opengl-es-2-0-renderer-to-directx-11-1.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a8dcd0e0560d1929be9587cae5efa04ca0915df3</mda:meta><mda:meta type="olxliffhash">de39496fa0c557240cab7222a70b7aff633a46fc</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>How to-- port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
					<target>How to-- port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>For the first porting exercise, we'll start with the basics-- bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</source>
					<target>For the first porting exercise, we'll start with the basics-- bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
					<target>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>For the first porting exercise, we'll start with the basics: bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</source>
					<target>For the first porting exercise, we'll start with the basics: bringing a simple renderer for a spinning, vertex-shaded cube from OpenGL ES 2.0 into Direct3D, such that it matches the DirectX 11 App (Universal Windows) template from Visual Studio 2015.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>As we walk through this port process, you will learn the following:</source>
					<target>As we walk through this port process, you will learn the following:</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>How to port a simple set of vertex buffers to Direct3D input buffers</source>
					<target>How to port a simple set of vertex buffers to Direct3D input buffers</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>How to port uniforms and attributes to constant buffers</source>
					<target>How to port uniforms and attributes to constant buffers</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>How to configure Direct3D shader objects</source>
					<target>How to configure Direct3D shader objects</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>How basic HLSL semantics are used in Direct3D shader development</source>
					<target>How basic HLSL semantics are used in Direct3D shader development</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>How to port very simple GLSL to HLSL</source>
					<target>How to port very simple GLSL to HLSL</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This topic starts after you have created a new DirectX 11 project.</source>
					<target>This topic starts after you have created a new DirectX 11 project.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](user-interface.md)</data>
				</originalData>
				<segment state="initial">
					<source>To learn how to create a new DirectX 11 project, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a new DirectX 11 project for Universal Windows Platform (UWP)</pc>.</source>
					<target>To learn how to create a new DirectX 11 project, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a new DirectX 11 project for Universal Windows Platform (UWP)</pc>.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476345)</data>
				</originalData>
				<segment state="initial">
					<source>The project created from either of these links has all the code for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D</pc> infrastructure prepared, and you can immediately start into the process of porting your renderer from Open GL ES 2.0 to Direct3D 11.</source>
					<target>The project created from either of these links has all the code for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D</pc> infrastructure prepared, and you can immediately start into the process of porting your renderer from Open GL ES 2.0 to Direct3D 11.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>This topic walks two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube in a window.</source>
					<target>This topic walks two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube in a window.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>In both cases, the code covers the following process:</source>
					<target>In both cases, the code covers the following process:</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Creating a cube mesh from hardcoded data.</source>
					<target>Creating a cube mesh from hardcoded data.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>This mesh is represented as a list of vertices, with each vertex possessing a position, a normal vector, and a color vector.</source>
					<target>This mesh is represented as a list of vertices, with each vertex possessing a position, a normal vector, and a color vector.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>This mesh is put into a vertex buffer for the shading pipeline to process.</source>
					<target>This mesh is put into a vertex buffer for the shading pipeline to process.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Creating shader objects to process the cube mesh.</source>
					<target>Creating shader objects to process the cube mesh.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>There are two shaders: a vertex shader that processes the vertices for rasterization, and a fragment (pixel) shader that colors the individual pixels of the cube after rasterization.</source>
					<target>There are two shaders: a vertex shader that processes the vertices for rasterization, and a fragment (pixel) shader that colors the individual pixels of the cube after rasterization.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>These pixels are written into a render target for display.</source>
					<target>These pixels are written into a render target for display.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Forming the shading language that is used for vertex and pixel processing in the vertex and fragment shaders, respectively.</source>
					<target>Forming the shading language that is used for vertex and pixel processing in the vertex and fragment shaders, respectively.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Displaying the rendered cube on the screen.</source>
					<target>Displaying the rendered cube on the screen.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>simple opengl cube</source>
					<target>simple opengl cube</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Upon completing this walkthrough, you should be familiar with the following basic differences between Open GL ES 2.0 and Direct3D 11:</source>
					<target>Upon completing this walkthrough, you should be familiar with the following basic differences between Open GL ES 2.0 and Direct3D 11:</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The representation of vertex buffers and vertex data.</source>
					<target>The representation of vertex buffers and vertex data.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The process of creating and configuring shaders.</source>
					<target>The process of creating and configuring shaders.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Shading languages, and the inputs and outputs to shader objects.</source>
					<target>Shading languages, and the inputs and outputs to shader objects.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Screen drawing behaviors.</source>
					<target>Screen drawing behaviors.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>In this walkthrough, we refer to an simple and generic OpenGL renderer structure, which is defined like this:</source>
					<target>In this walkthrough, we refer to an simple and generic OpenGL renderer structure, which is defined like this:</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>This structure has one instance and contains all the necessary components for rendering a very simple vertex-shaded mesh.</source>
					<target>This structure has one instance and contains all the necessary components for rendering a very simple vertex-shaded mesh.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Any OpenGL ES 2.0 code in this topic is based on the Windows API implementation provided by the Khronos Group, and uses Windows C programming syntax.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Any OpenGL ES 2.0 code in this topic is based on the Windows API implementation provided by the Khronos Group, and uses Windows C programming syntax.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>What you need to know</source>
					<target>What you need to know</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Technologies</source>
					<target>Technologies</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Microsoft Visual C++</source>
					<target>Microsoft Visual C++</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>OpenGL ES 2.0</source>
					<target>OpenGL ES 2.0</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Optional.</source>
					<target>Optional.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](moving-from-egl-to-dxgi.md)</data>
				</originalData>
				<segment state="initial">
					<source>Review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port EGL code to DXGI and Direct3D</pc>.</source>
					<target>Review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port EGL code to DXGI and Direct3D</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Read this topic to better understand the graphics interface provided by DirectX.</source>
					<target>Read this topic to better understand the graphics interface provided by DirectX.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Steps</source>
					<target>Steps</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Topic</source>
					<target>Topic</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Port the shader objects</source>
					<target>Port the shader objects</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>When porting the simple renderer from OpenGL ES 2.0, the first step is to set up the equivalent vertex and fragment shader objects in Direct3D 11, and to make sure that the main program can communicate with the shader objects after they are compiled.</source>
					<target>When porting the simple renderer from OpenGL ES 2.0, the first step is to set up the equivalent vertex and fragment shader objects in Direct3D 11, and to make sure that the main program can communicate with the shader objects after they are compiled.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Port the vertex buffers and data</source>
					<target>Port the vertex buffers and data</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>In this step, you'll define the vertex buffers that will contain your meshes and the index buffers that allow the shaders to traverse the vertices in a specified order.</source>
					<target>In this step, you'll define the vertex buffers that will contain your meshes and the index buffers that allow the shaders to traverse the vertices in a specified order.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Port the GLSL</source>
					<target>Port the GLSL</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</source>
					<target>Once you've moved over the code that creates and configures your buffers and shader objects, it's time to port the code inside those shaders from OpenGL ES 2.0's GL Shader Language (GLSL) to Direct3D 11's High-level Shader Language (HLSL).</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Draw to the screen</source>
					<target>Draw to the screen</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Finally, we port the code that draws the spinning cube to the screen.</source>
					<target>Finally, we port the code that draws the spinning cube to the screen.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Additional resources</source>
					<target>Additional resources</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Prepare your dev environment for UWP DirectX game development</source>
					<target>Prepare your dev environment for UWP DirectX game development</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Create a new DirectX 11 project for UWP</source>
					<target>Create a new DirectX 11 project for UWP</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Map OpenGL ES 2.0 concepts and infrastructure to Direct3D 11</source>
					<target>Map OpenGL ES 2.0 concepts and infrastructure to Direct3D 11</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>