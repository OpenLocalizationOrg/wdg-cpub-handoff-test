<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">f6c8f83631d17c89440f22b0d47e1ce524b5e52a</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\x-deferloadstrategy-attribute.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">35427b29b48b9ce2b3f9f937c1d57cd418375ad1</mda:meta><mda:meta type="olxliffhash">10296759eb6d7f26d9c39d8985debc181d80cd83</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>xDeferLoadStrategy attribute</source>
					<target>xDeferLoadStrategy attribute</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>xDeferLoadStrategy delays the creation of an element and its children, decreasing startup time but increasing memory usage slightly.</source>
					<target>xDeferLoadStrategy delays the creation of an element and its children, decreasing startup time but increasing memory usage slightly.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Each element affected adds about 600 bytes to the memory usage.</source>
					<target>Each element affected adds about 600 bytes to the memory usage.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>x:DeferLoadStrategy attribute</source>
					<target>x:DeferLoadStrategy attribute</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy="Lazy"</pc> delays the creation of an element and its children, decreasing startup time but increasing memory usage slightly.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy="Lazy"</pc> delays the creation of an element and its children, decreasing startup time but increasing memory usage slightly.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Each element affected adds about 600 bytes to the memory usage.</source>
					<target>Each element affected adds about 600 bytes to the memory usage.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>The larger the element tree you defer, the more startup time you'll save, but at the cost of a greater memory footprint.</source>
					<target>The larger the element tree you defer, the more startup time you'll save, but at the cost of a greater memory footprint.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Therefore it's possible to overuse this attribute to the extent that your performance decreases.</source>
					<target>Therefore it's possible to overuse this attribute to the extent that your performance decreases.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The restrictions for using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> are:</source>
					<target>The restrictions for using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy</pc> are:</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](x-name-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>Requires an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> defined, as there needs to be a way to find the element later.</source>
					<target>Requires an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> defined, as there needs to be a way to find the element later.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208911)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn279249)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc></pc> can be marked as deferred, with the exception of types deriving from <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FlyoutBase</pc></pc>.</source>
					<target>Only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc></pc> can be marked as deferred, with the exception of types deriving from <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FlyoutBase</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.page)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.usercontrol)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br242348)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Root elements can not be deferred in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc></pc>, a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UserControls</pc></pc>, nor a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DataTemplate</pc></pc>.</source>
					<target>Root elements can not be deferred in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc></pc>, a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UserControls</pc></pc>, nor a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DataTemplate</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> cannot be deferred.</source>
					<target>Elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> cannot be deferred.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br228048)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Does not work with loose XAML loaded with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</source>
					<target>Does not work with loose XAML loaded with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Moving a parent element will clear out any elements that have not been realized.</source>
					<target>Moving a parent element will clear out any elements that have not been realized.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>There are several different ways to realize the deferred elements:</source>
					<target>There are several different ways to realize the deferred elements:</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208715)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> with the name that was defined on the element.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> with the name that was defined on the element.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209416)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetTemplateChild</pc></pc> with the name that was defined on the element.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetTemplateChild</pc></pc> with the name that was defined on the element.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209007)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208817)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, use a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Setter</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Storyboard</pc> animation that is targeting the deferred element.</source>
					<target>In a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, use a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Setter</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Storyboard</pc> animation that is targeting the deferred element.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Target the deferred element in any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboard</pc>.</source>
					<target>Target the deferred element in any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboard</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Use a binding that is targeting the deferred element.</source>
					<target>Use a binding that is targeting the deferred element.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>NOTE: Once the instantiation of an element has started, it is created on the UI thread, so it could cause the UI to stutter if too much is created at once.</source>
					<target>NOTE: Once the instantiation of an element has started, it is created on the UI thread, so it could cause the UI to stutter if too much is created at once.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Once a deferred element is created by any of the methods listed above, several things will happen:</source>
					<target>Once a deferred element is created by any of the methods listed above, several things will happen:</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208723)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Loaded</pc></pc> event on the element will get raised.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Loaded</pc></pc> event on the element will get raised.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Any bindings on the element will get evaluated.</source>
					<target>Any bindings on the element will get evaluated.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>If the application has registered to receive property change notifications on the property containing the deferred element(s), the notification will be raised.</source>
					<target>If the application has registered to receive property change notifications on the property containing the deferred element(s), the notification will be raised.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>You can nest deferred elements, however they have to be realized from the outer-most element in.</source>
					<target>You can nest deferred elements, however they have to be realized from the outer-most element in.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>If you try to realize a child element before the parent has been realized, an exception will be raised.</source>
					<target>If you try to realize a child element before the parent has been realized, an exception will be raised.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>In general, the recommendation is to defer things that are not viewable in the first frame.</source>
					<target>In general, the recommendation is to defer things that are not viewable in the first frame.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208992)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A good guideline for finding candidates to be deferred is to look for elements that are being created with collapsed <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc>.</source>
					<target>A good guideline for finding candidates to be deferred is to look for elements that are being created with collapsed <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Also incidental UI (that is, UI that is triggered by user interaction) is a good place to look for deferring elements.</source>
					<target>Also incidental UI (that is, UI that is triggered by user interaction) is a good place to look for deferring elements.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242878)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Be wary of deferring elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> scenario, as it will decrease your startup time, but could also decrease your panning performance depending on what you're creating.</source>
					<target>Be wary of deferring elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> scenario, as it will decrease your startup time, but could also decrease your panning performance depending on what you're creating.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](x-bind-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](x-phase-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you are looking to increase panning performance, please refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Phase attribute</pc> documentation.</source>
					<target>If you are looking to increase panning performance, please refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Phase attribute</pc> documentation.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](x-phase-attribute.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Phase attribute</pc> is used in conjunction with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:DeferLoadStrategy</pc> then, when an element or an element tree is realized, the bindings will be applied up to and including the current phase.</source>
					<target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Phase attribute</pc> is used in conjunction with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:DeferLoadStrategy</pc> then, when an element or an element tree is realized, the bindings will be applied up to and including the current phase.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The phase specified for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Phase</pc> will not affect or control the deferral of the element.</source>
					<target>The phase specified for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Phase</pc> will not affect or control the deferral of the element.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When a list item is recycled as part of panning, realized elements will behave in the same way as other active elements, and compiled bindings (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> bindings) will be processed using the same rules, including phasing.</source>
					<target>When a list item is recycled as part of panning, realized elements will behave in the same way as other active elements, and compiled bindings (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> bindings) will be processed using the same rules, including phasing.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>A general guideline is to measure your application before and after to make sure you are getting the performance that you want.</source>
					<target>A general guideline is to measure your application before and after to make sure you are getting the performance that you want.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Example</source>
					<target>Example</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>