<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">e15c56d1bc73e2db07ca031774d4a468d8711f5b</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\render-the-shadow-map-to-the-depth-buffer.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">c31fdf31259893b274786766e64d676074b647a4</mda:meta><mda:meta type="olxliffhash">e8262a4fa9c43b204d774e3b053249ec2c509142</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Render the shadow map to the depth buffer</source>
					<target>Render the shadow map to the depth buffer</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Render from the point of view of the light to create a two-dimensional depth map representing the shadow volume.</source>
					<target>Render from the point of view of the light to create a two-dimensional depth map representing the shadow volume.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Render the shadow map to the depth buffer</source>
					<target>Render the shadow map to the depth buffer</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Render from the point of view of the light to create a two-dimensional depth map representing the shadow volume.</source>
					<target>Render from the point of view of the light to create a two-dimensional depth map representing the shadow volume.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The depth map masks the space that will be rendered in shadow.</source>
					<target>The depth map masks the space that will be rendered in shadow.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](implementing-depth-buffers-for-shadow-mapping.md)</data>
				</originalData>
				<segment state="initial">
					<source>Part 2 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</source>
					<target>Part 2 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Clear the depth buffer</source>
					<target>Clear the depth buffer</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Always clear the depth buffer before rendering to it.</source>
					<target>Always clear the depth buffer before rendering to it.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Render the shadow map to the depth buffer</source>
					<target>Render the shadow map to the depth buffer</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>For the shadow rendering pass, specify a depth buffer but do not specify a render target.</source>
					<target>For the shadow rendering pass, specify a depth buffer but do not specify a render target.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Specify the light viewport, a vertex shader, and set the light space constant buffers.</source>
					<target>Specify the light viewport, a vertex shader, and set the light space constant buffers.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Use front face culling for this pass to optimize the depth values placed in the shadow buffer.</source>
					<target>Use front face culling for this pass to optimize the depth values placed in the shadow buffer.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Note that on most devices, you can specify nullptr for the pixel shader (or skip specifying a pixel shader entirely).</source>
					<target>Note that on most devices, you can specify nullptr for the pixel shader (or skip specifying a pixel shader entirely).</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>But some drivers may throw an exception when you call draw on the Direct3D device with a null pixel shader set.</source>
					<target>But some drivers may throw an exception when you call draw on the Direct3D device with a null pixel shader set.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>To avoid this exception, you can set a minimal pixel shader for the shadow rendering pass.</source>
					<target>To avoid this exception, you can set a minimal pixel shader for the shadow rendering pass.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb943995)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The output of this shader is thrown away; it can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">discard</pc></pc> on every pixel.</source>
					<target>The output of this shader is thrown away; it can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">discard</pc></pc> on every pixel.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Render the objects that can cast shadows, but don't bother rendering geometry that can't cast a shadow (like a floor in a room, or objects removed from the shadow pass for optimization reasons).</source>
					<target>Render the objects that can cast shadows, but don't bother rendering geometry that can't cast a shadow (like a floor in a room, or objects removed from the shadow pass for optimization reasons).</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize the view frustum:</pc>  Make sure your implementation computes a tight view frustum so that you get the most precision out of your depth buffer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize the view frustum:</pc>  Make sure your implementation computes a tight view frustum so that you get the most precision out of your depth buffer.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee416324)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common Techniques to Improve Shadow Depth Maps</pc> for more tips on shadow technique.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common Techniques to Improve Shadow Depth Maps</pc> for more tips on shadow technique.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Vertex shader for shadow pass</source>
					<target>Vertex shader for shadow pass</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Use a simplified version of your vertex shader to render just the vertex position in light space.</source>
					<target>Use a simplified version of your vertex shader to render just the vertex position in light space.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Don't include any lighting normals, secondary transformations, and so on.</source>
					<target>Don't include any lighting normals, secondary transformations, and so on.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](render-the-scene-with-depth-testing.md)</data>
				</originalData>
				<segment state="initial">
					<source>In the next part of this walkthrough, learn how to add shadows by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rendering with depth testing</pc>.</source>
					<target>In the next part of this walkthrough, learn how to add shadows by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rendering with depth testing</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>