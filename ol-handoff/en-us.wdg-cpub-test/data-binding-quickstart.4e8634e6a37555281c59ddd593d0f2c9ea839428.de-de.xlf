<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">2a843ebbc528590bb4b14be27aa97878f57fb645</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\data-binding\data-binding-quickstart.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">497dbbcabf9b554fa44eddffefe206a5caa76a51</mda:meta><mda:meta type="olxliffhash">637aa844837240ee796cde1433710cb1be5cfae2</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Data binding overview</source>
					<target>Data binding overview</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</source>
					<target>This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Data binding overview</source>
					<target>Data binding overview</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</source>
					<target>This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display.</source>
					<target>In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](data-binding-in-depth.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more detailed info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
					<target>For more detailed info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This topic assumes that you know how to create a basic UWP app.</source>
					<target>This topic assumes that you know how to create a basic UWP app.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</data>
				</originalData>
				<segment state="initial">
					<source>For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</source>
					<target>For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create your first UWP app using C# or Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Create the project</source>
					<target>Create the project</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</source>
					<target>Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application (Windows Universal)</pc> project.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Name it "Quickstart".</source>
					<target>Name it "Quickstart".</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Binding to a single item</source>
					<target>Binding to a single item</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Every binding consists of a binding target and a binding source.</source>
					<target>Every binding consists of a binding target and a binding source.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model).</source>
					<target>Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model).</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This example shows how to bind a control to a single item.</source>
					<target>This example shows how to bind a control to a single item.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The target is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>.</source>
					<target>The target is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The source is an instance of a simple class named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> that represents an audio recording.</source>
					<target>The source is an instance of a simple class named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> that represents an audio recording.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Let's look at the class first.</source>
					<target>Let's look at the class first.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Add a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.</source>
					<target>Add a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Next, expose the binding source class from the class that represents your page of markup.</source>
					<target>Next, expose the binding source class from the class that represents your page of markup.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</source>
					<target>We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The last piece is to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel.DefaultRecording.OneLiner</pc> property.</source>
					<target>The last piece is to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel.DefaultRecording.OneLiner</pc> property.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Here's the result.</source>
					<target>Here's the result.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Binding a textblock</source>
					<target>Binding a textblock</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Binding to a collection of items</source>
					<target>Binding to a collection of items</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>A common scenario is to bind to a collection of business objects.</source>
					<target>A common scenario is to bind to a collection of business objects.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](T:System.Collections.ObjectModel.ObservableCollection%601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">[</data>
					<data id="id8">](T:System.ComponentModel.INotifyPropertyChanged)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](T:System.Collections.Specialized.INotifyCollectionChanged)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>In C# and Visual Basic, the generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection<ph dataRef="id5" id="ph1" />T<ph dataRef="id6" id="ph2" /></pc></pc> class is a good collection choice for data binding, because it implements the <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">INotifyPropertyChanged</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p5"><pc dataRefEnd="id14" dataRefStart="id13" id="p6">INotifyCollectionChanged</pc></pc> interfaces.</source>
					<target>In C# and Visual Basic, the generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection<ph dataRef="id5" id="ph1" />T<ph dataRef="id6" id="ph2" /></pc></pc> class is a good collection choice for data binding, because it implements the <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">INotifyPropertyChanged</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p5"><pc dataRefEnd="id14" dataRefStart="id13" id="p6">INotifyCollectionChanged</pc></pc> interfaces.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes.</source>
					<target>These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyPropertyChanged</pc>.</source>
					<target>If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyPropertyChanged</pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](data-binding-in-depth.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`Recording`</data>
				</originalData>
				<segment state="initial">
					<source>This next example binds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of <ph dataRef="id5" id="ph1" /> objects.</source>
					<target>This next example binds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of <ph dataRef="id5" id="ph1" /> objects.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Let's start by adding the collection to our view model.</source>
					<target>Let's start by adding the collection to our view model.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Just add these new members to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> class.</source>
					<target>Just add these new members to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RecordingViewModel</pc> class.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](M:System.Object.ToString)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>We haven't yet provided a data template for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class, so the best the UI framework can do is to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToString</pc></pc> for each item in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ListView</pc></pc>.</source>
					<target>We haven't yet provided a data template for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class, so the best the UI framework can do is to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToString</pc></pc> for each item in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ListView</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The default implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ToString</pc> is to return the type name.</source>
					<target>The default implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ToString</pc> is to return the type name.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Binding a list view</source>
					<target>Binding a list view</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](M:System.Object.ToString)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To remedy this we can either override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToString</pc></pc> to return the value of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OneLineSummary</pc>, or we can provide a data template.</source>
					<target>To remedy this we can either override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ToString</pc></pc> to return the value of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OneLineSummary</pc>, or we can provide a data template.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>The data template option is more common and arguably more flexible.</source>
					<target>The data template option is more common and arguably more flexible.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209369)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242830)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You specify a data template by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentTemplate</pc></pc> property of a content control or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemTemplate</pc></pc> property of an items control.</source>
					<target>You specify a data template by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentTemplate</pc></pc> property of a content control or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemTemplate</pc></pc> property of an items control.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Here are two ways we could design a data template for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> together with an illustration of the result.</source>
					<target>Here are two ways we could design a data template for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> together with an illustration of the result.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Binding a list view</source>
					<target>Binding a list view</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt228349)</data>
				</originalData>
				<segment state="initial">
					<source>For more information about XAML syntax, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a UI with XAML</pc>.</source>
					<target>For more information about XAML syntax, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a UI with XAML</pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt228350)</data>
				</originalData>
				<segment state="initial">
					<source>For more information about control layout, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Define layouts with XAML</pc>.</source>
					<target>For more information about control layout, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Define layouts with XAML</pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Adding a details view</source>
					<target>Adding a details view</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You can choose to display all the details of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> objects in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc></pc> items.</source>
					<target>You can choose to display all the details of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> objects in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc></pc> items.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>But that takes up a lot of space.</source>
					<target>But that takes up a lot of space.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view.</source>
					<target>Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>This arrangement is also known as a master/details view, or a list/details view.</source>
					<target>This arrangement is also known as a master/details view, or a list/details view.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>There are two ways to go about this.</source>
					<target>There are two ways to go about this.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You can bind the details view to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc>.</source>
					<target>You can bind the details view to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> property of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Or you can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>: bind both the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc> and the details view to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc> (which will take care of the currently-selected item for you).</source>
					<target>Or you can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>: bind both the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ListView</pc> and the details view to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc> (which will take care of the currently-selected item for you).</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Both techniques are shown below, and they both give the same results shown in the illustration.</source>
					<target>Both techniques are shown below, and they both give the same results shown in the illustration.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  So far in this topic we've only used the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind} markup extension</pc>, but both of the techniques we'll show below require the more flexible (but less performant) <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  So far in this topic we've only used the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind} markup extension</pc>, but both of the techniques we'll show below require the more flexible (but less performant) <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>First, here's the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> technique.</source>
					<target>First, here's the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectedItem</pc></pc> technique.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If you're using Visual C++ component extensions (C++/CX) then, because we'll be using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, you'll need to add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BindableAttribute</pc></pc> attribute to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Recording</pc> class.</source>
					<target>If you're using Visual C++ component extensions (C++/CX) then, because we'll be using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, you'll need to add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BindableAttribute</pc></pc> attribute to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Recording</pc> class.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The only other change necessary is to the markup.</source>
					<target>The only other change necessary is to the markup.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> technique, first add a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc> as a page resource.</source>
					<target>For the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> technique, first add a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc> as a page resource.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>And then adjust the bindings on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> (which no longer needs to be named) and on the details view to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc></pc>.</source>
					<target>And then adjust the bindings on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> (which no longer needs to be named) and on the details view to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that by binding the details view directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</source>
					<target>Note that by binding the details view directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</source>
					<target>There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>And here's the identical result in each case.</source>
					<target>And here's the identical result in each case.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Binding a list view</source>
					<target>Binding a list view</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Formatting or converting data values for display</source>
					<target>Formatting or converting data values for display</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>There is one small issue with the rendering above.</source>
					<target>There is one small issue with the rendering above.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](T:System.DateTime)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateTime</pc> property is not just a date, it's a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DateTime</pc></pc>, so it's being displayed with more precision than we need.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateTime</pc> property is not just a date, it's a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DateTime</pc></pc>, so it's being displayed with more precision than we need.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`this.ReleaseDateTime.ToString("d")`</data>
				</originalData>
				<segment state="initial">
					<source>One solution is to add a string property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class that returns <ph dataRef="id3" id="ph1" />.</source>
					<target>One solution is to add a string property to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recording</pc> class that returns <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Naming that property <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDate</pc> would indicate that it returns a date, not a date-and-time.</source>
					<target>Naming that property <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDate</pc> would indicate that it returns a date, not a date-and-time.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Naming it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateAsString</pc> would further indicate that it returns a string.</source>
					<target>Naming it <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReleaseDateAsString</pc> would further indicate that it returns a string.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>A more flexible solution is to use something known as a value converter.</source>
					<target>A more flexible solution is to use something known as a value converter.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Here's an example of how to author your own value converter.</source>
					<target>Here's an example of how to author your own value converter.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Add this code to your Recording.cs source code file.</source>
					<target>Add this code to your Recording.cs source code file.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Now we can add an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringFormatter</pc> as a page resource and use it in our binding.</source>
					<target>Now we can add an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringFormatter</pc> as a page resource and use it in our binding.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>We pass the format string into the converter from markup for ultimate formatting flexibility.</source>
					<target>We pass the format string into the converter from markup for ultimate formatting flexibility.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Here's the result.</source>
					<target>Here's the result.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>displaying a date with custom formatting</source>
					<target>displaying a date with custom formatting</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>