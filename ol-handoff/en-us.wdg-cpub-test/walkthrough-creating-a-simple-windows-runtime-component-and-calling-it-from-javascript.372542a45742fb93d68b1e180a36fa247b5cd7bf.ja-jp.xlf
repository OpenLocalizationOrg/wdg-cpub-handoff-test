<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">ba83782609107aaa9dea458175d50c158ec5cd05</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\winrt-components\walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">af6b641c3b43bd846d6f9f18fc404d5448b865f1</mda:meta><mda:meta type="olxliffhash">1bfd7228abae6031f46a614f49757d064531794d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Creating a Simple Windows Runtime component and calling it from JavaScript</source>
					<target>Creating a Simple Windows Runtime component and calling it from JavaScript</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</source>
					<target>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Walkthrough: Creating a Simple Windows Runtime component and calling it from JavaScript</source>
					<target>Walkthrough: Creating a Simple Windows Runtime component and calling it from JavaScript</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
					<target>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
					<target>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</source>
					<target>This walkthrough shows how you can use the .NET Framework with Visual Basic or C# to create your own Windows Runtime types, packaged in a Windows Runtime component, and how to call the component from your Universal Windows app built for Windows using JavaScript.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Visual Studio makes it easy to add a Windows Runtime component written with C# or Visual Basic to your app, and to create Windows Runtime types that you can call from JavaScript.</source>
					<target>Visual Studio makes it easy to add a Windows Runtime component written with C# or Visual Basic to your app, and to create Windows Runtime types that you can call from JavaScript.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Internally, your Windows Runtime types can use any .NET Framework functionality that's allowed in a Universal Windows app.</source>
					<target>Internally, your Windows Runtime types can use any .NET Framework functionality that's allowed in a Universal Windows app.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>(For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for Windows Store apps overview</pc>.) Externally, the members of your type can expose only Windows Runtime types for their parameters and return values.</source>
					<target>(For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET for Windows Store apps overview</pc>.) Externally, the members of your type can expose only Windows Runtime types for their parameters and return values.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>When you build your solution, Visual Studio builds your .NET Framework Windows Runtime Component project and then executes a build step that creates a Windows metadata (.winmd) file.</source>
					<target>When you build your solution, Visual Studio builds your .NET Framework Windows Runtime Component project and then executes a build step that creates a Windows metadata (.winmd) file.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This is your Windows Runtime component, which Visual Studio includes in your app.</source>
					<target>This is your Windows Runtime component, which Visual Studio includes in your app.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The .NET Framework automatically maps some commonly used .NET Framework types, such as primitive data types and collection types, to their Windows Runtime equivalents.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The .NET Framework automatically maps some commonly used .NET Framework types, such as primitive data types and collection types, to their Windows Runtime equivalents.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>These .NET Framework types can be used in the public interface of a Windows Runtime component, and will appear to users of the component as the corresponding Windows Runtime types.</source>
					<target>These .NET Framework types can be used in the public interface of a Windows Runtime component, and will appear to users of the component as the corresponding Windows Runtime types.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>This walkthrough illustrates the following tasks.</source>
					<target>This walkthrough illustrates the following tasks.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>After you've completed the first section, which sets up the Windows app with JavaScript, you can complete the remaining sections in any order.</source>
					<target>After you've completed the first section, which sets up the Windows app with JavaScript, you can complete the remaining sections in any order.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Prerequisites:</source>
					<target>Prerequisites:</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Windows 10</source>
					<target>Windows 10</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Microsoft Visual Studio 2015 or Microsoft Visual Studio Community 2015</source>
					<target>Microsoft Visual Studio 2015 or Microsoft Visual Studio Community 2015</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Creating a simple Windows Runtime class</source>
					<target>Creating a simple Windows Runtime class</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>This section creates a Universal Windows app built for Windows using JavaScript, and adds a Visual Basic or C# Windows Runtime Component project.</source>
					<target>This section creates a Universal Windows app built for Windows using JavaScript, and adds a Visual Basic or C# Windows Runtime Component project.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>It shows how to define a managed Windows Runtime type, create an instance of the type from JavaScript, and call static and instance members.</source>
					<target>It shows how to define a managed Windows Runtime type, create an instance of the type from JavaScript, and call static and instance members.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>The visual display of the example app is deliberately dull to keep the focus on the component.</source>
					<target>The visual display of the example app is deliberately dull to keep the focus on the component.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Feel free to make it prettier.</source>
					<target>Feel free to make it prettier.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In Visual Studio, create a new JavaScript project: On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</source>
					<target>In Visual Studio, create a new JavaScript project: On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed Templates</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Project</pc> dialog box, choose <pc dataRefEnd="id6" dataRefStart="id5" id="p3">JavaScript</pc>, and then choose <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows</pc>, and then <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Universal</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed Templates</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Project</pc> dialog box, choose <pc dataRefEnd="id6" dataRefStart="id5" id="p3">JavaScript</pc>, and then choose <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows</pc>, and then <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Universal</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>(If Windows is not available, make sure you're using Windows 8 or later.) Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application</pc> template and enter SampleApp for the project name.</source>
					<target>(If Windows is not available, make sure you're using Windows 8 or later.) Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Application</pc> template and enter SampleApp for the project name.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Create the component project: In Solution Explorer, open the shortcut menu for the SampleApp solution and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Project</pc> to add a new C# or Visual Basic project to the solution.</source>
					<target>Create the component project: In Solution Explorer, open the shortcut menu for the SampleApp solution and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Project</pc> to add a new C# or Visual Basic project to the solution.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed Templates</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New Project</pc> dialog box, choose <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Visual Basic</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visual C#</pc>, and then choose <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Windows</pc>, and then <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Universal</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed Templates</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New Project</pc> dialog box, choose <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Visual Basic</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visual C#</pc>, and then choose <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Windows</pc>, and then <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Universal</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> template and enter <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SampleComponent</pc> for the project name.</source>
					<target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> template and enter <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SampleComponent</pc> for the project name.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the name of the class to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Example</pc>.</source>
					<target>Change the name of the class to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Example</pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Notice that by default, the class is marked <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public sealed</pc> (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Public NotInheritable</pc> in Visual Basic).</source>
					<target>Notice that by default, the class is marked <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public sealed</pc> (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Public NotInheritable</pc> in Visual Basic).</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>All the Windows Runtime classes you expose from your component must be sealed.</source>
					<target>All the Windows Runtime classes you expose from your component must be sealed.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Add two simple members to the class, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">static</pc> method (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Shared</pc> method in Visual Basic) and an instance property:</source>
					<target>Add two simple members to the class, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">static</pc> method (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Shared</pc> method in Visual Basic) and an instance property:</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Optional: To enable IntelliSense for the newly added members, in Solution Explorer, open the shortcut menu for the SampleComponent project, and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build</pc>.</source>
					<target>Optional: To enable IntelliSense for the newly added members, in Solution Explorer, open the shortcut menu for the SampleComponent project, and then choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In Solution Explorer, in the JavaScript project, open the shortcut menu for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add Reference</pc> to open the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Reference Manager</pc>.</source>
					<target>In Solution Explorer, in the JavaScript project, open the shortcut menu for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">References</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add Reference</pc> to open the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Reference Manager</pc>.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Projects</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution</pc>.</source>
					<target>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Projects</pc>, and then choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution</pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the check box for the SampleComponent project and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to add a reference.</source>
					<target>Select the check box for the SampleComponent project and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to add a reference.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Call the component from JavaScript</source>
					<target>Call the component from JavaScript</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>To use the Windows Runtime type from JavaScript, add the following code in the anonymous function in the default.js file (in the js folder of the project) that is provided by the Visual Studio template.</source>
					<target>To use the Windows Runtime type from JavaScript, add the following code in the anonymous function in the default.js file (in the js folder of the project) that is provided by the Visual Studio template.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>It should go after the app.oncheckpoint event handler and before the call to app.start.</source>
					<target>It should go after the app.oncheckpoint event handler and before the call to app.start.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Notice that the first letter of each member name is changed from uppercase to lowercase.</source>
					<target>Notice that the first letter of each member name is changed from uppercase to lowercase.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This transformation is part of the support that JavaScript provides to enable the natural use of the Windows Runtime.</source>
					<target>This transformation is part of the support that JavaScript provides to enable the natural use of the Windows Runtime.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Namespaces and class names are Pascal-cased.</source>
					<target>Namespaces and class names are Pascal-cased.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Member names are camel-cased except for event names, which are all lowercase.</source>
					<target>Member names are camel-cased except for event names, which are all lowercase.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/hh710230.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the Windows Runtime in JavaScript</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the Windows Runtime in JavaScript</pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>The rules for camel casing can be confusing.</source>
					<target>The rules for camel casing can be confusing.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>A series of initial uppercase letters normally appears as lowercase, but if three uppercase letters are followed by a lowercase letter, only the first two letters appear in lowercase: for example, a member named IDStringKind appears as idStringKind.</source>
					<target>A series of initial uppercase letters normally appears as lowercase, but if three uppercase letters are followed by a lowercase letter, only the first two letters appear in lowercase: for example, a member named IDStringKind appears as idStringKind.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>In Visual Studio, you can build your Windows Runtime component project and then use IntelliSense in your JavaScript project to see the correct casing.</source>
					<target>In Visual Studio, you can build your Windows Runtime component project and then use IntelliSense in your JavaScript project to see the correct casing.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>In similar fashion, the .NET Framework provides support to enable the natural use of the Windows Runtime in managed code.</source>
					<target>In similar fashion, the .NET Framework provides support to enable the natural use of the Windows Runtime in managed code.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/hh694558.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>This is discussed in subsequent sections of this article, and in the articles <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET Framework Support for Windows Store Apps and Windows Runtime</pc>.</source>
					<target>This is discussed in subsequent sections of this article, and in the articles <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.NET Framework Support for Windows Store Apps and Windows Runtime</pc>.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Create a simple user interface</source>
					<target>Create a simple user interface</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>In your JavaScript project, open the default.html file and update the body as shown in the following code.</source>
					<target>In your JavaScript project, open the default.html file and update the body as shown in the following code.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>This code includes the complete set of controls for the example app and specifies the function names for the click events.</source>
					<target>This code includes the complete set of controls for the example app and specifies the function names for the click events.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  When you first run the app, only the Basics1 and Basics2 button are supported.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  When you first run the app, only the Basics1 and Basics2 button are supported.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>In your JavaScript project, in the css folder, open default.css.</source>
					<target>In your JavaScript project, in the css folder, open default.css.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Modify the body section as shown, and add styles to control the layout of buttons and the placement of output text.</source>
					<target>Modify the body section as shown, and add styles to control the layout of buttons and the placement of output text.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Now add the event listener registration code by adding a then clause to the processAll call in app.onactivated in default.js.</source>
					<target>Now add the event listener registration code by adding a then clause to the processAll call in app.onactivated in default.js.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Replace the existing line of code that calls setPromise and change it to the following code:</source>
					<target>Replace the existing line of code that calls setPromise and change it to the following code:</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>This is a better way to add events to HTML controls than adding a click event handler directly in HTML.</source>
					<target>This is a better way to add events to HTML controls than adding a click event handler directly in HTML.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt280216)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a "Hello World" app (JS)</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a "Hello World" app (JS)</pc>.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Build and run the app</source>
					<target>Build and run the app</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Before you build, change the target platform for all projects to ARM, x64, or x86, as appropriate for your computer.</source>
					<target>Before you build, change the target platform for all projects to ARM, x64, or x86, as appropriate for your computer.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>To build and run the solution, choose the F5 key.</source>
					<target>To build and run the solution, choose the F5 key.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>(If you get a run-time error message stating that SampleComponent is undefined, the reference to the class library project is missing.)</source>
					<target>(If you get a run-time error message stating that SampleComponent is undefined, the reference to the class library project is missing.)</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/hh925576.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Visual Studio first compiles the class library, and then executes an MSBuild task that runs <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Winmdexp.exe (Windows Runtime Metadata Export Tool)</pc> to create your Windows Runtime component.</source>
					<target>Visual Studio first compiles the class library, and then executes an MSBuild task that runs <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Winmdexp.exe (Windows Runtime Metadata Export Tool)</pc> to create your Windows Runtime component.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>The component is included in a .winmd file that contains both the managed code and the Windows metadata that describes the code.</source>
					<target>The component is included in a .winmd file that contains both the managed code and the Windows metadata that describes the code.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>WinMdExp.exe generates build error messages when you write code that's invalid in a Windows Runtime component, and the error messages are displayed in the Visual Studio IDE.</source>
					<target>WinMdExp.exe generates build error messages when you write code that's invalid in a Windows Runtime component, and the error messages are displayed in the Visual Studio IDE.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Visual Studio adds your component to the app package (.appx file) for your Universal Windows app, and generates the appropriate manifest.</source>
					<target>Visual Studio adds your component to the app package (.appx file) for your Universal Windows app, and generates the appropriate manifest.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Choose the Basics 1 button to assign the return value from the static GetAnswer method to the output area, create an instance of the Example class, and display the value of its SampleProperty property in the output area.</source>
					<target>Choose the Basics 1 button to assign the return value from the static GetAnswer method to the output area, create an instance of the Example class, and display the value of its SampleProperty property in the output area.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>The output is shown here:</source>
					<target>The output is shown here:</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Choose the Basics 2 button to increment the value of the SampleProperty property and to display the new value in the output area.</source>
					<target>Choose the Basics 2 button to increment the value of the SampleProperty property and to display the new value in the output area.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Primitive types such as strings and numbers can be used as parameter types and return types, and can be passed between managed code and JavaScript.</source>
					<target>Primitive types such as strings and numbers can be used as parameter types and return types, and can be passed between managed code and JavaScript.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Because numbers in JavaScript are stored in double-precision floating-point format, they are converted to .NET Framework numeric types.</source>
					<target>Because numbers in JavaScript are stored in double-precision floating-point format, they are converted to .NET Framework numeric types.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  By default, you can set breakpoints only in your JavaScript code.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  By default, you can set breakpoints only in your JavaScript code.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>To debug your Visual Basic or C# code, see Creating Windows Runtime Components in C# and Visual Basic.</source>
					<target>To debug your Visual Basic or C# code, see Creating Windows Runtime Components in C# and Visual Basic.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>To stop debugging and close your app, switch from the app to Visual Studio, and choose Shift+F5.</source>
					<target>To stop debugging and close your app, switch from the app to Visual Studio, and choose Shift+F5.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Using the Windows Runtime from JavaScript and managed code</source>
					<target>Using the Windows Runtime from JavaScript and managed code</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime can be called from either JavaScript or managed code.</source>
					<target>The Windows Runtime can be called from either JavaScript or managed code.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Windows Runtime objects can be passed back and forth between the two, and events can be handled from either side.</source>
					<target>Windows Runtime objects can be passed back and forth between the two, and events can be handled from either side.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>However, the ways you use Windows Runtime types in the two environments differ in some details, because JavaScript and the .NET Framework support the Windows Runtime differently.</source>
					<target>However, the ways you use Windows Runtime types in the two environments differ in some details, because JavaScript and the .NET Framework support the Windows Runtime differently.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.collections.propertyset.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The following example demonstrates these differences, using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.Collections.PropertySet</pc> class.</source>
					<target>The following example demonstrates these differences, using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Foundation.Collections.PropertySet</pc> class.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>In this example, you create an instance of the PropertySet collection in managed code and register an event handler to track changes in the collection.</source>
					<target>In this example, you create an instance of the PropertySet collection in managed code and register an event handler to track changes in the collection.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Then you add JavaScript code that gets the collection, registers its own event handler, and uses the collection.</source>
					<target>Then you add JavaScript code that gets the collection, registers its own event handler, and uses the collection.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Finally, you add a method that makes changes to the collection from managed code and shows JavaScript handling a managed exception.</source>
					<target>Finally, you add a method that makes changes to the collection from managed code and shows JavaScript handling a managed exception.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  In this example, the event is being fired on the UI thread.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  In this example, the event is being fired on the UI thread.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>If you fire the event from a background thread, for example in an async call, you will need to do some extra work in order for JavaScript to handle the event.</source>
					<target>If you fire the event from a background thread, for example in an async call, you will need to do some extra work in order for JavaScript to handle the event.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](raising-events-in-windows-runtime-components.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raising Events in Windows Runtime Components</pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raising Events in Windows Runtime Components</pc>.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the SampleComponent project, add a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public sealed</pc> class (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Public NotInheritable</pc> class in Visual Basic) named PropertySetStats.</source>
					<target>In the SampleComponent project, add a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public sealed</pc> class (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Public NotInheritable</pc> class in Visual Basic) named PropertySetStats.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>The class wraps a PropertySet collection and handles its MapChanged event.</source>
					<target>The class wraps a PropertySet collection and handles its MapChanged event.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>The event handler tracks the number of changes of each kind that occur, and the DisplayStats method produces a report that is formatted in HTML.</source>
					<target>The event handler tracks the number of changes of each kind that occur, and the DisplayStats method produces a report that is formatted in HTML.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Notice the additional <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Imports</pc> statement in Visual Basic); be careful to add this to the existing <pc dataRefEnd="id6" dataRefStart="id5" id="p3">using</pc> statements rather than overwriting them.</source>
					<target>Notice the additional <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Imports</pc> statement in Visual Basic); be careful to add this to the existing <pc dataRefEnd="id6" dataRefStart="id5" id="p3">using</pc> statements rather than overwriting them.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br226050.aspx)</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The event handler follows the familiar .NET Framework event pattern, except that the sender of the event (in this case, the PropertySet object) is cast to the IObservableMap<ph dataRef="id1" id="ph1" />string, object<ph dataRef="id2" id="ph2" /> interface (IObservableMap(Of String, Object) in Visual Basic), which is an instantiation of the Windows Runtime interface <pc dataRefEnd="id4" dataRefStart="id3" id="p1">IObservableMap<ph dataRef="id5" id="ph3" />K, V<ph dataRef="id6" id="ph4" /></pc>. (You can cast the sender to its type if necessary.) Also, the event arguments are presented as an interface rather than as an object.</source>
					<target>The event handler follows the familiar .NET Framework event pattern, except that the sender of the event (in this case, the PropertySet object) is cast to the IObservableMap<ph dataRef="id1" id="ph1" />string, object<ph dataRef="id2" id="ph2" /> interface (IObservableMap(Of String, Object) in Visual Basic), which is an instantiation of the Windows Runtime interface <pc dataRefEnd="id4" dataRefStart="id3" id="p1">IObservableMap<ph dataRef="id5" id="ph3" />K, V<ph dataRef="id6" id="ph4" /></pc>. (You can cast the sender to its type if necessary.) Also, the event arguments are presented as an interface rather than as an object.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>In the default.js file, add the Runtime1 function as shown.</source>
					<target>In the default.js file, add the Runtime1 function as shown.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>This code creates a PropertySetStats object, gets its PropertySet collection, and adds its own event handler, the onMapChanged function, to handle the MapChanged event.</source>
					<target>This code creates a PropertySetStats object, gets its PropertySet collection, and adds its own event handler, the onMapChanged function, to handle the MapChanged event.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>After making changes to the collection, runtime1 calls the DisplayStats method to show a summary of change types.</source>
					<target>After making changes to the collection, runtime1 calls the DisplayStats method to show a summary of change types.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>The way you handle Windows Runtime events in JavaScript is very different from the way you handle them in .NET Framework code.</source>
					<target>The way you handle Windows Runtime events in JavaScript is very different from the way you handle them in .NET Framework code.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>The JavaScript event handler takes only one argument.</source>
					<target>The JavaScript event handler takes only one argument.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>When you view this object in the Visual Studio debugger, the first property is the sender.</source>
					<target>When you view this object in the Visual Studio debugger, the first property is the sender.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>The members of the event argument interface also appear directly on this object.</source>
					<target>The members of the event argument interface also appear directly on this object.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>To run the app, choose the F5 key.</source>
					<target>To run the app, choose the F5 key.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>If the class is not sealed, you get the error message, "Exporting unsealed type 'SampleComponent.Example' is not currently supported.</source>
					<target>If the class is not sealed, you get the error message, "Exporting unsealed type 'SampleComponent.Example' is not currently supported.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Please mark it as sealed."</source>
					<target>Please mark it as sealed."</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Runtime 1</pc> button.</source>
					<target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Runtime 1</pc> button.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>The event handler displays changes as elements are added or changed, and at the end the DisplayStats method is called to produce a summary of counts.</source>
					<target>The event handler displays changes as elements are added or changed, and at the end the DisplayStats method is called to produce a summary of counts.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>To stop debugging and close the app, switch back to Visual Studio and choose Shift+F5.</source>
					<target>To stop debugging and close the app, switch back to Visual Studio and choose Shift+F5.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>To add two more items to the PropertySet collection from managed code, add the following code to the PropertySetStats class:</source>
					<target>To add two more items to the PropertySet collection from managed code, add the following code to the PropertySetStats class:</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>This code highlights another difference in the way you use Windows Runtime types in the two environments.</source>
					<target>This code highlights another difference in the way you use Windows Runtime types in the two environments.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>If you type this code yourself, you'll notice that IntelliSense doesn't show the insert method you used in the JavaScript code.</source>
					<target>If you type this code yourself, you'll notice that IntelliSense doesn't show the insert method you used in the JavaScript code.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Instead, it shows the Add method commonly seen on collections in the .NET Framework.</source>
					<target>Instead, it shows the Add method commonly seen on collections in the .NET Framework.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>This is because some commonly used collection interfaces have different names but similar functionality in the Windows Runtime and the .NET Framework.</source>
					<target>This is because some commonly used collection interfaces have different names but similar functionality in the Windows Runtime and the .NET Framework.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>When you use these interfaces in managed code, they appear as their .NET Framework equivalents.</source>
					<target>When you use these interfaces in managed code, they appear as their .NET Framework equivalents.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</data>
				</originalData>
				<segment state="initial">
					<source>This is discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</source>
					<target>This is discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>When you use the same interfaces in JavaScript, the only change from the Windows Runtime is that uppercase letters at the beginning of member names become lowercase.</source>
					<target>When you use the same interfaces in JavaScript, the only change from the Windows Runtime is that uppercase letters at the beginning of member names become lowercase.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Finally, to call the AddMore method with exception handling, add the runtime2 function to default.js.</source>
					<target>Finally, to call the AddMore method with exception handling, add the runtime2 function to default.js.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>Add the event handler registration code the same way you did previously.</source>
					<target>Add the event handler registration code the same way you did previously.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>To run the app, choose the F5 key.</source>
					<target>To run the app, choose the F5 key.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Runtime 1</pc> and then <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Runtime 2</pc>.</source>
					<target>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Runtime 1</pc> and then <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Runtime 2</pc>.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>The JavaScript event handler reports the first change to the collection.</source>
					<target>The JavaScript event handler reports the first change to the collection.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>The second change, however, has a duplicate key.</source>
					<target>The second change, however, has a duplicate key.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Users of .NET Framework dictionaries expect the Add method to throw an exception, and that is what happens.</source>
					<target>Users of .NET Framework dictionaries expect the Add method to throw an exception, and that is what happens.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>JavaScript handles the .NET Framework exception.</source>
					<target>JavaScript handles the .NET Framework exception.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  You can't display the exception's message from JavaScript code.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  You can't display the exception's message from JavaScript code.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>The message text is replaced by a stack trace.</source>
					<target>The message text is replaced by a stack trace.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>For more information, see "Throwing exceptions" in Creating Windows Runtime Components in C# and Visual Basic.</source>
					<target>For more information, see "Throwing exceptions" in Creating Windows Runtime Components in C# and Visual Basic.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>By contrast, when JavaScript called the insert method with a duplicate key, the value of the item was changed.</source>
					<target>By contrast, when JavaScript called the insert method with a duplicate key, the value of the item was changed.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-csharp-and-visual-basic.md)</data>
				</originalData>
				<segment state="initial">
					<source>This difference in behavior is due to the different ways that JavaScript and the .NET Framework support the Windows Runtime, as explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</source>
					<target>This difference in behavior is due to the different ways that JavaScript and the .NET Framework support the Windows Runtime, as explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C# and Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Returning managed types from your component</source>
					<target>Returning managed types from your component</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>As discussed previously, you can pass native Windows Runtime types back and forth freely between your JavaScript code and your C# or Visual Basic code.</source>
					<target>As discussed previously, you can pass native Windows Runtime types back and forth freely between your JavaScript code and your C# or Visual Basic code.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Most of the time, the type names and member names will be the same in both cases (except that the member names start with lowercase letters in JavaScript).</source>
					<target>Most of the time, the type names and member names will be the same in both cases (except that the member names start with lowercase letters in JavaScript).</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>However, in the preceding section, the PropertySet class appeared to have different members in managed code.</source>
					<target>However, in the preceding section, the PropertySet class appeared to have different members in managed code.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>(For example, in JavaScript you called the insert method, and in the .NET Framework code you called the Add method.) This section explores the way those differences affect .NET Framework types passed to JavaScript.</source>
					<target>(For example, in JavaScript you called the insert method, and in the .NET Framework code you called the Add method.) This section explores the way those differences affect .NET Framework types passed to JavaScript.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>In addition to returning Windows Runtime types that you created in your component or passed to your component from JavaScript, you can return a managed type, created in managed code, to JavaScript as if it were the corresponding Windows Runtime type.</source>
					<target>In addition to returning Windows Runtime types that you created in your component or passed to your component from JavaScript, you can return a managed type, created in managed code, to JavaScript as if it were the corresponding Windows Runtime type.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>Even in the first, simple example of a runtime class, the parameters and return types of the members were Visual Basic or C# primitive types, which are .NET Framework types.</source>
					<target>Even in the first, simple example of a runtime class, the parameters and return types of the members were Visual Basic or C# primitive types, which are .NET Framework types.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>To demonstrate this for collections, add the following code to the Example class, to create a method that returns a generic dictionary of strings, indexed by integers:</source>
					<target>To demonstrate this for collections, add the following code to the Example class, to create a method that returns a generic dictionary of strings, indexed by integers:</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/xfhwa508.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Notice that the dictionary must be returned as an interface that is implemented by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary<ph dataRef="id3" id="ph1" />TKey, TValue<ph dataRef="id4" id="ph2" /></pc>, and that maps to a Windows Runtime interface.</source>
					<target>Notice that the dictionary must be returned as an interface that is implemented by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dictionary<ph dataRef="id3" id="ph1" />TKey, TValue<ph dataRef="id4" id="ph2" /></pc>, and that maps to a Windows Runtime interface.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>In this case, the interface is IDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> (IDictionary(Of Integer, String) in Visual Basic).</source>
					<target>In this case, the interface is IDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> (IDictionary(Of Integer, String) in Visual Basic).</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>When the Windows Runtime type IMap<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> is passed to managed code, it appears as IDictionary<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" />, and the reverse is true when the managed type is passed to JavaScript.</source>
					<target>When the Windows Runtime type IMap<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> is passed to managed code, it appears as IDictionary<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" />, and the reverse is true when the managed type is passed to JavaScript.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  When a managed type implements multiple interfaces, JavaScript uses the interface that appears first in the list.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  When a managed type implements multiple interfaces, JavaScript uses the interface that appears first in the list.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you return Dictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> to JavaScript code, it appears as IDictionary<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" /> no matter which interface you specify as the return type.</source>
					<target>For example, if you return Dictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> to JavaScript code, it appears as IDictionary<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" /> no matter which interface you specify as the return type.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.</source>
					<target>This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>To test the new method and use the dictionary, add the returns1 and returns2 functions to default.js:</source>
					<target>To test the new method and use the dictionary, add the returns1 and returns2 functions to default.js:</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Add the event registration code to the same then block as the other event registration code:</source>
					<target>Add the event registration code to the same then block as the other event registration code:</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>There are a few interesting things to observe about this JavaScript code.</source>
					<target>There are a few interesting things to observe about this JavaScript code.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>First of all, it includes a showMap function to display the contents of the dictionary in HTML.</source>
					<target>First of all, it includes a showMap function to display the contents of the dictionary in HTML.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>In the code for showMap, notice the iteration pattern.</source>
					<target>In the code for showMap, notice the iteration pattern.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>In the .NET Framework, there's no First method on the generic IDictionary interface, and the size is returned by a Count property rather than by a Size method.</source>
					<target>In the .NET Framework, there's no First method on the generic IDictionary interface, and the size is returned by a Count property rather than by a Size method.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To JavaScript, IDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> appears to be the Windows Runtime type IMap<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" />.</source>
					<target>To JavaScript, IDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> appears to be the Windows Runtime type IMap<ph dataRef="id3" id="ph3" />int, string<ph dataRef="id4" id="ph4" />.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br226042.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMap<ph dataRef="id3" id="ph1" />K,V<ph dataRef="id4" id="ph2" /></pc> interface.)</source>
					<target>(See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMap<ph dataRef="id3" id="ph1" />K,V<ph dataRef="id4" id="ph2" /></pc> interface.)</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>In the returns2 function, as in earlier examples, JavaScript calls the Insert method (insert in JavaScript) to add items to the dictionary.</source>
					<target>In the returns2 function, as in earlier examples, JavaScript calls the Insert method (insert in JavaScript) to add items to the dictionary.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>To run the app, choose the F5 key.</source>
					<target>To run the app, choose the F5 key.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To create and display the initial contents of the dictionary, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 1</pc> button.</source>
					<target>To create and display the initial contents of the dictionary, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 1</pc> button.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To add two more entries to the dictionary, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button.</source>
					<target>To add two more entries to the dictionary, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Notice that the entries are displayed in order of insertion, as you would expect from Dictionary<ph dataRef="id1" id="ph1" />TKey, TValue<ph dataRef="id2" id="ph2" />.</source>
					<target>Notice that the entries are displayed in order of insertion, as you would expect from Dictionary<ph dataRef="id1" id="ph1" />TKey, TValue<ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If you want them sorted, you can return a SortedDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> from GetMapOfNames.</source>
					<target>If you want them sorted, you can return a SortedDictionary<ph dataRef="id1" id="ph1" />int, string<ph dataRef="id2" id="ph2" /> from GetMapOfNames.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(The PropertySet class used in earlier examples has a different internal organization from Dictionary<ph dataRef="id1" id="ph1" />TKey, TValue<ph dataRef="id2" id="ph2" />.)</source>
					<target>(The PropertySet class used in earlier examples has a different internal organization from Dictionary<ph dataRef="id1" id="ph1" />TKey, TValue<ph dataRef="id2" id="ph2" />.)</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>Of course, JavaScript is not a strongly typed language, so using strongly typed generic collections can lead to some surprising results.</source>
					<target>Of course, JavaScript is not a strongly typed language, so using strongly typed generic collections can lead to some surprising results.</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button again.</source>
					<target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button again.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>JavaScript obligingly coerces the "7" to a numeric 7, and the numeric 7 that's stored in ct to a string.</source>
					<target>JavaScript obligingly coerces the "7" to a numeric 7, and the numeric 7 that's stored in ct to a string.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>And it coerces the string "forty" to zero.</source>
					<target>And it coerces the string "forty" to zero.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>But that's only the beginning.</source>
					<target>But that's only the beginning.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button a few more times.</source>
					<target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Returns 2</pc> button a few more times.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>In managed code, the Add method would generate duplicate key exceptions, even if the values were cast to the correct types.</source>
					<target>In managed code, the Add method would generate duplicate key exceptions, even if the values were cast to the correct types.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>In contrast, the Insert method updates the value associated with an existing key and returns a Boolean value that indicates whether a new key was added to the dictionary.</source>
					<target>In contrast, the Insert method updates the value associated with an existing key and returns a Boolean value that indicates whether a new key was added to the dictionary.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>This is why the value associated with the key 7 keeps changing.</source>
					<target>This is why the value associated with the key 7 keeps changing.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>Another unexpected behavior: If you pass an unassigned JavaScript variable as a string argument, what you get is the string "undefined".</source>
					<target>Another unexpected behavior: If you pass an unassigned JavaScript variable as a string argument, what you get is the string "undefined".</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>In short, be careful when you pass .NET Framework collection types to your JavaScript code.</source>
					<target>In short, be careful when you pass .NET Framework collection types to your JavaScript code.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you have large quantities of text to concatenate, you can do it more efficiently by moving the code into a .NET Framework method and using the StringBuilder class, as shown in the showMap function.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you have large quantities of text to concatenate, you can do it more efficiently by moving the code into a .NET Framework method and using the StringBuilder class, as shown in the showMap function.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>Although you can't expose your own generic types from a Windows Runtime component, you can return .NET Framework generic collections for Windows Runtime classes by using code such as the following:</source>
					<target>Although you can't expose your own generic types from a Windows Runtime component, you can return .NET Framework generic collections for Windows Runtime classes by using code such as the following:</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>List<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" /> implements IList<ph dataRef="id3" id="ph3" />T<ph dataRef="id4" id="ph4" />, which appears as the Windows Runtime type IVector<ph dataRef="id5" id="ph5" />T<ph dataRef="id6" id="ph6" /> in JavaScript.</source>
					<target>List<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" /> implements IList<ph dataRef="id3" id="ph3" />T<ph dataRef="id4" id="ph4" />, which appears as the Windows Runtime type IVector<ph dataRef="id5" id="ph5" />T<ph dataRef="id6" id="ph6" /> in JavaScript.</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>Declaring events</source>
					<target>Declaring events</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>You can declare events by using the standard .NET Framework event pattern or other patterns used by the Windows Runtime.</source>
					<target>You can declare events by using the standard .NET Framework event pattern or other patterns used by the Windows Runtime.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The .NET Framework supports equivalence between the System.EventHandler<ph dataRef="id1" id="ph1" />TEventArgs<ph dataRef="id2" id="ph2" /> delegate and the Windows Runtime EventHandler<ph dataRef="id3" id="ph3" />T<ph dataRef="id4" id="ph4" /> delegate, so using EventHandler<ph dataRef="id5" id="ph5" />TEventArgs<ph dataRef="id6" id="ph6" /> is a good way to implement the standard .NET Framework pattern.</source>
					<target>The .NET Framework supports equivalence between the System.EventHandler<ph dataRef="id1" id="ph1" />TEventArgs<ph dataRef="id2" id="ph2" /> delegate and the Windows Runtime EventHandler<ph dataRef="id3" id="ph3" />T<ph dataRef="id4" id="ph4" /> delegate, so using EventHandler<ph dataRef="id5" id="ph5" />TEventArgs<ph dataRef="id6" id="ph6" /> is a good way to implement the standard .NET Framework pattern.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>To see how this works, add the following pair of classes to the SampleComponent project:</source>
					<target>To see how this works, add the following pair of classes to the SampleComponent project:</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>When you expose an event in the Windows Runtime, the event argument class inherits from System.Object.</source>
					<target>When you expose an event in the Windows Runtime, the event argument class inherits from System.Object.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>It doesn't inherit from System.EventArgs, as it would in the .NET Framework, because EventArgs is not a Windows Runtime type.</source>
					<target>It doesn't inherit from System.EventArgs, as it would in the .NET Framework, because EventArgs is not a Windows Runtime type.</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you declare custom event accessors for your event (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom</pc> keyword in Visual Basic), you must use the Windows Runtime event pattern.</source>
					<target>If you declare custom event accessors for your event (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom</pc> keyword in Visual Basic), you must use the Windows Runtime event pattern.</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](custom-events-and-event-accessors-in-windows-runtime-components.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom events and event accessors in Windows Runtime Components</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom events and event accessors in Windows Runtime Components</pc>.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>To handle the Test event, add the events1 function to default.js.</source>
					<target>To handle the Test event, add the events1 function to default.js.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>The events1 function creates an event handler function for the Test event, and immediately invokes the OnTest method to raise the event.</source>
					<target>The events1 function creates an event handler function for the Test event, and immediately invokes the OnTest method to raise the event.</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>If you place a breakpoint in the body of the event handler, you can see that the object passed to the single parameter includes the source object and both members of TestEventArgs.</source>
					<target>If you place a breakpoint in the body of the event handler, you can see that the object passed to the single parameter includes the source object and both members of TestEventArgs.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>Add the event registration code to the same then block as the other event registration code:</source>
					<target>Add the event registration code to the same then block as the other event registration code:</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>Exposing asynchronous operations</source>
					<target>Exposing asynchronous operations</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/dd321424.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The .NET Framework has a rich set of tools for asynchronous processing and parallel processing, based on the Task and generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task<ph dataRef="id3" id="ph1" />TResult<ph dataRef="id4" id="ph2" /></pc> classes.</source>
					<target>The .NET Framework has a rich set of tools for asynchronous processing and parallel processing, based on the Task and generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task<ph dataRef="id3" id="ph1" />TResult<ph dataRef="id4" id="ph2" /></pc> classes.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/br205781.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/br205784.aspx)</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/br205802.aspx)</data>
					<data id="id9">&amp;lt;</data>
					<data id="id10">&amp;gt;</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/br205807.aspx)</data>
					<data id="id13">&amp;lt;</data>
					<data id="id14">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To expose task-based asynchronous processing in a Windows Runtime component, use the Windows Runtime interfaces <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncAction</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncActionWithProgress<ph dataRef="id5" id="ph1" />TProgress<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3">IAsyncOperation<ph dataRef="id9" id="ph3" />TResult<ph dataRef="id10" id="ph4" /></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p4">IAsyncOperationWithProgress<ph dataRef="id13" id="ph5" />TResult, TProgress<ph dataRef="id14" id="ph6" /></pc>.</source>
					<target>To expose task-based asynchronous processing in a Windows Runtime component, use the Windows Runtime interfaces <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncAction</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncActionWithProgress<ph dataRef="id5" id="ph1" />TProgress<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3">IAsyncOperation<ph dataRef="id9" id="ph3" />TResult<ph dataRef="id10" id="ph4" /></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p4">IAsyncOperationWithProgress<ph dataRef="id13" id="ph5" />TResult, TProgress<ph dataRef="id14" id="ph6" /></pc>.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>(In the Windows Runtime, operations return results, but actions do not.)</source>
					<target>(In the Windows Runtime, operations return results, but actions do not.)</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>This section demonstrates a cancelable asynchronous operation that reports progress and returns results.</source>
					<target>This section demonstrates a cancelable asynchronous operation that reports progress and returns results.</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The GetPrimesInRangeAsync method uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AsyncInfo</pc> class to generate a task and to connect its cancellation and progress-reporting features to a WinJS.Promise object.</source>
					<target>The GetPrimesInRangeAsync method uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AsyncInfo</pc> class to generate a task and to connect its cancellation and progress-reporting features to a WinJS.Promise object.</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Begin by adding the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Imports</pc> in Visual Basic) to the Example class:</source>
					<target>Begin by adding the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Imports</pc> in Visual Basic) to the Example class:</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>Now add the GetPrimesInRangeAsync method to the Example class:</source>
					<target>Now add the GetPrimesInRangeAsync method to the Example class:</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>GetPrimesInRangeAsync is a very simple prime number finder, and that's by design.</source>
					<target>GetPrimesInRangeAsync is a very simple prime number finder, and that's by design.</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>The focus here is on implementing an asynchronous operation, so simplicity is important, and a slow implementation is an advantage when we're demonstrating cancellation.</source>
					<target>The focus here is on implementing an asynchronous operation, so simplicity is important, and a slow implementation is an advantage when we're demonstrating cancellation.</target>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<segment state="initial">
					<source>GetPrimesInRangeAsync finds primes by brute force: It divides a candidate by all the integers that are less than or equal to its square root, rather than using only the prime numbers.</source>
					<target>GetPrimesInRangeAsync finds primes by brute force: It divides a candidate by all the integers that are less than or equal to its square root, rather than using only the prime numbers.</target>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<segment state="initial">
					<source>Stepping through this code:</source>
					<target>Stepping through this code:</target>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<segment state="initial">
					<source>Before starting an asynchronous operation, perform housekeeping activities such as validating parameters and throwing exceptions for invalid input.</source>
					<target>Before starting an asynchronous operation, perform housekeeping activities such as validating parameters and throwing exceptions for invalid input.</target>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/hh779740.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;lt;</data>
					<data id="id7">&amp;gt;</data>
					<data id="id8">&amp;lt;</data>
					<data id="id9">&amp;gt;</data>
					<data id="id10">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The key to this implementation is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AsyncInfo.Run<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" />(Func<ph dataRef="id5" id="ph3" />CancellationToken, IProgress<ph dataRef="id6" id="ph4" />TProgress<ph dataRef="id7" id="ph5" />, Task<ph dataRef="id8" id="ph6" />TResult<ph dataRef="id9" id="ph7" /></pc><ph dataRef="id10" id="ph8" />) method, and the delegate that is the method's only parameter.</source>
					<target>The key to this implementation is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AsyncInfo.Run<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" />(Func<ph dataRef="id5" id="ph3" />CancellationToken, IProgress<ph dataRef="id6" id="ph4" />TProgress<ph dataRef="id7" id="ph5" />, Task<ph dataRef="id8" id="ph6" />TResult<ph dataRef="id9" id="ph7" /></pc><ph dataRef="id10" id="ph8" />) method, and the delegate that is the method's only parameter.</target>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>The delegate must accept a cancellation token and an interface for reporting progress, and must return a started task that uses those parameters.</source>
					<target>The delegate must accept a cancellation token and an interface for reporting progress, and must return a started task that uses those parameters.</target>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>When JavaScript calls the GetPrimesInRangeAsync method, the following steps occur (not necessarily in the order given here):</source>
					<target>When JavaScript calls the GetPrimesInRangeAsync method, the following steps occur (not necessarily in the order given here):</target>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211867.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.Promise</pc> object supplies functions to process the returned results, react to cancellation, and handle progress reports.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.Promise</pc> object supplies functions to process the returned results, react to cancellation, and handle progress reports.</target>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The AsyncInfo.Run method creates a cancellation source and an object that implements the IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" /> interface.</source>
					<target>The AsyncInfo.Run method creates a cancellation source and an object that implements the IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" /> interface.</target>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/system.threading.cancellationtoken.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/hh138298.aspx)</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To the delegate, it passes both a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CancellationToken</pc> token from the cancellation source, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IProgress<ph dataRef="id5" id="ph1" />T<ph dataRef="id6" id="ph2" /></pc> interface.</source>
					<target>To the delegate, it passes both a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CancellationToken</pc> token from the cancellation source, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IProgress<ph dataRef="id5" id="ph1" />T<ph dataRef="id6" id="ph2" /></pc> interface.</target>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the Promise object doesn't supply a function to react to cancellation, AsyncInfo.Run still passes a cancelable token, and cancellation can still occur.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the Promise object doesn't supply a function to react to cancellation, AsyncInfo.Run still passes a cancelable token, and cancellation can still occur.</target>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If the Promise object doesn't supply a function to handle progress updates, AsyncInfo.Run still supplies an object that implements IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" />, but its reports are ignored.</source>
					<target>If the Promise object doesn't supply a function to handle progress updates, AsyncInfo.Run still supplies an object that implements IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" />, but its reports are ignored.</target>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/hh160376.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The delegate uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task.Run<ph dataRef="id3" id="ph1" />TResult<ph dataRef="id4" id="ph2" />(Func<ph dataRef="id5" id="ph3" />TResult<ph dataRef="id6" id="ph4" />, CancellationToken</pc>) method to create a started task that uses the token and the progress interface.</source>
					<target>The delegate uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task.Run<ph dataRef="id3" id="ph1" />TResult<ph dataRef="id4" id="ph2" />(Func<ph dataRef="id5" id="ph3" />TResult<ph dataRef="id6" id="ph4" />, CancellationToken</pc>) method to create a started task that uses the token and the progress interface.</target>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>The delegate for the started task is provided by a lambda function that computes the desired result.</source>
					<target>The delegate for the started task is provided by a lambda function that computes the desired result.</target>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<segment state="initial">
					<source>More about that in a moment.</source>
					<target>More about that in a moment.</target>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206594.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The AsyncInfo.Run method creates an object that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncOperationWithProgress<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" /></pc> interface, connects the Windows Runtime cancellation mechanism with the token source, and connects the Promise object's progress-reporting function with the IProgress<ph dataRef="id5" id="ph3" />T<ph dataRef="id6" id="ph4" /> interface.</source>
					<target>The AsyncInfo.Run method creates an object that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncOperationWithProgress<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" /></pc> interface, connects the Windows Runtime cancellation mechanism with the token source, and connects the Promise object's progress-reporting function with the IProgress<ph dataRef="id5" id="ph3" />T<ph dataRef="id6" id="ph4" /> interface.</target>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>The IAsyncOperationWithProgress<ph dataRef="id1" id="ph1" />TResult, TProgress<ph dataRef="id2" id="ph2" /> interface is returned to JavaScript.</source>
					<target>The IAsyncOperationWithProgress<ph dataRef="id1" id="ph1" />TResult, TProgress<ph dataRef="id2" id="ph2" /> interface is returned to JavaScript.</target>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>The lambda function that is represented by the started task doesn't take any arguments.</source>
					<target>The lambda function that is represented by the started task doesn't take any arguments.</target>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>Because it's a lambda function, it has access to the token and the IProgress interface.</source>
					<target>Because it's a lambda function, it has access to the token and the IProgress interface.</target>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<segment state="initial">
					<source>Each time a candidate number is evaluated, the lambda function:</source>
					<target>Each time a candidate number is evaluated, the lambda function:</target>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Checks to see whether the next percentage point of progress has been reached.</source>
					<target>Checks to see whether the next percentage point of progress has been reached.</target>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If it has, the lambda function calls the IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" />.Report method, and the percentage is passed through to the function that the Promise object specified for reporting progress.</source>
					<target>If it has, the lambda function calls the IProgress<ph dataRef="id1" id="ph1" />T<ph dataRef="id2" id="ph2" />.Report method, and the percentage is passed through to the function that the Promise object specified for reporting progress.</target>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<segment state="initial">
					<source>Uses the cancellation token to throw an exception if the operation has been canceled.</source>
					<target>Uses the cancellation token to throw an exception if the operation has been canceled.</target>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.iasyncinfo.cancel.aspx)</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncInfo.Cancel</pc> method (which the IAsyncOperationWithProgress<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" /> interface inherits) has been called, the connection that the AsyncInfo.Run method set up ensures that the cancellation token is notified.</source>
					<target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IAsyncInfo.Cancel</pc> method (which the IAsyncOperationWithProgress<ph dataRef="id3" id="ph1" />TResult, TProgress<ph dataRef="id4" id="ph2" /> interface inherits) has been called, the connection that the AsyncInfo.Run method set up ensures that the cancellation token is notified.</target>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<segment state="initial">
					<source>When the lambda function returns the list of prime numbers, the list is passed to the function that the WinJS.Promise object specified for processing the results.</source>
					<target>When the lambda function returns the list of prime numbers, the list is passed to the function that the WinJS.Promise object specified for processing the results.</target>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<segment state="initial">
					<source>To create the JavaScript promise and set up the cancellation mechanism, add the asyncRun and asyncCancel functions to default.js.</source>
					<target>To create the JavaScript promise and set up the cancellation mechanism, add the asyncRun and asyncCancel functions to default.js.</target>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<segment state="initial">
					<source>Don't forget the event registration code the same as you did previously.</source>
					<target>Don't forget the event registration code the same as you did previously.</target>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<segment state="initial">
					<source>By calling the asynchronous GetPrimesInRangeAsync method, the asyncRun function creates a WinJS.Promise object.</source>
					<target>By calling the asynchronous GetPrimesInRangeAsync method, the asyncRun function creates a WinJS.Promise object.</target>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>The object's then method takes three functions that process the returned results, react to errors (including cancellation), and handle progress reports.</source>
					<target>The object's then method takes three functions that process the returned results, react to errors (including cancellation), and handle progress reports.</target>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<segment state="initial">
					<source>In this example, the returned results are printed in the output area.</source>
					<target>In this example, the returned results are printed in the output area.</target>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>Cancellation or completion resets the buttons that launch and cancel the operation.</source>
					<target>Cancellation or completion resets the buttons that launch and cancel the operation.</target>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<segment state="initial">
					<source>Progress reporting updates the progress control.</source>
					<target>Progress reporting updates the progress control.</target>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<segment state="initial">
					<source>The asyncCancel function just calls the cancel method of the WinJS.Promise object.</source>
					<target>The asyncCancel function just calls the cancel method of the WinJS.Promise object.</target>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<segment state="initial">
					<source>To run the app, choose the F5 key.</source>
					<target>To run the app, choose the F5 key.</target>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To start the asynchronous operation, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Async</pc> button.</source>
					<target>To start the asynchronous operation, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Async</pc> button.</target>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<segment state="initial">
					<source>What happens next depends on how fast your computer is.</source>
					<target>What happens next depends on how fast your computer is.</target>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<segment state="initial">
					<source>If the progress bar zips to completion before you have time to blink, increase the size of the starting number that is passed to GetPrimesInRangeAsync by one or more factors of ten.</source>
					<target>If the progress bar zips to completion before you have time to blink, increase the size of the starting number that is passed to GetPrimesInRangeAsync by one or more factors of ten.</target>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<segment state="initial">
					<source>You can fine-tune the duration of the operation by increasing or decreasing the count of numbers to test, but adding zeros in the middle of the starting number will have a bigger impact.</source>
					<target>You can fine-tune the duration of the operation by increasing or decreasing the count of numbers to test, but adding zeros in the middle of the starting number will have a bigger impact.</target>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To cancel the operation, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cancel Async</pc> button.</source>
					<target>To cancel the operation, choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cancel Async</pc> button.</target>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<segment state="initial">
					<source>.NET for Windows Store Apps Overview</source>
					<target>.NET for Windows Store Apps Overview</target>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>.NET for UWP apps</source>
					<target>.NET for UWP apps</target>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<segment state="initial">
					<source>Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript</source>
					<target>Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>