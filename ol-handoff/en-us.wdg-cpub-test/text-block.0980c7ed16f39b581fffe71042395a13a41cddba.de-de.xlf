<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">ac3c677f48c71239a48312c2fb5aafc1f55ec149</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\text-block.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">1ee315851e07f467e9570be508a3dd2805b70adc</mda:meta><mda:meta type="olxliffhash">1e4bac90e20d9824c74f77357f0b04949a550974</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Text block</source>
					<target>Text block</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Text block is the primary control for displaying read-only text in apps.</source>
					<target>Text block is the primary control for displaying read-only text in apps.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.</source>
					<target>You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>TextBlock class</source>
					<target>TextBlock class</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Text property</source>
					<target>Text property</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Inlines property</source>
					<target>Inlines property</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Is this the right control?</source>
					<target>Is this the right control?</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>A text block is typically easier to use and provides better text rendering performance than a rich text block, so it's preferred for most app UI text.</source>
					<target>A text block is typically easier to use and provides better text rendering performance than a rich text block, so it's preferred for most app UI text.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can easily access and use text from a text block in your app by getting the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property.</source>
					<target>You can easily access and use text from a text block in your app by getting the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>It also provides many of the same formatting options for customizing how your text is rendered.</source>
					<target>It also provides many of the same formatting options for customizing how your text is rendered.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Although you can put line breaks in the text, text block is designed to display a single paragraph and doesn’t support text indentation.</source>
					<target>Although you can put line breaks in the text, text block is designed to display a single paragraph and doesn’t support text indentation.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichTextBlock</pc> when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichTextBlock</pc> when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](text-controls.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about choosing the right text control, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text controls</pc> article.</source>
					<target>For more info about choosing the right text control, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text controls</pc> article.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Create a text block</source>
					<target>Create a text block</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Here's how to define a simple TextBlock control and set its Text property to a string.</source>
					<target>Here's how to define a simple TextBlock control and set its Text property to a string.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Content model</source>
					<target>Content model</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.inlines.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>There are two properties you can use to add content to a TextBlock: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Inlines</pc>.</source>
					<target>There are two properties you can use to add content to a TextBlock: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Inlines</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The most common way to display text is to set the Text property to a string value, as shown in the previous example.</source>
					<target>The most common way to display text is to set the Text property to a string value, as shown in the previous example.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>You can also add content by placing inline flow content elements in the TextBox.Inlines property, like this.</source>
					<target>You can also add content by placing inline flow content elements in the TextBox.Inlines property, like this.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Elements derived from the Inline class, such as Bold, Italic, Run, Span, and LineBreak, enable different formatting for different parts of the text.</source>
					<target>Elements derived from the Inline class, such as Bold, Italic, Run, Span, and LineBreak, enable different formatting for different parts of the text.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Formatting text</pc> section.</source>
					<target>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Formatting text</pc> section.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The inline Hyperlink element lets you add a hyperlink to your text.</source>
					<target>The inline Hyperlink element lets you add a hyperlink to your text.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>However, using Inlines also disables fast path text rendering, which is discussed in the next section.</source>
					<target>However, using Inlines also disables fast path text rendering, which is discussed in the next section.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Performance considerations</source>
					<target>Performance considerations</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Whenever possible, XAML uses a more efficient code path to layout text.</source>
					<target>Whenever possible, XAML uses a more efficient code path to layout text.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>This fast path both decreases overall memory use and greatly reduces the CPU time to do text measuring and arranging.</source>
					<target>This fast path both decreases overall memory use and greatly reduces the CPU time to do text measuring and arranging.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>This fast path applies only to TextBlock, so it should be preferred when possible over RichTextBlock.</source>
					<target>This fast path applies only to TextBlock, so it should be preferred when possible over RichTextBlock.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Certain conditions require TextBlock to fall back to a more feature-rich and CPU intensive code path for text rendering.</source>
					<target>Certain conditions require TextBlock to fall back to a more feature-rich and CPU intensive code path for text rendering.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>To keep text rendering on the fast path, be sure to follow these guidelines when setting the properties listed here.</source>
					<target>To keep text rendering on the fast path, be sure to follow these guidelines when setting the properties listed here.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text</pc></pc>: The most important condition is that the fast path is used only when you set text by explicitly setting the Text property, either in XAML or in code (as shown in the previous examples).</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text</pc></pc>: The most important condition is that the fast path is used only when you set text by explicitly setting the Text property, either in XAML or in code (as shown in the previous examples).</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">`&lt;TextBlock&gt;Inline text&lt;/TextBlock&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>Setting the text via TextBlock’s Inlines collection (such as <ph dataRef="id1" id="ph1" />) will disable the fast path, due to the potential complexity of multiple formats.</source>
					<target>Setting the text via TextBlock’s Inlines collection (such as <ph dataRef="id1" id="ph1" />) will disable the fast path, due to the potential complexity of multiple formats.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.characterspacing.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CharacterSpacing</pc></pc>: Only the default value of 0 is fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CharacterSpacing</pc></pc>: Only the default value of 0 is fast path.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Typography</pc></pc>: Only the default values for the various Typography properties are fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Typography</pc></pc>: Only the default values for the various Typography properties are fast path.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.texttrimming.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextTrimming</pc></pc>: Only the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">None</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CharacterEllipsis</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">WordEllipsis</pc> values are fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextTrimming</pc></pc>: Only the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">None</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CharacterEllipsis</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">WordEllipsis</pc> values are fast path.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Clip</pc> value disables the fast path.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Clip</pc> value disables the fast path.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.linestackingstrategy.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.lineheight.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineStackingStrategy</pc></pc>: If <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LineHeight</pc> is not 0, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">BaselineToBaseline</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MaxHeight</pc> values disable the fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineStackingStrategy</pc></pc>: If <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LineHeight</pc> is not 0, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">BaselineToBaseline</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">MaxHeight</pc> values disable the fast path.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.istextselectionenabled.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsTextSelectionEnabled</pc></pc>: Only <pc dataRefEnd="id6" dataRefStart="id5" id="p3">false</pc> is fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsTextSelectionEnabled</pc></pc>: Only <pc dataRefEnd="id6" dataRefStart="id5" id="p3">false</pc> is fast path.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Setting this property to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">true</pc> disables the fast path.</source>
					<target>Setting this property to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">true</pc> disables the fast path.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.debugsettings.istextperformancevisualizationenabled.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DebugSettings.IsTextPerformanceVisualizationEnabled</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc> during debugging to determine whether text is using fast path rendering.</source>
					<target>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DebugSettings.IsTextPerformanceVisualizationEnabled</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc> during debugging to determine whether text is using fast path rendering.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>When this property is set to true, the text that is on the fast path displays in a bright green color.</source>
					<target>When this property is set to true, the text that is on the fast path displays in a bright green color.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">](https://channel9.msdn.com/Events/Build/2015/3-698)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />This feature is explained in depth in this session from Build 2015- <pc dataRefEnd="id5" dataRefStart="id4" id="p2">XAML Performance: Techniques for Maximizing Universal Windows App Experiences Built with XAML</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />This feature is explained in depth in this session from Build 2015- <pc dataRefEnd="id5" dataRefStart="id4" id="p2">XAML Performance: Techniques for Maximizing Universal Windows App Experiences Built with XAML</pc>.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.application.onlaunched.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You typically set debug settings in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnLaunched</pc> method override in the code-behind page for App.xaml, like this.</source>
					<target>You typically set debug settings in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnLaunched</pc> method override in the code-behind page for App.xaml, like this.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>In this example, the first TextBlock is rendered using the fast path, while the second is not.</source>
					<target>In this example, the first TextBlock is rendered using the fast path, while the second is not.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>When you run this XAML in debug mode with IsTextPerformanceVisualizationEnabled set to true, the result looks like this.</source>
					<target>When you run this XAML in debug mode with IsTextPerformanceVisualizationEnabled set to true, the result looks like this.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Text rendered in debug mode</source>
					<target>Text rendered in debug mode</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc><ph dataRef="id3" id="ph1" />The color of text that is not on the fast path is not changed.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc><ph dataRef="id3" id="ph1" />The color of text that is not on the fast path is not changed.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>If you have text in your app with its color specified as bright green, it is still displayed in bright green when it's on the slower rendering path.</source>
					<target>If you have text in your app with its color specified as bright green, it is still displayed in bright green when it's on the slower rendering path.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Be careful to not confuse text that is set to green in the app with text that is on the fast path and green because of the debug settings.</source>
					<target>Be careful to not confuse text that is set to green in the app with text that is on the fast path and green because of the debug settings.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Formatting text</source>
					<target>Formatting text</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Although the Text property stores plain text, you can apply various formatting options to the TextBlock control to customize how the text is rendered in your app.</source>
					<target>Although the Text property stores plain text, you can apply various formatting options to the TextBlock control to customize how the text is rendered in your app.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>You can set standard control properties like FontFamily, FontSize, FontStyle, Foreground, and CharacterSpacing to change the look of the text.</source>
					<target>You can set standard control properties like FontFamily, FontSize, FontStyle, Foreground, and CharacterSpacing to change the look of the text.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>You can also use inline text elements and Typography attached properties to format your text.</source>
					<target>You can also use inline text elements and Typography attached properties to format your text.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>These options affect only how the TextBlock displays the text locally, so if you copy and paste the text into a rich text control, for example, no formatting is applied.</source>
					<target>These options affect only how the TextBlock displays the text locally, so if you copy and paste the text into a rich text control, for example, no formatting is applied.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Remember, as noted in the previous section, inline text elements and non-default typography values are not rendered on the fast path.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Remember, as noted in the previous section, inline text elements and non-default typography values are not rendered on the fast path.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Inline elements</source>
					<target>Inline elements</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Documents</pc> namespace provides a variety of inline text elements that you can use to format your text, such as Bold, Italic, Run, Span, and LineBreak.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Documents</pc> namespace provides a variety of inline text elements that you can use to format your text, such as Bold, Italic, Run, Span, and LineBreak.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>You can display a series of strings in a TextBlock, where each string has different formatting.</source>
					<target>You can display a series of strings in a TextBlock, where each string has different formatting.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>You can do this by using a Run element to display each string with its formatting and by separating each Run element with a LineBreak element.</source>
					<target>You can do this by using a Run element to display each string with its formatting and by separating each Run element with a LineBreak element.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Here's how to define several differently formatted text strings in a TextBlock by using Run objects separated with a LineBreak.</source>
					<target>Here's how to define several differently formatted text strings in a TextBlock by using Run objects separated with a LineBreak.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Here's the result.</source>
					<target>Here's the result.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Text formatted with run elements</source>
					<target>Text formatted with run elements</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Typography</source>
					<target>Typography</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The attached properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Typography</pc> class provide access to a set of Microsoft OpenType typography properties.</source>
					<target>The attached properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Typography</pc> class provide access to a set of Microsoft OpenType typography properties.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>You can set these attached properties either on the TextBlock, or on individual inline text elements.</source>
					<target>You can set these attached properties either on the TextBlock, or on individual inline text elements.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>These examples show both.</source>
					<target>These examples show both.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Recommendations</source>
					<target>Recommendations</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
					<target>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://go.microsoft.com/fwlink/p/?linkid=258743)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</source>
					<target>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Text controls</source>
					<target>Text controls</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>For designers</source>
					<target>For designers</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Guidelines for spell checking</source>
					<target>Guidelines for spell checking</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Adding search</source>
					<target>Adding search</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Guidelines for text input</source>
					<target>Guidelines for text input</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>For developers (XAML)</source>
					<target>For developers (XAML)</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>TextBox class</source>
					<target>TextBox class</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Xaml.Controls PasswordBox class</source>
					<target>Windows.UI.Xaml.Controls PasswordBox class</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>For developers (other)</source>
					<target>For developers (other)</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>String.Length property</source>
					<target>String.Length property</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>