<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">ddbbf41bae46b9e2179e084e04b153423bafd5a1</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\xaml-platform\templatebinding-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a2a4c8dde87a60613cc7e7be6e8ede75d1351caa</mda:meta><mda:meta type="olxliffhash">92a8f583877a745c10a2f27cb01479b41c04500a</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Links the value of a property in a control template to the value of some other exposed property on the templated control.</source>
					<target>Links the value of a property in a control template to the value of some other exposed property on the templated control.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>TemplateBinding can only be used within a ControlTemplate definition in XAML.</source>
					<target>TemplateBinding can only be used within a ControlTemplate definition in XAML.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>{TemplateBinding} markup extension</source>
					<target>{TemplateBinding} markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>{TemplateBinding} markup extension</source>
					<target>{TemplateBinding} markup extension</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Links the value of a property in a control template to the value of some other exposed property on the templated control.</source>
					<target>Links the value of a property in a control template to the value of some other exposed property on the templated control.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can only be used within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can only be used within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage (for Setter property in template or style)</source>
					<target>XAML attribute usage (for Setter property in template or style)</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>propertyName</source>
					<target>propertyName</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The name of the property being set in the setter syntax.</source>
					<target>The name of the property being set in the setter syntax.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>This must be a dependency property.</source>
					<target>This must be a dependency property.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>sourceProperty</source>
					<target>sourceProperty</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The name of another dependency property that exists on the type being templated.</source>
					<target>The name of another dependency property that exists on the type being templated.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a fundamental part of how you define a control template, either if you are a custom control author or if you are replacing a control template for existing controls.</source>
					<target>Using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a fundamental part of how you define a control template, either if you are a custom control author or if you are replacing a control template for existing controls.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh465374)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>It's fairly common for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyName</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">targetProperty</pc> to use the same property name.</source>
					<target>It's fairly common for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyName</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">targetProperty</pc> to use the same property name.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>In this case, a control might define a property on itself and forward the property to an existing and intuitively named property of one of its component parts.</source>
					<target>In this case, a control might define a property on itself and forward the property to an existing and intuitively named property of one of its component parts.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, a control that incorporates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> in its compositing, which is used to display the control's own <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Text</pc> property, might include this XAML as a part in the control template:</source>
					<target>For example, a control that incorporates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> in its compositing, which is used to display the control's own <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Text</pc> property, might include this XAML as a part in the control template:</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>The types used as the value for the source property and the target property must match.</source>
					<target>The types used as the value for the source property and the target property must match.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>There's no opportunity to introduce a converter when you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc>.</source>
					<target>There's no opportunity to introduce a converter when you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc>.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Failing to match values results in an error when parsing the XAML.</source>
					<target>Failing to match values results in an error when parsing the XAML.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>If you need a converter you can use the verbose syntax for a template binding such as:</source>
					<target>If you need a converter you can use the verbose syntax for a template binding such as:</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Attempting to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> outside of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML will result in a parser error.</source>
					<target>Attempting to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> outside of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML will result in a parser error.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> for cases where the templated parent value is also deferred as another binding.</source>
					<target>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> for cases where the templated parent value is also deferred as another binding.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The evaluation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can wait until any required runtime bindings have values.</source>
					<target>The evaluation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can wait until any required runtime bindings have values.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is always a one-way binding.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is always a one-way binding.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Both properties involved must be dependency properties.</source>
					<target>Both properties involved must be dependency properties.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a markup extension.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a markup extension.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
					<target>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>All markup extensions in XAML use the "{" and "}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</source>
					<target>All markup extensions in XAML use the "{" and "}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TemplateBinding</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TemplateBinding</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is exclusively for use in XAML markup.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is exclusively for use in XAML markup.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>There isn't a straightforward way to reproduce the behavior in code.</source>
					<target>There isn't a straightforward way to reproduce the behavior in code.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Quickstart: Control templates</source>
					<target>Quickstart: Control templates</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Data binding in depth</source>
					<target>Data binding in depth</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>ControlTemplate</source>
					<target>ControlTemplate</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>XAML overview</source>
					<target>XAML overview</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Dependency properties overview</source>
					<target>Dependency properties overview</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>