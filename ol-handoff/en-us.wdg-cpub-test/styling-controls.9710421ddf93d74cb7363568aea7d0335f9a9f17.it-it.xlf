<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">79743c61f677e7a4e0eb31c85ca50f18beaedecf</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\styling-controls.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">7e68df30f9639375b63dae9170243e18b8c58cb9</mda:meta><mda:meta type="olxliffhash">d4f1ba6c25d2ea6c9c316606a857a4f7c8117da0</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Styles let you set control properties and reuse those settings for a consistent appearance across multiple controls.</source>
					<target>Styles let you set control properties and reuse those settings for a consistent appearance across multiple controls.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Styling controls</source>
					<target>Styling controls</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Styling controls</source>
					<target>Styling controls</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>You can customize the appearance of your apps in many ways by using the XAML framework.</source>
					<target>You can customize the appearance of your apps in many ways by using the XAML framework.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Styles let you set control properties and reuse those settings for a consistent appearance across multiple controls.</source>
					<target>Styles let you set control properties and reuse those settings for a consistent appearance across multiple controls.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Style basics</source>
					<target>Style basics</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Use styles to extract visual property settings into reusable resources.</source>
					<target>Use styles to extract visual property settings into reusable resources.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209397)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209399)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209414)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's an example that shows 3 buttons with a style that sets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BorderBrush</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BorderThickness</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Foreground</pc></pc> properties.</source>
					<target>Here's an example that shows 3 buttons with a style that sets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BorderBrush</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BorderThickness</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Foreground</pc></pc> properties.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>By applying a style, you can make the controls appear the same without having to set these properties on each control separately.</source>
					<target>By applying a style, you can make the controls appear the same without having to set these properties on each control separately.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>styled buttons</source>
					<target>styled buttons</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>You can define a style inline in the XAML for a control, or as a reusable resource.</source>
					<target>You can define a style inline in the XAML for a control, or as a reusable resource.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Define resources in an individual page's XAML file, in the App.xaml file, or in a separate resource dictionary XAML file.</source>
					<target>Define resources in an individual page's XAML file, in the App.xaml file, or in a separate resource dictionary XAML file.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>A resource dictionary XAML file can be shared across apps, and more than one resource dictionary can be merged in a single app.</source>
					<target>A resource dictionary XAML file can be shared across apps, and more than one resource dictionary can be merged in a single app.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Where the resource is defined determines the scope in which it can be used.</source>
					<target>Where the resource is defined determines the scope in which it can be used.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Page-level resources are available only in the page where they are defined.</source>
					<target>Page-level resources are available only in the page where they are defined.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>If resources with the same key are defined in both App.xaml and in a page, the resource in the page overrides the resource in App.xaml.</source>
					<target>If resources with the same key are defined in both App.xaml and in a page, the resource in the page overrides the resource in App.xaml.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>If a resource is defined in a separate resource dictionary file, it's scope is determined by where the resource dictionary is referenced.</source>
					<target>If a resource is defined in a separate resource dictionary file, it's scope is determined by where the resource dictionary is referenced.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208857)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208817)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> definition, you need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TargetType</pc></pc> attribute and a collection of one or more <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Setter</pc></pc> elements.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> definition, you need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TargetType</pc></pc> attribute and a collection of one or more <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Setter</pc></pc> elements.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208706)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> attribute is a string that specifies a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement</pc></pc> type to apply the style to.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> attribute is a string that specifies a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement</pc></pc> type to apply the style to.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> value must specify a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement</pc>-derived type that's defined by the Windows Runtime or a custom type that's available in a referenced assembly.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> value must specify a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement</pc>-derived type that's defined by the Windows Runtime or a custom type that's available in a referenced assembly.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you try to apply a style to a control and the control's type doesn't match the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> attribute of the style you're trying to apply, an exception occurs.</source>
					<target>If you try to apply a style to a control and the control's type doesn't match the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc> attribute of the style you're trying to apply, an exception occurs.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208817)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208836)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208838)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Each <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> element requires a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Property</pc></pc> and a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Value</pc></pc>.</source>
					<target>Each <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> element requires a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Property</pc></pc> and a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Value</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>These property settings indicate what control property the setting applies to, and the value to set for that property.</source>
					<target>These property settings indicate what control property the setting applies to, and the value to set for that property.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter.Value</pc> with either attribute or property element syntax.</source>
					<target>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter.Value</pc> with either attribute or property element syntax.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The XAML here shows the style applied to the buttons shown previously.</source>
					<target>The XAML here shows the style applied to the buttons shown previously.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209397)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In this XAML, the first two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter</pc> elements use attribute syntax, but the last <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc>, for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BorderBrush</pc></pc> property, uses property element syntax.</source>
					<target>In this XAML, the first two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter</pc> elements use attribute syntax, but the last <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc>, for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BorderBrush</pc></pc> property, uses property element syntax.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/x-key-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>The example doesn't use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc> attribute, so the style is implicitly applied to the buttons.</source>
					<target>The example doesn't use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc> attribute, so the style is implicitly applied to the buttons.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Applying styles implicitly or explicitly is explained in the next section.</source>
					<target>Applying styles implicitly or explicitly is explained in the next section.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Apply an implicit or explicit style</source>
					<target>Apply an implicit or explicit style</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>If you define a style as a resource, there are two ways to apply it to your controls:</source>
					<target>If you define a style as a resource, there are two ways to apply it to your controls:</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208857)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Implicitly, by specifying only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Style</pc></pc>.</source>
					<target>Implicitly, by specifying only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Style</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208857)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](../xaml-platform/x-key-attribute.md)</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/br208743)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/mt185588)</data>
				</originalData>
				<segment state="initial">
					<source>Explicitly, by specifying a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> and an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Key attribute</pc> attribute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Style</pc></pc> and then by setting the target control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Style</pc></pc> property with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8">{StaticResource} markup extension</pc> reference that uses the explicit key.</source>
					<target>Explicitly, by specifying a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> and an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Key attribute</pc> attribute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Style</pc></pc> and then by setting the target control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Style</pc></pc> property with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8">{StaticResource} markup extension</pc> reference that uses the explicit key.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/x-key-attribute.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208743)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If a style contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc>, you can only apply it to a control by setting the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Style</pc></pc> property of the control to the keyed style.</source>
					<target>If a style contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc>, you can only apply it to a control by setting the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Style</pc></pc> property of the control to the keyed style.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>In contrast, a style without an x:Key attribute is automatically applied to every control of its target type, that doesn't otherwise have an explicit style setting.</source>
					<target>In contrast, a style without an x:Key attribute is automatically applied to every control of its target type, that doesn't otherwise have an explicit style setting.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Here are two buttons that demonstrate implicit and explicit styles.</source>
					<target>Here are two buttons that demonstrate implicit and explicit styles.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>implicitly and explicitly styled buttons.</source>
					<target>implicitly and explicitly styled buttons.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/x-key-attribute.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, the first style has an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc> and its target type is <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Button</pc></pc>.</source>
					<target>In this example, the first style has an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc> and its target type is <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Button</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208743)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The first button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> property is set to this key, so this style is applied explicitly.</source>
					<target>The first button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> property is set to this key, so this style is applied explicitly.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The second style is applied implicitly to the second button because its target type is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button</pc> and the style doesn't have an x:Key attribute.</source>
					<target>The second style is applied implicitly to the second button because its target type is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button</pc> and the style doesn't have an x:Key attribute.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Use based-on styles</source>
					<target>Use based-on styles</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>To make styles easier to maintain and to optimize style reuse, you can create styles that inherit from other styles.</source>
					<target>To make styles easier to maintain and to optimize style reuse, you can create styles that inherit from other styles.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208852)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BasedOn</pc></pc> property to create inherited styles.</source>
					<target>You use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BasedOn</pc></pc> property to create inherited styles.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Styles that inherit from other styles must target the same type of control or a control that derives from the type targeted by the base style.</source>
					<target>Styles that inherit from other styles must target the same type of control or a control that derives from the type targeted by the base style.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209365)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br209527)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if a base style targets <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc>, styles that are based on this style can target <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ContentControl</pc> or types that derive from <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ContentControl</pc> such as <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Button</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">ScrollViewer</pc></pc>.</source>
					<target>For example, if a base style targets <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc>, styles that are based on this style can target <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ContentControl</pc> or types that derive from <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ContentControl</pc> such as <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Button</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">ScrollViewer</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>If a value is not set in the based-on style, it's inherited from the base style.</source>
					<target>If a value is not set in the based-on style, it's inherited from the base style.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>To change a value from the base style, the based-on style overrides that value.</source>
					<target>To change a value from the base style, the based-on style overrides that value.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209316)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The next example shows a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button</pc> and a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CheckBox</pc></pc> with styles that inherit from the same base style.</source>
					<target>The next example shows a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button</pc> and a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CheckBox</pc></pc> with styles that inherit from the same base style.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>styled buttons usign based-on styles.</source>
					<target>styled buttons usign based-on styles.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209365)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The base style targets <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc>, and sets the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Height</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Width</pc></pc> properties.</source>
					<target>The base style targets <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentControl</pc></pc>, and sets the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Height</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Width</pc></pc> properties.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209316)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The styles based on this style target <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CheckBox</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc>, which derive from <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ContentControl</pc>.</source>
					<target>The styles based on this style target <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CheckBox</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc>, which derive from <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ContentControl</pc>.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209397)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209414)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The based-on styles set different colors for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BorderBrush</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Foreground</pc></pc> properties.</source>
					<target>The based-on styles set different colors for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BorderBrush</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Foreground</pc></pc> properties.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>(You don't typically put a border around a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CheckBox</pc>.</source>
					<target>(You don't typically put a border around a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CheckBox</pc>.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>We do it here to show the effects of the style.)</source>
					<target>We do it here to show the effects of the style.)</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Use tools to work with styles easily</source>
					<target>Use tools to work with styles easily</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A fast way to apply styles to your controls is to right-click on a control on the Microsoft Visual Studio XAML design surface and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit Style</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit Template</pc> (depending on the control you are right-clicking on).</source>
					<target>A fast way to apply styles to your controls is to right-click on a control on the Microsoft Visual Studio XAML design surface and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit Style</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit Template</pc> (depending on the control you are right-clicking on).</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can then apply an existing style by selecting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Apply Resource</pc> or define a new style by selecting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create Empty</pc>.</source>
					<target>You can then apply an existing style by selecting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Apply Resource</pc> or define a new style by selecting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create Empty</pc>.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>If you create an empty style, you are given the option to define it in the page, in the App.xaml file, or in a separate resource dictionary.</source>
					<target>If you create an empty style, you are given the option to define it in the page, in the App.xaml file, or in a separate resource dictionary.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Modify the default system styles</source>
					<target>Modify the default system styles</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>You should use the styles that come from the Windows Runtime default XAML resources when you can.</source>
					<target>You should use the styles that come from the Windows Runtime default XAML resources when you can.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>When you have to define your own styles, try to base your styles on the default ones when possible (using based-on styles as explained earlier, or start by editing a copy of the original default style).</source>
					<target>When you have to define your own styles, try to base your styles on the default ones when possible (using based-on styles as explained earlier, or start by editing a copy of the original default style).</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The Template property</source>
					<target>The Template property</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209465)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209390)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>A style setter can be used for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Template</pc></pc> property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Control</pc></pc>, and in fact this makes up the majority of a typical XAML style and an app's XAML resources.</source>
					<target>A style setter can be used for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Template</pc></pc> property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Control</pc></pc>, and in fact this makes up the majority of a typical XAML style and an app's XAML resources.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](control-templates.md)</data>
				</originalData>
				<segment state="initial">
					<source>This is discussed in more detail in the topic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control templates</pc>.</source>
					<target>This is discussed in more detail in the topic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control templates</pc>.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
					<target>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
					<target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>