<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">09408d6ca878f07fd896da52ff0578b658ec49d4</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\x-name-attribute.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">326f372177157e434d3ca8f71d058ac0576f297c</mda:meta><mda:meta type="olxliffhash">22d982cee7bd372af0d9eebbed0aef47f1f564a1</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</source>
					<target>Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>xName attribute</source>
					<target>xName attribute</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>x:Name attribute</source>
					<target>x:Name attribute</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</source>
					<target>Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Once applied to a backing programming model, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be considered equivalent to the variable holding an object reference, as returned by a constructor.</source>
					<target>Once applied to a backing programming model, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be considered equivalent to the variable holding an object reference, as returned by a constructor.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>XAMLNameValue</source>
					<target>XAMLNameValue</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>A string that conforms to the restrictions of the XamlName grammar.</source>
					<target>A string that conforms to the restrictions of the XamlName grammar.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>XamlName grammar</source>
					<target>XamlName grammar</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The following is the normative grammar for a string that is used as a key in this XAML implementation:</source>
					<target>The following is the normative grammar for a string that is used as a key in this XAML implementation:</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\_) character.</source>
					<target>Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\_) character.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>The Unicode character range is not supported.</source>
					<target>The Unicode character range is not supported.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>A name cannot begin with a digit.</source>
					<target>A name cannot begin with a digit.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Some tool implementations prepend an underscore (\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values based on other values that contain digits.</source>
					<target>Some tool implementations prepend an underscore (\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values based on other values that contain digits.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The specified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.</source>
					<target>The specified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind.</source>
					<target>The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> in its programming and application models.</source>
					<target>This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> in its programming and application models.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Each defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> must be unique within a XAML namescope.</source>
					<target>Each defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> must be unique within a XAML namescope.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page.</source>
					<target>Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Additional XAML namescopes are defined by any control template or data template that is defined on that page.</source>
					<target>Additional XAML namescopes are defined by any control template or data template that is defined on that page.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br228048)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</source>
					<target>At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](xaml-namescopes.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML namescopes</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML namescopes</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Design tools often autogenerate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values for elements when they are introduced to the design surface.</source>
					<target>Design tools often autogenerate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values for elements when they are introduced to the design surface.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer.</source>
					<target>The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you introduce the first <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> element to the designer, you might see that in the XAML this element has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> attribute value of "Button1".</source>
					<target>For example, if you introduce the first <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> element to the designer, you might see that in the XAML this element has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> attribute value of "Button1".</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242361)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> cannot be set in XAML property element syntax, or in code using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetValue</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> cannot be set in XAML property element syntax, or in code using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetValue</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can only be set using XAML attribute syntax on elements.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can only be set using XAML attribute syntax on elements.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Specifically for C++/CX apps, a backing field for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name</pc> reference is not created for the root element of a XAML file or page.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Specifically for C++/CX apps, a backing field for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name</pc> reference is not created for the root element of a XAML file or page.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>If you need to reference the root object from C++ code-behind, use other APIs or tree traversal.</source>
					<target>If you need to reference the root object from C++ code-behind, use other APIs or tree traversal.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208715)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208739)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For example you can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> for a known named child element and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Parent</pc></pc>.</source>
					<target>For example you can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> for a known named child element and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Parent</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>x:Name and other Name properties</source>
					<target>x:Name and other Name properties</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Some types used in UWP XAML also have a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>.</source>
					<target>Some types used in UWP XAML also have a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208735)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh702125)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Name</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextElement.Name</pc></pc>.</source>
					<target>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Name</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextElement.Name</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> is available as a settable property on an element, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> can be used interchangeably in XAML, but an error results if both attributes are specified on the same element.</source>
					<target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> is available as a settable property on an element, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> can be used interchangeably in XAML, but an error results if both attributes are specified on the same element.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209031)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>There are also cases where there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property but it's read-only (like <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VisualState.Name</pc></pc>).</source>
					<target>There are also cases where there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property but it's read-only (like <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VisualState.Name</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If that's the case you always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> to name that element in the XAML and the read-only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> exists for some less-common code scenario.</source>
					<target>If that's the case you always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> to name that element in the XAML and the read-only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> exists for some less-common code scenario.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208735)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement.Name</pc></pc> generally should not be used as a way to change values originally set by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Name</pc>, although there are some scenarios that are exceptions to that general rule.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement.Name</pc></pc> generally should not be used as a way to change values originally set by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Name</pc>, although there are some scenarios that are exceptions to that general rule.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation.</source>
					<target>In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Modifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElement.Name</pc> at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.</source>
					<target>Modifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElement.Name</pc> at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>x:Name and x:Key</source>
					<target>x:Name and x:Key</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](x-key-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be applied as an attribute to elements within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> to act as a substitute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Key attribute</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be applied as an attribute to elements within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> to act as a substitute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Key attribute</pc>.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt187354)</data>
				</originalData>
				<segment state="initial">
					<source>(Normally it's a rule that all elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> must have an x:Key attribute.) This is common for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboarded animations</pc>.</source>
					<target>(Normally it's a rule that all elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> must have an x:Key attribute.) This is common for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboarded animations</pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187273)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary and XAML resource references</pc>.</source>
					<target>For more info, see section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary and XAML resource references</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>