<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">462849c03887dcef8de6d73fe5c6f694469ede84</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\binding-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">154c48ad91b0d81170acdfdde140a26ab4488235</mda:meta><mda:meta type="olxliffhash">0d608243a953b8fffdf92ec367c880eac3aee7b1</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The Binding markup extension is converted at XAML load time into an instance of the Binding class.</source>
					<target>The Binding markup extension is converted at XAML load time into an instance of the Binding class.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Binding markup extension'</source>
					<target>Binding markup extension'</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>{Binding} markup extension</source>
					<target>{Binding} markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  A new binding mechanism is available for Windows 10, which is optimized for performance and developer productivity.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  A new binding mechanism is available for Windows 10, which is optimized for performance and developer productivity.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](x-bind-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For general info about using data binding in your app with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> (and for an all-up comparison between <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">{Binding}</pc>), see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Data binding in depth</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For general info about using data binding in your app with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> (and for an all-up comparison between <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">{Binding}</pc>), see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> markup extension is converted at XAML load time into an instance of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Binding</pc></pc> class.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> markup extension is converted at XAML load time into an instance of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Binding</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This binding object gets a value from a property on a data source.</source>
					<target>This binding object gets a value from a property on a data source.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</source>
					<target>The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>It can also optionally be configured to push changes in its own value back to the source property.</source>
					<target>It can also optionally be configured to push changes in its own value back to the source property.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>The property that is the target of a data binding must be a dependency property.</source>
					<target>The property that is the target of a data binding must be a dependency property.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](dependency-properties-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> has the same dependency property precedence as a local value, and setting a local value in imperative code removes the effect of any <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> set in markup.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> has the same dependency property precedence as a local value, and setting a local value in imperative code removes the effect of any <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> set in markup.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Sample apps that demonstrate {Binding}</source>
					<target>Sample apps that demonstrate {Binding}</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532950)</data>
				</originalData>
				<segment state="initial">
					<source>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc> app.</source>
					<target>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc> app.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532952)</data>
				</originalData>
				<segment state="initial">
					<source>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> app.</source>
					<target>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> app.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>propertyPath</source>
					<target>propertyPath</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>A string that specifies the property path for the binding.</source>
					<target>A string that specifies the property path for the binding.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#property-path)</data>
				</originalData>
				<segment state="initial">
					<source>More info is in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section below.</source>
					<target>More info is in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section below.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>bindingProperties</source>
					<target>bindingProperties</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">=</data>
					<data id="id4">*</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">*</data>
					<data id="id8">=</data>
					<data id="id9">*</data>
					<data id="id10">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc>\[, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">propName</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">value</pc>\]*</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc>\[, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">propName</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">value</pc>\]*</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>One or more binding properties that are specified using a name/value pair syntax.</source>
					<target>One or more binding properties that are specified using a name/value pair syntax.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>propName</source>
					<target>propName</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The string name of the property to set on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> object.</source>
					<target>The string name of the property to set on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> object.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>For example, "Converter".</source>
					<target>For example, "Converter".</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>value</source>
					<target>value</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>The value to set the property to.</source>
					<target>The value to set the property to.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#properties-of-binding)</data>
				</originalData>
				<segment state="initial">
					<source>The syntax of the argument depends on the property of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties of the Binding class that can be set with {Binding}</pc> section below.</source>
					<target>The syntax of the argument depends on the property of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties of the Binding class that can be set with {Binding}</pc> section below.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Property path</source>
					<target>Property path</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyPath</pc> sets the value of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc>, which is the property that you're binding to (the source property).</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyPath</pc> sets the value of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc>, which is the property that you're binding to (the source property).</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">`{Binding Path=...}`</data>
				</originalData>
				<segment state="initial">
					<source>You can mention the property name explicitly: <ph dataRef="id1" id="ph1" />.</source>
					<target>You can mention the property name explicitly: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">`{Binding ...}`</data>
				</originalData>
				<segment state="initial">
					<source>Or you can omit it: <ph dataRef="id1" id="ph1" />.</source>
					<target>Or you can omit it: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The type of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> is a property path, which is a string that evaluates to a property or sub-property of either your custom type or a framework type.</source>
					<target>The type of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> is a property path, which is a string that evaluates to a property or sub-property of either your custom type or a framework type.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The type can be, but does not need to be, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>.</source>
					<target>The type can be, but does not need to be, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</source>
					<target>Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Use the dot delimiter regardless of the programming language used to implement the object being bound to.</source>
					<target>Use the dot delimiter regardless of the programming language used to implement the object being bound to.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>For example, to bind UI to an employee object's first name property, your property path might be "Employee.FirstName".</source>
					<target>For example, to bind UI to an employee object's first name property, your property path might be "Employee.FirstName".</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</source>
					<target>If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>If the data source is a collection, then a property path can specify items in the collection by their position or index.</source>
					<target>If the data source is a collection, then a property path can specify items in the collection by their position or index.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that specifies the first item in a collection.</source>
					<target>For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that specifies the first item in a collection.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209828)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>When using an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding to an existing <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyObject</pc></pc>, you can use attached properties as part of the property path.</source>
					<target>When using an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding to an existing <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyObject</pc></pc>, you can use attached properties as part of the property path.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">`(AutomationProperties.Name)`</data>
				</originalData>
				<segment state="initial">
					<source>To disambiguate an attached property so that the intermediate dot in the attached property name is not considered a step into a property path, put parentheses around the owner-qualified attached property name; for example, <ph dataRef="id1" id="ph1" />.</source>
					<target>To disambiguate an attached property so that the intermediate dot in the attached property name is not considered a step into a property path, put parentheses around the owner-qualified attached property name; for example, <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244259)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>A property path intermediate object is stored as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyPath</pc></pc> object in a run-time representation, but most scenarios won't need to interact with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyPath</pc> object in code.</source>
					<target>A property path intermediate object is stored as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyPath</pc></pc> object in a run-time representation, but most scenarios won't need to interact with a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyPath</pc> object in code.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>You can usually specify the binding info you need using XAML.</source>
					<target>You can usually specify the binding info you need using XAML.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244259)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](property-path-syntax.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about the string syntax for a property path, property paths in animation feature areas, and constructing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyPath</pc></pc> object, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Property-path syntax</pc>.</source>
					<target>For more info about the string syntax for a property path, property paths in animation feature areas, and constructing a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyPath</pc></pc> object, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Property-path syntax</pc>.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Properties of the Binding class that can be set with {Binding}</source>
					<target>Properties of the Binding class that can be set with {Binding}</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> is illustrated with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">bindingProperties</pc> placeholder syntax because there are multiple read/write properties of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding</pc></pc> that can be set in the markup extension.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> is illustrated with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">bindingProperties</pc> placeholder syntax because there are multiple read/write properties of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding</pc></pc> that can be set in the markup extension.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">=</data>
					<data id="id4">*</data>
					<data id="id5">*</data>
				</originalData>
				<segment state="initial">
					<source>The properties can be set in any order with comma-separated <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> pairs.</source>
					<target>The properties can be set in any order with comma-separated <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> pairs.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>.</source>
					<target>Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Property</source>
					<target>Property</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Path</source>
					<target>Path</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#property-path)</data>
				</originalData>
				<segment state="initial">
					<source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section above.</source>
					<target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section above.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Converter</source>
					<target>Converter</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Specifies the converter object that is called by the binding engine.</source>
					<target>Specifies the converter object that is called by the binding engine.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> reference to that object in the resource dictionary.</source>
					<target>The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> reference to that object in the resource dictionary.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>ConverterLanguage</source>
					<target>ConverterLanguage</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Specifies the culture to be used by the converter.</source>
					<target>Specifies the culture to be used by the converter.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>.) The culture is set as a standards-based identifier.</source>
					<target>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>.) The culture is set as a standards-based identifier.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterLanguage</pc></source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterLanguage</pc></target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>ConverterParameter</source>
					<target>ConverterParameter</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Specifies the converter parameter that can be used in converter logic.</source>
					<target>Specifies the converter parameter that can be used in converter logic.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ConverterParameter</pc> value.</source>
					<target>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ConverterParameter</pc> value.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc>.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can write a converter that uses values other than strings but this is uncommon, see Remarks in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> for more info.</source>
					<target>You can write a converter that uses values other than strings but this is uncommon, see Remarks in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> for more info.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>ElementName</source>
					<target>ElementName</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](x-name-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>Specifies a data source by referencing another element in the same XAML construct that has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name attribute</pc>.</source>
					<target>Specifies a data source by referencing another element in the same XAML construct that has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name attribute</pc>.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>This is often use to share related values or use sub-properties of one UI element to provide a specific value for another element, for example in a XAML control template.</source>
					<target>This is often use to share related values or use sub-properties of one UI element to provide a specific value for another element, for example in a XAML control template.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>FallbackValue</source>
					<target>FallbackValue</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Specifies a value to display when the source or path cannot be resolved.</source>
					<target>Specifies a value to display when the source or path cannot be resolved.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Mode</source>
					<target>Mode</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</source>
					<target>Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209822)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>These correspond to the constant names of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BindingMode</pc></pc> enumeration.</source>
					<target>These correspond to the constant names of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BindingMode</pc></pc> enumeration.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The default depends on the binding target but in most cases it is "OneWay".</source>
					<target>The default depends on the binding target but in most cases it is "OneWay".</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that this differs from the default for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>, which is "OneTime".</source>
					<target>Note that this differs from the default for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>, which is "OneTime".</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>RelativeSource</source>
					<target>RelativeSource</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Specifies a data source by describing the position of the binding source relative to the position of the binding target.</source>
					<target>Specifies a data source by describing the position of the binding source relative to the position of the binding target.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>This is expressed in terms of the run-time object graph, for example specifying the object's parent.</source>
					<target>This is expressed in terms of the run-time object graph, for example specifying the object's parent.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](relativesource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{RelativeSource} markup extension</pc>.</source>
					<target>Setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{RelativeSource} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Source</source>
					<target>Source</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Specifies the object data source.</source>
					<target>Specifies the object data source.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
				</originalData>
				<segment state="initial">
					<source>Within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Binding</pc> markup extension, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Data binding in depth</pc>.</source>
					<target>Within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Binding</pc> markup extension, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>TargetNullValue</source>
					<target>TargetNullValue</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Specifies a value to display when the source value resolves but is explicitly <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>.</source>
					<target>Specifies a value to display when the source value resolves but is explicitly <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>UpdateSourceTrigger</source>
					<target>UpdateSourceTrigger</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Specifies the timing of binding source updates.</source>
					<target>Specifies the timing of binding source updates.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If unspecified, the default is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>.</source>
					<target>If unspecified, the default is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're converting markup from <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc>, then be aware of the differences in default values for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Mode</pc> property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're converting markup from <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc>, then be aware of the differences in default values for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Mode</pc> property.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh701880)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ConverterLanguage</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterLanguage</pc> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ConverterLanguage</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterLanguage</pc> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
				</originalData>
				<segment state="initial">
					<source>For more info and examples, see the "Data conversions" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
					<target>For more info and examples, see the "Data conversions" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209832)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209831)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209828)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Source</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RelativeSource</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ElementName</pc></pc> specify a binding source, so they are mutually exclusive.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Source</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RelativeSource</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ElementName</pc></pc> specify a binding source, so they are mutually exclusive.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br209827)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">`\{`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  If you need to specify a single curly brace for a value, such as in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterParameter</pc></pc>, then precede it with a backslash: <ph dataRef="id11" id="ph1" />.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  If you need to specify a single curly brace for a value, such as in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterParameter</pc></pc>, then precede it with a backslash: <ph dataRef="id11" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">`ConverterParameter='{Mix}'`</data>
				</originalData>
				<segment state="initial">
					<source>Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph dataRef="id1" id="ph1" />.</source>
					<target>Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209828)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br209829)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">[</data>
					<data id="id18">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
				</originalData>
				<segment state="initial">
					<source>The second example sets four different <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> properties: <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ElementName</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Path</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Mode</pc></pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">Converter</pc></pc>.</source>
					<target>The second example sets four different <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> properties: <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ElementName</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Path</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Mode</pc></pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">Converter</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> in this case is shown explicitly named as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc> property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> in this case is shown explicitly named as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc> property.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209614)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">`sliderValueConverter`</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> is evaluated to a data binding source that is another object in the same run-time object tree, a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Slider</pc></pc> named <ph dataRef="id7" id="ph1" />.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> is evaluated to a data binding source that is another object in the same run-time object tree, a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Slider</pc></pc> named <ph dataRef="id7" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Note how the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> property value uses another markup extension, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{StaticResource} markup extension</pc>, so there are two nested markup extension usages here.</source>
					<target>Note how the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> property value uses another markup extension, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{StaticResource} markup extension</pc>, so there are two nested markup extension usages here.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209903)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`local:S2Formatter`</data>
				</originalData>
				<segment state="initial">
					<source>The inner one is evaluated first, so that once the resource is obtained there's a practical <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> (a custom class that's instantiated by the <ph dataRef="id5" id="ph1" /> element in resources) that the binding can use.</source>
					<target>The inner one is evaluated first, so that once the resource is obtained there's a practical <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> (a custom class that's instantiated by the <ph dataRef="id5" id="ph1" /> element in resources) that the binding can use.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Tools support</source>
					<target>Tools support</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Microsoft IntelliSense in Microsoft Visual Studio displays the properties of the data context while authoring <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> in the XAML markup editor.</source>
					<target>Microsoft IntelliSense in Microsoft Visual Studio displays the properties of the data context while authoring <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc> in the XAML markup editor.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>As soon as you type "{Binding", data context properties appropriate for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> are displayed in the dropdown.</source>
					<target>As soon as you type "{Binding", data context properties appropriate for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc></pc> are displayed in the dropdown.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>IntelliSense also helps with the other properties of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc>.</source>
					<target>IntelliSense also helps with the other properties of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>For this to work, you must have either the data context or the design-time data context set in the markup page.</source>
					<target>For this to work, you must have either the data context or the design-time data context set in the markup page.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Go To Definition</pc> (F12) also works with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Go To Definition</pc> (F12) also works with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Alternatively, you can use the data binding dialog.</source>
					<target>Alternatively, you can use the data binding dialog.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>