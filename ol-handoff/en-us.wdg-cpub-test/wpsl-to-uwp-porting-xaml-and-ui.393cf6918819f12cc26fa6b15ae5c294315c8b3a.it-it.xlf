<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">4a9e71a4ec58278205bb325fd875959ff9948fb5</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-porting-xaml-and-ui.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">ddf44bd8410102c33a0fa075e7459968d17473bf</mda:meta><mda:meta type="olxliffhash">71419e1b49151e44ca1339ab6b06089fc4d1a63d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</source>
					<target>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Porting Windows Phone Silverlight XAML and UI to UWP</source>
					<target>Porting Windows Phone Silverlight XAML and UI to UWP</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Porting Windows Phone Silverlight XAML and UI to UWP</source>
					<target>Porting Windows Phone Silverlight XAML and UI to UWP</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-troubleshooting.md)</data>
				</originalData>
				<segment state="initial">
					<source>The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting</pc>.</source>
					<target>The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting</pc>.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</source>
					<target>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</source>
					<target>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.</source>
					<target>Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>A first look at the XAML markup</source>
					<target>A first look at the XAML markup</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project.</source>
					<target>The previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">`PhoneApplicationPage`</data>
				</originalData>
				<segment state="initial">
					<source>One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the <ph dataRef="id1" id="ph1" /> element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project.</source>
					<target>One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the <ph dataRef="id1" id="ph1" /> element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project.</source>
					<target>In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227503)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227716)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If you open that version of MainPage.xaml, you'll see that at the root is the type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc></pc>, which is in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.UI.Xaml.Controls</pc></pc> namespace.</source>
					<target>If you open that version of MainPage.xaml, you'll see that at the root is the type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc></pc>, which is in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.UI.Xaml.Controls</pc></pc> namespace.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">`&lt;phone:PhoneApplicationPage&gt;`</data>
					<data id="id2">`&lt;Page&gt;`</data>
					<data id="id3">`xmlns:phone`</data>
				</originalData>
				<segment state="initial">
					<source>So, you can change all <ph dataRef="id1" id="ph1" /> elements to <ph dataRef="id2" id="ph2" /> (don't forget property element syntax) and you can delete the <ph dataRef="id3" id="ph3" /> declaration.</source>
					<target>So, you can change all <ph dataRef="id1" id="ph1" /> elements to <ph dataRef="id2" id="ph2" /> (don't forget property element syntax) and you can delete the <ph dataRef="id3" id="ph3" /> declaration.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
				</originalData>
				<segment state="initial">
					<source>For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
					<target>For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>XAML namespace prefix declarations</source>
					<target>XAML namespace prefix declarations</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>If you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup.</source>
					<target>If you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The syntax of these differs between Windows Phone Silverlight and the UWP.</source>
					<target>The syntax of these differs between Windows Phone Silverlight and the UWP.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Here are some examples:</source>
					<target>Here are some examples:</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Change "clr-namespace" to "using" and delete any assembly token and semi-colon (the assembly will be inferred).</source>
					<target>Change "clr-namespace" to "using" and delete any assembly token and semi-colon (the assembly will be inferred).</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>The result looks like this:</source>
					<target>The result looks like this:</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>You may have a resource whose type is defined by the system:</source>
					<target>You may have a resource whose type is defined by the system:</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>In the UWP, omit the "System" prefix declaration and use the (already declared) "x" prefix instead:</source>
					<target>In the UWP, omit the "System" prefix declaration and use the (already declared) "x" prefix instead:</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Imperative code</source>
					<target>Imperative code</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Your view models are one place where there's imperative code that references UI types.</source>
					<target>Your view models are one place where there's imperative code that references UI types.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Another place is any code-behind files that directly manipulate UI elements.</source>
					<target>Another place is any code-behind files that directly manipulate UI elements.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>For example, you might find that a line of code like this one doesn't compile yet:</source>
					<target>For example, you might find that a line of code like this one doesn't compile yet:</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">BitmapImage</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Windows.Media.Imaging</pc> namespace in Windows Phone Silverlight, and a using directive in the same file allows <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BitmapImage</pc> to be used without namespace qualification as in the snippet above.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">BitmapImage</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Windows.Media.Imaging</pc> namespace in Windows Phone Silverlight, and a using directive in the same file allows <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BitmapImage</pc> to be used without namespace qualification as in the snippet above.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In a case like this, you can right-click the type name (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">BitmapImage</pc>) in Visual Studio and use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resolve</pc> command on the context menu to add a new namespace directive to the file.</source>
					<target>In a case like this, you can right-click the type name (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">BitmapImage</pc>) in Visual Studio and use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resolve</pc> command on the context menu to add a new namespace directive to the file.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243258)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In this case, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Media.Imaging</pc></pc> namespace is added, which is where the type lives in the UWP.</source>
					<target>In this case, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Media.Imaging</pc></pc> namespace is added, which is where the type lives in the UWP.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can remove the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.Media.Imaging</pc> using directive, and that will be all it takes to port code like that in the snippet above.</source>
					<target>You can remove the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.Media.Imaging</pc> using directive, and that will be all it takes to port code like that in the snippet above.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>When you're done, you'll have removed all Windows Phone Silverlight namespaces.</source>
					<target>When you're done, you'll have removed all Windows Phone Silverlight namespaces.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Find and Replace</pc> command to make bulk changes to your source code.</source>
					<target>In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Find and Replace</pc> command to make bulk changes to your source code.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command is a great way of discovering a type's new namespace.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command is a great way of discovering a type's new namespace.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>As another example, you can replace all "System.Windows" with "Windows.UI.Xaml".</source>
					<target>As another example, you can replace all "System.Windows" with "Windows.UI.Xaml".</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>That will essentially port all using directives and all fully-qualified type names that refer to that namespace.</source>
					<target>That will essentially port all using directives and all fully-qualified type names that refer to that namespace.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Once all the old using directives are removed and the new ones added, you can use Visual Studio's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Organize Usings</pc> command to sort your directives and remove unused ones.</source>
					<target>Once all the old using directives are removed and the new ones added, you can use Visual Studio's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Organize Usings</pc> command to sort your directives and remove unused ones.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Sometimes, fixing imperative code will be as minor as changing a parameter's type.</source>
					<target>Sometimes, fixing imperative code will be as minor as changing a parameter's type.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps.</source>
					<target>Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br211377)</data>
				</originalData>
				<segment state="initial">
					<source>To identify which APIs are supported, use the rest of this porting guide in combination with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET for Windows Store apps overview</pc> and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Runtime reference</pc>.</source>
					<target>To identify which APIs are supported, use the rest of this porting guide in combination with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET for Windows Store apps overview</pc> and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Runtime reference</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>And, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code.</source>
					<target>And, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-troubleshooting.md)</data>
				</originalData>
				<segment state="initial">
					<source>Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting</pc>), until any build and runtime issues are ironed-out and your port is complete.</source>
					<target>Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting</pc>), until any build and runtime issues are ironed-out and your port is complete.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Adaptive/responsive UI</source>
					<target>Adaptive/responsive UI</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Because your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices.</source>
					<target>Because your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui)</data>
				</originalData>
				<segment state="initial">
					<source>You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adaptive UI</pc> in the Bookstore2 case study topic.</source>
					<target>You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adaptive UI</pc> in the Bookstore2 case study topic.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Alarms and Reminders</source>
					<target>Alarms and Reminders</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br224768)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Code using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alarm</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reminder</pc> classes should be ported to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundTaskBuilder</pc></pc> class to create and register a background task, and display a toast at the relevant time.</source>
					<target>Code using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alarm</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reminder</pc> classes should be ported to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundTaskBuilder</pc></pc> class to create and register a background task, and display a toast at the relevant time.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-business-and-data.md#background-processing)</data>
					<data id="id3">[</data>
					<data id="id4">](#toasts)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background processing</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Toasts</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background processing</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Toasts</pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Animation</source>
					<target>Animation</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>As a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps.</source>
					<target>As a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do.</source>
					<target>These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Animating your UI using library animations</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Animating your UI using library animations</pc>.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>If you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced.</source>
					<target>If you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt204774)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize animations and media</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize animations and media</pc>.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things.</source>
					<target>Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208980)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can either re-target them to animate different properties, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RenderTransform</pc></pc>, thereby making them independent.</source>
					<target>You can either re-target them to animate different properties, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RenderTransform</pc></pc>, thereby making them independent.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">`EnableDependentAnimation="True"`</data>
				</originalData>
				<segment state="initial">
					<source>Or you can set <ph dataRef="id1" id="ph1" /> on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly.</source>
					<target>Or you can set <ph dataRef="id1" id="ph1" /> on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.</source>
					<target>If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Back button handling</source>
					<target>Back button handling</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>In a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices.</source>
					<target>In a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell.</source>
					<target>On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode.</source>
					<target>On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn893596)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackRequested</pc></pc> event.</source>
					<target>The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackRequested</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>The example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).</source>
					<target>The example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>There's also a single approach for all device families for programmatically exiting the app.</source>
					<target>There's also a single approach for all device families for programmatically exiting the app.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Binding, and compiled bindings with {x:Bind}</source>
					<target>Binding, and compiled bindings with {x:Bind}</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The topic of binding includes:</source>
					<target>The topic of binding includes:</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Binding a UI element to "data" (that is, to the properties and commands of a view model)</source>
					<target>Binding a UI element to "data" (that is, to the properties and commands of a view model)</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Binding a UI element to another UI element</source>
					<target>Binding a UI element to another UI element</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)</source>
					<target>Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>All of these aspects are largely still supported, but there are namespace differences.</source>
					<target>All of these aspects are largely still supported, but there are namespace differences.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209899)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/hh702001)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.Data.Binding</pc> maps to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.UI.Xaml.Data.Binding</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">System.ComponentModel.INotifyPropertyChanged</pc> maps to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.UI.Xaml.Data.INotifyPropertyChanged</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">System.Collections.Specialized.INotifyPropertyChanged</pc> maps to <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Windows.UI.Xaml.Interop.INotifyCollectionChanged</pc></pc>.</source>
					<target>For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.Data.Binding</pc> maps to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.UI.Xaml.Data.Binding</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">System.ComponentModel.INotifyPropertyChanged</pc> maps to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.UI.Xaml.Data.INotifyPropertyChanged</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">System.Collections.Specialized.INotifyPropertyChanged</pc> maps to <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Windows.UI.Xaml.Interop.INotifyCollectionChanged</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app.</source>
					<target>Windows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events.</source>
					<target>You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable.</source>
					<target>If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element.</source>
					<target>You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279427)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn279244)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that in a UWP app the type names you use are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AppBarButton</pc></pc>.</source>
					<target>Note that in a UWP app the type names you use are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AppBarButton</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The binding-related features of UWP apps currently have the following limitations:</source>
					<target>The binding-related features of UWP apps currently have the following limitations:</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](T:System.ComponentModel.IDataErrorInfo)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](T:System.ComponentModel.INotifyDataErrorInfo)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>There is no built-in support for data-entry validation and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDataErrorInfo</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">INotifyDataErrorInfo</pc></pc> interfaces.</source>
					<target>There is no built-in support for data-entry validation and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDataErrorInfo</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">INotifyDataErrorInfo</pc></pc> interfaces.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class does not include the extended formatting properties available in Windows Phone Silverlight.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class does not include the extended formatting properties available in Windows Phone Silverlight.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209903)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, you can still implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> to provide custom formatting.</source>
					<target>However, you can still implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> to provide custom formatting.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209903)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](T:System.Globalization.CultureInfo)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> methods take language strings as parameters instead of <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CultureInfo</pc></pc> objects.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IValueConverter</pc></pc> methods take language strings as parameters instead of <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CultureInfo</pc></pc> objects.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> class does not provide built-in support for sorting and filtering, and grouping works differently.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> class does not provide built-in support for sorting and filtering, and grouping works differently.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?linkid=226854)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc> and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Data binding sample</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc> and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Data binding sample</pc>.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Although the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension.</source>
					<target>Although the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://channel9.msdn.com/Events/Build/2015/3-635)</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?linkid=619989)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding</pc>, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Bind Sample</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding</pc>, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Bind Sample</pc>.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Binding an Image to a view model</source>
					<target>Binding an Image to a view model</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242760)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210107)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You can bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc> property to any property of a view model that's of type <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ImageSource</pc></pc>.</source>
					<target>You can bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc> property to any property of a view model that's of type <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ImageSource</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Here's a typical implementation of such a property in a Windows Phone Silverlight app:</source>
					<target>Here's a typical implementation of such a property in a Windows Phone Silverlight app:</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/jj655406)</data>
				</originalData>
				<segment state="initial">
					<source>In a UWP app, you use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="p1">URI scheme</pc>.</source>
					<target>In a UWP app, you use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="p1">URI scheme</pc>.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So that you can keep the rest of your code the same, you can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</source>
					<target>So that you can keep the rest of your code the same, you can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Like this:</source>
					<target>Like this:</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>That way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.</source>
					<target>That way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Controls, and control styles/templates</source>
					<target>Controls, and control styles/templates</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows Phone Silverlight apps use controls defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Controls</pc> namespace and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Windows.Controls</pc> namespace.</source>
					<target>Windows Phone Silverlight apps use controls defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Controls</pc> namespace and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Windows.Controls</pc> namespace.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227716)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>XAML UWP apps use controls defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Controls</pc></pc> namespace.</source>
					<target>XAML UWP apps use controls defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Controls</pc></pc> namespace.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls.</source>
					<target>The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>But, some changes have been made to improve the set of available controls and to unify them with Windows apps.</source>
					<target>But, some changes have been made to improve the set of available controls and to unify them with Windows apps.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Here are specific examples.</source>
					<target>Here are specific examples.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Control name</source>
					<target>Control name</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Change</source>
					<target>Change</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>ApplicationBar</source>
					<target>ApplicationBar</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702575)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page.TopAppBar</pc> property.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page.TopAppBar</pc> property.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>ApplicationBarIconButton</source>
					<target>ApplicationBarIconButton</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279538)</data>
				</originalData>
				<segment state="initial">
					<source>The UWP equivalent is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Glyph</pc> property.</source>
					<target>The UWP equivalent is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Glyph</pc> property.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>PrimaryCommands is the content property of CommandBar.</source>
					<target>PrimaryCommands is the content property of CommandBar.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>The XAML parser interprets an element's inner xml as the value of its content property.</source>
					<target>The XAML parser interprets an element's inner xml as the value of its content property.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>ApplicationBarMenuItem</source>
					<target>ApplicationBarMenuItem</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279261)</data>
				</originalData>
				<segment state="initial">
					<source>The UWP equivalent is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppBarButton.Label</pc> set to the menu item text.</source>
					<target>The UWP equivalent is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppBarButton.Label</pc> set to the menu item text.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>ContextMenu (in the Windows Phone Toolkit)</source>
					<target>ContextMenu (in the Windows Phone Toolkit)</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279496)</data>
				</originalData>
				<segment state="initial">
					<source>For a single selection fly-out, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Flyout</pc>.</source>
					<target>For a single selection fly-out, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Flyout</pc>.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>ControlTiltEffect.TiltEffect class</source>
					<target>ControlTiltEffect.TiltEffect class</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Animations from the UWP animation library are built into the default Styles of the common controls.</source>
					<target>Animations from the UWP animation library are built into the default Styles of the common controls.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432)</data>
				</originalData>
				<segment state="initial">
					<source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Animating pointer actions</pc>.</source>
					<target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Animating pointer actions</pc>.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>LongListSelector with grouped data</source>
					<target>LongListSelector with grouped data</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert.</source>
					<target>The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter.</source>
					<target>First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Second, it is able to "zoom" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters).</source>
					<target>Second, it is able to "zoom" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters).</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt186889)</data>
				</originalData>
				<segment state="initial">
					<source>With the UWP, you can display grouped data with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for list and grid view controls</pc>.</source>
					<target>With the UWP, you can display grouped data with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for list and grid view controls</pc>.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>LongListSelector with flat data</source>
					<target>LongListSelector with flat data</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data.</source>
					<target>For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
				</originalData>
				<segment state="initial">
					<source>In a UWP app, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> are preferred for long lists of items whether or not the data are amenable to grouping.</source>
					<target>In a UWP app, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> are preferred for long lists of items whether or not the data are amenable to grouping.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>Panorama</source>
					<target>Panorama</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn449149)</data>
				</originalData>
				<segment state="initial">
					<source>The Windows Phone Silverlight Panorama control maps to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for hub controls in Windows Store apps</pc> and Guidelines for the hub control.</source>
					<target>The Windows Phone Silverlight Panorama control maps to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for hub controls in Windows Store apps</pc> and Guidelines for the hub control.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections.</source>
					<target>Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn251843)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hub</pc> sections do not wrap around, and parallax is not used.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hub</pc> sections do not wrap around, and parallax is not used.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Pivot</source>
					<target>Pivot</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn608241)</data>
				</originalData>
				<segment state="initial">
					<source>The UWP equivalent of the Windows Phone Silverlight Pivot control is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Controls.Pivot</pc>.</source>
					<target>The UWP equivalent of the Windows Phone Silverlight Pivot control is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.UI.Xaml.Controls.Pivot</pc>.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>It is available for all device families.</source>
					<target>It is available for all device families.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates.</source>
					<target>There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.</source>
					<target>We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt185405)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt185406)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn611856)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on UWP controls, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Controls by function</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Controls list</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Guidelines for controls</pc>.</source>
					<target>For more info on UWP controls, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Controls by function</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Controls list</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Guidelines for controls</pc>.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>Design language in Windows 10</source>
					<target>Design language in Windows 10</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>There are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps.</source>
					<target>There are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://dev.windows.com/design)</data>
				</originalData>
				<segment state="initial">
					<source>For all the details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc>.</source>
					<target>For all the details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc>.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.</source>
					<target>Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>Localization and globalization</source>
					<target>Localization and globalization</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>For localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project.</source>
					<target>For localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default.</source>
					<target>Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PRIResource</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</source>
					<target>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PRIResource</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can then use the strings in markup by specifying the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements.</source>
					<target>You can then use the strings in markup by specifying the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Using string resources</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Using string resources</pc>.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows Phone Silverlight apps use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CultureInfo</pc> class to help globalize an app.</source>
					<target>Windows Phone Silverlight apps use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CultureInfo</pc> class to help globalize an app.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface.</source>
					<target>UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn611859)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for files, data, and globalization</pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for files, data, and globalization</pc>.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206071)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceContext.QualifierValues</pc></pc> topic describes how to load device family-specific resources based on the device family resource selection factor.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceContext.QualifierValues</pc></pc> topic describes how to load device family-specific resources based on the device family resource selection factor.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>Media and graphics</source>
					<target>Media and graphics</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>As you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter.</source>
					<target>As you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>Windows design is typified by clean and clear visuals, typography, and motion.</source>
					<target>Windows design is typified by clean and clear visuals, typography, and motion.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>If your app follows the same principles, then it will seem more like the built-in apps.</source>
					<target>If your app follows the same principles, then it will seem more like the built-in apps.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br228076)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows Phone Silverlight has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RadialGradientBrush</pc> type which is not present in the UWP, although other <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Brush</pc></pc> types are.</source>
					<target>Windows Phone Silverlight has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RadialGradientBrush</pc> type which is not present in the UWP, although other <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Brush</pc></pc> types are.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>In some cases, you will be able to get a similar effect with a bitmap.</source>
					<target>In some cases, you will be able to get a similar effect with a bitmap.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/dd756679)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</data>
				</originalData>
				<segment state="initial">
					<source>Note that you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">create a radial gradient brush</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP.</source>
					<target>Note that you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">create a radial gradient brush</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> [</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208911)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows Phone Silverlight has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.UIElement.OpacityMask</pc> property, but that property is not a member of the UWP<pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">UIElement</pc></pc> type.</source>
					<target>Windows Phone Silverlight has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Windows.UIElement.OpacityMask</pc> property, but that property is not a member of the UWP<pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">UIElement</pc></pc> type.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>In some cases, you will be able to get a similar effect with a bitmap.</source>
					<target>In some cases, you will be able to get a similar effect with a bitmap.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee329947)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</data>
				</originalData>
				<segment state="initial">
					<source>And you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">create an opacity mask</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP app.</source>
					<target>And you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">create an opacity mask</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP app.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>But, a common use case for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OpacityMask</pc> is to use a single bitmap that adapts to both light and dark themes.</source>
					<target>But, a common use case for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OpacityMask</pc> is to use a single bitmap that adapts to both light and dark themes.</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below).</source>
					<target>For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below).</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.</source>
					<target>But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>a theme-aware bitmap</source>
					<target>a theme-aware bitmap</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OpacityMask</pc> for a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc> filled with the foreground brush:</source>
					<target>In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OpacityMask</pc> for a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc> filled with the foreground brush:</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279306)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The most straightforward way to port this to a UWP app is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BitmapIcon</pc></pc>, like this:</source>
					<target>The most straightforward way to port this to a UWP app is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BitmapIcon</pc></pc>, like this:</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>Here, winrt\_check.png is an alpha mask in the form of a bitmap just as wpsl\_check.png is, and it could very well be the same file.</source>
					<target>Here, winrt\_check.png is an alpha mask in the form of a bitmap just as wpsl\_check.png is, and it could very well be the same file.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>However, you may want to provide several different sizes of winrt\_check.png to be used for different scaling factors.</source>
					<target>However, you may want to provide several different sizes of winrt\_check.png to be used for different scaling factors.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](#view-effective-pixels-viewing-distance-and-scale-factors)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on that, and for an explanation of the changes to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Width</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc> values, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">View/effective pixels, viewing distance, and scale factors</pc> in this topic.</source>
					<target>For more info on that, and for an explanation of the changes to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Width</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc> values, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">View/effective pixels, viewing distance, and scale factors</pc> in this topic.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>A more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme).</source>
					<target>A more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme).</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</data>
				</originalData>
				<segment state="initial">
					<source>For further details about how to name this set of bitmap assets, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc>.</source>
					<target>For further details about how to name this set of bitmap assets, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc>.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:</source>
					<target>Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In Windows Phone Silverlight, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UIElement.Clip</pc> property can be any shape that you can express with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Geometry</pc> and is typically serialized in XAML markup in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StreamGeometry</pc> mini-language.</source>
					<target>In Windows Phone Silverlight, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UIElement.Clip</pc> property can be any shape that you can express with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Geometry</pc> and is typically serialized in XAML markup in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StreamGeometry</pc> mini-language.</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208919)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br210259)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In the UWP, the type of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Clip</pc></pc> property is <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RectangleGeometry</pc></pc>, so you can only clip a rectangular region.</source>
					<target>In the UWP, the type of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Clip</pc></pc> property is <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">RectangleGeometry</pc></pc>, so you can only clip a rectangular region.</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>Allowing a rectangle to be defined using mini-language would be too permissive.</source>
					<target>Allowing a rectangle to be defined using mini-language would be too permissive.</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So, to port a clipping region in markup, replace the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Clip</pc> attribute syntax and make it into property element syntax similar to the following:</source>
					<target>So, to port a clipping region in markup, replace the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Clip</pc> attribute syntax and make it into property element syntax similar to the following:</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/dd756654)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</data>
				</originalData>
				<segment state="initial">
					<source>Note that you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">use arbitrary geometry as a mask in a layer</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP app.</source>
					<target>Note that you can <pc dataRefEnd="id2" dataRefStart="id1" id="p1">use arbitrary geometry as a mask in a layer</pc> with Direct2D in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft DirectX</pc> and XAML C++ UWP app.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>Navigation</source>
					<target>Navigation</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>When you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:</source>
					<target>When you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242694)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In a UWP app, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame.Navigate</pc></pc> method and specify the type of the destination page (as defined by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Class</pc> attribute of the page's XAML markup definition):</source>
					<target>In a UWP app, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame.Navigate</pc></pc> method and specify the type of the destination page (as defined by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Class</pc> attribute of the page's XAML markup definition):</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>You define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:</source>
					<target>You define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>In a UWP app, you use imperative code to define the startup page.</source>
					<target>In a UWP app, you use imperative code to define the startup page.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>Here's some code from App.xaml.cs that illustrates how:</source>
					<target>Here's some code from App.xaml.cs that illustrates how:</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>URI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs.</source>
					<target>URI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs.</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path.</source>
					<target>URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves.</source>
					<target>UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves.</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed.</source>
					<target>The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed.</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242694)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The same goal can be achieved by passing a navigation parameter when you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Navigate</pc></pc> method.</source>
					<target>The same goal can be achieved by passing a navigation parameter when you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Navigate</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187344)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc>.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>Resource key reference</source>
					<target>Resource key reference</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>The design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed.</source>
					<target>The design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed.</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved.</source>
					<target>The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved.</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<originalData>
					<data id="id1">`PhoneTextNormalStyle`</data>
				</originalData>
				<segment state="initial">
					<source>For example, the XAML markup editor will underline a reference to the style key <ph dataRef="id1" id="ph1" /> with a red squiggle.</source>
					<target>For example, the XAML markup editor will underline a reference to the style key <ph dataRef="id1" id="ph1" /> with a red squiggle.</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device.</source>
					<target>If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device.</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>So, it's important to attend to XAML markup correctness.</source>
					<target>So, it's important to attend to XAML markup correctness.</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>And you will find Visual Studio to be a great tool for catching such issues.</source>
					<target>And you will find Visual Studio to be a great tool for catching such issues.</target>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#text)</data>
				</originalData>
				<segment state="initial">
					<source>Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc>, below.</source>
					<target>Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc>, below.</target>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<segment state="initial">
					<source>Status bar (system tray)</source>
					<target>Status bar (system tray)</target>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<originalData>
					<data id="id1">`shell:SystemTray.IsVisible`</data>
				</originalData>
				<segment state="initial">
					<source>The system tray (set in XAML markup with <ph dataRef="id1" id="ph1" />) is now called the status bar, and it is shown by default.</source>
					<target>The system tray (set in XAML markup with <ph dataRef="id1" id="ph1" />) is now called the status bar, and it is shown by default.</target>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn610343)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn610339)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You can control its visibility in imperative code by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.ViewManagement.StatusBar.ShowAsync</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HideAsync</pc></pc> methods.</source>
					<target>You can control its visibility in imperative code by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.ViewManagement.StatusBar.ShowAsync</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HideAsync</pc></pc> methods.</target>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>Text</source>
					<target>Text</target>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>Text (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language.</source>
					<target>Text (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language.</target>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<originalData>
					<data id="id1"> **</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use these illustrations to find the UWP<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> system styles that are available.</source>
					<target>Use these illustrations to find the UWP<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> system styles that are available.</target>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>Find the ones that correspond to the Windows Phone Silverlight styles you used.</source>
					<target>Find the ones that correspond to the Windows Phone Silverlight styles you used.</target>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.</source>
					<target>Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.</target>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<originalData>
					<data id="id1">](images/label-uwp10stylegallery.png)</data>
				</originalData>
				<segment state="initial">
					<source>system textblock styles for windows 10 apps<ph dataRef="id1" id="ph1" /> System TextBlock styles for Windows 10 apps</source>
					<target>system textblock styles for windows 10 apps<ph dataRef="id1" id="ph1" /> System TextBlock styles for Windows 10 apps</target>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>In a Windows Phone Silverlight app, the default font family is Segoe WP.</source>
					<target>In a Windows Phone Silverlight app, the default font family is Segoe WP.</target>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>In a Windows 10 app, the default font family is Segoe UI.</source>
					<target>In a Windows 10 app, the default font family is Segoe UI.</target>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>As a result, font metrics in your app may look different.</source>
					<target>As a result, font metrics in your app may look different.</target>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209671)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br244362)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineHeight</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LineStackingStrategy</pc></pc>.</source>
					<target>If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LineHeight</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LineStackingStrategy</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](http://dev.windows.com/design)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for fonts</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design UWP apps</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guidelines for fonts</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<segment state="initial">
					<source>Theme changes</source>
					<target>Theme changes</target>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>For a Windows Phone Silverlight app, the default theme is dark by default.</source>
					<target>For a Windows Phone Silverlight app, the default theme is dark by default.</target>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml.</source>
					<target>For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml.</target>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<originalData>
					<data id="id1">`RequestedTheme="Dark"`</data>
				</originalData>
				<segment state="initial">
					<source>For example, to use a dark theme on all devices, add <ph dataRef="id1" id="ph1" /> to the root Application element.</source>
					<target>For example, to use a dark theme on all devices, add <ph dataRef="id1" id="ph1" /> to the root Application element.</target>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Tiles</source>
					<target>Tiles</target>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<segment state="initial">
					<source>Tiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences.</source>
					<target>Tiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences.</target>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br230606)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, code that calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellTile.Create</pc> method to create secondary tiles should be ported to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SecondaryTile.RequestCreateAsync</pc></pc>.</source>
					<target>For example, code that calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellTile.Create</pc> method to create secondary tiles should be ported to call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SecondaryTile.RequestCreateAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<segment state="initial">
					<source>Here is a before-and-after example, first the Windows Phone Silverlight version:</source>
					<target>Here is a before-and-after example, first the Windows Phone Silverlight version:</target>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<segment state="initial">
					<source>And the UWP equivalent:</source>
					<target>And the UWP equivalent:</target>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208622)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208628)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br208616)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">[</data>
					<data id="id18">](https://msdn.microsoft.com/library/windows/apps/hh701637)</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
				</originalData>
				<segment state="initial">
					<source>Code that updates a tile with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellTile.Update</pc> method, or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft.Phone.Shell.ShellTileSchedule</pc> class, should be ported to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TileUpdateManager</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TileUpdater</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">TileNotification</pc></pc>, and/or <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">ScheduledTileNotification</pc></pc> classes.</source>
					<target>Code that updates a tile with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellTile.Update</pc> method, or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Microsoft.Phone.Shell.ShellTileSchedule</pc> class, should be ported to use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TileUpdateManager</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TileUpdater</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">TileNotification</pc></pc>, and/or <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">ScheduledTileNotification</pc></pc> classes.</target>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on tiles, toasts, badges, banners, and notifications, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating tiles</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Working with tiles, badges, and toast notifications</pc>.</source>
					<target>For more info on tiles, toasts, badges, banners, and notifications, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating tiles</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Working with tiles, badges, and toast notifications</pc>.</target>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh781198)</data>
				</originalData>
				<segment state="initial">
					<source>For specifics about sizes of visual assets used for UWP Tiles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tile and toast visual assets</pc>.</source>
					<target>For specifics about sizes of visual assets used for UWP Tiles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tile and toast visual assets</pc>.</target>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>Toasts</source>
					<target>Toasts</target>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208642)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208653)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/br208641)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/br208607)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>Code that displays a toast with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellToast</pc> class should be ported to use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToastNotificationManager</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ToastNotifier</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">ToastNotification</pc></pc>, and/or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">ScheduledToastNotification</pc></pc> classes.</source>
					<target>Code that displays a toast with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.Phone.Shell.ShellToast</pc> class should be ported to use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ToastNotificationManager</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ToastNotifier</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">ToastNotification</pc></pc>, and/or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">ScheduledToastNotification</pc></pc> classes.</target>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>Note that on mobile devices, the consumer-facing term for "toast" is "banner".</source>
					<target>Note that on mobile devices, the consumer-facing term for "toast" is "banner".</target>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Working with tiles, badges, and toast notifications</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Working with tiles, badges, and toast notifications</pc>.</target>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<segment state="initial">
					<source>View/effective pixels, viewing distance, and scale factors</source>
					<target>View/effective pixels, viewing distance, and scale factors</target>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices.</source>
					<target>Windows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices.</target>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<segment state="initial">
					<source>A Windows Phone Silverlight app uses view pixels to do this.</source>
					<target>A Windows Phone Silverlight app uses view pixels to do this.</target>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<segment state="initial">
					<source>With Windows 10, the concept of view pixels has been refined into that of effective pixels.</source>
					<target>With Windows 10, the concept of view pixels has been refined into that of effective pixels.</target>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<segment state="initial">
					<source>Here's an explanation of that term, what it means, and the extra value it offers.</source>
					<target>Here's an explanation of that term, what it means, and the extra value it offers.</target>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<segment state="initial">
					<source>The term "resolution" refers to a measure of pixel density and not, as is commonly thought, pixel count.</source>
					<target>The term "resolution" refers to a measure of pixel density and not, as is commonly thought, pixel count.</target>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<segment state="initial">
					<source>"Effective resolution" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size).</source>
					<target>"Effective resolution" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size).</target>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<segment state="initial">
					<source>Effective resolution is a good metric to build an experience around because it is user-centric.</source>
					<target>Effective resolution is a good metric to build an experience around because it is user-centric.</target>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<segment state="initial">
					<source>By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.</source>
					<target>By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.</target>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>To a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is.</source>
					<target>To a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is.</target>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`Width="48"`</data>
				</originalData>
				<segment state="initial">
					<source>This means that an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Image</pc> element with <ph dataRef="id3" id="ph1" /> will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.</source>
					<target>This means that an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Image</pc> element with <ph dataRef="id3" id="ph1" /> will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.</target>
				</segment>
			</unit>
			<unit id="337" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>To a Windows 10 app, it is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> the case that all devices are some fixed number of effective pixels wide.</source>
					<target>To a Windows 10 app, it is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> the case that all devices are some fixed number of effective pixels wide.</target>
				</segment>
			</unit>
			<unit id="338" translate="yes">
				<segment state="initial">
					<source>That's probably obvious, given the wide range of devices that a UWP app can run on.</source>
					<target>That's probably obvious, given the wide range of devices that a UWP app can run on.</target>
				</segment>
			</unit>
			<unit id="339" translate="yes">
				<segment state="initial">
					<source>Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths.</source>
					<target>Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths.</target>
				</segment>
			</unit>
			<unit id="340" translate="yes">
				<segment state="initial">
					<source>All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have.</source>
					<target>All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have.</target>
				</segment>
			</unit>
			<unit id="341" translate="yes">
				<segment state="initial">
					<source>There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup.</source>
					<target>There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup.</target>
				</segment>
			</unit>
			<unit id="342" translate="yes">
				<segment state="initial">
					<source>A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user.</source>
					<target>A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user.</target>
				</segment>
			</unit>
			<unit id="343" translate="yes">
				<segment state="initial">
					<source>And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes.</source>
					<target>And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes.</target>
				</segment>
			</unit>
			<unit id="344" translate="yes">
				<segment state="initial">
					<source>And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.</source>
					<target>And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.</target>
				</segment>
			</unit>
			<unit id="345" translate="yes">
				<segment state="initial">
					<source>Because 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.</source>
					<target>Because 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.</target>
				</segment>
			</unit>
			<unit id="346" translate="yes">
				<segment state="initial">
					<source>So that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor.</source>
					<target>So that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor.</target>
				</segment>
			</unit>
			<unit id="347" translate="yes">
				<segment state="initial">
					<source>Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.</source>
					<target>Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.</target>
				</segment>
			</unit>
			<unit id="348" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets.</target>
				</segment>
			</unit>
			<unit id="349" translate="yes">
				<segment state="initial">
					<source>In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale.</source>
					<target>In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale.</target>
				</segment>
			</unit>
			<unit id="350" translate="yes">
				<segment state="initial">
					<source>When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.</source>
					<target>When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.</target>
				</segment>
			</unit>
			<unit id="351" translate="yes">
				<segment state="initial">
					<source>If you have intricate artwork, then you may want to provide your assets in even more sizes.</source>
					<target>If you have intricate artwork, then you may want to provide your assets in even more sizes.</target>
				</segment>
			</unit>
			<unit id="352" translate="yes">
				<segment state="initial">
					<source>If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.</source>
					<target>If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.</target>
				</segment>
			</unit>
			<unit id="353" translate="yes">
				<segment state="initial">
					<source>We don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%.</source>
					<target>We don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%.</target>
				</segment>
			</unit>
			<unit id="354" translate="yes">
				<segment state="initial">
					<source>If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded.</source>
					<target>If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded.</target>
				</segment>
			</unit>
			<unit id="355" translate="yes">
				<segment state="initial">
					<source>The Store selects the assets to download based on the DPI of the device.</source>
					<target>The Store selects the assets to download based on the DPI of the device.</target>
				</segment>
			</unit>
			<unit id="356" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958435)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive design 101 for UWP apps</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive design 101 for UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="357" translate="yes">
				<segment state="initial">
					<source>Window size</source>
					<target>Window size</target>
				</segment>
			</unit>
			<unit id="358" translate="yes">
				<segment state="initial">
					<source>In your UWP app, you can specify a minimum size (both width and height) with imperative code.</source>
					<target>In your UWP app, you can specify a minimum size (both width and height) with imperative code.</target>
				</segment>
			</unit>
			<unit id="359" translate="yes">
				<segment state="initial">
					<source>The default minimum size is 500x320epx, and that's also the smallest minimum size accepted.</source>
					<target>The default minimum size is 500x320epx, and that's also the smallest minimum size accepted.</target>
				</segment>
			</unit>
			<unit id="360" translate="yes">
				<segment state="initial">
					<source>The largest minimum size accepted is 500x500epx.</source>
					<target>The largest minimum size accepted is 500x500epx.</target>
				</segment>
			</unit>
			<unit id="361" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-input-and-sensors.md)</data>
				</originalData>
				<segment state="initial">
					<source>The next topic is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting for I/O, device, and app model</pc>.</source>
					<target>The next topic is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting for I/O, device, and app model</pc>.</target>
				</segment>
			</unit>
			<unit id="362" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="363" translate="yes">
				<segment state="initial">
					<source>Namespace and class mappings</source>
					<target>Namespace and class mappings</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>