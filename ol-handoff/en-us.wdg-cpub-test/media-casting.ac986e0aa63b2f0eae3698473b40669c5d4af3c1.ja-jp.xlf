<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">50bf5c1bb012ba7e81d44cbc93d78e2ea2e45520</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\audio-video-camera\media-casting.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">ca192ec15c504596b24dae73c03af591ba40634e</mda:meta><mda:meta type="olxliffhash">e6b0840710712dbfb25367501435b704d84d30fe</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article shows you how to cast media to remote devices from a Universal Windows app.</source>
					<target>This article shows you how to cast media to remote devices from a Universal Windows app.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Media casting</source>
					<target>Media casting</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Media casting</source>
					<target>Media casting</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This article shows you how to cast media to remote devices from a Universal Windows app.</source>
					<target>This article shows you how to cast media to remote devices from a Universal Windows app.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Built-in media casting with MediaElement</source>
					<target>Built-in media casting with MediaElement</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242926)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The simplest way to cast media from a Universal Windows app is to use the built-in casting capability of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement</pc></pc> control.</source>
					<target>The simplest way to cast media from a Universal Windows app is to use the built-in casting capability of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement</pc></pc> control.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To allow the user to open a video file to be played in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> control, add the following namespaces to your project.</source>
					<target>To allow the user to open a video file to be played in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> control, add the following namespaces to your project.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>BuiltInCastingUsing</source>
					<target>BuiltInCastingUsing</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn298977)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In your app's XAML file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> and set <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AreTransportControlsEnabled</pc></pc> to true.</source>
					<target>In your app's XAML file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> and set <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AreTransportControlsEnabled</pc></pc> to true.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>MediaElement</source>
					<target>MediaElement</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Add a button to let the user initiate picking a file.</source>
					<target>Add a button to let the user initiate picking a file.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>OpenButton</source>
					<target>OpenButton</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227737)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br207847)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br207850)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event handler for the button, create a new instance of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FileOpenPicker</pc></pc>, add video file types to the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">FileTypeFilter</pc></pc> collection, and set the starting location to the user's videos library.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event handler for the button, create a new instance of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FileOpenPicker</pc></pc>, add video file types to the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">FileTypeFilter</pc></pc> collection, and set the starting location to the user's videos library.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/jj635275)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PickSingleFileAsync</pc></pc> to launch the file picker dialog.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PickSingleFileAsync</pc></pc> to launch the file picker dialog.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When this method returns, the result is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> object representing the video file.</source>
					<target>When this method returns, the result is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> object representing the video file.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Check to make sure the file isn't null, which it will be if the user cancels the picking operation.</source>
					<target>Check to make sure the file isn't null, which it will be if the user cancels the picking operation.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227221.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br241731)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Call the file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OpenAsync</pc></pc> method to get an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IRandomAccessStream</pc></pc> for the file.</source>
					<target>Call the file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OpenAsync</pc></pc> method to get an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IRandomAccessStream</pc></pc> for the file.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br244338)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetSource</pc></pc> method to make the video file the video source for the control.</source>
					<target>Finally, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetSource</pc></pc> method to make the video file the video source for the control.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>OpenButtonClick</source>
					<target>OpenButtonClick</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Once the video is loaded in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc>, the user can simply press the casting button on the transport controls to launch a built-in dialog that allows them to choose a device to which the loaded media will be cast.</source>
					<target>Once the video is loaded in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc>, the user can simply press the casting button on the transport controls to launch a built-in dialog that allows them to choose a device to which the loaded media will be cast.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>mediaelement casting button</source>
					<target>mediaelement casting button</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Media casting with the CastingDevicePicker</source>
					<target>Media casting with the CastingDevicePicker</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972525)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A second way to cast media to a device is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevicePicker</pc></pc>.</source>
					<target>A second way to cast media to a device is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevicePicker</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972568)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To use this class, include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Casting</pc></pc> namespace in your project.</source>
					<target>To use this class, include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Casting</pc></pc> namespace in your project.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>CastingNamespace</source>
					<target>CastingNamespace</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Declare a member variable for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDevicePicker</pc> object.</source>
					<target>Declare a member variable for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDevicePicker</pc> object.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>DeclareCastingPicker</source>
					<target>DeclareCastingPicker</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972540)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972526)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>When you page is initialized, create a new instance of the casting picker and set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Filter</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SupportsVideo</pc></pc> property to indicate that the casting devices listed by the picker should support video.</source>
					<target>When you page is initialized, create a new instance of the casting picker and set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Filter</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SupportsVideo</pc></pc> property to indicate that the casting devices listed by the picker should support video.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972539)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDeviceSelected</pc></pc> event, which is raised when the user picks a device for casting.</source>
					<target>Register a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDeviceSelected</pc></pc> event, which is raised when the user picks a device for casting.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>InitCastingPicker</source>
					<target>InitCastingPicker</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>In your XAML file, add a button to allow the user to launch the picker.</source>
					<target>In your XAML file, add a button to allow the user to launch the picker.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>CastPickerButton</source>
					<target>CastPickerButton</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208986)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event handler for the button, call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TransformToVisual</pc></pc> to get the transform of a UI element relative to another element.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event handler for the button, call <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TransformToVisual</pc></pc> to get the transform of a UI element relative to another element.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>In this example, the transform is the position of the cast picker button relative to the visual root of the application window.</source>
					<target>In this example, the transform is the position of the cast picker button relative to the visual root of the application window.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972542)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972525)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingDevicePicker</pc></pc> object to launch the casting picker dialog.</source>
					<target>Call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingDevicePicker</pc></pc> object to launch the casting picker dialog.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Specify the location and dimensions of the cast picker button so that the system can make the dialog fly out from the button that the user pressed.</source>
					<target>Specify the location and dimensions of the cast picker button so that the system can make the dialog fly out from the button that the user pressed.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>CastPickerButtonClick</source>
					<target>CastPickerButtonClick</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn972547)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn972546)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDeviceSelected</pc> event handler, call the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateCastingConnection</pc></pc> method of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SelectedCastingDevice</pc></pc> property of the event args, which represents the casting device selected by the user.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDeviceSelected</pc> event handler, call the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateCastingConnection</pc></pc> method of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SelectedCastingDevice</pc></pc> property of the event args, which represents the casting device selected by the user.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972519)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972523)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Register handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ErrorOccurred</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StateChanged</pc></pc> events.</source>
					<target>Register handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ErrorOccurred</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StateChanged</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972520)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn920012)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestStartCastingAsync</pc></pc> to begin casting, passing in the result of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> object's <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetAsCastingSource</pc></pc> method to specify that the media to be cast is the content of the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaElement</pc>.</source>
					<target>Finally, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestStartCastingAsync</pc></pc> to begin casting, passing in the result of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> object's <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetAsCastingSource</pc></pc> method to specify that the media to be cast is the content of the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaElement</pc>.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The casting connection must be initiated on the UI thread.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The casting connection must be initiated on the UI thread.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Since the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDeviceSelected</pc> is not called on the UI thread, you must place these calls inside a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> which causes them to be called on the UI thread.</source>
					<target>Since the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDeviceSelected</pc> is not called on the UI thread, you must place these calls inside a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> which causes them to be called on the UI thread.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>CastingDeviceSelected</source>
					<target>CastingDeviceSelected</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ErrorOccurred</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateChanged</pc> event handlers, you should update your UI to inform the user of the current casting status.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ErrorOccurred</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateChanged</pc> event handlers, you should update your UI to inform the user of the current casting status.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>These events are discussed in detail in the following section on creating a custom casting device picker.</source>
					<target>These events are discussed in detail in the following section on creating a custom casting device picker.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>EmptyStateHandlers</source>
					<target>EmptyStateHandlers</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Media casting with a custom device picker</source>
					<target>Media casting with a custom device picker</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>The following section describes how to create your own casting device picker UI by enumerating the casting devices and initiating the connection from your code.</source>
					<target>The following section describes how to create your own casting device picker UI by enumerating the casting devices and initiating the connection from your code.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225459)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To enumerate the available casting devices, include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration</pc></pc> namespace in your project.</source>
					<target>To enumerate the available casting devices, include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration</pc></pc> namespace in your project.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>EnumerationNamespace</source>
					<target>EnumerationNamespace</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Add the following controls to your XAML page to implement the rudimentary UI for this example:</source>
					<target>Add the following controls to your XAML page to implement the rudimentary UI for this example:</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>A button to start the device watcher that looks for available casting devices.</source>
					<target>A button to start the device watcher that looks for available casting devices.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc> control to provide feedback to the user that casting enumeration is ongoing.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc> control to provide feedback to the user that casting enumeration is ongoing.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242868)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> to list the discovered casting devices.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc></pc> to list the discovered casting devices.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242830)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972549)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Define an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> for the control so that we can assign the casting device objects directly to the control and still display the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FriendlyName</pc></pc> property.</source>
					<target>Define an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> for the control so that we can assign the casting device objects directly to the control and still display the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FriendlyName</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>A button to allow the user to disconnect the casting device.</source>
					<target>A button to allow the user to disconnect the casting device.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>CustomPickerXAML</source>
					<target>CustomPickerXAML</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225446)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972510)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In your code behind, declare member variables for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceWatcher</pc></pc> and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingConnection</pc></pc>.</source>
					<target>In your code behind, declare member variables for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceWatcher</pc></pc> and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingConnection</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>DeclareDeviceWatcher</source>
					<target>DeclareDeviceWatcher</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> handler for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">startWatcherButton</pc>, first update the UI by disabling the button and making the progress ring active while device enumeration is ongoing.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> handler for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">startWatcherButton</pc>, first update the UI by disabling the button and making the progress ring active while device enumeration is ongoing.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Clear the list box of casting devices.</source>
					<target>Clear the list box of casting devices.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225427)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, create a device watcher by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformation.CreateWatcher</pc></pc>.</source>
					<target>Next, create a device watcher by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInformation.CreateWatcher</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>This method can be used to watch for many different types of devices.</source>
					<target>This method can be used to watch for many different types of devices.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972551)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Specify that you want to watch for devices that support video casting by using the device selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice.GetDeviceSelector</pc></pc>.</source>
					<target>Specify that you want to watch for devices that support video casting by using the device selector string returned by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice.GetDeviceSelector</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225450)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225453)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br225451)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br225457)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, register event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Removed</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EnumerationCompleted</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Stopped</pc></pc> events.</source>
					<target>Finally, register event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Removed</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EnumerationCompleted</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Stopped</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>StartWatcherButtonClick</source>
					<target>StartWatcherButtonClick</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Added</pc> event is raised when a new device is discovered by the watcher.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Added</pc> event is raised when a new device is discovered by the watcher.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972524)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972550)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the handler for this event, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice</pc></pc> object by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingDevice.FromIdAsync</pc></pc> and passing in the ID of the discovered casting device, which is contained in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">DeviceInformation</pc> object passed into the handler.</source>
					<target>In the handler for this event, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice</pc></pc> object by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CastingDevice.FromIdAsync</pc></pc> and passing in the ID of the discovered casting device, which is contained in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">DeviceInformation</pc> object passed into the handler.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDevice</pc> to the casting device <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> so that the user can select it.</source>
					<target>Add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingDevice</pc> to the casting device <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> so that the user can select it.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242830)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972549)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Because of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> defined in the XAML, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FriendlyName</pc></pc> property will be used as the item text for in the list box.</source>
					<target>Because of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> defined in the XAML, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FriendlyName</pc></pc> property will be used as the item text for in the list box.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Because this event handler is not called on the UI thread, you must update the UI from within a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc>.</source>
					<target>Because this event handler is not called on the UI thread, you must update the UI from within a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>WatcherAdded</source>
					<target>WatcherAdded</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Removed</pc> event is raised when the watcher detects that a casting device is no longer present.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Removed</pc> event is raised when the watcher detects that a casting device is no longer present.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242823)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Compare the ID property of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Added</pc> object passed into the handler to the ID of each <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc> in the list box's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Items</pc></pc> collection.</source>
					<target>Compare the ID property of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Added</pc> object passed into the handler to the ID of each <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Added</pc> in the list box's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Items</pc></pc> collection.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>If the ID matches, remove that object from the collection.</source>
					<target>If the ID matches, remove that object from the collection.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Again, because the UI is being updated, this call must be made from within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunAsync</pc> call.</source>
					<target>Again, because the UI is being updated, this call must be made from within a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunAsync</pc> call.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>WatcherRemoved</source>
					<target>WatcherRemoved</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerationCompleted</pc> event is raised when the watcher has finished detecting devices.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnumerationCompleted</pc> event is raised when the watcher has finished detecting devices.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225456)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the handler for this event, update the UI to let the user know that device enumeration has completed and stop the device watcher by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop</pc></pc>.</source>
					<target>In the handler for this event, update the UI to let the user know that device enumeration has completed and stop the device watcher by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>WatcherEnumerationCompleted</source>
					<target>WatcherEnumerationCompleted</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>The Stopped event is raised when the device watcher has finished stopping.</source>
					<target>The Stopped event is raised when the device watcher has finished stopping.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
				</originalData>
				<segment state="initial">
					<source>In the handler for this event, stop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc> control and reenable the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">startWatcherButton</pc> so that the user can restart the device enumeration process.</source>
					<target>In the handler for this event, stop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc> control and reenable the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">startWatcherButton</pc> so that the user can restart the device enumeration process.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>WatcherStopped</source>
					<target>WatcherStopped</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209776)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When the user selects one of the casting devices from the list box, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> event is raised.</source>
					<target>When the user selects one of the casting devices from the list box, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionChanged</pc></pc> event is raised.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>It is within this handler that the casting connection will be created and casting will be started.</source>
					<target>It is within this handler that the casting connection will be created and casting will be started.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>First, make sure the device watcher is stopped so that device enumeration doesn't interfere with media casting.</source>
					<target>First, make sure the device watcher is stopped so that device enumeration doesn't interfere with media casting.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972547)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a casting connection by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateCastingConnection</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CastingDevice</pc> object selected by the user.</source>
					<target>Create a casting connection by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateCastingConnection</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CastingDevice</pc> object selected by the user.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972523)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn972519)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Add event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateChanged</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ErrorOccurred</pc></pc> events.</source>
					<target>Add event handlers for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateChanged</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ErrorOccurred</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn972520)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn920012)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Start media casting by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestStartCastingAsync</pc></pc>, passing in the casting source returned by calling the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> method <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetAsCastingSource</pc></pc>.</source>
					<target>Start media casting by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestStartCastingAsync</pc></pc>, passing in the casting source returned by calling the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc> method <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetAsCastingSource</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Finally, make the disconnect button visible to allow the user to stop media casting.</source>
					<target>Finally, make the disconnect button visible to allow the user to stop media casting.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>SelectionChanged</source>
					<target>SelectionChanged</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>In the state changed handler, the action you take depends on the new state of the casting connection:</source>
					<target>In the state changed handler, the action you take depends on the new state of the casting connection:</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connected</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rendering</pc>, make sure the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ProgressRing</pc> control is inactive and the disconnect button is visible.</source>
					<target>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connected</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rendering</pc>, make sure the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ProgressRing</pc> control is inactive and the disconnect button is visible.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disconnected</pc>, unselect the current casting device in the list box, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control inactive, and hide the disconnect button.</source>
					<target>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disconnected</pc>, unselect the current casting device in the list box, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control inactive, and hide the disconnect button.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connecting</pc>, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control active and hide the disconnect button.</source>
					<target>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connecting</pc>, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control active and hide the disconnect button.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disconnecting</pc>, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control active and hide the disconnect button.</source>
					<target>If the state is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disconnecting</pc>, make the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc> control active and hide the disconnect button.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>StateChanged</source>
					<target>StateChanged</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ErrorOccurred</pc> event, update your UI to let the user know that a casting error occurred and unselect the current <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice</pc> object in the list box.</source>
					<target>In the handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ErrorOccurred</pc> event, update your UI to let the user know that a casting error occurred and unselect the current <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CastingDevice</pc> object in the list box.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>ErrorOccurred</source>
					<target>ErrorOccurred</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Finally, implement the handler for the disconnect button.</source>
					<target>Finally, implement the handler for the disconnect button.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn972518)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Stop media casting and disconnect from the casting device by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingConnection</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DisconnectAsync</pc></pc> method.</source>
					<target>Stop media casting and disconnect from the casting device by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CastingConnection</pc> object's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DisconnectAsync</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh750317)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This call must be dispatched to the UI thread by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc>.</source>
					<target>This call must be dispatched to the UI thread by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>DisconnectButton</source>
					<target>DisconnectButton</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>