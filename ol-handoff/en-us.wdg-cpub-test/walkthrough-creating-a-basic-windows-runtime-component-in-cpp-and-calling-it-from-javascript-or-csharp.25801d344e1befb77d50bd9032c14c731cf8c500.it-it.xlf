<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-2eb3c86</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">be6fb5fc439de3213ef0815ea205ac51112bb202</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\winrt-components\walkthrough-creating-a-basic-windows-runtime-component-in-cpp-and-calling-it-from-javascript-or-csharp.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">90d98f0628a2bbbb42e254f80ad6ca50f42ab9aa</mda:meta><mda:meta type="olxliffhash">25a161688e124876b048e9cca954773af29d8b84</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
					<target>Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
					<target>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
					<target>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
					<target>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
					<target>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
					<target>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</source>
					<target>Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-windows-runtime-components-in-cpp.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C++</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++ Language Reference (C++/CX)</pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Windows Runtime Components in C++</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++ Language Reference (C++/CX)</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Creating the C++ component DLL</source>
					<target>Creating the C++ component DLL</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>In this example, we create the component project first, but you could create the JavaScript project first.</source>
					<target>In this example, we create the component project first, but you could create the JavaScript project first.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>The order doesn’t matter.</source>
					<target>The order doesn’t matter.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</source>
					<target>Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>These are provided just to show you how it's done.</source>
					<target>These are provided just to show you how it's done.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>They are not required, and in this example, we'll replace all of the generated code with our own code.</source>
					<target>They are not required, and in this example, we'll replace all of the generated code with our own code.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>To create the C++ component project</source>
					<target>To create the C++ component project</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>On the Visual Studio menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</source>
					<target>On the Visual Studio menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File, New, Project</pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++</pc> and then select the node for Universal Windows apps.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, in the left pane, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual C++</pc> and then select the node for Universal Windows apps.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> and then name the project WinRT\_CPP.</source>
					<target>In the center pane, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime Component</pc> and then name the project WinRT\_CPP.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</source>
					<target>Choose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> button.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>To add an activatable class to the component</source>
					<target>To add an activatable class to the component</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>An activatable class is one that client code can create by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">new</pc> expression (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> in Visual Basic, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ref new</pc> in C++).</source>
					<target>An activatable class is one that client code can create by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">new</pc> expression (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> in Visual Basic, or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ref new</pc> in C++).</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In your component, you declare it as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public ref class sealed</pc>.</source>
					<target>In your component, you declare it as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public ref class sealed</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>In fact, the Class1.h and .cpp files already have a ref class.</source>
					<target>In fact, the Class1.h and .cpp files already have a ref class.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>You can change the name, but in this example we’ll use the default name—Class1.</source>
					<target>You can change the name, but in this example we’ll use the default name—Class1.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>You can define additional ref classes or regular classes in your component if they are required.</source>
					<target>You can define additional ref classes or regular classes in your component if they are required.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more information about ref classes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type System (C++/CX)</pc>.</source>
					<target>For more information about ref classes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type System (C++/CX)</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Add these \#include directives to Class1.h:</source>
					<target>Add these \#include directives to Class1.h:</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Running the app</source>
					<target>Running the app</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set As Startup Project</pc>.</source>
					<target>Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set As Startup Project</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</source>
					<target>Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Inspecting your component in Object Browser (optional)</source>
					<target>Inspecting your component in Object Browser (optional)</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</source>
					<target>In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>This includes the types in the Platform namespace and the default namespace.</source>
					<target>This includes the types in the Platform namespace and the default namespace.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</source>
					<target>However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>To inspect a component</source>
					<target>To inspect a component</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View, Object Browser</pc> (Ctrl+Alt+J).</source>
					<target>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">View, Object Browser</pc> (Ctrl+Alt+J).</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>In the left pane of the Object Browser, expand the WinRT\_CPP node to show the types and methods that are defined on your component.</source>
					<target>In the left pane of the Object Browser, expand the WinRT\_CPP node to show the types and methods that are defined on your component.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Debugging tips</source>
					<target>Debugging tips</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</source>
					<target>For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>To download debugging symbols</source>
					<target>To download debugging symbols</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc>.</source>
					<target>On the menu bar, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tools, Options</pc>.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Options</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Symbols</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Options</pc> dialog box, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging</pc> and select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Symbols</pc>.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Symbol Servers</pc> and the choose the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> button.</source>
					<target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Symbol Servers</pc> and the choose the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc> button.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>It might take some time to download the symbols the first time.</source>
					<target>It might take some time to download the symbols the first time.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</source>
					<target>For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</source>
					<target>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties, Debugging, Debugger Type</pc>.</source>
					<target>To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties, Debugging, Debugger Type</pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Be sure to select appropriate capabilities in the package designer.</source>
					<target>Be sure to select appropriate capabilities in the package designer.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>You can open the package designer by opening the Package.appxmanifest file.</source>
					<target>You can open the package designer by opening the Package.appxmanifest file.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pictures Library</pc> check box in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc> pane of the package designer.</source>
					<target>For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pictures Library</pc> check box in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc> pane of the package designer.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</source>
					<target>If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">`ComputeResult`</data>
					<data id="id2">`computeResult`</data>
				</originalData>
				<segment state="initial">
					<source>For example, the <ph dataRef="id1" id="ph1" /> C++ method must be referenced as <ph dataRef="id2" id="ph2" /> in JavaScript.</source>
					<target>For example, the <ph dataRef="id1" id="ph1" /> C++ method must be referenced as <ph dataRef="id2" id="ph2" /> in JavaScript.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</source>
					<target>If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Failure to do so prevents subsequent debug or build operations.</source>
					<target>Failure to do so prevents subsequent debug or build operations.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>If necessary, you can then add an assembly reference to the DLL.</source>
					<target>If necessary, you can then add an assembly reference to the DLL.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Creating Windows Runtime Components in C++</source>
					<target>Creating Windows Runtime Components in C++</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>