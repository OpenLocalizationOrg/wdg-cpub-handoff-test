<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">ccd7c243bded015a888a2e0630819bcb860e9529</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\monetize\manage-a-large-catalog-of-in-app-products.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">703480340af66c88650118bb97d69b4304c902f8</mda:meta><mda:meta type="olxliffhash">d70628b237c6ea14360c2bf2f15652a71033fb49</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>If your app offers a large in-app product catalog, you can optionally follow the process described in this topic to help manage your catalog.</source>
					<target>If your app offers a large in-app product catalog, you can optionally follow the process described in this topic to help manage your catalog.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Manage a large catalog of in-app products</source>
					<target>Manage a large catalog of in-app products</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Manage a large catalog of in-app products</source>
					<target>Manage a large catalog of in-app products</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>If your app offers a large in-app product catalog, you can optionally follow the process described in this topic to help manage your catalog.</source>
					<target>If your app offers a large in-app product catalog, you can optionally follow the process described in this topic to help manage your catalog.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>You will create a handful of product entries for specific price tiers, with each one able to represent hundreds of products within a catalog.</source>
					<target>You will create a handful of product entries for specific price tiers, with each one able to represent hundreds of products within a catalog.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263382)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To enable this capability, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> method overload that specifies an app-defined offer associated with an in-app product listed in the Store.</source>
					<target>To enable this capability, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> method overload that specifies an app-defined offer associated with an in-app product listed in the Store.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263384)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In addition to specifying an offer and product association during the call, your app should also pass a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProductPurchaseDisplayProperties</pc></pc> object that contains the large catalog offer details.</source>
					<target>In addition to specifying an offer and product association during the call, your app should also pass a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProductPurchaseDisplayProperties</pc></pc> object that contains the large catalog offer details.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>If these details are not provided, the details for the listed product will be used instead.</source>
					<target>If these details are not provided, the details for the listed product will be used instead.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn263392)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The Store will only use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">offerId</pc> from the purchase request in the resulting <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PurchaseResults</pc></pc>.</source>
					<target>The Store will only use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">offerId</pc> from the purchase request in the resulting <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PurchaseResults</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt148551)</data>
				</originalData>
				<segment state="initial">
					<source>This process does not directly modify the information originally provided when <pc dataRefEnd="id2" dataRefStart="id1" id="p1">listing the in-app product in the Store</pc>.</source>
					<target>This process does not directly modify the information originally provided when <pc dataRefEnd="id2" dataRefStart="id1" id="p1">listing the in-app product in the Store</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Starting with Windows 10, the Store has no limit to the number of product listings per developer account.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Starting with Windows 10, the Store has no limit to the number of product listings per developer account.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>In previous releases, the Store has a limit of 200 product listings per developer account, and the process described in this topic can be used to work around that limitation.</source>
					<target>In previous releases, the Store has a limit of 200 product listings per developer account, and the process described in this topic can be used to work around that limitation.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>This topic covers Store support for the representation of multiple in-app offers using a single in-app product listed in the Store.</source>
					<target>This topic covers Store support for the representation of multiple in-app offers using a single in-app product listed in the Store.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](enable-in-app-product-purchases.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you are unfamiliar with in-app purchases please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list your in-app purchase in the Store.</source>
					<target>If you are unfamiliar with in-app purchases please review <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable in-app product purchases</pc> to learn about license information, and how to properly list your in-app purchase in the Store.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh779766)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh779765)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>When you code and test new in-app offers for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</source>
					<target>When you code and test new in-app offers for the first time, you must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CurrentAppSimulator</pc></pc> object instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CurrentApp</pc></pc> object.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</source>
					<target>This way you can verify your license logic using simulated calls to the license server instead of calling the live server.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\<ph dataRef="id1" id="ph1" />package name<ph dataRef="id2" id="ph2" />\\LocalState\\Microsoft\\Windows Store\\ApiData.</source>
					<target>To do this, you need to customize the file named "WindowsStoreProxy.xml" in %userprofile%\\AppData\\local\\packages\\<ph dataRef="id1" id="ph1" />package name<ph dataRef="id2" id="ph2" />\\LocalState\\Microsoft\\Windows Store\\ApiData.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</source>
					<target>The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CurrentAppSimulator</pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=627610)</data>
				</originalData>
				<segment state="initial">
					<source>This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</source>
					<target>This topic also references code examples provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Store sample</pc>.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</source>
					<target>This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Make the purchase request for the in-app product</source>
					<target>Make the purchase request for the in-app product</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>The purchase request for a specific product within a large catalog is handled in much the same way as any other purchase request within an app.</source>
					<target>The purchase request for a specific product within a large catalog is handled in much the same way as any other purchase request within an app.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263382)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn263390)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>When your app calls the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> method overload, your app provides both an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OfferId</pc> and a <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ProductPurchaseDisplayProperties</pc></pc> object populated with the name of the in-app product.</source>
					<target>When your app calls the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> method overload, your app provides both an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">OfferId</pc> and a <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ProductPurchaseDisplayProperties</pc></pc> object populated with the name of the in-app product.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Report fulfillment of the in-app offer</source>
					<target>Report fulfillment of the in-app offer</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Your app will need to report product fulfillment to the Store as soon as the offer has been fulfilled locally.</source>
					<target>Your app will need to report product fulfillment to the Store as soon as the offer has been fulfilled locally.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>In a large catalog scenario, if your app does not report offer fulfillment, the user will be unable to purchase any in-app offers using that same Store product listing.</source>
					<target>In a large catalog scenario, if your app does not report offer fulfillment, the user will be unable to purchase any in-app offers using that same Store product listing.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263392)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>As mentioned earlier, the Store only uses provided offer info to populate the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc>, and does not create a persistent association between a large catalog offer and Store product listing.</source>
					<target>As mentioned earlier, the Store only uses provided offer info to populate the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PurchaseResults</pc></pc>, and does not create a persistent association between a large catalog offer and Store product listing.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn263382)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>As a result you need to track user entitlement for products, and provide product-specific context (such as the name of the item being purchased or details about it) to the user outside of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> operation.</source>
					<target>As a result you need to track user entitlement for products, and provide product-specific context (such as the name of the item being purchased or details about it) to the user outside of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RequestProductPurchaseAsync</pc></pc> operation.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The following code demonstrates the fulfillment call, and a UI messaging pattern in which the specific offer info is inserted.</source>
					<target>The following code demonstrates the fulfillment call, and a UI messaging pattern in which the specific offer info is inserted.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225163)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the absence of that specific product info, the example uses info from the product <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListingInformation</pc></pc>.</source>
					<target>In the absence of that specific product info, the example uses info from the product <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListingInformation</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Enable in-app product purchases</source>
					<target>Enable in-app product purchases</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Enable consumable in-app product purchases</source>
					<target>Enable consumable in-app product purchases</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Store sample (demonstrates trials and in-app purchases)</source>
					<target>Store sample (demonstrates trials and in-app purchases)</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>RequestProductPurchaseAsync</source>
					<target>RequestProductPurchaseAsync</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>ProductPurchaseDisplayProperties</source>
					<target>ProductPurchaseDisplayProperties</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>