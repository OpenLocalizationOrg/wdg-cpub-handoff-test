<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">a8a4e8a0ee85a865b993d3a6ff74c38c7d553587</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\threading-async\asynchronous-programming-universal-windows-platform-apps.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">def10734ffc577ec1e4b60c269c855c9f18385be</mda:meta><mda:meta type="olxliffhash">91431a4488c6b96cf4c4cbfe54a4dcadc02cab73</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Asynchronous programming</source>
					<target>Asynchronous programming</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C\+\+ component extensions (C\+\+/CX), and JavaScript.</source>
					<target>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C\+\+ component extensions (C\+\+/CX), and JavaScript.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Asynchronous programming</source>
					<target>Asynchronous programming</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</source>
					<target>This topic describes asynchronous programming in the Universal Windows Platform (UWP) and its representation in C#, Microsoft Visual Basic .NET, Visual C++ component extensions (C++/CX), and JavaScript.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Using asynchronous programming helps your app stay responsive when it does work that might take an extended amount of time.</source>
					<target>Using asynchronous programming helps your app stay responsive when it does work that might take an extended amount of time.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>For example, an app that downloads content from the Internet might spend several seconds waiting for the content to arrive.</source>
					<target>For example, an app that downloads content from the Internet might spend several seconds waiting for the content to arrive.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>If you used a synchronous method on the UI thread to retrieve the content, the app is blocked until the method returns.</source>
					<target>If you used a synchronous method on the UI thread to retrieve the content, the app is blocked until the method returns.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The app won't respond to user interaction, and because it seems non-responsive, the user might become frustrated.</source>
					<target>The app won't respond to user interaction, and because it seems non-responsive, the user might become frustrated.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>A much better way is to use asynchronous programming, where the app continues to run and respond to the UI while it waits for an operation to complete.</source>
					<target>A much better way is to use asynchronous programming, where the app continues to run and respond to the UI while it waits for an operation to complete.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>For methods that might take a long time to complete, asynchronous programming is the norm and not the exception in the UWP.</source>
					<target>For methods that might take a long time to complete, asynchronous programming is the norm and not the exception in the UWP.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>JavaScript, C#, Visual Basic, and C++/CX each provide language support for asynchronous methods.</source>
					<target>JavaScript, C#, Visual Basic, and C++/CX each provide language support for asynchronous methods.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Asynchronous programming in the UWP</source>
					<target>Asynchronous programming in the UWP</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR241124)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR227171)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Many UWP features like the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaCapture</pc></pc> APIs and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> APIs are exposed as asynchronous APIs.</source>
					<target>Many UWP features like the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaCapture</pc></pc> APIs and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> APIs are exposed as asynchronous APIs.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>By convention, the names of asynchronous APIs end with "Async" to indicate that part of their execution may take place after the API has been invoked.</source>
					<target>By convention, the names of asynchronous APIs end with "Async" to indicate that part of their execution may take place after the API has been invoked.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>When you use asynchronous APIs in your Universal Windows Platform (UWP) app, your code makes non-blocking calls in a consistent way.</source>
					<target>When you use asynchronous APIs in your Universal Windows Platform (UWP) app, your code makes non-blocking calls in a consistent way.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>When you implement these asynchronous patterns in your own API definitions, callers can understand and use your code in a predictable way.</source>
					<target>When you implement these asynchronous patterns in your own API definitions, callers can understand and use your code in a predictable way.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Here are some common tasks that require calling asynchronous UWP APIs.</source>
					<target>Here are some common tasks that require calling asynchronous UWP APIs.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Displaying a message dialog</source>
					<target>Displaying a message dialog</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Working with the file system, displaying a file picker</source>
					<target>Working with the file system, displaying a file picker</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Sending and receiving data to and from the Internet</source>
					<target>Sending and receiving data to and from the Internet</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Using sockets, streams, connectivity</source>
					<target>Using sockets, streams, connectivity</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Working with appointments, contacts, calendar</source>
					<target>Working with appointments, contacts, calendar</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Working with file types, such as opening Portable Document Format (PDF) files or decoding image or media formats</source>
					<target>Working with file types, such as opening Portable Document Format (PDF) files or decoding image or media formats</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Interacting with a device or a service</source>
					<target>Interacting with a device or a service</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>With UWP asynchronous pattern, you may be able to avoid explicitly manage threads at all.</source>
					<target>With UWP asynchronous pattern, you may be able to avoid explicitly manage threads at all.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Each programming language supports the asynchronous pattern for the UWP in its own way:</source>
					<target>Each programming language supports the asynchronous pattern for the UWP in its own way:</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Programming language</source>
					<target>Programming language</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Asynchronous representation</source>
					<target>Asynchronous representation</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>C</source>
					<target>C</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> keyword, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> operator</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> keyword, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">await</pc> operator</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Visual Basic</source>
					<target>Visual Basic</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Async</pc> keyword, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Async</pc> keyword, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Await</pc> operator</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>C++/CX</source>
					<target>C++/CX</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> class, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.then</pc> method</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">task</pc> class, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.then</pc> method</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>JavaScript</source>
					<target>JavaScript</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>promise object, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">then</pc> function</source>
					<target>promise object, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">then</pc> function</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Asynchronous patterns in UWP using C# and Visual Basic</source>
					<target>Asynchronous patterns in UWP using C# and Visual Basic</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>A typical segment of code written in C# or Visual Basic executes synchronously, meaning that when a line executes, it finishes before the next line executes.</source>
					<target>A typical segment of code written in C# or Visual Basic executes synchronously, meaning that when a line executes, it finishes before the next line executes.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>There have been previous Microsoft .NET programming models for asynchronous execution, but the resulting code tends to emphasize the mechanics of executing asynchronous code instead of focusing on the task that the code is trying to accomplish.</source>
					<target>There have been previous Microsoft .NET programming models for asynchronous execution, but the resulting code tends to emphasize the mechanics of executing asynchronous code instead of focusing on the task that the code is trying to accomplish.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The UWP, .NET framework, and C# and Visual Basic compilers have added features that abstract the asynchronous mechanics out of your code.</source>
					<target>The UWP, .NET framework, and C# and Visual Basic compilers have added features that abstract the asynchronous mechanics out of your code.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>For .NET and the UWP you can write asynchronous code that focuses on what your code does instead of how and when to do it.</source>
					<target>For .NET and the UWP you can write asynchronous code that focuses on what your code does instead of how and when to do it.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Your asynchronous code will look reasonably similar to synchronous code.</source>
					<target>Your asynchronous code will look reasonably similar to synchronous code.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](call-asynchronous-apis-in-csharp-or-visual-basic.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Asynchronous patterns in UWP with C++</source>
					<target>Asynchronous patterns in UWP with C++</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750113.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750044.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In C++/CX, asynchronous programming is based on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">task class</pc></pc>, and its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then method</pc></pc>.</source>
					<target>In C++/CX, asynchronous programming is based on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">task class</pc></pc>, and its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then method</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>The syntax is similar to that of JavaScript promises.</source>
					<target>The syntax is similar to that of JavaScript promises.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task class</pc> and its related types also provide the capability for cancellation and management of the thread context.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">task class</pc> and its related types also provide the capability for cancellation and management of the thread context.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](asynchronous-programming-in-cpp-universal-windows-platform-apps.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750102.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">create\_async function</pc></pc> provides support for producing asynchronous APIs that can be consumed from JavaScript or any other language that supports the UWP.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">create\_async function</pc></pc> provides support for producing asynchronous APIs that can be consumed from JavaScript or any other language that supports the UWP.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh750082.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Asynchronous Operations in C++</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating Asynchronous Operations in C++</pc>.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Asynchronous patterns in UWP using JavaScript</source>
					<target>Asynchronous patterns in UWP using JavaScript</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://wiki.commonjs.org/wiki/Promises/A)</data>
				</originalData>
				<segment state="initial">
					<source>In JavaScript, asynchronous programming follows the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common JS Promises/A</pc> proposed standard by having asynchronous methods return promise objects.</source>
					<target>In JavaScript, asynchronous programming follows the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common JS Promises/A</pc> proposed standard by having asynchronous methods return promise objects.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Promises are used in both the UWP and Windows Library for JavaScript.</source>
					<target>Promises are used in both the UWP and Windows Library for JavaScript.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>A promise object represents a value that will be fulfilled in the future.</source>
					<target>A promise object represents a value that will be fulfilled in the future.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>In the UWP you get a promise object from a factory function, which by convention has a name that ends with "Async".</source>
					<target>In the UWP you get a promise object from a factory function, which by convention has a name that ends with "Async".</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>In many cases, calling an asynchronous function is almost as simple as calling a conventional function.</source>
					<target>In many cases, calling an asynchronous function is almost as simple as calling a conventional function.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR229728)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701079)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The difference is that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">then</pc></pc> or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">done</pc></pc> method to assign the handlers for results or errors and to start the operation.</source>
					<target>The difference is that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">then</pc></pc> or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">done</pc></pc> method to assign the handlers for results or errors and to start the operation.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Call asynchronous APIs in C# or Visual Basic</source>
					<target>Call asynchronous APIs in C# or Visual Basic</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Asynchronous Programming with Async and Await (C# and Visual Basic)</source>
					<target>Asynchronous Programming with Async and Await (C# and Visual Basic)</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Reversi sample feature scenarios: asynchronous code</source>
					<target>Reversi sample feature scenarios: asynchronous code</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>