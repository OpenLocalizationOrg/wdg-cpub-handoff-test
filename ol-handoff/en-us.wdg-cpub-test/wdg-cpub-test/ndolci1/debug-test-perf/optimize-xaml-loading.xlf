<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">3fa7c0e3360635282968078432798793de8da191</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\debug-test-perf\optimize-xaml-loading.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">57d830c240ac857321783b98abfa1e3fa22ae0b9</mda:meta><mda:meta type="olxliffhash">1274a70b276c0f7f36a7828baa0f6f9fdc2ed35e</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Optimize your XAML markup</source>
					<target>Optimize your XAML markup</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Parsing XAML markup to construct objects in memory is time-consuming for a complex UI.</source>
					<target>Parsing XAML markup to construct objects in memory is time-consuming for a complex UI.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Here are some things you can do to improve XAML markup parse and load time and memory efficiency for your app.</source>
					<target>Here are some things you can do to improve XAML markup parse and load time and memory efficiency for your app.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Optimize your XAML markup</source>
					<target>Optimize your XAML markup</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Parsing XAML markup to construct objects in memory is time-consuming for a complex UI.</source>
					<target>Parsing XAML markup to construct objects in memory is time-consuming for a complex UI.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Here are some things you can do to improve XAML markup parse and load time and memory efficiency for your app.</source>
					<target>Here are some things you can do to improve XAML markup parse and load time and memory efficiency for your app.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>At app startup, limit the XAML markup that is loaded to only what you need for your initial UI.</source>
					<target>At app startup, limit the XAML markup that is loaded to only what you need for your initial UI.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Examine the markup in your initial page and confirm it contains nothing that it doesn't need.</source>
					<target>Examine the markup in your initial page and confirm it contains nothing that it doesn't need.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>If a page references a user control or a resource defined in a different file, then the framework parses that file, too.</source>
					<target>If a page references a user control or a resource defined in a different file, then the framework parses that file, too.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>In this example, because InitialPage.xaml uses one resource from ExampleResourceDictionary.xaml, the whole of ExampleResourceDictionary.xaml must be parsed at startup.</source>
					<target>In this example, because InitialPage.xaml uses one resource from ExampleResourceDictionary.xaml, the whole of ExampleResourceDictionary.xaml must be parsed at startup.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>InitialPage.xaml.</source>
					<target>InitialPage.xaml.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>ExampleResourceDictionary.xaml.</source>
					<target>ExampleResourceDictionary.xaml.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>If you use a resource on many pages throughout your app, then storing it in App.xaml is a good practice, and avoids duplication.</source>
					<target>If you use a resource on many pages throughout your app, then storing it in App.xaml is a good practice, and avoids duplication.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>But App.xaml is parsed at app startup so any resource that is used in only one page (unless that page is the initial page) should be put into the page's local resources.</source>
					<target>But App.xaml is parsed at app startup so any resource that is used in only one page (unless that page is the initial page) should be put into the page's local resources.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>This counter-example shows App.xaml containing resources that are used by only one page (that's not the initial page).</source>
					<target>This counter-example shows App.xaml containing resources that are used by only one page (that's not the initial page).</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This needlessly increases app startup time.</source>
					<target>This needlessly increases app startup time.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>InitialPage.xaml.</source>
					<target>InitialPage.xaml.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>SecondPage.xaml.</source>
					<target>SecondPage.xaml.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>App.xaml</source>
					<target>App.xaml</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">`SecondPageTextBrush`</data>
					<data id="id2">`ThirdPageTextBrush`</data>
				</originalData>
				<segment state="initial">
					<source>The way to make the above counter-example more efficient is to move <ph dataRef="id1" id="ph1" /> into SecondPage.xaml and to move <ph dataRef="id2" id="ph2" /> into ThirdPage.xaml.</source>
					<target>The way to make the above counter-example more efficient is to move <ph dataRef="id1" id="ph1" /> into SecondPage.xaml and to move <ph dataRef="id2" id="ph2" /> into ThirdPage.xaml.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>can remain in App.xaml because application resources must be parsed at app startup in any case.</source>
					<target>can remain in App.xaml because application resources must be parsed at app startup in any case.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Minimize element count</source>
					<target>Minimize element count</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Although the XAML platform is capable of displaying large numbers of elements, you can make your app lay out and render faster by using the fewest number of elements to achieve the visuals you want.</source>
					<target>Although the XAML platform is capable of displaying large numbers of elements, you can make your app lay out and render faster by using the fewest number of elements to achieve the visuals you want.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227512)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243371)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Layout panels have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Background</pc></pc> property so there's no need to put a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rectangle</pc></pc> in front of a Panel just to color it.</source>
					<target>Layout panels have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Background</pc></pc> property so there's no need to put a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rectangle</pc></pc> in front of a Panel just to color it.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242752)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you reuse the same vector-based element enough times, it becomes more efficient to use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> element instead.</source>
					<target>If you reuse the same vector-based element enough times, it becomes more efficient to use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> element instead.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Vector-based elements can be more expensive because the CPU must create each individual element separately.</source>
					<target>Vector-based elements can be more expensive because the CPU must create each individual element separately.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The image file needs to be decoded only once.</source>
					<target>The image file needs to be decoded only once.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Consolidate multiple brushes that look the same into one resource</source>
					<target>Consolidate multiple brushes that look the same into one resource</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The XAML platform tries to cache commonly-used objects so that they can be reused as often as possible.</source>
					<target>The XAML platform tries to cache commonly-used objects so that they can be reused as often as possible.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>But XAML cannot easily tell if a brush declared in one piece of markup is the same as a brush declared in another.</source>
					<target>But XAML cannot easily tell if a brush declared in one piece of markup is the same as a brush declared in another.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242962)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210068)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The example here uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> to demonstrate, but the case is more likely and more important with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GradientBrush</pc></pc>.</source>
					<target>The example here uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> to demonstrate, but the case is more likely and more important with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GradientBrush</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">`"Orange"`</data>
					<data id="id2">`"#FFFFA500"`</data>
				</originalData>
				<segment state="initial">
					<source>Also check for brushes that use predefined colors: <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> are the same color.</source>
					<target>Also check for brushes that use predefined colors: <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> are the same color.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>To fix the duplication, define the brush as a resource.</source>
					<target>To fix the duplication, define the brush as a resource.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>If controls in other pages use the same brush, move it to App.xaml.</source>
					<target>If controls in other pages use the same brush, move it to App.xaml.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Minimize overdrawing</source>
					<target>Minimize overdrawing</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Overdrawing is where more than one object is drawn in the same screen pixels.</source>
					<target>Overdrawing is where more than one object is drawn in the same screen pixels.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Note that there is sometimes a trade-off between this guidance and the desire to minimize element count.</source>
					<target>Note that there is sometimes a trade-off between this guidance and the desire to minimize element count.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>If an element isn't visible because it's transparent or hidden behind other elements, and it's not contributing to layout, then delete it.</source>
					<target>If an element isn't visible because it's transparent or hidden behind other elements, and it's not contributing to layout, then delete it.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208992)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If the element is not visible in the initial visual state but it is visible in other visual states then set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Collapsed</pc> on the element itself and change the value to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visible</pc> in the appropriate states.</source>
					<target>If the element is not visible in the initial visual state but it is visible in other visual states then set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Collapsed</pc> on the element itself and change the value to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visible</pc> in the appropriate states.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>There will be exceptions to this heuristic: in general, the value a property has in the major of visual states is best set locally on the element.</source>
					<target>There will be exceptions to this heuristic: in general, the value a property has in the major of visual states is best set locally on the element.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Use a composite element instead of layering multiple elements to create an effect.</source>
					<target>Use a composite element instead of layering multiple elements to create an effect.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243371)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, the result is a two-toned shape where the top half is black (from the background of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>) and the bottom half is gray (from the semi-transparent white <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rectangle</pc></pc> alpha-blended over the black background of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Grid</pc>).</source>
					<target>In this example, the result is a two-toned shape where the top half is black (from the background of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>) and the bottom half is gray (from the semi-transparent white <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rectangle</pc></pc> alpha-blended over the black background of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Grid</pc>).</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Here, 150% of the pixels necessary to achieve the result are being filled.</source>
					<target>Here, 150% of the pixels necessary to achieve the result are being filled.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>A layout panel can have two purposes: to color an area, and to lay out child elements.</source>
					<target>A layout panel can have two purposes: to color an area, and to lay out child elements.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If an element further back in z-order is already coloring an area then a layout panel in front does not need to paint that area: instead it can just focus on laying out its children.</source>
					<target>If an element further back in z-order is already coloring an area then a layout panel in front does not need to paint that area: instead it can just focus on laying out its children.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Here's an example.</source>
					<target>Here's an example.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> has to be hit-testable then set a background value of transparent on it.</source>
					<target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> has to be hit-testable then set a background value of transparent on it.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209253)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Border</pc></pc> element to draw a border around an object.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Border</pc></pc> element to draw a border around an object.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> is used as a makeshift border around a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBox</pc></pc>.</source>
					<target>In this example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> is used as a makeshift border around a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBox</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>But all the pixels in the center cell are overdrawn.</source>
					<target>But all the pixels in the center cell are overdrawn.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Be aware of margins.</source>
					<target>Be aware of margins.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Two neighboring elements will overlap (possibly accidentally) if negative margins extend into another’s render bounds and cause overdrawing.</source>
					<target>Two neighboring elements will overlap (possibly accidentally) if negative margins extend into another’s render bounds and cause overdrawing.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701823)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DebugSettings.IsOverdrawHeatMapEnabled</pc></pc> as a visual diagnostic.</source>
					<target>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DebugSettings.IsOverdrawHeatMapEnabled</pc></pc> as a visual diagnostic.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>You may find objects being drawn that you weren't aware were in the scene.</source>
					<target>You may find objects being drawn that you weren't aware were in the scene.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Cache static content</source>
					<target>Cache static content</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Another source of overdrawing is a shape made from many overlapping elements.</source>
					<target>Another source of overdrawing is a shape made from many overlapping elements.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR228084)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR208911)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>If you set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CacheMode</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BitmapCache</pc> on the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">UIElement</pc></pc> that contains the composite shape then the platform renders the element to a bitmap once and then uses that bitmap each frame instead of overdrawing.</source>
					<target>If you set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CacheMode</pc></pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BitmapCache</pc> on the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">UIElement</pc></pc> that contains the composite shape then the platform renders the element to a bitmap once and then uses that bitmap each frame instead of overdrawing.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Inefficient.</source>
					<target>Inefficient.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Venn diagram with three solid circles</source>
					<target>Venn diagram with three solid circles</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>The image above is the result, but here's a map of the overdrawn regions.</source>
					<target>The image above is the result, but here's a map of the overdrawn regions.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Darker red indicates higher amounts of overdraw.</source>
					<target>Darker red indicates higher amounts of overdraw.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Venn diagram that shows overlapping areas</source>
					<target>Venn diagram that shows overlapping areas</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Efficient.</source>
					<target>Efficient.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR228084)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Note the use of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CacheMode</pc></pc>.</source>
					<target>Note the use of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CacheMode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Don't use this technique if any of the sub-shapes animate because the bitmap cache will likely need to be regenerated every frame, defeating the purpose.</source>
					<target>Don't use this technique if any of the sub-shapes animate because the bitmap cache will likely need to be regenerated every frame, defeating the purpose.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>ResourceDictionaries</source>
					<target>ResourceDictionaries</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>ResourceDictionaries are generally used to store your resources at a somewhat global level.</source>
					<target>ResourceDictionaries are generally used to store your resources at a somewhat global level.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Resources that your app wants to reference in multiple places.</source>
					<target>Resources that your app wants to reference in multiple places.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>For example, styles, brushes, templates, and so on.</source>
					<target>For example, styles, brushes, templates, and so on.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>In general, we have optimized ResourceDictionaries to not instantiate resources unless they're asked for.</source>
					<target>In general, we have optimized ResourceDictionaries to not instantiate resources unless they're asked for.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>But there are few places where you need to be a little careful.</source>
					<target>But there are few places where you need to be a little careful.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resource with x:Name</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resource with x:Name</pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Any resource with x:Name will not benefit from the platform optimization, but instead it will be instantiated as soon as the ResourceDictionary is created.</source>
					<target>Any resource with x:Name will not benefit from the platform optimization, but instead it will be instantiated as soon as the ResourceDictionary is created.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>This happens because x:Name tells the platform that your app needs field access to this resource, so the platform needs to create something to create a reference to.</source>
					<target>This happens because x:Name tells the platform that your app needs field access to this resource, so the platform needs to create something to create a reference to.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionaries in a UserControl</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionaries in a UserControl</pc>.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>ResourceDictionaries defined inside of a UserControl carry a penalty.</source>
					<target>ResourceDictionaries defined inside of a UserControl carry a penalty.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>The platform will create a copy of such a ResourceDictionary for every instance of the UserControl.</source>
					<target>The platform will create a copy of such a ResourceDictionary for every instance of the UserControl.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>If you have a UserControl that is used a lot, then move the ResourceDictionary out of the UserControl and put it the page level.</source>
					<target>If you have a UserControl that is used a lot, then move the ResourceDictionary out of the UserControl and put it the page level.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Use XBF2</source>
					<target>Use XBF2</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>XBF2 is a binary representation of XAML markup that avoids all text-parsing costs at runtime.</source>
					<target>XBF2 is a binary representation of XAML markup that avoids all text-parsing costs at runtime.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>It also optimizes your binary for load and tree creation, and allows "fast-path" for XAML types to improve heap and object creation costs, for example VSM, ResourceDictionary, Styles, and so on.</source>
					<target>It also optimizes your binary for load and tree creation, and allows "fast-path" for XAML types to improve heap and object creation costs, for example VSM, ResourceDictionary, Styles, and so on.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>It is completely memory-mapped so there is no heap footprint for loading and reading a XAML Page.</source>
					<target>It is completely memory-mapped so there is no heap footprint for loading and reading a XAML Page.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>In addition, it reduces the disk footprint of stored XAML pages in an appx.</source>
					<target>In addition, it reduces the disk footprint of stored XAML pages in an appx.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>XBF2 is a more compact representation and it can reduce disk footprint of comparative XAML/XBF1 files by up to 50%.</source>
					<target>XBF2 is a more compact representation and it can reduce disk footprint of comparative XAML/XBF1 files by up to 50%.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>For example, the built-in Photos app saw around a 60% reduction after conversion to XBF2 dropping from around ~1mb of XBF1 assets to ~400kb of XBF2 assets.</source>
					<target>For example, the built-in Photos app saw around a 60% reduction after conversion to XBF2 dropping from around ~1mb of XBF1 assets to ~400kb of XBF2 assets.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>We have also seen apps benefit anywhere from 15 to 20% in CPU and 10 to 15% in Win32 heap.</source>
					<target>We have also seen apps benefit anywhere from 15 to 20% in CPU and 10 to 15% in Win32 heap.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>XAML built-in controls and dictionaries that the framework provides are already fully XBF2-enabled.</source>
					<target>XAML built-in controls and dictionaries that the framework provides are already fully XBF2-enabled.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>For your own app, ensure that your project file declares TargetPlatformVersion 8.2 or later.</source>
					<target>For your own app, ensure that your project file declares TargetPlatformVersion 8.2 or later.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>To check whether you have XBF2, open your app in a binary editor; the 12th and 13th bytes are 00 02 if you have XBF2.</source>
					<target>To check whether you have XBF2, open your app in a binary editor; the 12th and 13th bytes are 00 02 if you have XBF2.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>