<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">e3a25c713c4478cfc3639b48efc25ac04553e096</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\using-depth-and-effects-on-primitives.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">d69ff5615ae6f076c0a2b36f184516dcea20a7f2</mda:meta><mda:meta type="olxliffhash">ae721a364d0ea922d6ce8b1e1989e3c16dfbeaf7</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Use depth and effects on primitives</source>
					<target>Use depth and effects on primitives</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to use depth, perspective, color, and other effects on primitives.</source>
					<target>Here, we show you how to use depth, perspective, color, and other effects on primitives.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Use depth and effects on primitives</source>
					<target>Use depth and effects on primitives</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to use depth, perspective, color, and other effects on primitives.</source>
					<target>Here, we show you how to use depth, perspective, color, and other effects on primitives.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Objective:</pc> To create a 3D object and apply basic vertex lighting and coloring to it.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Objective:</pc> To create a 3D object and apply basic vertex lighting and coloring to it.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>We assume that you are familiar with C++.</source>
					<target>We assume that you are familiar with C++.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>You also need basic experience with graphics programming concepts.</source>
					<target>You also need basic experience with graphics programming concepts.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](setting-up-directx-resources.md)</data>
					<data id="id3">[</data>
					<data id="id4">](creating-shaders-and-drawing-primitives.md)</data>
				</originalData>
				<segment state="initial">
					<source>We also assume that you went through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: setting up DirectX resources and displaying an image</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Creating shaders and drawing primitives</pc>.</source>
					<target>We also assume that you went through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: setting up DirectX resources and displaying an image</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Creating shaders and drawing primitives</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time to complete:</pc> 20 minutes.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time to complete:</pc> 20 minutes.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Instructions</source>
					<target>Instructions</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>1. Defining cube variables</source>
					<target>1. Defining cube variables</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>First, we need to define the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleCubeVertex</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConstantBuffer</pc> structures for the cube.</source>
					<target>First, we need to define the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SimpleCubeVertex</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConstantBuffer</pc> structures for the cube.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>These structures specify the vertex positions and colors for the cube and how the cube will be viewed.</source>
					<target>These structures specify the vertex positions and colors for the cube and how the cube will be viewed.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476377)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476351)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>We declare <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DepthStencilView</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Buffer</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ComPtr</pc></pc> and declare an instance of <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ConstantBuffer</pc>.</source>
					<target>We declare <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DepthStencilView</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Buffer</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ComPtr</pc></pc> and declare an instance of <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ConstantBuffer</pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>2. Creating a depth stencil view</source>
					<target>2. Creating a depth stencil view</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>In addition to creating the render-target view, we also create a depth-stencil view.</source>
					<target>In addition to creating the render-target view, we also create a depth-stencil view.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The depth-stencil view enables Direct3D to efficiently render objects closer to the camera in front of objects further from the camera.</source>
					<target>The depth-stencil view enables Direct3D to efficiently render objects closer to the camera in front of objects further from the camera.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Before we can create a view to a depth-stencil buffer, we must create the depth-stencil buffer.</source>
					<target>Before we can create a view to a depth-stencil buffer, we must create the depth-stencil buffer.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476253)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476521)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We populate a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_TEXTURE2D\_DESC</pc></pc> to describe the depth-stencil buffer and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device::CreateTexture2D</pc></pc> to create the depth-stencil buffer.</source>
					<target>We populate a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_TEXTURE2D\_DESC</pc></pc> to describe the depth-stencil buffer and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device::CreateTexture2D</pc></pc> to create the depth-stencil buffer.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476112)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476507)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To create the depth-stencil view, we populate a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_DEPTH\_STENCIL\_VIEW\_DESC</pc></pc> to describe the depth-stencil view and pass the depth-stencil view description and the depth-stencil buffer to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device::CreateDepthStencilView</pc></pc>.</source>
					<target>To create the depth-stencil view, we populate a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_DEPTH\_STENCIL\_VIEW\_DESC</pc></pc> to describe the depth-stencil view and pass the depth-stencil view description and the depth-stencil buffer to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device::CreateDepthStencilView</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>3. Updating perspective with the window</source>
					<target>3. Updating perspective with the window</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>We update the perspective projection parameters for the constant buffer depending on the window dimensions.</source>
					<target>We update the perspective projection parameters for the constant buffer depending on the window dimensions.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>We fix the parameters to a 70-degree field of view with a depth range of 0.01 to 100.</source>
					<target>We fix the parameters to a 70-degree field of view with a depth range of 0.01 to 100.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>4. Creating vertex and pixel shaders with color elements</source>
					<target>4. Creating vertex and pixel shaders with color elements</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](creating-shaders-and-drawing-primitives.md)</data>
				</originalData>
				<segment state="initial">
					<source>In this app, we create more complex vertex and pixel shaders than what we described in the previous tutorial, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating shaders and drawing primitives</pc>.</source>
					<target>In this app, we create more complex vertex and pixel shaders than what we described in the previous tutorial, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating shaders and drawing primitives</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The app's vertex shader transforms each vertex position into projection space and passes the vertex color through to the pixel shader.</source>
					<target>The app's vertex shader transforms each vertex position into projection space and passes the vertex color through to the pixel shader.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476180)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The app's array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_INPUT\_ELEMENT\_DESC</pc></pc> structures that describe the layout of the vertex shader code has two layout elements: one element defines the vertex position and the other element defines the color.</source>
					<target>The app's array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_INPUT\_ELEMENT\_DESC</pc></pc> structures that describe the layout of the vertex shader code has two layout elements: one element defines the vertex position and the other element defines the color.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>We create vertex, index, and constant buffers to define an orbiting cube.</source>
					<target>We create vertex, index, and constant buffers to define an orbiting cube.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>To define an orbiting cube</source>
					<target>To define an orbiting cube</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>First, we define the cube.</source>
					<target>First, we define the cube.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>We assign each vertex a color in addition to a position.</source>
					<target>We assign each vertex a color in addition to a position.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>This allows the pixel shader to color each face differently so the face can be distinguished.</source>
					<target>This allows the pixel shader to color each face differently so the face can be distinguished.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476092)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476220)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we describe the vertex and index buffers (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_BUFFER\_DESC</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11\_SUBRESOURCE\_DATA</pc></pc>) using the cube definition.</source>
					<target>Next, we describe the vertex and index buffers (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_BUFFER\_DESC</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11\_SUBRESOURCE\_DATA</pc></pc>) using the cube definition.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateBuffer</pc></pc> once for each buffer.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateBuffer</pc></pc> once for each buffer.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476092)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we create a constant buffer (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_BUFFER\_DESC</pc></pc>) for passing model, view, and projection matrices to the vertex shader.</source>
					<target>Next, we create a constant buffer (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_BUFFER\_DESC</pc></pc>) for passing model, view, and projection matrices to the vertex shader.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>We can later use the constant buffer to rotate the cube and apply a perspective projection to it.</source>
					<target>We can later use the constant buffer to rotate the cube and apply a perspective projection to it.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateBuffer</pc></pc> to create the constant buffer.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateBuffer</pc></pc> to create the constant buffer.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Next, we specify the view transform that corresponds to a camera position of X = 0, Y = 1, Z = 2.</source>
					<target>Next, we specify the view transform that corresponds to a camera position of X = 0, Y = 1, Z = 2.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>Finally, we declare a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">degree</pc> variable that we will use to animate the cube by rotating it every frame.</source>
					<target>Finally, we declare a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">degree</pc> variable that we will use to animate the cube by rotating it every frame.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>5. Rotating and drawing the cube and presenting the rendered image</source>
					<target>5. Rotating and drawing the cube and presenting the rendered image</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>We enter an endless loop to continually render and display the scene.</source>
					<target>We enter an endless loop to continually render and display the scene.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rotationY</pc> inline function (BasicMath.h) with a rotation amount to set values that will rotate the cube’s model matrix around the Y axis.</source>
					<target>We call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rotationY</pc> inline function (BasicMath.h) with a rotation amount to set values that will rotate the cube’s model matrix around the Y axis.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476486)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::UpdateSubresource</pc></pc> to update the constant buffer and rotate the cube model.</source>
					<target>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::UpdateSubresource</pc></pc> to update the constant buffer and rotate the cube model.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::OMSetRenderTargets</pc></pc> to specify the render target as the output target.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::OMSetRenderTargets</pc></pc> to specify the render target as the output target.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OMSetRenderTargets</pc> call, we pass the depth-stencil view.</source>
					<target>In this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OMSetRenderTargets</pc> call, we pass the depth-stencil view.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476387)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ClearRenderTargetView</pc></pc> to clear the render target to a solid blue color and call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::ClearDepthStencilView</pc></pc> to clear the depth buffer.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ClearRenderTargetView</pc></pc> to clear the render target to a solid blue color and call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::ClearDepthStencilView</pc></pc> to clear the depth buffer.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>In the endless loop, we also draw the cube on the blue surface.</source>
					<target>In the endless loop, we also draw the cube on the blue surface.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>To draw the cube</source>
					<target>To draw the cube</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>First, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetInputLayout</pc></pc> to describe how vertex buffer data is streamed into the input-assembler stage.</source>
					<target>First, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetInputLayout</pc></pc> to describe how vertex buffer data is streamed into the input-assembler stage.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetVertexBuffers</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::IASetIndexBuffer</pc></pc> to bind the vertex and index buffers to the input-assembler stage.</source>
					<target>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetVertexBuffers</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::IASetIndexBuffer</pc></pc> to bind the vertex and index buffers to the input-assembler stage.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476455)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476189#D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetPrimitiveTopology</pc></pc> with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11\_PRIMITIVE\_TOPOLOGY\_TRIANGLESTRIP</pc></pc> value to specify for the input-assembler stage to interpret the vertex data as a triangle strip.</source>
					<target>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::IASetPrimitiveTopology</pc></pc> with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11\_PRIMITIVE\_TOPOLOGY\_TRIANGLESTRIP</pc></pc> value to specify for the input-assembler stage to interpret the vertex data as a triangle strip.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::VSSetShader</pc></pc> to initialize the vertex shader stage with the vertex shader code and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::PSSetShader</pc></pc> to initialize the pixel shader stage with the pixel shader code.</source>
					<target>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::VSSetShader</pc></pc> to initialize the vertex shader stage with the vertex shader code and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext::PSSetShader</pc></pc> to initialize the pixel shader stage with the pixel shader code.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476491)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::VSSetConstantBuffers</pc></pc> to set the constant buffer that is used by the vertex shader pipeline stage.</source>
					<target>Next, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::VSSetConstantBuffers</pc></pc> to set the constant buffer that is used by the vertex shader pipeline stage.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::DrawIndexed</pc></pc> to draw the cube and submit it to the rendering pipeline.</source>
					<target>Finally, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::DrawIndexed</pc></pc> to draw the cube and submit it to the rendering pipeline.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::Present</pc></pc> to present the rendered image to the window.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::Present</pc></pc> to present the rendered image to the window.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Summary and next steps</source>
					<target>Summary and next steps</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>We used depth, perspective, color, and other effects on primitives.</source>
					<target>We used depth, perspective, color, and other effects on primitives.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Next, we apply textures to primitives.</source>
					<target>Next, we apply textures to primitives.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Applying textures to primitives</source>
					<target>Applying textures to primitives</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>