<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">171682c9e4bf5375a44738a7a225ff499a188740</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\x-bind-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">cb72b2e3ad626671be9879dac06cfde94b384482</mda:meta><mda:meta type="olxliffhash">878a15c8aa4cff709f0b7d7d3f313c79c627a49e</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The xBind markup extension is an alternative to Binding.</source>
					<target>The xBind markup extension is an alternative to Binding.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>xBind lacks some of the features of Binding, but it runs in less time and less memory than Binding and supports better debugging.</source>
					<target>xBind lacks some of the features of Binding, but it runs in less time and less memory than Binding and supports better debugging.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>xBind markup extension</source>
					<target>xBind markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>{x:Bind} markup extension</source>
					<target>{x:Bind} markup extension</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For general info about using data binding in your app with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> (and for an all-up comparison between <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">{Binding}</pc>), see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Data binding in depth</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For general info about using data binding in your app with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> (and for an all-up comparison between <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">{Binding}</pc>), see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> markup extension—new for Windows 10—is an alternative to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> markup extension—new for Windows 10—is an alternative to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> lacks some of the features of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>, but it runs in less time and less memory than <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc> and supports better debugging.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> lacks some of the features of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>, but it runs in less time and less memory than <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc> and supports better debugging.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>At XAML load time, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is converted into what you can think of as a binding object, and this object gets a value from a property on a data source.</source>
					<target>At XAML load time, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is converted into what you can think of as a binding object, and this object gets a value from a property on a data source.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</source>
					<target>The binding object can optionally be configured to observe changes in the value of the data source property and refresh itself based on those changes.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>It can also optionally be configured to push changes in its own value back to the source property.</source>
					<target>It can also optionally be configured to push changes in its own value back to the source property.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The binding objects created by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> are largely functionally equivalent.</source>
					<target>The binding objects created by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> are largely functionally equivalent.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>But <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> executes special-purpose code, which it generates at compile-time, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> uses general-purpose runtime object inspection.</source>
					<target>But <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> executes special-purpose code, which it generates at compile-time, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> uses general-purpose runtime object inspection.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Consequently, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> bindings (often referred-to as compiled bindings) have great performance, provide compile-time validation of your binding expressions, and support debugging by enabling you to set breakpoints in the code files that are generated as the partial class for your page.</source>
					<target>Consequently, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> bindings (often referred-to as compiled bindings) have great performance, provide compile-time validation of your binding expressions, and support debugging by enabling you to set breakpoints in the code files that are generated as the partial class for your page.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">`obj`</data>
					<data id="id2">`&lt;view name&gt;.g.cs`</data>
				</originalData>
				<segment state="initial">
					<source>These files can be found in your <ph dataRef="id1" id="ph1" /> folder, with names like (for C#) <ph dataRef="id2" id="ph2" />.</source>
					<target>These files can be found in your <ph dataRef="id1" id="ph1" /> folder, with names like (for C#) <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Sample apps that demonstrate {x:Bind}</source>
					<target>Sample apps that demonstrate {x:Bind}</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>{x:Bind} sample</source>
					<target>{x:Bind} sample</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>QuizGame</source>
					<target>QuizGame</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>XAML UI Basics sample</source>
					<target>XAML UI Basics sample</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>propertyPath</source>
					<target>propertyPath</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>A string that specifies the property path for the binding.</source>
					<target>A string that specifies the property path for the binding.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#property-path)</data>
				</originalData>
				<segment state="initial">
					<source>More info is in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section below.</source>
					<target>More info is in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section below.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>bindingProperties</source>
					<target>bindingProperties</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">=</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
					<data id="id6">_</data>
					<data id="id7">_</data>
					<data id="id8">=</data>
					<data id="id9">_</data>
					<data id="id10">_</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc>\[, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">propName</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">value</pc>\]*</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc>\[, <pc dataRefEnd="id7" dataRefStart="id6" id="p3">propName</pc><ph dataRef="id8" id="ph2" /><pc dataRefEnd="id10" dataRefStart="id9" id="p4">value</pc>\]*</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>One or more binding properties that are specified using a name/value pair syntax.</source>
					<target>One or more binding properties that are specified using a name/value pair syntax.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>propName</source>
					<target>propName</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The string name of the property to set on the binding object.</source>
					<target>The string name of the property to set on the binding object.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>For example, "Converter".</source>
					<target>For example, "Converter".</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>value</source>
					<target>value</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>The value to set the property to.</source>
					<target>The value to set the property to.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>The syntax of the argument depends on the property being set.</source>
					<target>The syntax of the argument depends on the property being set.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">=</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
					<data id="id6">`Converter={StaticResource myConverterClass}`</data>
				</originalData>
				<segment state="initial">
					<source>Here's an example of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> usage where the value is itself a markup extension: <ph dataRef="id6" id="ph2" />.</source>
					<target>Here's an example of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> usage where the value is itself a markup extension: <ph dataRef="id6" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#properties-you-can-set)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties that you can set with {x:Bind}</pc> section below.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties that you can set with {x:Bind}</pc> section below.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Property path</source>
					<target>Property path</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyPath</pc> sets the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> expression.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyPath</pc> sets the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc> expression.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> is a property path specifying the value of the property, sub-property, field, or method that you're binding to (the source).</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> is a property path specifying the value of the property, sub-property, field, or method that you're binding to (the source).</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`{Binding Path=...}`</data>
				</originalData>
				<segment state="initial">
					<source>You can mention the name of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> property explicitly: <ph dataRef="id3" id="ph1" />.</source>
					<target>You can mention the name of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> property explicitly: <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">`{Binding ...}`</data>
				</originalData>
				<segment state="initial">
					<source>Or you can omit it: <ph dataRef="id1" id="ph1" />.</source>
					<target>Or you can omit it: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> does not use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> as a default source—instead, it uses the page or user control itself.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> does not use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> as a default source—instead, it uses the page or user control itself.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>So it will look in the code-behind of your page or user control for properties, fields, and methods.</source>
					<target>So it will look in the code-behind of your page or user control for properties, fields, and methods.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To expose your view model to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>, you will typically want to add new fields or properties to the code behind for your page or user control.</source>
					<target>To expose your view model to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>, you will typically want to add new fields or properties to the code behind for your page or user control.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</source>
					<target>Steps in a property path are delimited by dots (.), and you can include multiple delimiters to traverse successive sub-properties.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Use the dot delimiter regardless of the programming language used to implement the object being bound to.</source>
					<target>Use the dot delimiter regardless of the programming language used to implement the object being bound to.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For example: in a page, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text="{x:Bind Employee.FirstName}"</pc> will look for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Employee</pc> member on the page and then a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FirstName</pc> member on the object returned by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Employee</pc>.</source>
					<target>For example: in a page, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text="{x:Bind Employee.FirstName}"</pc> will look for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Employee</pc> member on the page and then a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FirstName</pc> member on the object returned by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Employee</pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</source>
					<target>If you are binding an items control to a property that contains an employee's dependents, your property path might be "Employee.Dependents", and the item template of the items control would take care of displaying the items in "Dependents".</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For C++/CX, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> cannot bind to private fields and properties in the page or data model – you will need to have a public property for it to be bindable.</source>
					<target>For C++/CX, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> cannot bind to private fields and properties in the page or data model – you will need to have a public property for it to be bindable.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The surface area for binding needs to be exposed as CX classes/interfaces so that we can get the relevant metadata.</source>
					<target>The surface area for binding needs to be exposed as CX classes/interfaces so that we can get the relevant metadata.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">\[Bindable\]</pc> attribute should not be needed.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">\[Bindable\]</pc> attribute should not be needed.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If the data source is a collection, then a property path can specify items in the collection by their position or index.</source>
					<target>If the data source is a collection, then a property path can specify items in the collection by their position or index.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that requests the first item in a zero-indexed collection.</source>
					<target>For example, "Teams\[0\].Players", where the literal "\[\]" encloses the "0" that requests the first item in a zero-indexed collection.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">&amp;lt;</data>
					<data id="id8">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>To use an indexer, the model needs to implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IList<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p2">IVector<ph dataRef="id7" id="ph3" />T<ph dataRef="id8" id="ph4" /></pc> on the type of the property that is going to be indexed.</source>
					<target>To use an indexer, the model needs to implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IList<ph dataRef="id3" id="ph1" />T<ph dataRef="id4" id="ph2" /></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p2">IVector<ph dataRef="id7" id="ph3" />T<ph dataRef="id8" id="ph4" /></pc> on the type of the property that is going to be indexed.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the type of the indexed property supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyCollectionChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IObservableVector</pc> and the binding is OneWay or TwoWay, then it will register and listen for change notifications on those interfaces.</source>
					<target>If the type of the indexed property supports <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INotifyCollectionChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IObservableVector</pc> and the binding is OneWay or TwoWay, then it will register and listen for change notifications on those interfaces.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>The change detection logic will update based on all collection changes, even if that doesn’t affect the specific indexed value.</source>
					<target>The change detection logic will update based on all collection changes, even if that doesn’t affect the specific indexed value.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>This is because the listening logic is common across all instances of the collection.</source>
					<target>This is because the listening logic is common across all instances of the collection.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>To bind to attached properties, you need to put the class and property name into parentheses after the dot.</source>
					<target>To bind to attached properties, you need to put the class and property name into parentheses after the dot.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For example <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text="{x:Bind Button22.(Grid.Row)}"</pc>.</source>
					<target>For example <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text="{x:Bind Button22.(Grid.Row)}"</pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>If the property is not declared in a Xaml namespace, then you will need to prefix it with a xml namespace, which you should map to a code namespace at the head of the document.</source>
					<target>If the property is not declared in a Xaml namespace, then you will need to prefix it with a xml namespace, which you should map to a code namespace at the head of the document.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Compiled bindings are strongly typed, and will resolve the type of each step in a path.</source>
					<target>Compiled bindings are strongly typed, and will resolve the type of each step in a path.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>If the type returned doesn’t have the member, it will fail at compile time.</source>
					<target>If the type returned doesn’t have the member, it will fail at compile time.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>You can specify a cast to tell binding the real type of the object.</source>
					<target>You can specify a cast to tell binding the real type of the object.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the following case, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">obj</pc> is a property of type object, but contains a text box, so we can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text="{x:Bind obj.(TextBox.Text)}"</pc>.</source>
					<target>In the following case, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">obj</pc> is a property of type object, but contains a text box, so we can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text="{x:Bind obj.(TextBox.Text)}"</pc>.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">groups3</pc> field in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text="{x:Bind groups3\[0\].(data:SampleDataGroup.Title)}"</pc> is a dictionary of objects, so you must cast it to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">data:SampleDataGroup</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">groups3</pc> field in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Text="{x:Bind groups3\[0\].(data:SampleDataGroup.Title)}"</pc> is a dictionary of objects, so you must cast it to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">data:SampleDataGroup</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">data:</pc> namespace prefix for mapping the object type to a namespace that isn't part of the default XAML namespace.</source>
					<target>Note the use of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">data:</pc> namespace prefix for mapping the object type to a namespace that isn't part of the default XAML namespace.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>With <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Bind</pc>, you do not need to use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName=xxx</pc> as part of the binding expression.</source>
					<target>With <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Bind</pc>, you do not need to use <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName=xxx</pc> as part of the binding expression.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>With <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Bind</pc>, you can use the name of the element as the first part of the path for the binding because named elements become fields within the page or user control that represents the root binding source.</source>
					<target>With <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Bind</pc>, you can use the name of the element as the first part of the path for the binding because named elements become fields within the page or user control that represents the root binding source.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Event binding is a new feature for compiled binding.</source>
					<target>Event binding is a new feature for compiled binding.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>It enables you to specify the handler for an event using a binding, rather than it having to be a method on the code behind.</source>
					<target>It enables you to specify the handler for an event using a binding, rather than it having to be a method on the code behind.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For example: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click="{x:Bind rootFrame.GoForward}"</pc>.</source>
					<target>For example: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click="{x:Bind rootFrame.GoForward}"</pc>.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>For events, the target method must not be overloaded and must also:</source>
					<target>For events, the target method must not be overloaded and must also:</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Match the signature of the event.</source>
					<target>Match the signature of the event.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>OR have no parameters.</source>
					<target>OR have no parameters.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>OR have the same number of parameters of types that are assignable from the types of the event parameters.</source>
					<target>OR have the same number of parameters of types that are assignable from the types of the event parameters.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>In generated code-behind, compiled binding handles the event and routes it to the method on the model, evaluating the path of the binding expression when the event occurs.</source>
					<target>In generated code-behind, compiled binding handles the event and routes it to the method on the model, evaluating the path of the binding expression when the event occurs.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>This means that, unlike property bindings, it doesn’t track changes to the model.</source>
					<target>This means that, unlike property bindings, it doesn’t track changes to the model.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](property-path-syntax.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info about the string syntax for a property path, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property-path syntax</pc>, keeping in mind the differences described here for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc>.</source>
					<target>For more info about the string syntax for a property path, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property-path syntax</pc>, keeping in mind the differences described here for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc>.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Properties that you can set with {x:Bind}</source>
					<target>Properties that you can set with {x:Bind}</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is illustrated with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">bindingProperties</pc> placeholder syntax because there are multiple read/write properties that can be set in the markup extension.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is illustrated with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">bindingProperties</pc> placeholder syntax because there are multiple read/write properties that can be set in the markup extension.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">=</data>
					<data id="id4">*</data>
					<data id="id5">*</data>
				</originalData>
				<segment state="initial">
					<source>The properties can be set in any order with comma-separated <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> pairs.</source>
					<target>The properties can be set in any order with comma-separated <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">value</pc> pairs.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Note that you cannot include line breaks in the binding expression.</source>
					<target>Note that you cannot include line breaks in the binding expression.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>.</source>
					<target>Some of the properties require types that don't have a type conversion, so these require markup extensions of their own nested within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>These properties work in much the same way as the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class.</source>
					<target>These properties work in much the same way as the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Property</source>
					<target>Property</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Path</source>
					<target>Path</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#property-path)</data>
				</originalData>
				<segment state="initial">
					<source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section above.</source>
					<target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property path</pc> section above.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Converter</source>
					<target>Converter</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Specifies the converter object that is called by the binding engine.</source>
					<target>Specifies the converter object that is called by the binding engine.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> reference to that object in the resource dictionary.</source>
					<target>The converter can be set in XAML, but only if you refer to an object instance that you've assigned in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> reference to that object in the resource dictionary.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>ConverterLanguage</source>
					<target>ConverterLanguage</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Specifies the culture to be used by the converter.</source>
					<target>Specifies the culture to be used by the converter.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterLanguage</pc> you should also be setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc>.) The culture is set as a standards-based identifier.</source>
					<target>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterLanguage</pc> you should also be setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc>.) The culture is set as a standards-based identifier.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701880)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterLanguage</pc></pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterLanguage</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>ConverterParameter</source>
					<target>ConverterParameter</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Specifies the converter parameter that can be used in converter logic.</source>
					<target>Specifies the converter parameter that can be used in converter logic.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> you should also be setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ConverterParameter</pc> value.</source>
					<target>(If you're setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> you should also be setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc>.) Most converters use simple logic that get all the info they need from the passed value to convert, and don't need a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ConverterParameter</pc> value.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConverterParameter</pc> parameter is for moderately advanced converter implementations that have more than one logic that keys off what's passed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc>.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209827)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can write a converter that uses values other than strings but this is uncommon, see Remarks in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc></pc> for more info.</source>
					<target>You can write a converter that uses values other than strings but this is uncommon, see Remarks in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConverterParameter</pc></pc> for more info.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>FallbackValue</source>
					<target>FallbackValue</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Specifies a value to display when the source or path cannot be resolved.</source>
					<target>Specifies a value to display when the source or path cannot be resolved.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Mode</source>
					<target>Mode</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</source>
					<target>Specifies the binding mode, as one of these strings: "OneTime", "OneWay", or "TwoWay".</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>The default is "OneTime".</source>
					<target>The default is "OneTime".</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that this differs from the default for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, which is "OneWay" in most cases.</source>
					<target>Note that this differs from the default for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>, which is "OneWay" in most cases.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>TargetNullValue</source>
					<target>TargetNullValue</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Specifies a value to display when the source value resolves but is explicitly <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>.</source>
					<target>Specifies a value to display when the source value resolves but is explicitly <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc>.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're converting markup from <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc>, then be aware of the differences in default values for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Mode</pc> property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're converting markup from <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind}</pc>, then be aware of the differences in default values for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Mode</pc> property.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> uses generated code to achieve its benefits, it requires type information at compile time.</source>
					<target>Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> uses generated code to achieve its benefits, it requires type information at compile time.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>This means that you cannot bind to properties where you do not know the type ahead of time.</source>
					<target>This means that you cannot bind to properties where you do not know the type ahead of time.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Because of this, you cannot use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> property, which is of type <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Object</pc>, and is also subject to change at run time.</source>
					<target>Because of this, you cannot use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> property, which is of type <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Object</pc>, and is also subject to change at run time.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with data templates, you must indicate the type being bound to by setting an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:DataType</pc> value, as shown in the example below.</source>
					<target>When using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with data templates, you must indicate the type being bound to by setting an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:DataType</pc> value, as shown in the example below.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>You can also set the type to an interface or base class type, and then use casts if necessary to formulate a full expression.</source>
					<target>You can also set the type to an interface or base class type, and then use casts if necessary to formulate a full expression.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Compiled bindings depend on code generation.</source>
					<target>Compiled bindings depend on code generation.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So if you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> in a resource dictionary then the resource dictionary needs to have a code-behind class.</source>
					<target>So if you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> in a resource dictionary then the resource dictionary needs to have a code-behind class.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../data-binding/data-binding-in-depth.md#resource-dictionaries-with-x-bind)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resource dictionaries with {x:Bind}</pc> for a code example.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resource dictionaries with {x:Bind}</pc> for a code example.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   If you set a local value for a property that previously had a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> markup extension to provide a local value, the binding is completely removed.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   If you set a local value for a property that previously had a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> markup extension to provide a local value, the binding is completely removed.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209830)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br209827)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">`\{`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   If you need to specify a single curly brace for a value, such as in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterParameter</pc></pc>, precede it with a backslash: <ph dataRef="id11" id="ph1" />.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   If you need to specify a single curly brace for a value, such as in <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Path</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterParameter</pc></pc>, precede it with a backslash: <ph dataRef="id11" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">`ConverterParameter='{Mix}'`</data>
				</originalData>
				<segment state="initial">
					<source>Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph dataRef="id1" id="ph1" />.</source>
					<target>Alternatively, enclose the entire string that contains the braces that need escaping in a secondary quotation set, for example <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh701880)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ConverterLanguage</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterLanguage</pc> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ConverterLanguage</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ConverterLanguage</pc> are all related to the scenario of converting a value or type from the binding source into a type or value that is compatible with the binding target property.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt210946)</data>
				</originalData>
				<segment state="initial">
					<source>For more info and examples, see the "Data conversions" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</source>
					<target>For more info and examples, see the "Data conversions" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding in depth</pc>.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is a markup extension only, with no way to create or manipulate such bindings programmatically.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is a markup extension only, with no way to create or manipulate such bindings programmatically.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](xaml-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about markup extensions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</source>
					<target>For more info about markup extensions, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example XAML uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView.ItemTemplate</pc> property.</source>
					<target>This example XAML uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView.ItemTemplate</pc> property.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note the declaration of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DataType</pc> value.</source>
					<target>Note the declaration of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DataType</pc> value.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>