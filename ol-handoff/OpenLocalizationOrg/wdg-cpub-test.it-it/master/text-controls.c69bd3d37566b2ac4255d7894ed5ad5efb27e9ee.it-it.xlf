<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">a5a36561ccfe5daffb1737b4f512f745628ee0e4</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\text-controls.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">95054bb054f618ea842fd591f0865a10b0058828</mda:meta><mda:meta type="olxliffhash">247f491da167838d13eed6737c94959a1cf61489</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Consider how often we read text in our daily lives - in email, a book, a road sign, the prices on a menu, tire pressure markings, or posters on a street pole.</source>
					<target>Consider how often we read text in our daily lives - in email, a book, a road sign, the prices on a menu, tire pressure markings, or posters on a street pole.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Text controls</source>
					<target>Text controls</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Text controls</source>
					<target>Text controls</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Text controls consist of text input boxes, password boxes, auto-suggest boxes, and text blocks.</source>
					<target>Text controls consist of text input boxes, password boxes, auto-suggest boxes, and text blocks.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>The XAML framework provides several controls for rendering, entering, and editing text, and a set of properties for formatting the text.</source>
					<target>The XAML framework provides several controls for rendering, entering, and editing text, and a set of properties for formatting the text.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](text-block.md)</data>
					<data id="id3">[</data>
					<data id="id4">](rich-text-block.md)</data>
				</originalData>
				<segment state="initial">
					<source>The controls for displaying read-only text are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RichTextBlock</pc>.</source>
					<target>The controls for displaying read-only text are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RichTextBlock</pc>.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](text-block.md)</data>
					<data id="id3">[</data>
					<data id="id4">](auto-suggest-box.md)</data>
					<data id="id5">[</data>
					<data id="id6">](password-box.md)</data>
					<data id="id7">[</data>
					<data id="id8">](rich-edit-box.md)</data>
				</originalData>
				<segment state="initial">
					<source>The controls for text entry and editing are: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoSuggestBox</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PasswordBox</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichEditBox</pc>.</source>
					<target>The controls for text entry and editing are: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoSuggestBox</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PasswordBox</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">RichEditBox</pc>.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>AutoSuggestBox class</source>
					<target>AutoSuggestBox class</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>PasswordBox class</source>
					<target>PasswordBox class</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>RichEditBox class</source>
					<target>RichEditBox class</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>RichTextBlock class</source>
					<target>RichTextBlock class</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>TextBlock class</source>
					<target>TextBlock class</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>TextBox class</source>
					<target>TextBox class</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Is this the right control?</source>
					<target>Is this the right control?</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>The text control you use depends on your scenario.</source>
					<target>The text control you use depends on your scenario.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Use this info to pick the right text control to use in your app.</source>
					<target>Use this info to pick the right text control to use in your app.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Render read-only text</source>
					<target>Render read-only text</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to display most read-only text in your app.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> to display most read-only text in your app.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.</source>
					<target>You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>TextBlock is typically easier to use and provides better text rendering performance than RichTextBlock, so it's preferred for most app UI text.</source>
					<target>TextBlock is typically easier to use and provides better text rendering performance than RichTextBlock, so it's preferred for most app UI text.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can easily access and use text from a TextBlock in your app by getting the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property.</source>
					<target>You can easily access and use text from a TextBlock in your app by getting the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>It also provides many of the same formatting options for customizing how your text is rendered.</source>
					<target>It also provides many of the same formatting options for customizing how your text is rendered.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Although you can put line breaks in the text, TextBlock is designed to display a single paragraph and doesn’t support text indentation.</source>
					<target>Although you can put line breaks in the text, TextBlock is designed to display a single paragraph and doesn’t support text indentation.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichTextBlock</pc> when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichTextBlock</pc> when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>RichTextBlock provides several features for advanced text layout.</source>
					<target>RichTextBlock provides several features for advanced text layout.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richtextblock.blocks.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.paragraph.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The content property of RichTextBlock is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blocks</pc> property, which supports paragraph based text via the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Paragraph</pc> element.</source>
					<target>The content property of RichTextBlock is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blocks</pc> property, which supports paragraph based text via the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Paragraph</pc> element.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It doesn't have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property that you can use to easily access the control's text content in your app.</source>
					<target>It doesn't have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property that you can use to easily access the control's text content in your app.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Text input</source>
					<target>Text input</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> control to let a user enter and edit unformatted text, such as in a form.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> control to let a user enter and edit unformatted text, such as in a form.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.text.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get and set the text in a TextBox.</source>
					<target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get and set the text in a TextBox.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>You can make a TextBox read-only, but this should be a temporary, conditional state.</source>
					<target>You can make a TextBox read-only, but this should be a temporary, conditional state.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>If the text is never editable, consider using a TextBlock instead.</source>
					<target>If the text is never editable, consider using a TextBlock instead.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PasswordBox</pc> control to collect a password or other private data, such as a Social Security number.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PasswordBox</pc> control to collect a password or other private data, such as a Social Security number.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>A password box is a text input box that conceals the characters typed in it for the sake of privacy.</source>
					<target>A password box is a text input box that conceals the characters typed in it for the sake of privacy.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>A password box looks like a text input box, except that it renders bullets in place of the text that has been entered.</source>
					<target>A password box looks like a text input box, except that it renders bullets in place of the text that has been entered.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The bullet character can be customized.</source>
					<target>The bullet character can be customized.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoSuggestBox</pc> control to show the user a list of suggestions to choose from as they type.</source>
					<target>Use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoSuggestBox</pc> control to show the user a list of suggestions to choose from as they type.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>An auto-suggest box is a text entry box that triggers a list of basic search suggestions.</source>
					<target>An auto-suggest box is a text entry box that triggers a list of basic search suggestions.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Suggested terms can draw from a combination of popular search terms and historical user-entered terms.</source>
					<target>Suggested terms can draw from a combination of popular search terms and historical user-entered terms.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>You should also use an AutoSuggestBox control to implement a search box.</source>
					<target>You should also use an AutoSuggestBox control to implement a search box.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc> to display and edit text files.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichEditBox</pc> to display and edit text files.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>You don't use a RichEditBox to get user input into you app the way you use other standard text input boxes.</source>
					<target>You don't use a RichEditBox to get user input into you app the way you use other standard text input boxes.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Rather, you use it to work with text files that are separate from your app.</source>
					<target>Rather, you use it to work with text files that are separate from your app.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>You typically save text entered into a RichEditBox to a .rtf file.</source>
					<target>You typically save text entered into a RichEditBox to a .rtf file.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Is text input the best option?</source>
					<target>Is text input the best option?</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>There are many ways you can get user input in your app.</source>
					<target>There are many ways you can get user input in your app.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>These questions will help answer whether one of the standard text input boxes or another control is the best fit for getting user input.</source>
					<target>These questions will help answer whether one of the standard text input boxes or another control is the best fit for getting user input.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Is it practical to efficiently enumerate all valid values?</source>
					<target>Is it practical to efficiently enumerate all valid values?</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](checkbox.md)</data>
					<data id="id3">[</data>
					<data id="id4">](lists.md)</data>
					<data id="id5">[</data>
					<data id="id6">](radio-button.md)</data>
					<data id="id7">[</data>
					<data id="id8">](slider.md)</data>
					<data id="id9">[</data>
					<data id="id10">](toggles.md)</data>
					<data id="id11">[</data>
					<data id="id12">](date-and-time.md)</data>
				</originalData>
				<segment state="initial">
					<source>If so, consider using one of the selection controls, such as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">check box</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">drop-down list</pc>, list box, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">radio button</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">slider</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">toggle switch</pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6">date picker</pc>, or time picker.</source>
					<target>If so, consider using one of the selection controls, such as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">check box</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">drop-down list</pc>, list box, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">radio button</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">slider</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">toggle switch</pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6">date picker</pc>, or time picker.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Is there a fairly small set of valid values?</source>
					<target>Is there a fairly small set of valid values?</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](lists.md)</data>
				</originalData>
				<segment state="initial">
					<source>If so, consider a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">drop-down list</pc> or a list box, especially if the values are more than a few characters long.</source>
					<target>If so, consider a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">drop-down list</pc> or a list box, especially if the values are more than a few characters long.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Is the valid data completely unconstrained?</source>
					<target>Is the valid data completely unconstrained?</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Or is the valid data only constrained by format (constrained length or character types)?</source>
					<target>Or is the valid data only constrained by format (constrained length or character types)?</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>If so, use a text input control.</source>
					<target>If so, use a text input control.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>You can limit the number of characters that can be entered, and you can validate the format in your app code.</source>
					<target>You can limit the number of characters that can be entered, and you can validate the format in your app code.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Does the value represent a data type that has a specialized common control?</source>
					<target>Does the value represent a data type that has a specialized common control?</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>If so, use the appropriate control instead of a text input control.</source>
					<target>If so, use the appropriate control instead of a text input control.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211681)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatePicker</pc></pc> instead of a text input control to accept a date entry.</source>
					<target>For example, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DatePicker</pc></pc> instead of a text input control to accept a date entry.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>If the data is strictly numeric:</source>
					<target>If the data is strictly numeric:</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Is the value being entered approximate and/or relative to another quantity on the same page?</source>
					<target>Is the value being entered approximate and/or relative to another quantity on the same page?</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](slider.md)</data>
				</originalData>
				<segment state="initial">
					<source>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>.</source>
					<target>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Would the user benefit from instant feedback on the effect of setting changes?</source>
					<target>Would the user benefit from instant feedback on the effect of setting changes?</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](slider.md)</data>
				</originalData>
				<segment state="initial">
					<source>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>, possibly with an accompanying control.</source>
					<target>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>, possibly with an accompanying control.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Is the value entered likely to be adjusted after the result is observed, such as with volume or screen brightness?</source>
					<target>Is the value entered likely to be adjusted after the result is observed, such as with volume or screen brightness?</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](slider.md)</data>
				</originalData>
				<segment state="initial">
					<source>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>.</source>
					<target>If so, use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">slider</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Text box</source>
					<target>Text box</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>A text box</source>
					<target>A text box</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Auto suggest box</source>
					<target>Auto suggest box</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Example of the expanded auto-suggest control</source>
					<target>Example of the expanded auto-suggest control</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Password box</source>
					<target>Password box</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Password box focus state typing text</source>
					<target>Password box focus state typing text</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Create a text control</source>
					<target>Create a text control</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>See these articles for info and examples specific to each text control.</source>
					<target>See these articles for info and examples specific to each text control.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>AutoSuggestBox</source>
					<target>AutoSuggestBox</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>PasswordBox</source>
					<target>PasswordBox</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>RichEditBox</source>
					<target>RichEditBox</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>RichTextBlock</source>
					<target>RichTextBlock</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>TextBlock</source>
					<target>TextBlock</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>TextBox</source>
					<target>TextBox</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Font and style guidelines</source>
					<target>Font and style guidelines</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>See these articles for font guidelines:</source>
					<target>See these articles for font guidelines:</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Font guidelines</source>
					<target>Font guidelines</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Segoe MDL2 icon list and guidelines</source>
					<target>Segoe MDL2 icon list and guidelines</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Choose the right keyboard for your text control</source>
					<target>Choose the right keyboard for your text control</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBox, PasswordBox RichEditBox</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBox, PasswordBox RichEditBox</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>To help users to enter data using the touch keyboard, or Soft Input Panel (SIP), you can set the input scope of the text control to match the kind of data the user is expected to enter.</source>
					<target>To help users to enter data using the touch keyboard, or Soft Input Panel (SIP), you can set the input scope of the text control to match the kind of data the user is expected to enter.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Tip This info applies only to the SIP.</source>
					<target>Tip This info applies only to the SIP.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>It does not apply to hardware keyboards or the On-Screen Keyboard available in the Windows Ease of Access options.</source>
					<target>It does not apply to hardware keyboards or the On-Screen Keyboard available in the Windows Ease of Access options.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>The touch keyboard can be used for text entry when your app runs on a device with a touch screen.</source>
					<target>The touch keyboard can be used for text entry when your app runs on a device with a touch screen.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>The touch keyboard is invoked when the user taps on an editable input field, such as a TextBox or RichEditBox.</source>
					<target>The touch keyboard is invoked when the user taps on an editable input field, such as a TextBox or RichEditBox.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</source>
					<target>You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>The input scope provides a hint to the system about the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</source>
					<target>The input scope provides a hint to the system about the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.inputscope.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if a text box is used only to enter a 4-digit PIN, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InputScope</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Number</pc>.</source>
					<target>For example, if a text box is used only to enter a 4-digit PIN, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InputScope</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Number</pc>.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>This tells the system to show the number keypad layout, which makes it easier for the user to enter the PIN.</source>
					<target>This tells the system to show the number keypad layout, which makes it easier for the user to enter the PIN.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Important</source>
					<target>Important</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>The input scope does not cause any input validation to be performed, and does not prevent the user from providing any input through a hardware keyboard or other input device.</source>
					<target>The input scope does not cause any input validation to be performed, and does not prevent the user from providing any input through a hardware keyboard or other input device.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>You are still responsible for validating the input in your code as needed.</source>
					<target>You are still responsible for validating the input in your code as needed.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use input scope to change the touch keyboard</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use input scope to change the touch keyboard</pc>.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Color fonts</source>
					<target>Color fonts</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBlock, RichTextBlock, TextBox, RichEditBox</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBlock, RichTextBlock, TextBox, RichEditBox</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Windows has the ability for fonts to include multiple colored layers for each glyph.</source>
					<target>Windows has the ability for fonts to include multiple colored layers for each glyph.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>For example, the Segoe UI Emoji font defines color versions of the Emoticon and other Emoji characters.</source>
					<target>For example, the Segoe UI Emoji font defines color versions of the Emoticon and other Emoji characters.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>The standard and rich text controls support display color fonts.</source>
					<target>The standard and rich text controls support display color fonts.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>By default, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsColorFontEnabled</pc> property is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc> and fonts with these additional layers are rendered in color.</source>
					<target>By default, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsColorFontEnabled</pc> property is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc> and fonts with these additional layers are rendered in color.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>The default color font on the system is Segoe UI Emoji and the controls will fall back to this font to display the glyphs in color.</source>
					<target>The default color font on the system is Segoe UI Emoji and the controls will fall back to this font to display the glyphs in color.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>The rendered text looks like this:</source>
					<target>The rendered text looks like this:</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Text block with color font</source>
					<target>Text block with color font</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.iscolorfontenabled.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsColorFontEnabled</pc></pc> property.</source>
					<target>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsColorFontEnabled</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Guidelines for line and paragraph separators</source>
					<target>Guidelines for line and paragraph separators</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBlock, RichTextBlock, multi-line TextBox, RichEditBox</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Applies to:</pc> TextBlock, RichTextBlock, multi-line TextBox, RichEditBox</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Use the line separator character (0x2028) and the paragraph separator character (0x2029) to divide plain text.</source>
					<target>Use the line separator character (0x2028) and the paragraph separator character (0x2029) to divide plain text.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>A new line is begun after each line separator.</source>
					<target>A new line is begun after each line separator.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>A new paragraph is begun after each paragraph separator.</source>
					<target>A new paragraph is begun after each paragraph separator.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>It isn't necessary to start the first line or paragraph in a file with these characters or to end the last line or paragraph with them; doing so indicates that there is an empty line or paragraph in that location.</source>
					<target>It isn't necessary to start the first line or paragraph in a file with these characters or to end the last line or paragraph with them; doing so indicates that there is an empty line or paragraph in that location.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Your app can use the line separator to indicate an unconditional end of line.</source>
					<target>Your app can use the line separator to indicate an unconditional end of line.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>However, line separators do not correspond to the separate carriage return and linefeed characters, or to a combination of these characters.</source>
					<target>However, line separators do not correspond to the separate carriage return and linefeed characters, or to a combination of these characters.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Line separators must be processed separately from carriage return and linefeed characters.</source>
					<target>Line separators must be processed separately from carriage return and linefeed characters.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Your app can insert a paragraph separator between paragraphs of text.</source>
					<target>Your app can insert a paragraph separator between paragraphs of text.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>Use of this separator allows creation of plain text files that can be formatted with different line widths on different operating systems.</source>
					<target>Use of this separator allows creation of plain text files that can be formatted with different line widths on different operating systems.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>The target system can ignore any line separators and break paragraphs only at the paragraph separators.</source>
					<target>The target system can ignore any line separators and break paragraphs only at the paragraph separators.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
					<target>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://go.microsoft.com/fwlink/p/?linkid=258743)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</source>
					<target>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>For designers</source>
					<target>For designers</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Font guidelines</source>
					<target>Font guidelines</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Segoe MDL2 icon list and guidelines</source>
					<target>Segoe MDL2 icon list and guidelines</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Guidelines for spell checking</source>
					<target>Guidelines for spell checking</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Adding search</source>
					<target>Adding search</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>For developers (XAML)</source>
					<target>For developers (XAML)</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>TextBox class</source>
					<target>TextBox class</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Xaml.Controls PasswordBox class</source>
					<target>Windows.UI.Xaml.Controls PasswordBox class</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>String.Length property</source>
					<target>String.Length property</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>