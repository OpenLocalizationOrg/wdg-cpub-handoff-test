<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">b7acc0d3e7ea6f52e2fdec0afa22cad937f6fa73</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\tutorial--adding-touch-controls-to-your-directx-game.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">f2f6227d0b61ea38997c60cf59d749d53d9e384e</mda:meta><mda:meta type="olxliffhash">735fd2cf37650e2ed88a828dc1904c60cf97600c</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Touch controls for games</source>
					<target>Touch controls for games</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</source>
					<target>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Touch controls for games</source>
					<target>Touch controls for games</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</source>
					<target>Learn how to add basic touch controls to your Universal Windows Platform (UWP) C++ game with DirectX.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>We show you how to add touch-based controls to move a fixed-plane camera in a Direct3D environment, where dragging with a finger or stylus shifts the camera perspective.</source>
					<target>We show you how to add touch-based controls to move a fixed-plane camera in a Direct3D environment, where dragging with a finger or stylus shifts the camera perspective.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>You can incorporate these controls in games where you want the player to drag to scroll or pan over a 3D environment, such as a map or playfield.</source>
					<target>You can incorporate these controls in games where you want the player to drag to scroll or pan over a 3D environment, such as a map or playfield.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>For example, in a strategy or puzzle game, you can use these controls to let the player view a game environment that is larger than the screen by panning left or right.</source>
					<target>For example, in a strategy or puzzle game, you can use these controls to let the player view a game environment that is larger than the screen by panning left or right.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Our code also works with mouse-based panning controls.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Our code also works with mouse-based panning controls.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The pointer related events are abstracted by the Windows Runtime APIs, so they can handle either touch- or mouse-based pointer events.</source>
					<target>The pointer related events are abstracted by the Windows Runtime APIs, so they can handle either touch- or mouse-based pointer events.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Objectives</source>
					<target>Objectives</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Create a simple touch drag control for panning a fixed-plane camera in a DirectX game.</source>
					<target>Create a simple touch drag control for panning a fixed-plane camera in a DirectX game.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Set up the basic touch event infrastructure</source>
					<target>Set up the basic touch event infrastructure</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>First, we define our basic controller type, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc>, in this case.</source>
					<target>First, we define our basic controller type, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc>, in this case.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Here, we define a controller as an abstract idea, the set of behaviors the user can perform.</source>
					<target>Here, we define a controller as an abstract idea, the set of behaviors the user can perform.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc> class is a regularly refreshed collection of information about the camera controller state, and provides a way for our app to obtain that information from its update loop.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc> class is a regularly refreshed collection of information about the camera controller state, and provides a way for our app to obtain that information from its update loop.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Now, let's create a header that defines the state of the camera controller, and the basic methods and event handlers that implement the camera controller interactions.</source>
					<target>Now, let's create a header that defines the state of the camera controller, and the basic methods and event handlers that implement the camera controller interactions.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The private fields contain the current state of the camera controller.</source>
					<target>The private fields contain the current state of the camera controller.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Let's review them.</source>
					<target>Let's review them.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_position</pc> is the position of the camera in the scene space.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_position</pc> is the position of the camera in the scene space.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>In this example, the z-coordinate value is fixed at 0.</source>
					<target>In this example, the z-coordinate value is fixed at 0.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>We could use a DirectX::XMFLOAT2 to represent this value, but for the purposes of this sample and future extensibility, we use a DirectX::XMFLOAT3.</source>
					<target>We could use a DirectX::XMFLOAT2 to represent this value, but for the purposes of this sample and future extensibility, we use a DirectX::XMFLOAT3.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We pass this value through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> property to the app itself so it can update the viewport accordingly.</source>
					<target>We pass this value through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> property to the app itself so it can update the viewport accordingly.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panInUse</pc> is a Boolean value that indicates whether a pan operation is active; or, more specifically, whether the player is touching the screen and moving the camera.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panInUse</pc> is a Boolean value that indicates whether a pan operation is active; or, more specifically, whether the player is touching the screen and moving the camera.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerID</pc> is a unique ID for the pointer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerID</pc> is a unique ID for the pointer.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>We won't use this in the sample, but it's a good practice to associate your controller state class with a specific pointer.</source>
					<target>We won't use this in the sample, but it's a good practice to associate your controller state class with a specific pointer.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panFirstDown</pc> is the point on the screen where the player first touched the screen or clicked the mouse during the camera pan action.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panFirstDown</pc> is the point on the screen where the player first touched the screen or clicked the mouse during the camera pan action.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>We use this value later to set a dead zone to prevent jitter when the screen is touched, or if the mouse shakes a little.</source>
					<target>We use this value later to set a dead zone to prevent jitter when the screen is touched, or if the mouse shakes a little.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerPosition</pc> is the point on the screen where the player has currently moved the pointer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerPosition</pc> is the point on the screen where the player has currently moved the pointer.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We use it to determine what direction the player wanted to move by examining it relative to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panFirstDown</pc>.</source>
					<target>We use it to determine what direction the player wanted to move by examining it relative to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panFirstDown</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panCommand</pc> is the final computed command for the camera controller: up, down, left, or right.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panCommand</pc> is the final computed command for the camera controller: up, down, left, or right.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Because we are working with a camera fixed to the x-y plane, this could be a DirectX::XMFLOAT2 value instead.</source>
					<target>Because we are working with a camera fixed to the x-y plane, this could be a DirectX::XMFLOAT2 value instead.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>We use these 3 event handlers to update the camera controller state info.</source>
					<target>We use these 3 event handlers to update the camera controller state info.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc> is an event handler that our app calls when the players presses a finger onto the touch surface and the pointer is moved to the coordinates of the press.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc> is an event handler that our app calls when the players presses a finger onto the touch surface and the pointer is moved to the coordinates of the press.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> is an event handler that our app calls when the player swipes a finger across the touch surface.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> is an event handler that our app calls when the player swipes a finger across the touch surface.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>It updates with the new coordinates of the drag path.</source>
					<target>It updates with the new coordinates of the drag path.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc> is an event handler that our app calls when the player removes the pressing finger from the touch surface.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc> is an event handler that our app calls when the player removes the pressing finger from the touch surface.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Finally, we use these methods and properties to initialize, access, and update the camera controller state information.</source>
					<target>Finally, we use these methods and properties to initialize, access, and update the camera controller state information.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> is an event handler that our app calls to initialize the controls and attach them to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> object that describes your display window.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> is an event handler that our app calls to initialize the controls and attach them to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> object that describes your display window.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc> is a method that our app calls to set the (x, y, and z) coordinates of your controls in the scene space.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc> is a method that our app calls to set the (x, y, and z) coordinates of your controls in the scene space.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Note that our z-coordinate is 0 throughout this tutorial.</source>
					<target>Note that our z-coordinate is 0 throughout this tutorial.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> is a property that our app accesses to get the current position of the camera in the scene space.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> is a property that our app accesses to get the current position of the camera in the scene space.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>You use this property as the way of communicating the current camera position to the app.</source>
					<target>You use this property as the way of communicating the current camera position to the app.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_FixedLookPoint</pc> is a property that our app accesses to get the current point toward which the controller camera is facing.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_FixedLookPoint</pc> is a property that our app accesses to get the current point toward which the controller camera is facing.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>In this example, it is locked normal to the x-y plane.</source>
					<target>In this example, it is locked normal to the x-y plane.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc> is a method that reads the controller state and updates the camera position.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc> is a method that reads the controller state and updates the camera position.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>You continually call this <ph dataRef="id1" id="ph1" />something<ph dataRef="id2" id="ph2" /> from the app's main loop to refresh the camera controller data and the camera position in the scene space.</source>
					<target>You continually call this <ph dataRef="id1" id="ph1" />something<ph dataRef="id2" id="ph2" /> from the app's main loop to refresh the camera controller data and the camera position in the scene space.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Now, you have here all the components you need to implement touch controls.</source>
					<target>Now, you have here all the components you need to implement touch controls.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>You can detect when and where the touch or mouse pointer events have occurred, and what the action is.</source>
					<target>You can detect when and where the touch or mouse pointer events have occurred, and what the action is.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>You can set the position and orientation of the camera relative to the scene space, and track the changes.</source>
					<target>You can set the position and orientation of the camera relative to the scene space, and track the changes.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Finally, you can communicate the new camera position to the calling app.</source>
					<target>Finally, you can communicate the new camera position to the calling app.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Now, let's connect these pieces together.</source>
					<target>Now, let's connect these pieces together.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Create the basic touch events</source>
					<target>Create the basic touch events</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime event dispatcher provides 3 events we want our app to handle:</source>
					<target>The Windows Runtime event dispatcher provides 3 events we want our app to handle:</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>PointerPressed</source>
					<target>PointerPressed</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>PointerMoved</source>
					<target>PointerMoved</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>PointerReleased</source>
					<target>PointerReleased</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>These events are implemented on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> type.</source>
					<target>These events are implemented on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> type.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We assume that you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CoreWindow</pc> object to work with.</source>
					<target>We assume that you have a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CoreWindow</pc> object to work with.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465077)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to set up your UWP C++ app to display a DirectX view</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to set up your UWP C++ app to display a DirectX view</pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>As these events fire while our app is running, the handlers update the camera controller state info defined in our private fields.</source>
					<target>As these events fire while our app is running, the handlers update the camera controller state info defined in our private fields.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>First, let's populate the touch pointer event handlers.</source>
					<target>First, let's populate the touch pointer event handlers.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the first event handler, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc>, we get the x-y coordinates of the pointer from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> that manages our display when the user touches the screen or clicks the mouse.</source>
					<target>In the first event handler, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerPressed</pc>, we get the x-y coordinates of the pointer from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> that manages our display when the user touches the screen or clicks the mouse.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>OnPointerPressed</source>
					<target>OnPointerPressed</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We use this handler to let the current <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc> instance know that camera controller should be treated as active by setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_panInUse</pc> to TRUE.</source>
					<target>We use this handler to let the current <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CameraPanController</pc> instance know that camera controller should be treated as active by setting <pc dataRefEnd="id4" dataRefStart="id3" id="p2">m\_panInUse</pc> to TRUE.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>That way, when the app calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc> , it will use the current position data to update the viewport.</source>
					<target>That way, when the app calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc> , it will use the current position data to update the viewport.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Now that we've established the base values for the camera movement when the user touches the screen or click-presses in the display window, we must determine what to do when the user either drags the screen press or moves the mouse with button pressed.</source>
					<target>Now that we've established the base values for the camera movement when the user touches the screen or click-presses in the display window, we must determine what to do when the user either drags the screen press or moves the mouse with button pressed.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> event handler fires whenever the pointer moves, at every tick that the player drags it on the screen.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerMoved</pc> event handler fires whenever the pointer moves, at every tick that the player drags it on the screen.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>We need to keep the app aware of the current location of the pointer, and this is how we do it.</source>
					<target>We need to keep the app aware of the current location of the pointer, and this is how we do it.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>OnPointerMoved</source>
					<target>OnPointerMoved</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Finally, we need to deactivate the camera pan behavior when the player stops touching the screen.</source>
					<target>Finally, we need to deactivate the camera pan behavior when the player stops touching the screen.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208279)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>, which is called when <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerReleased</pc></pc> is fired, to set <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_panInUse</pc> to FALSE and turn off the camera pan movement, and set the pointer ID to 0.</source>
					<target>We use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnPointerReleased</pc>, which is called when <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PointerReleased</pc></pc> is fired, to set <pc dataRefEnd="id8" dataRefStart="id7" id="p4">m\_panInUse</pc> to FALSE and turn off the camera pan movement, and set the pointer ID to 0.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>OnPointerReleased</source>
					<target>OnPointerReleased</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Initialize the touch controls and the controller state</source>
					<target>Initialize the touch controls and the controller state</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Let's hook the events and initialize all the basic state fields of the camera controller.</source>
					<target>Let's hook the events and initialize all the basic state fields of the camera controller.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Initialize</source>
					<target>Initialize</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> takes a reference to the app's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> instance as a parameter and registers the event handlers we developed to the appropriate events on that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> takes a reference to the app's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc> instance as a parameter and registers the event handlers we developed to the appropriate events on that <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc>.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Getting and setting the position of the camera controller</source>
					<target>Getting and setting the position of the camera controller</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Let's define some methods to get and set the position of the camera controller in the scene space.</source>
					<target>Let's define some methods to get and set the position of the camera controller in the scene space.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc> is a public method that we can call from our app if we need to set the camera controller position to a specific point.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetPosition</pc> is a public method that we can call from our app if we need to set the camera controller position to a specific point.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> is our most important public property: it's the way our app gets the current position of the camera controller in the scene space so it can update the viewport accordingly.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_Position</pc> is our most important public property: it's the way our app gets the current position of the camera controller in the scene space so it can update the viewport accordingly.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_FixedLookPoint</pc> is a public property that, in this example, obtains a look point that is normal to the x-y plane.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">get\_FixedLookPoint</pc> is a public property that, in this example, obtains a look point that is normal to the x-y plane.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>You can change this method to use the trigonometric functions, sin and cos, when calculating the x, y, and z coordinate values if you want to create more oblique angles for the fixed camera.</source>
					<target>You can change this method to use the trigonometric functions, sin and cos, when calculating the x, y, and z coordinate values if you want to create more oblique angles for the fixed camera.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Updating the camera controller state information</source>
					<target>Updating the camera controller state information</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Now, we perform our calculations that convert the pointer coordinate info tracked in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerPosition</pc> into new coordinate info respective of our 3D scene space.</source>
					<target>Now, we perform our calculations that convert the pointer coordinate info tracked in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">m\_panPointerPosition</pc> into new coordinate info respective of our 3D scene space.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Our app calls this method every time we refresh the main app loop.</source>
					<target>Our app calls this method every time we refresh the main app loop.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>In it we compute the new position information we want to pass to the app which is used to update the view matrix before projection into the viewport.</source>
					<target>In it we compute the new position information we want to pass to the app which is used to update the view matrix before projection into the viewport.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Because we don't want touch or mouse jitter to make our camera panning jerky, we set a dead zone around the pointer with a diameter of 32 pixels.</source>
					<target>Because we don't want touch or mouse jitter to make our camera panning jerky, we set a dead zone around the pointer with a diameter of 32 pixels.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>We also have a velocity value, which in this case is 1:1 with the pixel traversal of the pointer past the dead zone.</source>
					<target>We also have a velocity value, which in this case is 1:1 with the pixel traversal of the pointer past the dead zone.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>You can adjust this behavior to slow down or speed up the rate of movement.</source>
					<target>You can adjust this behavior to slow down or speed up the rate of movement.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Updating the view matrix with the new camera position</source>
					<target>Updating the view matrix with the new camera position</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>We can now obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</source>
					<target>We can now obtain a scene space coordinate that our camera is focused on, and which is updated whenever you tell your app to do so (every 60 seconds in the main app loop, for example).</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>This pseudocode suggests the calling behavior you can implement:</source>
					<target>This pseudocode suggests the calling behavior you can implement:</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Congratulations!</source>
					<target>Congratulations!</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>You've implemented a simple set of camera panning touch controls in your game.</source>
					<target>You've implemented a simple set of camera panning touch controls in your game.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
					<target>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
					<target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>