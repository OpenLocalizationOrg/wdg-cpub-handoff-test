<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">56faf1e14699730e0ae5ca73e5f17b04c6ff3a1a</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\staticresource-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">2295c36ecbe648342b5f7e7e2ae47471a8a8f78c</mda:meta><mda:meta type="olxliffhash">2d7bd848f503b163698d21a5d404eb0aeba64670</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Provides a value for any XAML attribute by evaluating a reference to an already defined resource.</source>
					<target>Provides a value for any XAML attribute by evaluating a reference to an already defined resource.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Resources are defined in a ResourceDictionary, and a StaticResource usage references the key of that resource in the ResourceDictionary.</source>
					<target>Resources are defined in a ResourceDictionary, and a StaticResource usage references the key of that resource in the ResourceDictionary.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>StaticResource markup extension</source>
					<target>StaticResource markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>{StaticResource} markup extension</source>
					<target>{StaticResource} markup extension</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Provides a value for any XAML attribute by evaluating a reference to an already defined resource.</source>
					<target>Provides a value for any XAML attribute by evaluating a reference to an already defined resource.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Resources are defined in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, and a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StaticResource</pc> usage references the key of that resource in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc>.</source>
					<target>Resources are defined in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, and a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StaticResource</pc> usage references the key of that resource in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>key</source>
					<target>key</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The key for the requested resource.</source>
					<target>The key for the requested resource.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This key is initially assigned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>.</source>
					<target>This key is initially assigned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>A resource key can be any string defined in the XamlName Grammar.</source>
					<target>A resource key can be any string defined in the XamlName Grammar.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is a technique for obtaining values for a XAML attribute that are defined elsewhere in a XAML resource dictionary.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is a technique for obtaining values for a XAML attribute that are defined elsewhere in a XAML resource dictionary.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Values might be placed in a resource dictionary because they are intended to be shared by multiple property values, or because a XAML resource dictionary is used as a XAML packaging or factoring technique.</source>
					<target>Values might be placed in a resource dictionary because they are intended to be shared by multiple property values, or because a XAML resource dictionary is used as a XAML packaging or factoring technique.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>An example of a XAML packaging technique is the theme dictionary for a control.</source>
					<target>An example of a XAML packaging technique is the theme dictionary for a control.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Another example is merged resource dictionaries used for resource fallback.</source>
					<target>Another example is merged resource dictionaries used for resource fallback.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> takes one argument, which specifies the key for the requested resource.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> takes one argument, which specifies the key for the requested resource.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>A resource key is always a string in Windows Runtime XAML.</source>
					<target>A resource key is always a string in Windows Runtime XAML.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](x-key-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on how the resource key is initially specified, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc>.</source>
					<target>For more info on how the resource key is initially specified, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key attribute</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The rules by which a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> resolves to an item in a resource dictionary are not described in this topic.</source>
					<target>The rules by which a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> resolves to an item in a resource dictionary are not described in this topic.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>That depends on whether the reference and the resource both exist in a template, whether merged resource dictionaries are used, and so on.</source>
					<target>That depends on whether the reference and the resource both exist in a template, whether merged resource dictionaries are used, and so on.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/mt187273)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on how to define resources and properly use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, including sample code, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary and XAML resource references</pc>.</source>
					<target>For more info on how to define resources and properly use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, including sample code, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary and XAML resource references</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Important</source>
					<target>Important</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> must not attempt to make a forward reference to a resource that is defined lexically further within the XAML file.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> must not attempt to make a forward reference to a resource that is defined lexically further within the XAML file.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Attempting to do so is not supported.</source>
					<target>Attempting to do so is not supported.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Even if the forward reference doesn't fail, trying to make one carries a performance penalty.</source>
					<target>Even if the forward reference doesn't fail, trying to make one carries a performance penalty.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>For best results, adjust the composition of your resource dictionaries so that forward references are avoided.</source>
					<target>For best results, adjust the composition of your resource dictionaries so that forward references are avoided.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Attempting to specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> to a key that cannot resolve throws a XAML parse exception at run time.</source>
					<target>Attempting to specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> to a key that cannot resolve throws a XAML parse exception at run time.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Design tools may also offer warnings or errors.</source>
					<target>Design tools may also offer warnings or errors.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> functionality.</source>
					<target>In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> functionality.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is exclusively for use in XAML.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is exclusively for use in XAML.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/jj635925)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/jj603139)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The closest equivalent in code is to use the collection API of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, for example calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Contains</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TryGetValue</pc></pc>.</source>
					<target>The closest equivalent in code is to use the collection API of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>, for example calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Contains</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">TryGetValue</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> is a similar markup extension that references named resources in another location.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> is a similar markup extension that references named resources in another location.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The difference is that {ThemeResource} markup extension has the ability to return different resources depending on the system theme that's active.</source>
					<target>The difference is that {ThemeResource} markup extension has the ability to return different resources depending on the system theme that's active.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc>.</source>
					<target>For more info see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is a markup extension.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> is a markup extension.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
					<target>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</source>
					<target>All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>An example {StaticResource} usage</source>
					<target>An example {StaticResource} usage</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=226854)</data>
				</originalData>
				<segment state="initial">
					<source>This example XAML is taken from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML data binding sample</pc>.</source>
					<target>This example XAML is taken from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML data binding sample</pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This particular example creates an object that's backed by a custom class, and creates it as a resource in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>.</source>
					<target>This particular example creates an object that's backed by a custom class, and creates it as a resource in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">`local:S2Formatter`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>To be a valid resource, this <ph dataRef="id1" id="ph1" /> element must also have an <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x:Key</pc> attribute value.</source>
					<target>To be a valid resource, this <ph dataRef="id1" id="ph1" /> element must also have an <pc dataRefEnd="id3" dataRefStart="id2" id="p1">x:Key</pc> attribute value.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>The value of the attribute is set to "GradeConverter".</source>
					<target>The value of the attribute is set to "GradeConverter".</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">`{StaticResource GradeConverter}`</data>
				</originalData>
				<segment state="initial">
					<source>The resource is then requested just a bit further into the XAML, where you see <ph dataRef="id1" id="ph1" />.</source>
					<target>The resource is then requested just a bit further into the XAML, where you see <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](binding-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Note how the {StaticResource} markup extension usage is setting a property of another markup extension <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding} markup extension</pc>, so there's two nested markup extension usages here.</source>
					<target>Note how the {StaticResource} markup extension usage is setting a property of another markup extension <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding} markup extension</pc>, so there's two nested markup extension usages here.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The inner one is evaluated first, so that the resource is obtained first and can be used as a value.</source>
					<target>The inner one is evaluated first, so that the resource is obtained first and can be used as a value.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>This same example is also shown in {Binding} markup extension.</source>
					<target>This same example is also shown in {Binding} markup extension.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Design-time tools support for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> markup extension</source>
					<target>Design-time tools support for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> markup extension</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Microsoft Visual Studio 2013 can include possible key values in the Microsoft IntelliSense dropdowns when you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> markup extension in a XAML page.</source>
					<target>Microsoft Visual Studio 2013 can include possible key values in the Microsoft IntelliSense dropdowns when you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> markup extension in a XAML page.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>For example, as soon as you type "{StaticResource", any of the resource keys from the current lookup scope are displayed in the IntelliSense dropdowns.</source>
					<target>For example, as soon as you type "{StaticResource", any of the resource keys from the current lookup scope are displayed in the IntelliSense dropdowns.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208740)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242338)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/mt187274)</data>
				</originalData>
				<segment state="initial">
					<source>In addition to the typical resources you'd have at page level (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Resources</pc></pc>) and app level (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Application.Resources</pc></pc>), you also see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">XAML theme resources</pc>, and resources from any extensions your project is using.</source>
					<target>In addition to the typical resources you'd have at page level (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Resources</pc></pc>) and app level (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Application.Resources</pc></pc>), you also see <pc dataRefEnd="id10" dataRefStart="id9" id="p5">XAML theme resources</pc>, and resources from any extensions your project is using.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Once a resource key exists as part of any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> usage, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Go To Definition</pc> (F12) feature can resolve that resource and show you the dictionary where it's defined.</source>
					<target>Once a resource key exists as part of any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource}</pc> usage, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Go To Definition</pc> (F12) feature can resolve that resource and show you the dictionary where it's defined.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>For the theme resources, this goes to generic.xaml for design time.</source>
					<target>For the theme resources, this goes to generic.xaml for design time.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>ResourceDictionary and XAML resource references</source>
					<target>ResourceDictionary and XAML resource references</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>ResourceDictionary</source>
					<target>ResourceDictionary</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>x:Key attribute</source>
					<target>x:Key attribute</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>{ThemeResource} markup extension</source>
					<target>{ThemeResource} markup extension</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>