<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">b55a4f942eb5d8e80d50dcc7a8b418680a8deb88</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-root.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">af19b18a4aff89ab2228be2039bd56b8bdd3b06f</mda:meta><mda:meta type="olxliffhash">9e19433d503ec5b70683c91a46305289c0d1da55</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
					<target>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Move from Windows Phone Silverlight to UWP</source>
					<target>Move from Windows Phone Silverlight to UWP</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Move from Windows Phone Silverlight to UWP</source>
					<target>Move from Windows Phone Silverlight to UWP</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
					<target>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</source>
					<target>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to Universal Windows Platform (UWP) apps</pc>.</source>
					<target>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to Universal Windows Platform (UWP) apps</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn632424)</data>
				</originalData>
				<segment state="initial">
					<source>When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <pc dataRefEnd="id2" dataRefStart="id1" id="p1">introduced in Windows Phone 8.1</pc>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</source>
					<target>When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <pc dataRefEnd="id2" dataRefStart="id1" id="p1">introduced in Windows Phone 8.1</pc>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</source>
					<target>That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</source>
					<target>And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://dev.windows.com/getstarted/whats-new-windows-10)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on new features, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new for developers in Windows 10</pc>.</source>
					<target>For more info on new features, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new for developers in Windows 10</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</source>
					<target>If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In addition to using the information in this guide to port your app, you can try the developer preview of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's Silverlight Bridge</pc> to help automate the porting process.</source>
					<target>In addition to using the information in this guide to port your app, you can try the developer preview of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's Silverlight Bridge</pc> to help automate the porting process.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</source>
					<target>This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</source>
					<target>Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>However, most developers should be able to save some time and effort by starting with this tool.</source>
					<target>However, most developers should be able to save some time and effort by starting with this tool.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=624546)</data>
				</originalData>
				<segment state="initial">
					<source>To try the developer preview, visit <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's website</pc>.</source>
					<target>To try the developer preview, visit <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Mobilize.NET's website</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>XAML and .NET, or HTML?</source>
					<target>XAML and .NET, or HTML?</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</source>
					<target>Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</source>
					<target>Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Even your UI markup and design can port over readily.</source>
					<target>Even your UI markup and design can port over readily.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</source>
					<target>You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</source>
					<target>You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br229583)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</source>
					<target>For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</source>
					<target>So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
					<target>Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
					<target>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</source>
					<target>This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</source>
					<target>Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Targeting the universal or the mobile device family</source>
					<target>Targeting the universal or the mobile device family</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>One option you have is to port your app to an app that targets the universal device family.</source>
					<target>One option you have is to port your app to an app that targets the universal device family.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>In this case, the app can be installed onto the widest range of devices.</source>
					<target>In this case, the app can be installed onto the widest range of devices.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</source>
					<target>If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</source>
					<target>Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Adapting your app to multiple form factors</source>
					<target>Adapting your app to multiple form factors</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</source>
					<target>The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</source>
					<target>Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</source>
					<target>So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore2.md)</data>
				</originalData>
				<segment state="initial">
					<source>You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> case study.</source>
					<target>You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> case study.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Approaching porting layer-by-layer</source>
					<target>Approaching porting layer-by-layer</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>The view (together with the view model) makes up your app's UI.</source>
					<target>The view (together with the view model) makes up your app's UI.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Ideally, the view consists of markup bound to observable properties of a view model.</source>
					<target>Ideally, the view consists of markup bound to observable properties of a view model.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</source>
					<target>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</source>
					<target>In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</source>
					<target>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>View model code makes use of types in the UI framework namespaces.</source>
					<target>View model code makes use of types in the UI framework namespaces.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</source>
					<target>Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211369)</data>
				</originalData>
				<segment state="initial">
					<source>And the vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</source>
					<target>And the vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>Remember, though: a view model is a model, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">abstraction</pc>, of a view.</source>
					<target>Remember, though: a view model is a model, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">abstraction</pc>, of a view.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>A view model provides the state and behavior of UI, while the view itself provides the visuals.</source>
					<target>A view model provides the state and behavior of UI, while the view itself provides the visuals.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</source>
					<target>For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</source>
					<target>For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-business-and-data.md#networking-cloud)</data>
				</originalData>
				<segment state="initial">
					<source>For the factors involved in making that decision, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services, networking, and databases</pc>.</source>
					<target>For the factors involved in making that decision, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services, networking, and databases</pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</source>
					<target>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The part of the app running on the client device connects to those.</source>
					<target>The part of the app running on the client device connects to those.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>This is the part of a distributed app most likely to remain unchanged when porting the client part.</source>
					<target>This is the part of a distributed app most likely to remain unchanged when porting the client part.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://azure.microsoft.com/services/mobile-services/)</data>
				</originalData>
				<segment state="initial">
					<source>If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</source>
					<target>If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</source>
					<target>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</source>
					<target>Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://msdn.microsoft.com/magazine/dd419663.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</source>
					<target>You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>This pattern keeps the data, business, and UI parts of your app separate from one another.</source>
					<target>This pattern keeps the data, business, and UI parts of your app separate from one another.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</source>
					<target>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</source>
					<target>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</source>
					<target>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>One or two exceptions to the rule</source>
					<target>One or two exceptions to the rule</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
				</originalData>
				<segment state="initial">
					<source>As you read this porting guide, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
					<target>As you read this porting guide, you can refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</source>
					<target>Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>At the feature level, the good news is that there's very little that's not supported in the UWP.</source>
					<target>At the feature level, the good news is that there's very little that's not supported in the UWP.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</source>
					<target>Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</source>
					<target>But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Feature for which there is no UWP equivalent</source>
					<target>Feature for which there is no UWP equivalent</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight documentation for the feature</source>
					<target>Windows Phone Silverlight documentation for the feature</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Microsoft XNA.</source>
					<target>Microsoft XNA.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</data>
				</originalData>
				<segment state="initial">
					<source>In general, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft DirectX</pc> using C++ is the replacement.</source>
					<target>In general, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft DirectX</pc> using C++ is the replacement.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh452744)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh825871)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Developing games</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX and XAML interop</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Developing games</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DirectX and XAML interop</pc>.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>XNA Framework Class Library</source>
					<target>XNA Framework Class Library</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Lens apps</source>
					<target>Lens apps</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Lenses for Windows Phone 8</source>
					<target>Lenses for Windows Phone 8</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Topic</source>
					<target>Topic</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Namespace and class mappings</source>
					<target>Namespace and class mappings</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</source>
					<target>This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Porting the project</source>
					<target>Porting the project</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
					<target>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Troubleshooting</source>
					<target>Troubleshooting</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</source>
					<target>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</source>
					<target>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</source>
					<target>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>You can always refer back to the table as you progress through the later topics.</source>
					<target>You can always refer back to the table as you progress through the later topics.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Porting XAML and UI</source>
					<target>Porting XAML and UI</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</source>
					<target>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</source>
					<target>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Porting for I/O, device, and app model</source>
					<target>Porting for I/O, device, and app model</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
					<target>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>It can also involve processing data.</source>
					<target>It can also involve processing data.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>But, this code is not generally thought of as either the UI layer or the data layer.</source>
					<target>But, this code is not generally thought of as either the UI layer or the data layer.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
					<target>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Porting business and data layers</source>
					<target>Porting business and data layers</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Behind your UI are your business and data layers.</source>
					<target>Behind your UI are your business and data layers.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</source>
					<target>The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211369)</data>
				</originalData>
				<segment state="initial">
					<source>The vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</source>
					<target>The vast majority of those are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available to a UWP app</pc>, so you can expect to be able to port much of this code without change.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Porting for form factor and UX</source>
					<target>Porting for form factor and UX</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</source>
					<target>Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</source>
					<target>The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Case study: Bookstore1</source>
					<target>Case study: Bookstore1</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</source>
					<target>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
					<target>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Case study: Bookstore2</source>
					<target>Case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore1.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</source>
					<target>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
					<target>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Documentation</source>
					<target>Documentation</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>What's new for developers in Windows 10</source>
					<target>What's new for developers in Windows 10</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>Guide to Universal Windows Platform (UWP) apps</source>
					<target>Guide to Universal Windows Platform (UWP) apps</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</source>
					<target>Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/dn655121.aspx)</data>
					<data id="id3">
</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's next for Windows Phone 8 developers</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Magazine articles</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's next for Windows Phone 8 developers</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Magazine articles</pc></target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=398541)</data>
					<data id="id3">
</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Presentations</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Presentations</pc></target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>The Story of Bringing Nokia Music from Windows Phone to Windows 8</source>
					<target>The Story of Bringing Nokia Music from Windows Phone to Windows 8</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>