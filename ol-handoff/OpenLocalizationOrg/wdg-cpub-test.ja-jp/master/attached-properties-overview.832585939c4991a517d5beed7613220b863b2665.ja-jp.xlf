<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">c20a0d1bcfda3c28c6289b7c745ef2e7f8a612cb</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\xaml-platform\attached-properties-overview.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">9f66c5b2966b2d6bbf7613787d170b09810aa6f2</mda:meta><mda:meta type="olxliffhash">d6142e58aceb2b9b39514b4d25e1d72a485f4260</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Explains the concept of an attached property in XAML, and provides some examples.</source>
					<target>Explains the concept of an attached property in XAML, and provides some examples.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Attached properties overview</source>
					<target>Attached properties overview</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Attached properties overview</source>
					<target>Attached properties overview</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">attached property</pc> is a XAML concept.</source>
					<target>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">attached property</pc> is a XAML concept.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>It is conceptually similar to a global property that can be set on any object element in XAML.</source>
					<target>It is conceptually similar to a global property that can be set on any object element in XAML.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.</source>
					<target>Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](dependency-properties-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>We assume that you understand the basic concept of dependency properties, and have read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</source>
					<target>We assume that you understand the basic concept of dependency properties, and have read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Attached properties in XAML</source>
					<target>Attached properties in XAML</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Attached properties exist mostly because they enabled a XAML syntax.</source>
					<target>Attached properties exist mostly because they enabled a XAML syntax.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
				</originalData>
				<segment state="initial">
					<source>In XAML, you set attached properties by using the syntax <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AttachedPropertyProvider.PropertyName</pc>.</source>
					<target>In XAML, you set attached properties by using the syntax <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AttachedPropertyProvider.PropertyName</pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh759771)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Here is an example of how you can set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> in XAML.</source>
					<target>Here is an example of how you can set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> in XAML.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that the usage is somewhat similar to a static property; you always reference the type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> that owns and registers the attached property, rather than referring to any instance by name.</source>
					<target>Note that the usage is somewhat similar to a static property; you always reference the type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> that owns and registers the attached property, rather than referring to any instance by name.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh759771)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  We're just using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.Left</pc></pc> as an example attached property without fully explaining why you'd use it.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  We're just using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.Left</pc></pc> as an example attached property without fully explaining why you'd use it.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/mt228350)</data>
				</originalData>
				<segment state="initial">
					<source>If you want to know more about what <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> is for and how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc></pc> handles its layout children, see the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Canvas</pc></pc> reference topic or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Define layouts with XAML</pc>.</source>
					<target>If you want to know more about what <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> is for and how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc></pc> handles its layout children, see the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Canvas</pc></pc> reference topic or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Define layouts with XAML</pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Why use attached properties?</source>
					<target>Why use attached properties?</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Attached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time.</source>
					<target>Attached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>It's certainly possible to put properties on a common base class so that each object could just get and set that property.</source>
					<target>It's certainly possible to put properties on a common base class so that each object could just get and set that property.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties.</source>
					<target>But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>It might even introduce cases where there might just be two of hundreds of descendants trying to use a property.</source>
					<target>It might even introduce cases where there might just be two of hundreds of descendants trying to use a property.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>That's not good class design.</source>
					<target>That's not good class design.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define.</source>
					<target>To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.</source>
					<target>The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>For example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI.</source>
					<target>For example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh759771)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This is the case with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> attached property.</source>
					<target>This is the case with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> attached property.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> is created as an attached property because it is set on elements that are contained within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc></pc> element, rather than on the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc> itself.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> is created as an attached property because it is set on elements that are contained within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc></pc> element, rather than on the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc> itself.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh759772)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Any possible child element then uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.Top</pc></pc> to specify its layout offset within the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc> layout container parent.</source>
					<target>Any possible child element then uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.Top</pc></pc> to specify its layout offset within the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc> layout container parent.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers.</source>
					<target>Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Instead, many of the layout containers implement their own attached property set.</source>
					<target>Instead, many of the layout containers implement their own attached property set.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242362)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209272)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>To implement the attached property, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> class defines a static <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field named <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Canvas.LeftProperty</pc></pc>.</source>
					<target>To implement the attached property, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> class defines a static <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field named <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Canvas.LeftProperty</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209273)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br209269)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Then, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> provides the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetLeft</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetLeft</pc></pc> methods as public accessors for the attached property, to enable both XAML setting and run-time value access.</source>
					<target>Then, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> provides the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetLeft</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">GetLeft</pc></pc> methods as public accessors for the attached property, to enable both XAML setting and run-time value access.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.</source>
					<target>For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>How the owning type uses attached properties</source>
					<target>How the owning type uses attached properties</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Although attached properties can be set on any XAML element (or any underlying <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed.</source>
					<target>Although attached properties can be set on any XAML element (or any underlying <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The type that defines the attached property typically follows one of these scenarios:</source>
					<target>The type that defines the attached property typically follows one of these scenarios:</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>The type that defines the attached property is the parent in a relationship of other objects.</source>
					<target>The type that defines the attached property is the parent in a relationship of other objects.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The child objects will set values for the attached property.</source>
					<target>The child objects will set values for the attached property.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208742)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SizeChanged</pc></pc>, etc.)</source>
					<target>The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SizeChanged</pc></pc>, etc.)</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.</source>
					<target>The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The attached property reports info to a service, not to another UI element.</source>
					<target>The attached property reports info to a service, not to another UI element.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](custom-attached-properties.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on these scenarios and owning types, see the "More about Canvas.Left" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom attached properties</pc>.</source>
					<target>For more info on these scenarios and owning types, see the "More about Canvas.Left" section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom attached properties</pc>.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Attached properties in code</source>
					<target>Attached properties in code</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Attached properties don't have the typical property wrappers for easy get and set access like other dependency properties do.</source>
					<target>Attached properties don't have the typical property wrappers for easy get and set access like other dependency properties do.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set.</source>
					<target>This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>(It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)</source>
					<target>(It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>There are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors.</source>
					<target>There are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.</source>
					<target>These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Using the property system</source>
					<target>Using the property system</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Attached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored.</source>
					<target>Attached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Therefore attached properties expose a dependency property identifier on the owning class.</source>
					<target>Therefore attached properties expose a dependency property identifier on the owning class.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242361)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242362)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To set an attached property in code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetValue</pc></pc> method, and pass the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field that serves as the identifier for that attached property.</source>
					<target>To set an attached property in code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetValue</pc></pc> method, and pass the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field that serves as the identifier for that attached property.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>(You also pass the value to set.)</source>
					<target>(You also pass the value to set.)</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242359)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242362)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To get the value of an attached property in code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetValue</pc></pc> method, again passing the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field that serves as the identifier.</source>
					<target>To get the value of an attached property in code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetValue</pc></pc> method, again passing the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc> field that serves as the identifier.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Using the XAML accessor pattern</source>
					<target>Using the XAML accessor pattern</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>A XAML processor must be able to set attached property values when XAML is parsed into an object tree.</source>
					<target>A XAML processor must be able to set attached property values when XAML is parsed into an object tree.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">*</data>
					<data id="id8">*</data>
				</originalData>
				<segment state="initial">
					<source>The owner type of the attached property must implement dedicated accessor methods named in the form <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Set</pc><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PropertyName</pc>.</source>
					<target>The owner type of the attached property must implement dedicated accessor methods named in the form <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Set</pc><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PropertyName</pc>.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>These dedicated accessor methods are also one way to get or set the attached property in code.</source>
					<target>These dedicated accessor methods are also one way to get or set the attached property in code.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.</source>
					<target>From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>The next example shows how you can set an attached property in code via the XAML accessor API.</source>
					<target>The next example shows how you can set an attached property in code via the XAML accessor API.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">`myCheckBox`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br209316)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, <ph dataRef="id1" id="ph1" /> is an instance of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">CheckBox</pc></pc> class.</source>
					<target>In this example, <ph dataRef="id1" id="ph1" /> is an instance of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">CheckBox</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship.</source>
					<target>The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>The uncommented last line is the syntax if you use the property system.</source>
					<target>The uncommented last line is the syntax if you use the property system.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>The commented last line is the syntax if you use the XAML accessor pattern.</source>
					<target>The commented last line is the syntax if you use the XAML accessor pattern.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Custom attached properties</source>
					<target>Custom attached properties</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](custom-attached-properties.md)</data>
				</originalData>
				<segment state="initial">
					<source>For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom attached properties</pc>.</source>
					<target>For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom attached properties</pc>.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Special syntax for attached property references</source>
					<target>Special syntax for attached property references</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>The dot in an attached property name is a key part of the identification pattern.</source>
					<target>The dot in an attached property name is a key part of the identification pattern.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning.</source>
					<target>Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>For example, a dot is treated as an object-model traversal for a binding path.</source>
					<target>For example, a dot is treated as an object-model traversal for a binding path.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
				</originalData>
				<segment state="initial">
					<source>In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">owner</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">.</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">property</pc> separator of an attached property.</source>
					<target>In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">owner</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">.</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">property</pc> separator of an attached property.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses ("()")—for example, "(Canvas.Left)".</source>
					<target>To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses ("()")—for example, "(Canvas.Left)".</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](property-path-syntax.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property-path syntax</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Property-path syntax</pc>.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To specify an attached property as the target property for a resource reference from a resource file to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc>, use a special syntax that injects a code-style, fully qualified <pc dataRefEnd="id4" dataRefStart="id3" id="p2">using:</pc> declaration inside square brackets ("\[\]"), to create a deliberate scope break.</source>
					<target>To specify an attached property as the target property for a resource reference from a resource file to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc>, use a special syntax that injects a code-style, fully qualified <pc dataRefEnd="id4" dataRefStart="id3" id="p2">using:</pc> declaration inside square brackets ("\[\]"), to create a deliberate scope break.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">&lt;TextBlock x:Uid="Title" /&gt;</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, assuming there exists an element '<ph dataRef="id1" id="ph1" />', the resource key in the resource file that targets the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Canvas.Top</pc> value on that instance is "Title.\[using:Windows.UI.Xaml.Controls\]Canvas.Top".</source>
					<target>For example, assuming there exists an element '<ph dataRef="id1" id="ph1" />', the resource key in the resource file that targets the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Canvas.Top</pc> value on that instance is "Title.\[using:Windows.UI.Xaml.Controls\]Canvas.Top".</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on resource files and XAML, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Translating UI resources</pc>.</source>
					<target>For more info on resource files and XAML, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Translating UI resources</pc>.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Custom attached properties</source>
					<target>Custom attached properties</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Dependency properties overview</source>
					<target>Dependency properties overview</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Define layouts with XAML</source>
					<target>Define layouts with XAML</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Quickstart: Translating UI resources</source>
					<target>Quickstart: Translating UI resources</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>SetValue</source>
					<target>SetValue</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>GetValue</source>
					<target>GetValue</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>