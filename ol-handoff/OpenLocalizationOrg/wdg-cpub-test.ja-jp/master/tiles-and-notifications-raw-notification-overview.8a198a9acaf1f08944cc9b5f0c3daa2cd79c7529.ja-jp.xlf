<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">d2d17bdd70988011d678a96ca2988aff602746ad</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\tiles-and-notifications-raw-notification-overview.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">4caa0a5b0bd784e4b733158fd02c586209b0f41d</mda:meta><mda:meta type="olxliffhash">a8d7e566bc5dc4d1992903875fc08604bbf7fc42</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Raw notifications are short, general purpose push notifications.</source>
					<target>Raw notifications are short, general purpose push notifications.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Raw notification overview</source>
					<target>Raw notification overview</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Raw notification overview</source>
					<target>Raw notification overview</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Raw notifications are short, general purpose push notifications.</source>
					<target>Raw notifications are short, general purpose push notifications.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>They are strictly instructional and do not include a UI component.</source>
					<target>They are strictly instructional and do not include a UI component.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>As with other push notifications, the Windows Push Notification Services (WNS) feature delivers raw notifications from your cloud service to your app.</source>
					<target>As with other push notifications, the Windows Push Notification Services (WNS) feature delivers raw notifications from your cloud service to your app.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>You can use raw notifications for a variety of purposes, including to trigger your app to run a background task if the user has given the app permission to do so.</source>
					<target>You can use raw notifications for a variety of purposes, including to trigger your app to run a background task if the user has given the app permission to do so.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>By using WNS to communicate with your app, you can avoid the processing overhead of creating persistent socket connections, sending HTTP GET messages, and other service-to-app connections.</source>
					<target>By using WNS to communicate with your app, you can avoid the processing overhead of creating persistent socket connections, sending HTTP GET messages, and other service-to-app connections.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](tiles-and-notifications-windows-push-notification-services--wns--overview.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   To understand raw notifications, it's best to be familiar with the concepts discussed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Push Notification Services (WNS) overview</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   To understand raw notifications, it's best to be familiar with the concepts discussed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Push Notification Services (WNS) overview</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>As with toast, tile, and badge push notifications, a raw notification is pushed from your app's cloud service over an assigned channel Uniform Resource Identifier (URI) to WNS.</source>
					<target>As with toast, tile, and badge push notifications, a raw notification is pushed from your app's cloud service over an assigned channel Uniform Resource Identifier (URI) to WNS.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>WNS, in turn, delivers the notification to the device and user account associated with that channel.</source>
					<target>WNS, in turn, delivers the notification to the device and user account associated with that channel.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Unlike other push notifications, raw notifications don't have a specified format.</source>
					<target>Unlike other push notifications, raw notifications don't have a specified format.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The content of the payload is entirely app-defined.</source>
					<target>The content of the payload is entirely app-defined.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>As an illustration of an app that could benefit from raw notifications, let's look at a theoretical document collaboration app.</source>
					<target>As an illustration of an app that could benefit from raw notifications, let's look at a theoretical document collaboration app.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Consider two users who are editing the same document at the same time.</source>
					<target>Consider two users who are editing the same document at the same time.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The cloud service, which hosts the shared document, could use raw notifications to notify each user when changes are made by the other user.</source>
					<target>The cloud service, which hosts the shared document, could use raw notifications to notify each user when changes are made by the other user.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The raw notifications would not necessarily contain the changes to the document, but instead would signal each user's copy of the app to contact the central location and sync the available changes.</source>
					<target>The raw notifications would not necessarily contain the changes to the document, but instead would signal each user's copy of the app to contact the central location and sync the available changes.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>By using raw notifications, the app and the its cloud service can save the overhead of maintaining persistent connections the entire time the document is open.</source>
					<target>By using raw notifications, the app and the its cloud service can save the overhead of maintaining persistent connections the entire time the document is open.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>How raw notifications work</source>
					<target>How raw notifications work</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>All raw notifications are push notifications.</source>
					<target>All raw notifications are push notifications.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Therefore, the setup required to send and receive push notifications applies to raw notifications as well:</source>
					<target>Therefore, the setup required to send and receive push notifications applies to raw notifications as well:</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>You must have a valid WNS channel to send raw notifications.</source>
					<target>You must have a valid WNS channel to send raw notifications.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465412)</data>
				</originalData>
				<segment state="initial">
					<source>For more information about acquiring a push notification channel, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to request, create, and save a notification channel</pc>.</source>
					<target>For more information about acquiring a push notification channel, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to request, create, and save a notification channel</pc>.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You must include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Internet</pc> capability in your app's manifest.</source>
					<target>You must include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Internet</pc> capability in your app's manifest.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Microsoft Visual Studio manifest editor, you will find this option under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Capabilities</pc> tab as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Internet (Client)</pc>.</source>
					<target>In the Microsoft Visual Studio manifest editor, you will find this option under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Capabilities</pc> tab as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Internet (Client)</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211422)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc></pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Capabilities</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The body of the notification is in an app-defined format.</source>
					<target>The body of the notification is in an app-defined format.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The client receives the data as a null-terminated string (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HSTRING</pc>) that only needs to be understood by the app.</source>
					<target>The client receives the data as a null-terminated string (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HSTRING</pc>) that only needs to be understood by the app.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_cache)</data>
				</originalData>
				<segment state="initial">
					<source>If the client is offline, raw notifications will be cached by WNS only if the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Cache-Policy</pc> header is included in the notification.</source>
					<target>If the client is offline, raw notifications will be cached by WNS only if the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Cache-Policy</pc> header is included in the notification.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>However, only one raw notification will be cached and delivered once the device comes back online.</source>
					<target>However, only one raw notification will be cached and delivered once the device comes back online.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>There are only three possible paths for a raw notification to take on the client: they will be delivered to your running app through a notification delivery event, sent to a background task, or dropped.</source>
					<target>There are only three possible paths for a raw notification to take on the client: they will be delivered to your running app through a notification delivery event, sent to a background task, or dropped.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Therefore, if the client is offline and WNS attempts to deliver a raw notification, the notification is dropped.</source>
					<target>Therefore, if the client is offline and WNS attempts to deliver a raw notification, the notification is dropped.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Creating a raw notification</source>
					<target>Creating a raw notification</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Sending a raw notification is similar to sending a tile, toast, or badge push notification, with these differences:</source>
					<target>Sending a raw notification is similar to sending a tile, toast, or badge push notification, with these differences:</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The HTTP Content-Type header must be set to "application/octet-stream".</source>
					<target>The HTTP Content-Type header must be set to "application/octet-stream".</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_type)</data>
				</originalData>
				<segment state="initial">
					<source>The HTTP <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Type</pc> header must be set to "wns/raw".</source>
					<target>The HTTP <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Type</pc> header must be set to "wns/raw".</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The notification body can contain any string payload smaller than 5 KB in size.</source>
					<target>The notification body can contain any string payload smaller than 5 KB in size.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Raw notifications are intended to be used as short messages that trigger your app to take an action, such as to directly contact the service to sync a larger amount of data or to make a local state modification based on the notification content.</source>
					<target>Raw notifications are intended to be used as short messages that trigger your app to take an action, such as to directly contact the service to sync a larger amount of data or to make a local state modification based on the notification content.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Note that WNS push notifications cannot be guaranteed to be delivered, so your app and cloud service must account for the possibility that the raw notification might not reach the client, such as when the client is offline.</source>
					<target>Note that WNS push notifications cannot be guaranteed to be delivered, so your app and cloud service must account for the possibility that the raw notification might not reach the client, such as when the client is offline.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252)</data>
				</originalData>
				<segment state="initial">
					<source>For more information on sending push notifications, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Sending a push notification</pc>.</source>
					<target>For more information on sending push notifications, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Sending a push notification</pc>.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Receiving a raw notification</source>
					<target>Receiving a raw notification</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>There are two avenues through which your app can be receive raw notifications:</source>
					<target>There are two avenues through which your app can be receive raw notifications:</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#notification_delivery_events)</data>
				</originalData>
				<segment state="initial">
					<source>Through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">notification delivery events</pc> while your application is running.</source>
					<target>Through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">notification delivery events</pc> while your application is running.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#bg_tasks)</data>
				</originalData>
				<segment state="initial">
					<source>Through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background tasks triggered by the raw notification</pc> if your app is enabled to run background tasks.</source>
					<target>Through <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background tasks triggered by the raw notification</pc> if your app is enabled to run background tasks.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>An app can use both mechanisms to receive raw notifications.</source>
					<target>An app can use both mechanisms to receive raw notifications.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>If an app implements both the notification delivery event handler and background tasks that are triggered by raw notifications, the notification delivery event will take priority when the app is running.</source>
					<target>If an app implements both the notification delivery event handler and background tasks that are triggered by raw notifications, the notification delivery event will take priority when the app is running.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>If the app is running, the notification delivery event will take priority over the background task and the app will have the first opportunity to process the notification.</source>
					<target>If the app is running, the notification delivery event will take priority over the background task and the app will have the first opportunity to process the notification.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241297)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The notification delivery event handler can specify, by setting the event's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationReceivedEventArgs.Cancel</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>, that the raw notification should not be passed to its background task once the handler exits.</source>
					<target>The notification delivery event handler can specify, by setting the event's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationReceivedEventArgs.Cancel</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>, that the raw notification should not be passed to its background task once the handler exits.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cancel</pc> property is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">false</pc> or is not set (the default value is <pc dataRefEnd="id6" dataRefStart="id5" id="p3">false</pc>), the raw notification will trigger the background task after the notification delivery event handler has done its work.</source>
					<target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cancel</pc> property is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">false</pc> or is not set (the default value is <pc dataRefEnd="id6" dataRefStart="id5" id="p3">false</pc>), the raw notification will trigger the background task after the notification delivery event handler has done its work.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Notification delivery events</source>
					<target>Notification delivery events</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241292)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your app can use a notification delivery event (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationReceived</pc></pc>) to receive raw notifications while the app is in use.</source>
					<target>Your app can use a notification delivery event (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationReceived</pc></pc>) to receive raw notifications while the app is in use.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>When the cloud service sends a raw notification, the running app can receive it by handling the notification delivery event on the channel URI.</source>
					<target>When the cloud service sends a raw notification, the running app can receive it by handling the notification delivery event on the channel URI.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#bg_tasks)</data>
				</originalData>
				<segment state="initial">
					<source>If your app is not running and does not use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background tasks</pc>, any raw notification sent to that app is dropped by WNS on receipt.</source>
					<target>If your app is not running and does not use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">background tasks</pc>, any raw notification sent to that app is dropped by WNS on receipt.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>To avoid wasting your cloud service's resources, you should consider implementing logic on the service to track whether the app is active.</source>
					<target>To avoid wasting your cloud service's resources, you should consider implementing logic on the service to track whether the app is active.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>There are two sources of this information: an app can explicitly tell the service that it's ready to start receiving notifications, and WNS can tell the service when to stop.</source>
					<target>There are two sources of this information: an app can explicitly tell the service that it's ready to start receiving notifications, and WNS can tell the service when to stop.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">The app notifies the cloud service</pc>: The app can contact its service to let it know that the app is running in the foreground.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">The app notifies the cloud service</pc>: The app can contact its service to let it know that the app is running in the foreground.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The disadvantage of this approach is that the app can end up contacting your service very frequently.</source>
					<target>The disadvantage of this approach is that the app can end up contacting your service very frequently.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>However, it has the advantage that the service will always know when the app is ready to receive incoming raw notifications.</source>
					<target>However, it has the advantage that the service will always know when the app is ready to receive incoming raw notifications.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Another advantage is that when the app contacts its service, the service then knows to send raw notifications to the specific instance of that app rather than broadcast.</source>
					<target>Another advantage is that when the app contacts its service, the service then knows to send raw notifications to the specific instance of that app rather than broadcast.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_notification)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_dcs)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">The cloud service responds to WNS response messages</pc> : Your app service can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">X-WNS-NotificationStatus</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">X-WNS-DeviceConnectionStatus</pc> information returned by WNS to determine when to stop sending raw notifications to the app.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">The cloud service responds to WNS response messages</pc> : Your app service can use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">X-WNS-NotificationStatus</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">X-WNS-DeviceConnectionStatus</pc> information returned by WNS to determine when to stop sending raw notifications to the app.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>When your service sends a notification to a channel as an HTTP POST, it can receive one of these messages in the response:</source>
					<target>When your service sends a notification to a channel as an HTTP POST, it can receive one of these messages in the response:</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-NotificationStatus: dropped</pc>: This indicates that the notification was not received by the client.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-NotificationStatus: dropped</pc>: This indicates that the notification was not received by the client.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It's a safe assumption that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dropped</pc> response is caused by your app no longer being in the foreground on the user's device.</source>
					<target>It's a safe assumption that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dropped</pc> response is caused by your app no longer being in the foreground on the user's device.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-DeviceConnectionStatus: disconnected</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">X-WNS-DeviceConnectionStatus: tempconnected</pc>: This indicates that the Windows client no longer has a connection to WNS.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-DeviceConnectionStatus: disconnected</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">X-WNS-DeviceConnectionStatus: tempconnected</pc>: This indicates that the Windows client no longer has a connection to WNS.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_request)</data>
				</originalData>
				<segment state="initial">
					<source>Note that to receive this message from WNS, you have to ask for it by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-RequestForStatus</pc> header in the notification's HTTP POST.</source>
					<target>Note that to receive this message from WNS, you have to ask for it by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-RequestForStatus</pc> header in the notification's HTTP POST.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Your app's cloud service can use the information in these status messages to cease communication attempts through raw notifications.</source>
					<target>Your app's cloud service can use the information in these status messages to cease communication attempts through raw notifications.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>The service can resume sending raw notifications once it is contacted by the app, when the app switches back into the foreground.</source>
					<target>The service can resume sending raw notifications once it is contacted by the app, when the app switches back into the foreground.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_notification)</data>
				</originalData>
				<segment state="initial">
					<source>Note that you should not rely on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-NotificationStatus</pc> to determine whether the notification was successfully delivered to the client.</source>
					<target>Note that you should not rely on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-NotificationStatus</pc> to determine whether the notification was successfully delivered to the client.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc></source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc></target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Background tasks triggered by raw notifications</source>
					<target>Background tasks triggered by raw notifications</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh700485)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   Before using raw notification background tasks, an app must be granted background access via <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BackgroundExecutionManager.RequestAccessAsync</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   Before using raw notification background tasks, an app must be granted background access via <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">BackgroundExecutionManager.RequestAccessAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700543)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your background task must be registered with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationTrigger</pc></pc>.</source>
					<target>Your background task must be registered with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationTrigger</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>If it is not registered, the task will not run when a raw notification is received.</source>
					<target>If it is not registered, the task will not run when a raw notification is received.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>A background task that is triggered by a raw notification enables your app's cloud service to contact your app, even when the app is not running (though it might trigger it to run).</source>
					<target>A background task that is triggered by a raw notification enables your app's cloud service to contact your app, even when the app is not running (though it might trigger it to run).</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>This happens without the app having to maintain a continuous connection.</source>
					<target>This happens without the app having to maintain a continuous connection.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Raw notifications are the only notification type that can trigger background tasks.</source>
					<target>Raw notifications are the only notification type that can trigger background tasks.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>However, while toast, tile, and badge push notifications cannot trigger background tasks, background tasks triggered by raw notifications can update tiles and invoke toast notifications through local API calls.</source>
					<target>However, while toast, tile, and badge push notifications cannot trigger background tasks, background tasks triggered by raw notifications can update tiles and invoke toast notifications through local API calls.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>As an illustration of how background tasks that are triggered by raw notifications work, let's consider an app used to read e-books.</source>
					<target>As an illustration of how background tasks that are triggered by raw notifications work, let's consider an app used to read e-books.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>First, a user purchases a book online, possibly on another device.</source>
					<target>First, a user purchases a book online, possibly on another device.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>In response, the app's cloud service can send a raw notification to each of the user's devices, with a payload that states that the book was purchased and the app should download it.</source>
					<target>In response, the app's cloud service can send a raw notification to each of the user's devices, with a payload that states that the book was purchased and the app should download it.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>The app then directly contacts the app's cloud service to begin a background download of the new book so that later, when the user launches the app, the book is already there and ready for reading.</source>
					<target>The app then directly contacts the app's cloud service to begin a background download of the new book so that later, when the user launches the app, the book is already there and ready for reading.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>To use a raw notification to trigger a background task, your app must:</source>
					<target>To use a raw notification to trigger a background task, your app must:</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700485)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Request permission to run tasks in the background (which the user can revoke at any time) by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundExecutionManager.RequestAccessAsync</pc></pc>.</source>
					<target>Request permission to run tasks in the background (which the user can revoke at any time) by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundExecutionManager.RequestAccessAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Implement the background task.</source>
					<target>Implement the background task.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh977046)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supporting your app with background tasks</pc></source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supporting your app with background tasks</pc></target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700543)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your background task is then invoked in response to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationTrigger</pc></pc>, each time a raw notification is received for your app.</source>
					<target>Your background task is then invoked in response to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PushNotificationTrigger</pc></pc>, each time a raw notification is received for your app.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Your background task interprets the raw notification's app-specific payload and acts on it.</source>
					<target>Your background task interprets the raw notification's app-specific payload and acts on it.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>For each app, only one background task can run at a time.</source>
					<target>For each app, only one background task can run at a time.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>If a background task is triggered for an app for which a background task is already running, the first background task must complete before the new one is run.</source>
					<target>If a background task is triggered for an app for which a background task is already running, the first background task must complete before the new one is run.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Other resources</source>
					<target>Other resources</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=241553)</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=231476)</data>
				</originalData>
				<segment state="initial">
					<source>You can learn more by downloading the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw notifications sample</pc> for Windows 8.1, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Push and periodic notifications sample</pc> for Windows 8.1, and re-using their source code in your Windows 10 app.</source>
					<target>You can learn more by downloading the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw notifications sample</pc> for Windows 8.1, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Push and periodic notifications sample</pc> for Windows 8.1, and re-using their source code in your Windows 10 app.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Guidelines for raw notifications</source>
					<target>Guidelines for raw notifications</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>Quickstart: Creating and registering a raw notification background task</source>
					<target>Quickstart: Creating and registering a raw notification background task</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Quickstart: Intercepting push notifications for running apps</source>
					<target>Quickstart: Intercepting push notifications for running apps</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>RawNotification</source>
					<target>RawNotification</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>BackgroundExecutionManager.RequestAccessAsync</source>
					<target>BackgroundExecutionManager.RequestAccessAsync</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>