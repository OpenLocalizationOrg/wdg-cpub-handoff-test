<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">cff85c5a2446c6c16faba670ad43135a8be6afc7</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\devices-sensors\3d-printing.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">293183a60342e822e6ba2f03a9619e3c896ccf86</mda:meta><mda:meta type="olxliffhash">f215047bcf6d9756f08429a640c210e313d785a3</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>3D printing from your app</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Learn how to add 3D printing functionality to your Universal Windows app.</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>3D printing from your app</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Windows.Graphics.Printing3D</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Learn how to add 3D printing functionality to your Universal Windows app.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This topic covers how to launch the 3D print dialog after ensuring your 3D model is printable and in the correct format.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Class setup</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn998169)</data>
				</originalData>
				<segment state="initial">
					<source>In your class that is to have 3D print functionality, add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Graphics.Printing3D</pc> namespace.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>3DPrintNamespace</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The following additional namespaces will be used in this particular guide:</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>OtherNamespaces</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Next, give your class some helpful member fields.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn998044)</data>
				</originalData>
				<segment state="initial">
					<source>Declare a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTask</pc> object to serve as a reference to the printing task that is to be passed to the print driver.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
				</originalData>
				<segment state="initial">
					<source>Declare a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StorageFile</pc> object to hold the original 3D data file.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn998063)</data>
				</originalData>
				<segment state="initial">
					<source>Finally, declare a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3D3MFPackage</pc> object, which represents a print-ready 3D model with all necessary metadata.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>DeclareVars</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Create a simple UI</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>This sample uses three user controls: a load button which will bring a file into program memory, a fix button which will modify the file as necessary, and a print button which will initiate the printing job.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>The following code generates these buttons (with their click event handlers) in your class' XAML file:</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Buttons</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> for UI feedback.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>OutputText</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Get the 3D data</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The method by which your app acquires 3D geometry data to print will vary.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Your app may retrieve data from a 3D scan, pull model data from a web resource, or generate a 3D mesh programmatically using equations.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>For the sake of simplicity, this guide will load a 3D data file (of any of several common file types) into program memory from File Explorer.</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">`OnLoadClick`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br207847)</data>
				</originalData>
				<segment state="initial">
					<source>In your <ph dataRef="id1" id="ph1" /> method, use the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">FileOpenPicker</pc> class to load a single file into your app's memory.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>FileLoad</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Use 3D Builder to convert to 3D Manufacturing Format (.3mf)</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>At this point, you are able to load a 3D data file into your app's memory.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>However, 3D geometry data comes in many different formats, and not all are efficient for 3D printing.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Windows 10 uses the 3D Manufacturing Format (.3mf) file type for all 3D Printing tasks.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The 3MF file type offers a great deal of functionality not covered in this tutorial.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://3mf.io/what-is-3mf/3mf-specification/)</data>
				</originalData>
				<segment state="initial">
					<source>To learn more about 3MF and the features it provides to producers and consumers of 3D products, refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3MF Specification</pc>.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://www.microsoft.com/store/apps/3d-builder/9wzdncrfj3t6)</data>
				</originalData>
				<segment state="initial">
					<source>Fortunately, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3D Builder</pc> app can open files of most popular 3D formats and save them as .3mf files.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>In this example, where the file type may vary, a very simple solution is to open 3D Builder and prompt the user to save the imported data as a .3mf file and then reload it.</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In addition to converting file formats, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">3D Builder</pc> provides simple tools to edit your models, add color data, and perform other print-specific operations, so it is often worth integrating into an app that deals with 3D printing.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>FileCheck</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Repair model data for 3D printing</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Not all 3D model data is able to be printed, even in .3mf format.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>In order for the printer to correctly determine what space to fill and what to leave empty, the model(s) to be printed must be a single seamless mess, have outward-facing surface normals, and have manifold geometry.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Issues in these areas can crop up in a variety of different forms and can be hard to spot in complex shapes.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Fortunately, current software solutions are often adequate for converting raw geometry to printable 3D shapes.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">`OnFixClick`</data>
				</originalData>
				<segment state="initial">
					<source>This will be done in the <ph dataRef="id1" id="ph1" /> method.</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241731)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt203679)</data>
				</originalData>
				<segment state="initial">
					<source>The 3D data file must be converted to implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IRandomAccessStream</pc>, which can then be used to generate a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3DModel</pc> object.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>RepairModel</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Printing3DModel</pc> object is now repaired and printable.</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SaveModelToPackageAsync</pc> to assign the model to the Printing3D3MFPackage object you declared when creating the class.</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>SaveModel</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Execute printing task: create a TaskRequested handler</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Later on, when the 3D print dialog is displayed to the user and the user elects to begin printing, your app will need to pass in the desired parameters to the 3D print pipeline.</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The 3D print API will raise the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TaskRequested</pc> event.</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>You must write a method to handle this event appropriately.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn998029)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn998051)</data>
				</originalData>
				<segment state="initial">
					<source>As always, it must be of the same type as its event: The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TaskRequested</pc> event has parameters <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Print3DManager</pc> (its sender object) and a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Print3DTaskRequestedEventArgs</pc> object, which holds most of the relevant information.</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Its return type is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">void</pc>.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>MyTaskTitle</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The core purpose of this method is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">args</pc> object to send a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Printing3D3MFPackage</pc> down the pipeline.</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTaskRequestedEventArgs</pc> type has one property: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Request</pc>.</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn998050)</data>
				</originalData>
				<segment state="initial">
					<source>It is of the type <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTaskRequest</pc> and represents one print job request.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn998044)</data>
				</originalData>
				<segment state="initial">
					<source>Its method <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateTask</pc> allows the program to submit the right information for your print job, and it returns a reference to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Print3DTask</pc> object which is sent down the 3D print pipeline.</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateTask</pc> has the following input parameters: A <pc dataRefEnd="id4" dataRefStart="id3" id="p2">string</pc> for the print job name, a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">string</pc> for the ID of the printer to use, and a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Print3DTaskSourceRequestedHandler</pc> delegate.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The delegate is automatically invoked when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3DTaskSourceRequested</pc> event is raised (this is done by the API itself).</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>The important thing to note is that this delegate is invoked when a print job is initiated, and it is responsible for providing the right 3D print package.</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn998056)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTaskSourceRequestedHandler</pc> takes one parameter, a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Print3DTaskSourceRequestedArgs</pc> object which provides the data to be sent.</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The one public method of this class, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetSource</pc>, accepts the package to be printed.</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Implement a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTaskSourceRequestedHandler</pc> delegate as follows:</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>SourceHandler</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`sourceHandler`</data>
				</originalData>
				<segment state="initial">
					<source>Next, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CreateTask</pc>, using the newly-defined delegate <ph dataRef="id3" id="ph1" />:</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>CreateTask</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Print3DTask</pc> is assigned to the class variable declared in the beginning.</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>You can now (optionally) use this reference to handle certain events thrown by the task:</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Optional</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`Task_Submitting`</data>
					<data id="id4">`Task_Completed`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  You must implement a <ph dataRef="id3" id="ph1" /> and <ph dataRef="id4" id="ph2" /> method if you wish to register them to these events.</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Execute printing task: open 3D print dialog</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The final bit of code needed to print from your app is that which launches the 3D print dialog.</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Like a conventional printing dialog window, the 3D print dialog provides a number of last-minute printing specifications and allows the user to choose which printer to use (whether connected via USB or the network).</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">`MyTaskRequested`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>First, register your <ph dataRef="id1" id="ph1" /> method with the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">TaskRequested</pc> event.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>RegisterMyTaskRequested</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After registering your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TaskRequested</pc> event handler, you can invoke the method <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShowPrintUIAsync</pc>, which brings up the 3D print dialog in the current application window.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>ShowDialog</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[!code-cs</data>
					<data id="id2">]</data>
					<data id="id3">[</data>
					<data id="id4">](./code/3dprinthowto/cs/MainPage.xaml.cs#SnippetDeregisterMyTaskRequested)</data>
				</originalData>
				<segment state="initial">
					<source>Finally, it is a good practice to de-register your event handlers once your app resumes control: <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeregisterMyTaskRequested</pc></pc></source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>