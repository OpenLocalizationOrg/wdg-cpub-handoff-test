<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">dccf8cbea79d6f216d059254ff6d254208a23dce</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\layout\design-and-ui-intro.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">168c3d81c44e5e5a73899a00c584ec3af560d739</mda:meta><mda:meta type="olxliffhash">e3e978a0d655ddfeda04a64f3b049f6b7e24f994</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article describes the features, benefits, and requirements of the Universal Windows Platform (UWP) from a design perspective.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Find out what the platform gives you for free and the tools it puts at your disposal.</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Introduction to Universal Windows Platform (UWP) app design</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Introduction to UWP app design</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>A Universal Windows Platform (UWP) app can run on any Windows-based device, from your phone to your tablet or PC.</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>windows-powered devices</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Designing an app that looks good on such a wide variety of devices can be a big challenge.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>So how do you go about designing an app that provides a great UX on devices with dramatically different screen sizes and input methods?</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Fortunately, the Universal Windows Platform (UWP) provides a set of built-in features and universal building blocks that help you do just that.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>a design for an app that runs on windows phone, tablets, and pcs</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This articles describes the UI features and benefits of UWP apps and provides some high-level design guidance for creating your first UWP app.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Let's start by taking a look at some of the features that you get when you create a UWP app.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>UWP app features</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Effective pixels and scaling</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>UWP apps automatically adjust the size of controls, fonts, and other UI elements so that they are legible on all devices.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>When your app runs on a device, the system uses an algorithm to normalize the way UI elements display on the screen.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>This scaling algorithm takes into account viewing distance and screen density (pixels per inch) to optimize for perceived size (rather than physical size).</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The scaling algorithm ensures that a 24 px font on Surface Hub 10 feet away is just as legible to the user as a 24 px font on 5' phone that's a few inches away.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>viewing distances for different devices</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>Because of how the scaling system works, when you design your UWP app, you're designing in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective pixels</pc>, not actual physical pixels.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>So, how does that impact the way you design your app?</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>You can ignore the pixel density and the actual screen resolution when designing.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#sizeclasses)</data>
				</originalData>
				<segment state="initial">
					<source>Instead, design for the effective resolution (the resolution in effective pixels) for a size class (we define size classes <pc dataRefEnd="id2" dataRefStart="id1" id="p1">later in this article</pc>).</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>When the system scales your UI, it does so by multiples of 4.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>To ensure a crisp appearance, snap your designs to the 4x4 pixel grid: make margins, sizes and positions of UI elements, and the position (but not the size—text can be any size) of text a multiple of 4 effective pixels.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>This illustration shows design elements that map to the 4x4 pixel grid.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The design element will always have crisp, sharp edges.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>snapping to the 4x4 pixel grid</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The next illustration shows design elements that don't map to the 4x4 grid.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>These design elements will have blurry, soft edges on some devices.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>design elements that do not align to the 4x4 pixel grid</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   When creating screen mockups in image editing programs, set the DPI to 72 and set the image dimensions to the effective resolution for the size class you're targeting.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#sizeclasses)</data>
				</originalData>
				<segment state="initial">
					<source>(For a list of size classes and effective resolutions, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendations for specific size classes</pc> section of this article.)</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Universal input and smart interactions</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Another built-in capability of the UWP is universal input enabled via smart interactions.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Although you can design your apps for specific input modes and devices, you aren’t required to.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>That’s because Universal Windows apps by default rely on smart interactions.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>That means you can design around a click interaction without having to know or define whether the click comes from an actual mouse click or the tap of a finger.</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Universal controls and styles</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The UWP also provides some useful building blocks that make it easier to design apps for multiple device families.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Universal controls</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>The UWP provides a set of universal controls that are guaranteed to work well on all Windows-powered devices.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This set of universal controls includes everything from common form controls like radio button and text box to sophisticated controls like grid view and list view that can generate lists of items from a stream of data and a template.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>These controls are input-aware and deploy with the proper set of input affordances, event states, and overall functionality for each device family.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://dev.windows.com/design/controls-patterns)</data>
				</originalData>
				<segment state="initial">
					<source>For a complete list of these controls and the patterns you can make from them, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Controls and patterns</pc> section.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Universal styles</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Your UWP app automatically gets a default set of styles that gives you these features:</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>A set of styles that automatically gives your app a light or dark theme (your choice) and can incorporate the user's accent color preference.</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>light and dark themes</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>A Segoe-based type ramp that ensures that app text looks crisp on all devices.</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Default animations for interactions.</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Automatic support for high-contrast modes.</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Our styles were designed with high-contrast in mind, so when your app runs on a device in high-contrast mode, it will display properly.</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Automatic support for other languages.</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Our default styles automatically select the correct font for every language that Windows supports.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>You can even use multiple languages in the same app and they'll be displayed properly.</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Built-in support for RTL reading order.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>You can customize these default styles to give your app a personal touch, or you can completely replace them with your own to create a unique visual experience.</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>For example, here's a design for a weather app with a unique visual style:</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>a weather app with its own visual style</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Now that we've described the building blocks of UWP apps, let's take a look at how to put them together to create a UI.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>The anatomy of a typical UWP app</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>A modern user interface is a complex thing, made up of text, shapes, colors, and animations which are ultimately made up out of individual pixels of the screen of the device you're using.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>When you start designing a user interface, the sheer number of choices can be overwhelming.</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>To make things simpler, let's define the anatomy of an app from a design perspective.</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Let's say that an app is made up of screens and pages.</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Each page has a user interface, made up of three types of UI elements: navigation, commanding, and content elements.</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Navigation elements</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Navigation elements help users choose the content they want to display.</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../controls-and-patterns/tabs-pivot.md)</data>
					<data id="id3">[</data>
					<data id="id4">](../controls-and-patterns/hyperlinks.md)</data>
					<data id="id5">[</data>
					<data id="id6">](../controls-and-patterns/nav-pane.md)</data>
				</originalData>
				<segment state="initial">
					<source>Examples of navigation elements include <pc dataRefEnd="id2" dataRefStart="id1" id="p1">tabs and pivots</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">hyperlinks</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">nav panes</pc>.</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](navigation-basics.md)</data>
				</originalData>
				<segment state="initial">
					<source>Navigation elements are covered in detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation design basics</pc> article.</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Command elements</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Command elements initiate actions, such as manipulating, saving, or sharing content.</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../controls-and-patterns/buttons.md)</data>
					<data id="id3">[</data>
					<data id="id4">](../controls-and-patterns/app-bars.md)</data>
				</originalData>
				<segment state="initial">
					<source>Examples of command elements include <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button</pc> and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">command bar</pc>.</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Command elements can also include keyboard shortcuts that aren't actually visible on the screen.</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](commanding-basics.md)</data>
				</originalData>
				<segment state="initial">
					<source>Command elements are covered in detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Command design basics</pc> article.</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Content elements</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Content elements display the app's content.</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>For a painting app, the content might be a drawing; for a news app, the content might be a news article.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](content-basics.md)</data>
				</originalData>
				<segment state="initial">
					<source>Content elements are covered in detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content design basics</pc> article.</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>At a minimum, an app has a splash screen and a home page that defines the user interface.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>A typical app will have multiple pages and screens, and navigation, command, and content elements might change from page to page.</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>When deciding on the right UI elements for your app, you might also consider the devices and the screen sizes your app will run on.</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Tailoring your app for specific devices and screen sizes.</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>UWP apps use effective pixels to guarantee that your design elements will be legible and usable on all Windows-powered devices.</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>So, why would you ever want to customize your app's UI for a specific device family?</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Note</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Before we go any further, Windows doesn't provide a way for your app to detect the specific device your app is running on.</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>It can tell you the device family (mobile, desktop, etc) the app is running on, the effective resolution, and the amount of screen space available to the app (the size of the app's window).</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>To make the most effective use of space and reduce the need to navigate</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>If you design an app to look good on a device that has a small screen, such as a phone, the app will be usable on a PC with a much bigger display, but there will probably be some wasted space.</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>You can customize the app to display more content when the screen is above a certain size.</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>For example, a shopping app might display one merchandise category at a time on a phone, but show multiple categories and products simultaneously on a PC or laptop.</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>By putting more content on the screen, you reduce the amount of navigation that the user needs to perform.</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>To take advantage of devices' capabilities</source>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Certain devices are more likely to have certain device capabilities.</source>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>For example, phones are likely to have a location sensor and a camera, while a PC might not have either.</source>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Your app can detect which capabilities are available and enable features that use them.</source>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>To optimize for input</source>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>The universal control library works with all input types (touch, pen, keyboard, mouse), but you can still optimize for certain input types by re-arranging your UI elements.</source>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>For example, if you place navigation elements at the bottom of the screen, they'll be easier for phone users to access—but most PC users expect to see navigation elements toward the top of the screen.</source>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Responsive design techniques</source>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>When you optimize your app's UI for specific screen widths, we say that you're creating a responsive design.</source>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Here are six responsive design techniques you can use to customize your app's UI.</source>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Reposition</source>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>You can alter the location and position of app UI elements to get the most out of each device.</source>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>In this example, the portrait view on phone or phablet necessitates a scrolling UI because only one full frame is visible at a time.</source>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>When the app translates to a device that allows two full on-screen frames, whether in portrait or landscape orientation, frame B can occupy a dedicated space.</source>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>If you're using a grid for positioning, you can stick to the same grid when UI elements are repositioned.</source>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>reposition</source>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>In this example design for a photo app, the photo app repositions its content on larger screens.</source>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>a design for an app that repositions content on larger screens</source>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Resize</source>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>You can optimize the frame size by adjusting the margins and size of UI elements.</source>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>This could allow you, as the example here shows, to augment the reading experience on a larger screen by simply growing the content frame.</source>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>resizing design elements</source>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Reflow</source>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>By changing the flow of UI elements based on device and orientation, your app can offer an optimal display of content.</source>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>For instance, when going to a larger screen, it might make sense to switch larger containers, add columns, and generate list items in a different way.</source>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>This example shows how a single column of vertically scrolling content on phone or phablet can be reflowed on a larger screen to display two columns of text.</source>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>reflowing design elements</source>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>Reveal</source>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>You can reveal UI based on screen real estate, or when the device supports additional functionality, specific situations, or preferred screen orientations.</source>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>In this example with tabs, the middle tab with the camera icon might be specific to the app on phone or phablet and not be applicable on larger devices, which is why it's revealed in the device on the right.</source>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Another common example of revealing or hiding UI applies to media player controls, where the button set is reduced on smaller devices and expanded on larger devices.</source>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>The media player on PC, for instance, can handle far more on-screen functionality than it can on a phone.</source>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>hiding design elements</source>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Part of the reveal-or-hide technique includes choosing when to display more metadata.</source>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>When real estate is at a premium, such as with a phone or phablet, it's best to show a minimal amount of metadata.</source>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>With a laptop or desktop PC, a significant amount of metadata can be surfaced.</source>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>Some examples of how to handle showing or hiding metadata include:</source>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>In an email app, you can display the user's avatar.</source>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>In a music app, you can display more info about an album or artist.</source>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>In a video app, you can display more info about a film or a show, such as showing cast and crew details.</source>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>In any app, you can break apart columns and reveal more details.</source>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>In any app, you can take something that's vertically stacked and lay it out horizontally.</source>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>When going from phone or phablet to larger devices, stacked list items can change to reveal rows of list items and columns of metadata.</source>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>Replace</source>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>This technique lets you switch the user interface for a specific device size-class or orientation.</source>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>In this example, the nav pane and its compact, transient UI works well for a smaller device, but on a larger device tabs might be a better choice.</source>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>replacing design elements</source>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Re-architect</source>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>You can collapse or fork the architecture of your app to better target specific devices.</source>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>In this example, going from the left device to the right device demonstrates the joining of pages.</source>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>an example of re-architecting a user interface</source>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>Here's an example of this technique applied to the design for a smart home app.</source>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>an example of a design that using the re-artchitect responsive design technique</source>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>What's a UWP app?</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>