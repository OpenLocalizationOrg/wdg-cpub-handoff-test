<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">c2d896b749895fbf0ad3664c74a068c9053c9f1a</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\xaml-theme-resources.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">08490738cb9e026be55c72060717f31254371060</mda:meta><mda:meta type="olxliffhash">49cfd88d104832d28516766e572cc73ddbdbd3c1</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Theme resources in XAML are a set of resources that apply different values depending on which system theme is active.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>XAML theme resources</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>XAML theme resources</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Theme resources in XAML are a set of resources that apply different values depending on which system theme is active.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>There are 3 themes that the XAML framework supports: "Light", "Dark", and "HighContrast".</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](resourcedictionary-and-xaml-resource-references.md)</data>
				</originalData>
				<segment state="initial">
					<source>This topic assumes that you have read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary and XAML resource references</pc>.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>How theme resources differ from static resources</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/staticresource-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>There are two XAML markup extensions that can reference a XAML resource from an existing XAML resource dictionary: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{ThemeResource} markup extension</pc>.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Evaluation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> occurs when the app loads and subsequently each time the theme changes at runtime.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This is typically the result of the user changing their device settings or from a programmatic change within the app that alters its current theme.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>In contrast, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> is evaluated only when the XAML is first loaded by the app.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>It does not update.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>It’s similar to a find and replace in your XAML with the actual runtime value at app launch.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Theme resources and where they fit in the resource dictionary structure</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Each theme resource is part of the XAML file themeresources.xaml.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>For design purposes, themeresources.xaml is available in the \\(Program Files)\\Windows Kits\\10\\DesignTime\\CommonConfiguration\\Neutral\\UAP\\<ph dataRef="id1" id="ph1" />SDK version<ph dataRef="id2" id="ph2" />\\Generic folder from a Windows Software Development Kit (SDK) installation.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The resource dictionaries in themeresources.xaml are also reproduced in generic.xaml in the same directory.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />The Windows Runtime doesn't use these physical files for runtime lookup.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>That's why they are specifically in a DesignTime folder, and they aren't copied into apps by default.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Instead, these resource dictionaries exist in memory as part of the Windows Runtime itself, and your app's XAML resource references to theme resources (or system resources) resolve there at runtime.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Guidelines for using theme resources</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Follow these guidelines when you define and consume your own custom theme resources.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>DO:</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Specify theme dictionaries for both "Light" and "Dark" in addition to your "HighContrast" dictionary.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Although you can create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> with "Default" as the key, it’s preferred to be explicit and instead use "Light", "Dark", and "HighContrast".</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in: Styles, Setters, Control templates, Property setters, and Animations.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>DO NOT:</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208807)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in your resource definitions inside your <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThemeDictionaries</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> instead.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208807)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>EXCEPTION: it is alright to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> to reference resources that are agnostic to the app theme in your <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ThemeDictionaries</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">`SystemAccentColor`</data>
					<data id="id2">`SystemColorButtonFaceColor`</data>
				</originalData>
				<segment state="initial">
					<source>Examples of these resources are accent color resources like <ph dataRef="id1" id="ph1" />, or system color resources, which are typically prefixed with "SystemColor" like <ph dataRef="id2" id="ph2" />.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  If you don’t follow these guidelines, you might see unexpected behavior related to themes in your app.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#troubleshooting_theme_resources)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting theme resources</pc> section.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The XAML color ramp and theme-dependent brushes</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>The combined set of colors for "Light", "Dark", and "HighContrast" themes make up the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows color ramp</pc> in XAML.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Whether you want to modify the system themes, or apply a system theme to your own XAML elements, it’s important to understand how the color resources are structured.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Light and Dark theme colors</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh673723)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The XAML framework provides a set of named <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color</pc></pc> resources with values that are tailored for the "Light" and "Dark" themes.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">`System[Simple Light/Dark Name]Color`</data>
				</originalData>
				<segment state="initial">
					<source>The keys you use to reference these follow the naming format: <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>This table lists the key, simple name, and string representation of the color (using the \#aarrggbb format) for the "Light" and "Dark" resources provided by the XAML framework.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>The key is used to reference the resource in an app.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The "Simple light/dark name" is used as part of the brush naming convention that we explain later.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Key</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Simple light/dark name</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Light</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Dark</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>SystemAltHighColor</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>AltHigh</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>SystemAltLowColor</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>AltLow</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>\#33FFFFFF</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>\#33000000</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>SystemAltMediumColor</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>AltMedium</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>\#99FFFFFF</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>\#99000000</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>SystemAltMediumHighColor</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>AltMediumHigh</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>\#CCFFFFFF</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>\#CC000000</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>SystemAltMediumLowColor</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>AltMediumLow</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>\#66FFFFFF</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>\#66000000</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>SystemBaseHighColor</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>BaseHigh</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>SystemBaseLowColor</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>BaseLow</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>\#33000000</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>\#33FFFFFF</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>SystemBaseMediumColor</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>BaseMedium</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>\#99000000</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>\#99FFFFFF</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>SystemBaseMediumHighColor</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>BaseMediumHigh</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>\#CC000000</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>\#CCFFFFFF</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>SystemBaseMediumLowColor</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>BaseMediumLow</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>\#66000000</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>\#66FFFFFF</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>SystemChromeAltLowColor</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>ChromeAltLow</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>\#FF171717</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>\#FFF2F2F2</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>SystemChromeBlackHighColor</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>ChromeBlackHigh</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>SystemChromeBlackLowColor</source>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>ChromeBlackLow</source>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>\#33000000</source>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>\#33000000</source>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>SystemChromeBlackMediumLowColor</source>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>ChromeBlackMediumLow</source>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>\#66000000</source>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>\#66000000</source>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>SystemChromeBlackMediumColor</source>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>ChromeBlackMedium</source>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>\#CC000000</source>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>\#CC000000</source>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>SystemChromeDisabledHighColor</source>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>ChromeDisabledHigh</source>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>\#FFCCCCCC</source>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>\#FF333333</source>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>SystemChromeDisabledLowColor</source>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>ChromeDisabledLow</source>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>\#FF7A7A7A</source>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>\#FF858585</source>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>SystemChromeHighColor</source>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>ChromeHigh</source>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>\#FFCCCCCC</source>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>\#FF767676</source>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>SystemChromeLowColor</source>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>ChromeLow</source>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>\#FFF2F2F2</source>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>\#FF171717</source>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>SystemChromeMediumColor</source>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>ChromeMedium</source>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>\#FFE6E6E6</source>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>\#FF1F1F1F</source>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>SystemChromeMediumLowColor</source>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>ChromeMediumLow</source>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>\#FFF2F2F2</source>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>\#FF2B2B2B</source>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>SystemChromeWhiteColor</source>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>ChromeWhite</source>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>SystemListLowColor</source>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>ListLow</source>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>\#19000000</source>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>\#19FFFFFF</source>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>SystemListMediumColor</source>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>ListMedium</source>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>\#33000000</source>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>\#33FFFFFF</source>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>Windows system high-contrast colors</source>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>In addition to the set of resources provided by the XAML framework, there's a set of color values derived from the Windows system palette.</source>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>These colors are not specific to the Windows Runtime or Universal Windows Platform (UWP) apps.</source>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br228076)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, many of the XAML <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Brush</pc></pc> resources consume these colors when the system is operating (and the app is running) using the "HighContrast" theme.</source>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>The XAML framework provides these system-wide colors as keyed resources.</source>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<originalData>
					<data id="id1">`SystemColor[name]Color`</data>
				</originalData>
				<segment state="initial">
					<source>The keys follow the naming format: <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>This table lists the system-wide colors that XAML provides as resource objects derived from the Windows system palette.</source>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>The "Ease of Access name" column shows how color is labeled in the Windows settings UI.</source>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>The "Simple HighContrast name" column is a one word description of how the color is applied across the XAML common controls.</source>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>It's used as part of the brush naming convention that we explain later.</source>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>The "Initial default" column shows the values you'd get if the system is not running in high contrast at all.</source>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>Key</source>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>Ease of Access name</source>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>Simple HighContrast name</source>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>Initial default</source>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>SystemColorButtonFaceColor</source>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button Text</pc> (background)</source>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>Background</source>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>\#FFF0F0F0</source>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>SystemColorButtonTextColor</source>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button Text</pc> (foreground)</source>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>Foreground</source>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>SystemColorGrayTextColor</source>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>Disabled Text</source>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>\#FF6D6D6D</source>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>SystemColorHighlightColor</source>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Selected Text</pc> (background)</source>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>Highlight</source>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>\#FF3399FF</source>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>SystemColorHighlightTextColor</source>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Selected Text</pc> (foreground)</source>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>HighlightAlt</source>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>SystemColorHotlightColor</source>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>Hyperlinks</source>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>Hyperlink</source>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>\#FF0066CC</source>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>SystemColorWindowColor</source>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<segment state="initial">
					<source>Background</source>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<segment state="initial">
					<source>PageBackground</source>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>SystemColorWindowTextColor</source>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>Text</source>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<segment state="initial">
					<source>PageText</source>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>Windows provides different high-contrast themes, and enables the user to set the specific colors to for their high-contrast settings through the Ease of Access Center, as shown here.</source>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>Therefore, it's not possible to provide a definitive list of high-contrast color values.</source>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<segment state="initial">
					<source>The Windows high contrast settings UI</source>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt244346)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about supporting high-contrast themes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">High-contrast themes</pc>.</source>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<segment state="initial">
					<source>System accent color</source>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<originalData>
					<data id="id1">`SystemAccentColor`</data>
				</originalData>
				<segment state="initial">
					<source>In addition to the system high-contrast theme colors, the system accent color is provided as a special color resource using the key <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>At runtime, this resource gets the color that the user has specified as the accent color in the Windows personalization settings.</source>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />It’s possible to override the system color resources for high-contrast color and accent color by creating resources with the same names, but it’s a best practice to respect the user’s color choices, especially for high-contrast settings.</source>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<segment state="initial">
					<source>Theme-dependent brushes</source>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242963)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242962)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The color resources shown in the preceding sections are used to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color</pc></pc> property of <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SolidColorBrush</pc></pc> resources in the system theme resource dictionaries.</source>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>You use the brush resources to apply the color to XAML elements.</source>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<originalData>
					<data id="id1">`SystemControl[Simple HighContrast name][Simple light/dark name]Brush`</data>
				</originalData>
				<segment state="initial">
					<source>The keys for the brush resources follow the naming format: <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<originalData>
					<data id="id1">`SystemControlBackroundAltHighBrush`</data>
				</originalData>
				<segment state="initial">
					<source>For example, <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>Let’s look at how the color value for this brush is determined at run-time.</source>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>In the "Light" and "Dark" resource dictionaries, this brush is defined like this:</source>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<segment state="initial">
					<source>In the "HighContrast" resource dictionary, this brush is defined like this:</source>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<segment state="initial">
					<source>When this brush is applied to a XAML element, its color is determined at run-time by the current theme, as shown in this table.</source>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<segment state="initial">
					<source>Theme</source>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>Color simple name</source>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>Color resource</source>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<segment state="initial">
					<source>Runtime value</source>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Light</source>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<segment state="initial">
					<source>AltHigh</source>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<segment state="initial">
					<source>SystemAltHighColor</source>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<segment state="initial">
					<source>\#FFFFFFFF</source>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<segment state="initial">
					<source>Dark</source>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<segment state="initial">
					<source>AltHigh</source>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<segment state="initial">
					<source>SystemAltHighColor</source>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<segment state="initial">
					<source>\#FF000000</source>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>HighContrast</source>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<segment state="initial">
					<source>Background</source>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>SystemColorButtonFaceColor</source>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<segment state="initial">
					<source>The color specified in settings for the button background.</source>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<originalData>
					<data id="id1">`SystemControl[Simple HighContrast name][Simple light/dark name]Brush`</data>
				</originalData>
				<segment state="initial">
					<source>You can use the <ph dataRef="id1" id="ph1" /> naming scheme to determine which brush to apply to your own XAML elements.</source>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">*</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Not every combination of \[<pc dataRefEnd="id5" dataRefStart="id4" id="p2">Simple HighContrast name</pc>\]\[<pc dataRefEnd="id7" dataRefStart="id6" id="p3">Simple light/dark name</pc>\] is provided as a brush resource.</source>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<segment state="initial">
					<source>The XAML type ramp</source>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br227565)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The themeresources.xaml file defines several resources that define a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> that you can apply to text containers in your UI, specifically for either <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">RichTextBlock</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<segment state="initial">
					<source>These are not the default implicit styles.</source>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh700394)</data>
				</originalData>
				<segment state="initial">
					<source>They are provided to make it easier for you to create XAML UI definitions that match the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows type ramp</pc> documented in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Guidelines for fonts</pc>.</source>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<segment state="initial">
					<source>These styles are for text attributes that you want applied to the whole text container.</source>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209959)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209668)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br244503)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br244347)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want styles applied just to sections of the text, set attributes on the text elements within the container, such as on a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc></pc> in <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock.Inlines</pc></pc> or on a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Paragraph</pc></pc> in <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">RichTextBlock.Blocks</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The styles look like this when applied to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc>:</source>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>text block styles</source>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<segment state="initial">
					<source>BaseTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="337" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock</pc></pc></source>
				</segment>
			</unit>
			<unit id="338" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Supplies the common properties for all the other <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> container styles.</source>
				</segment>
			</unit>
			<unit id="339" translate="yes">
				<segment state="initial">
					<source>HeaderTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="340" translate="yes">
				<segment state="initial">
					<source>SubheaderTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="341" translate="yes">
				<segment state="initial">
					<source>TitleTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="342" translate="yes">
				<segment state="initial">
					<source>SubtitleTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="343" translate="yes">
				<segment state="initial">
					<source>BodyTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="344" translate="yes">
				<segment state="initial">
					<source>CaptionTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="345" translate="yes">
				<segment state="initial">
					<source>BaseRichTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="346" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br227565)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">RichTextBlock</pc></pc></source>
				</segment>
			</unit>
			<unit id="347" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227565)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Supplies the common properties for all the other <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RichTextBlock</pc></pc> container styles.</source>
				</segment>
			</unit>
			<unit id="348" translate="yes">
				<segment state="initial">
					<source>BodyRichTextBlockStyle</source>
				</segment>
			</unit>
			<unit id="349" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/br227565)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">[</data>
					<data id="id9">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />  The <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">RichTextBlock</pc></pc> styles don't have all the text ramp styles that <pc dataRefEnd="id9" dataRefStart="id8" id="p4"><pc dataRefEnd="id11" dataRefStart="id10" id="p5">TextBlock</pc></pc> does, mainly because the block-based document object model for <pc dataRefEnd="id13" dataRefStart="id12" id="p6">RichTextBlock</pc> makes it easier to set attributes on the individual text elements.</source>
				</segment>
			</unit>
			<unit id="350" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209676)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Also, setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock.Text</pc></pc> using the XAML content property introduces a situation where there is no text element to style and thus you'd have to style the container.</source>
				</segment>
			</unit>
			<unit id="351" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br244503)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>That isn't an issue for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RichTextBlock</pc> because its text content always has to be in specific text elements like <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Paragraph</pc></pc>, which is where you might apply XAML styles for page header, page subheader and similar text ramp definitions.</source>
				</segment>
			</unit>
			<unit id="352" translate="yes">
				<segment state="initial">
					<source>Miscellaneous Named styles</source>
				</segment>
			</unit>
			<unit id="353" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>There's an additional set of keyed <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> definitions you can apply to style a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> differently than its default implicit style.</source>
				</segment>
			</unit>
			<unit id="354" translate="yes">
				<segment state="initial">
					<source>TextBlockButtonStyle</source>
				</segment>
			</unit>
			<unit id="355" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br227736)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ButtonBase</pc></pc></source>
				</segment>
			</unit>
			<unit id="356" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Apply this style to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> when you need to show text that a user can click to take action.</source>
				</segment>
			</unit>
			<unit id="357" translate="yes">
				<segment state="initial">
					<source>The text is styled using the current accent color to distinguish it as interactive and has focus rectangles that work well for text.</source>
				</segment>
			</unit>
			<unit id="358" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242739)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Unlike the implicit style of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HyperlinkButton</pc></pc>, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlockButtonStyle</pc> does not underline the text.</source>
				</segment>
			</unit>
			<unit id="359" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The template also styles the presented text to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemControlHyperlinkBaseMediumBrush</pc> (for "PointerOver" state), <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemControlHighlightBaseMediumLowBrush</pc> (for "Pressed" state) and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SystemControlDisabledBaseLowBrush</pc> (for "Disabled" state).</source>
				</segment>
			</unit>
			<unit id="360" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlockButtonStyle</pc> resource applied to it.</source>
				</segment>
			</unit>
			<unit id="361" translate="yes">
				<segment state="initial">
					<source>It looks like this:</source>
				</segment>
			</unit>
			<unit id="362" translate="yes">
				<segment state="initial">
					<source>A button styled to look like text</source>
				</segment>
			</unit>
			<unit id="363" translate="yes">
				<segment state="initial">
					<source>NavigationBackButtonNormalStyle</source>
				</segment>
			</unit>
			<unit id="364" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Button</pc></pc></source>
				</segment>
			</unit>
			<unit id="365" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> provides a complete template for a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> that can be the navigation back button for a navigation app.</source>
				</segment>
			</unit>
			<unit id="366" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn252842)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It includes theme resource references that make this button use the Segoe MDL2 Assets symbol font, so you should use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Symbol</pc></pc> value as the content rather than text.</source>
				</segment>
			</unit>
			<unit id="367" translate="yes">
				<segment state="initial">
					<source>The default dimensions are 40 x 40 pixels.</source>
				</segment>
			</unit>
			<unit id="368" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209406)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/br208852)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>To tailor the styling you can either explicitly set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">FontSize</pc></pc>, and other properties on your <pc dataRefEnd="id14" dataRefStart="id13" id="p7">Button</pc> or create a derived style using <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">BasedOn</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="369" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">NavigationBackButtonNormalStyle</pc> resource applied to it.</source>
				</segment>
			</unit>
			<unit id="370" translate="yes">
				<segment state="initial">
					<source>It looks like this:</source>
				</segment>
			</unit>
			<unit id="371" translate="yes">
				<segment state="initial">
					<source>A button styled as a back button</source>
				</segment>
			</unit>
			<unit id="372" translate="yes">
				<segment state="initial">
					<source>NavigationBackButtonSmallStyle</source>
				</segment>
			</unit>
			<unit id="373" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TargetType</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Button</pc></pc></source>
				</segment>
			</unit>
			<unit id="374" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208849)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> provides a complete template for a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> that can be the navigation back button for a navigation app.</source>
				</segment>
			</unit>
			<unit id="375" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It's similar to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NavigationBackButtonNormalStyle</pc>, but its dimensions are 30 by 30 pixels.</source>
				</segment>
			</unit>
			<unit id="376" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> with the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">NavigationBackButtonSmallStyle</pc> resource applied to it.</source>
				</segment>
			</unit>
			<unit id="377" translate="yes">
				<segment state="initial">
					<source>Troubleshooting theme resources</source>
				</segment>
			</unit>
			<unit id="378" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#guidelines_for_using_theme_resources)</data>
				</originalData>
				<segment state="initial">
					<source>If you don’t follow the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">guidelines for using theme resources</pc>, you might see unexpected behavior related to themes in your app.</source>
				</segment>
			</unit>
			<unit id="379" translate="yes">
				<segment state="initial">
					<source>For example, when you open a light-themed flyout, parts of your dark-themed app also change as if they were in the light theme.</source>
				</segment>
			</unit>
			<unit id="380" translate="yes">
				<segment state="initial">
					<source>Or if you navigate to a light-themed page and then navigate back, the original dark-themed page (or parts of it) now looks as though it is in the light theme.</source>
				</segment>
			</unit>
			<unit id="381" translate="yes">
				<segment state="initial">
					<source>Typically, these types of issues occur when you provide a "Default" theme and a "HighContrast" theme to support high-contrast scenarios, and then use both "Light" and "Dark" themes in different parts of your app.</source>
				</segment>
			</unit>
			<unit id="382" translate="yes">
				<segment state="initial">
					<source>For example, consider this theme dictionary definition:</source>
				</segment>
			</unit>
			<unit id="383" translate="yes">
				<segment state="initial">
					<source>Intuitively, this looks correct.</source>
				</segment>
			</unit>
			<unit id="384" translate="yes">
				<originalData>
					<data id="id1">`myBrush`</data>
					<data id="id2">[</data>
					<data id="id3">](../xaml-platform/themeresource-markup-extension.md)</data>
					<data id="id4">`myBrush`</data>
				</originalData>
				<segment state="initial">
					<source>You want to change the color pointed to by <ph dataRef="id1" id="ph1" /> when in high-contrast, but when not in high-contrast, you rely on the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">{ThemeResource} markup extension</pc> to make sure that <ph dataRef="id4" id="ph2" /> points to the right color for your theme.</source>
				</segment>
			</unit>
			<unit id="385" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn298515)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If your app never has <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.RequestedTheme</pc></pc> set on elements within its visual tree, this will typically work as expected.</source>
				</segment>
			</unit>
			<unit id="386" translate="yes">
				<segment state="initial">
					<source>However, you run into problems in your app as soon as you start to re-theme different parts of your visual tree.</source>
				</segment>
			</unit>
			<unit id="387" translate="yes">
				<segment state="initial">
					<source>The problem occurs because brushes are shared resources, unlike most other XAML types.</source>
				</segment>
			</unit>
			<unit id="388" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you have 2 elements in XAML sub-trees with different themes that reference the same brush resource, then as the framework walks each sub-tree to update its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> expressions, changes to the shared brush resource are reflected in the other sub-tree, which is not your intended result.</source>
				</segment>
			</unit>
			<unit id="389" translate="yes">
				<segment state="initial">
					<source>To fix this, replace the "Default" dictionary with separate theme dictionaries for both "Light" and "Dark" themes in addition to "HighContrast":</source>
				</segment>
			</unit>
			<unit id="390" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209414)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, problems still occur if any of these resources are referenced in inherited properties like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Foreground</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="391" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Your custom control template might specify the foreground color of an element using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc>, but when the framework propagates the inherited value to child elements, it provides a direct reference to the resource that was resolved by the {ThemeResource} markup extension expression.</source>
				</segment>
			</unit>
			<unit id="392" translate="yes">
				<segment state="initial">
					<source>This causes problems when the framework processes theme changes as it walks your control's visual tree.</source>
				</segment>
			</unit>
			<unit id="393" translate="yes">
				<segment state="initial">
					<source>It re-evaluates the {ThemeResource} markup extension expression to get a new brush resource but doesn’t yet propagate this reference down to the children of your control; this happens later, such as during the next measure pass.</source>
				</segment>
			</unit>
			<unit id="394" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>As a result, after walking the control visual tree in response to a theme change, the framework walks the children and updates any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> expressions set on them, or on objects set on their properties.</source>
				</segment>
			</unit>
			<unit id="395" translate="yes">
				<segment state="initial">
					<source>This is where the problem occurs; the framework walks the brush resource and because it specifies its color using a {ThemeResource} markup extension, it's re-evaluated.</source>
				</segment>
			</unit>
			<unit id="396" translate="yes">
				<segment state="initial">
					<source>At this point, the framework appears to have polluted your theme dictionary because it now has a resource from one dictionary that has its color set from another dictionary.</source>
				</segment>
			</unit>
			<unit id="397" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/staticresource-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](../xaml-platform/themeresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>To fix this problem, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{StaticResource} markup extension</pc> instead of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{ThemeResource} markup extension</pc>.</source>
				</segment>
			</unit>
			<unit id="398" translate="yes">
				<segment state="initial">
					<source>With the guidelines applied, the theme dictionaries look like this:</source>
				</segment>
			</unit>
			<unit id="399" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/themeresource-markup-extension.md)</data>
					<data id="id3">[</data>
					<data id="id4">](../xaml-platform/staticresource-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>Notice that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> is still used in the "HighContrast" dictionary instead of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{StaticResource} markup extension</pc>.</source>
				</segment>
			</unit>
			<unit id="400" translate="yes">
				<segment state="initial">
					<source>This situation falls under the exception given earlier in the guidelines.</source>
				</segment>
			</unit>
			<unit id="401" translate="yes">
				<segment state="initial">
					<source>Most of the brush values that are used for the "HighContrast" theme are using color choices that are globally controlled by the system, but exposed to XAML as a specially-named resource (those prefixed with ‘SystemColor’ in the name).</source>
				</segment>
			</unit>
			<unit id="402" translate="yes">
				<segment state="initial">
					<source>The system enables the user to set the specific colors that should be used for their high contrast settings through the Ease of Access Center.</source>
				</segment>
			</unit>
			<unit id="403" translate="yes">
				<segment state="initial">
					<source>Those color choices are applied to the specially-named resources.</source>
				</segment>
			</unit>
			<unit id="404" translate="yes">
				<segment state="initial">
					<source>The XAML framework uses the same theme changed event to also update these brushes when it detects they’ve changed at the system level.</source>
				</segment>
			</unit>
			<unit id="405" translate="yes">
				<segment state="initial">
					<source>This is why the {ThemeResource} markup extension is used here.</source>
				</segment>
			</unit>
			<unit id="406" translate="yes">
				<segment state="initial">
					<source>Note</source>
				</segment>
			</unit>
			<unit id="407" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
				</segment>
			</unit>
			<unit id="408" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>