<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">8638da16ff2e8b52f8998b06b8a1f996201556d3</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\launch-resume\how-to-create-and-consume-an-app-service.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">fdf68f4395c866a2c240d804a5e3ad779fb40c1a</mda:meta><mda:meta type="olxliffhash">00cf01038ac4c726269113afb7a3486f8487c317</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Create and consume an app service</source>
					<target>Create and consume an app service</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</source>
					<target>Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Create and consume an app service</source>
					<target>Create and consume an app service</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</source>
					<target>Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Create a new app service provider project</source>
					<target>Create a new app service provider project</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>In this how-to, we'll create everything in one solution for simplicity.</source>
					<target>In this how-to, we'll create everything in one solution for simplicity.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider.</source>
					<target>In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;gt;</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">&amp;gt;</data>
					<data id="id8">&amp;gt;</data>
					<data id="id9">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Templates <ph dataRef="id5" id="ph1" /> Other Languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Blank app (Windows Universal)</pc>).</source>
					<target>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Templates <ph dataRef="id5" id="ph1" /> Other Languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Blank app (Windows Universal)</pc>).</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>This will be the app that provides the app service.</source>
					<target>This will be the app that provides the app service.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Add an app service extension to package.appxmanifest</source>
					<target>Add an app service extension to package.appxmanifest</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Application<ph dataRef="id4" id="ph2" /></pc> element.</source>
					<target>In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Application<ph dataRef="id4" id="ph2" /></pc> element.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">`com.Microsoft.Inventory`</data>
				</originalData>
				<segment state="initial">
					<source>This example advertises the <ph dataRef="id1" id="ph1" /> service and is what identifies this app as an app service provider.</source>
					<target>This example advertises the <ph dataRef="id1" id="ph1" /> service and is what identifies this app as an app service provider.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The actual service will be implemented as a background task.</source>
					<target>The actual service will be implemented as a background task.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>The app service app exposes the service to other apps.</source>
					<target>The app service app exposes the service to other apps.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>We recommend using a reverse domain name style for the service name.</source>
					<target>We recommend using a reverse domain name style for the service name.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Category</pc> attribute identifies this application as an app service provider.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Category</pc> attribute identifies this application as an app service provider.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EntryPoint</pc> attribute identifies the class that implements the service, which we'll implement next.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EntryPoint</pc> attribute identifies the class that implements the service, which we'll implement next.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Create the app service</source>
					<target>Create the app service</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>An app service is implemented as a background task.</source>
					<target>An app service is implemented as a background task.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes.</source>
					<target>This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Add a new Windows Runtime Component project to the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> Add <ph dataRef="id4" id="ph2" /> New Project</pc>) named MyAppService.</source>
					<target>Add a new Windows Runtime Component project to the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> Add <ph dataRef="id4" id="ph2" /> New Project</pc>) named MyAppService.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;gt;</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">&amp;gt;</data>
					<data id="id8">&amp;gt;</data>
					<data id="id9">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add New Project</pc> dialog box, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed <ph dataRef="id5" id="ph1" /> Other Languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Windows Runtime Component (Windows Universal)</pc></source>
					<target>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add New Project</pc> dialog box, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed <ph dataRef="id5" id="ph1" /> Other Languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Windows Runtime Component (Windows Universal)</pc></target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>In the AppServiceProvider project, add a reference to the MyAppService project.</source>
					<target>In the AppServiceProvider project, add a reference to the MyAppService project.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MyappService project, add the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements to the top of Class1.cs:</source>
					<target>In the MyappService project, add the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements to the top of Class1.cs:</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Replace the stub code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Class1</pc> with a new background task class named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Inventory</pc>:</source>
					<target>Replace the stub code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Class1</pc> with a new background task class named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Inventory</pc>:</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>This class is where the app service will do its work.</source>
					<target>This class is where the app service will do its work.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run()</pc> is called when the background task is created.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run()</pc> is called when the background task is created.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Because background tasks are terminated after <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> completes, the code takes a deferral so that the background task will stay up to serve requests.</source>
					<target>Because background tasks are terminated after <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> completes, the code takes a deferral so that the background task will stay up to serve requests.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnTaskCanceled()</pc> is called when the task is canceled.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnTaskCanceled()</pc> is called when the task is canceled.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The task is cancelled when the client app disposes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceConnection</pc></pc>, the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.</source>
					<target>The task is cancelled when the client app disposes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceConnection</pc></pc>, the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Write the code for the app service</source>
					<target>Write the code for the app service</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> is where the code for the app service goes.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> is where the code for the app service goes.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Replace the stub <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> in MyAppService's Class1.cs with the code from this example.</source>
					<target>Replace the stub <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> in MyAppService's Class1.cs with the code from this example.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item.</source>
					<target>This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Error handling code has been removed for brevity.</source>
					<target>Error handling code has been removed for brevity.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn921722)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> because we make an awaitable method call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendResponseAsync</pc></pc> in this example.</source>
					<target>Note that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnRequestedReceived()</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">async</pc> because we make an awaitable method call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendResponseAsync</pc></pc> in this example.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A deferral is taken so that the service can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> methods in the OnRequestReceived handler.</source>
					<target>A deferral is taken so that the service can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> methods in the OnRequestReceived handler.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>It ensures that the call to OnRequestReceived does not complete until it is done processing the message.</source>
					<target>It ensures that the call to OnRequestReceived does not complete until it is done processing the message.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921722)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendResponseAsync</pc></pc> is used to send a response alongside the completion.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendResponseAsync</pc></pc> is used to send a response alongside the completion.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SendResponseAsync</pc> does not signal the completion of the call.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SendResponseAsync</pc> does not signal the completion of the call.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921712)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It is the completion of the deferral that signals to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageAsync</pc></pc> that OnRequestReceived has completed.</source>
					<target>It is the completion of the deferral that signals to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageAsync</pc></pc> that OnRequestReceived has completed.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>App services use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> to exchange information.</source>
					<target>App services use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> to exchange information.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The size of the data you may pass is only limited by system resources.</source>
					<target>The size of the data you may pass is only limited by system resources.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>There are no predefined keys for you to use in your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc>.</source>
					<target>There are no predefined keys for you to use in your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>You must determine which key values you will use to define the protocol for your app service.</source>
					<target>You must determine which key values you will use to define the protocol for your app service.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>The caller must be written with that protocol in mind.</source>
					<target>The caller must be written with that protocol in mind.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>In this example, we have chosen a key named "Command" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price.</source>
					<target>In this example, we have chosen a key named "Command" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>The index of the inventory name is stored under the "ID" key.</source>
					<target>The index of the inventory name is stored under the "ID" key.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The return value is stored under the "Result" key.</source>
					<target>The return value is stored under the "Result" key.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921703)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceClosedStatus</pc></pc> enum is returned to the caller to indicate whether the call to the app service succeeded or failed.</source>
					<target>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceClosedStatus</pc></pc> enum is returned to the caller to indicate whether the call to the app service succeeded or failed.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth.</source>
					<target>An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can return additional error information via the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc>.</source>
					<target>You can return additional error information via the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>In this example, we use a key named "Status" to return more detailed error information to the caller.</source>
					<target>In this example, we use a key named "Status" to return more detailed error information to the caller.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921722)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendResponseAsync</pc></pc> returns the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> to the caller.</source>
					<target>The call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendResponseAsync</pc></pc> returns the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> to the caller.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Deploy the service app and get the package family name</source>
					<target>Deploy the service app and get the package family name</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>The app service provider app must be deployed before you can call it from a client.</source>
					<target>The app service provider app must be deployed before you can call it from a client.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>You will also need the package family name of the app service app in order to call it.</source>
					<target>You will also need the package family name of the app service app in order to call it.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224670)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">`public App()`</data>
				</originalData>
				<segment state="initial">
					<source>One way to get the package family name of the app service application is to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.ApplicationModel.Package.Current.Id.FamilyName</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AppServiceProvider</pc> project (for example, from <ph dataRef="id7" id="ph1" /> in App.xaml.cs) and note the result.</source>
					<target>One way to get the package family name of the app service application is to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.ApplicationModel.Package.Current.Id.FamilyName</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AppServiceProvider</pc> project (for example, from <ph dataRef="id7" id="ph1" /> in App.xaml.cs) and note the result.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.</source>
					<target>To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Another way to get the package family name is to deploy the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build <ph dataRef="id3" id="ph1" /> Deploy solution</pc>) and note the full package name in the output window (<pc dataRefEnd="id5" dataRefStart="id4" id="p2">View <ph dataRef="id6" id="ph2" /> Output</pc>).</source>
					<target>Another way to get the package family name is to deploy the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build <ph dataRef="id3" id="ph1" /> Deploy solution</pc>) and note the full package name in the output window (<pc dataRefEnd="id5" dataRefStart="id4" id="p2">View <ph dataRef="id6" id="ph2" /> Output</pc>).</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>You must remove the platform information from the string in the output window to derive the package name.</source>
					<target>You must remove the platform information from the string in the output window to derive the package name.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>For example, if the full package name reported in the output window was "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_1.0.0.0\_x86\_\_yd7nk54bq29ra", you would extract "1.0.0.0\_x86\_\_" leaving "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_yd7nk54bq29ra" as the package family name.</source>
					<target>For example, if the full package name reported in the output window was "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_1.0.0.0\_x86\_\_yd7nk54bq29ra", you would extract "1.0.0.0\_x86\_\_" leaving "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_yd7nk54bq29ra" as the package family name.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Write a client to call the app service</source>
					<target>Write a client to call the app service</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Add a new blank Windows Universal app project to the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> Add <ph dataRef="id4" id="ph2" /> New Project</pc>) named ClientApp.</source>
					<target>Add a new blank Windows Universal app project to the solution (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">File <ph dataRef="id3" id="ph1" /> Add <ph dataRef="id4" id="ph2" /> New Project</pc>) named ClientApp.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;gt;</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">&amp;gt;</data>
					<data id="id8">&amp;gt;</data>
					<data id="id9">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add New Project</pc> dialog box, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed <ph dataRef="id5" id="ph1" /> Other languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Blank App (Windows Universal)</pc>).</source>
					<target>(In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add New Project</pc> dialog box, choose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Installed <ph dataRef="id5" id="ph1" /> Other languages <ph dataRef="id6" id="ph2" /> Visual C# <ph dataRef="id7" id="ph3" /> Windows <ph dataRef="id8" id="ph4" /> Windows Universal <ph dataRef="id9" id="ph5" /> Blank App (Windows Universal)</pc>).</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the ClientApp project, add the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement to the top of MainPage.xaml.cs:</source>
					<target>In the ClientApp project, add the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement to the top of MainPage.xaml.cs:</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Add a text box and a button to MainPage.xaml.</source>
					<target>Add a text box and a button to MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a button click handler for the button and add the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> to the button handler's signature.</source>
					<target>Add a button click handler for the button and add the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> to the button handler's signature.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Replace the stub of your button click handler with the following code.</source>
					<target>Replace the stub of your button click handler with the following code.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">`inventoryService`</data>
				</originalData>
				<segment state="initial">
					<source>Be sure to include the <ph dataRef="id1" id="ph1" /> field declaration.</source>
					<target>Be sure to include the <ph dataRef="id1" id="ph1" /> field declaration.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">`this.inventoryService.PackageFamilyName = "replace with the package family name";`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>Replace the package family name in the line <ph dataRef="id1" id="ph1" /> with the package family name of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">AppServiceProvider</pc> project that you obtained in \[Step 5: Deploy the service app and get the package family name\].</source>
					<target>Replace the package family name in the line <ph dataRef="id1" id="ph1" /> with the package family name of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">AppServiceProvider</pc> project that you obtained in \[Step 5: Deploy the service app and get the package family name\].</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>The code first establishes a connection with the app service.</source>
					<target>The code first establishes a connection with the app service.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The connection will remain open until you dispose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this.inventoryService</pc>.</source>
					<target>The connection will remain open until you dispose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this.inventoryService</pc>.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app service name must match the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppService Name</pc> attribute that you added to the AppServiceProvider project's Package.appxmanifest file.</source>
					<target>The app service name must match the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AppService Name</pc> attribute that you added to the AppServiceProvider project's Package.appxmanifest file.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">`&lt;uap:AppService Name="com.microsoft.inventory"/&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>In this example, it is <ph dataRef="id1" id="ph1" />.</source>
					<target>In this example, it is <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> named <pc dataRefEnd="id6" dataRefStart="id5" id="p3">message</pc> is created to specify the command that we want to send to the app service.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> named <pc dataRefEnd="id6" dataRefStart="id5" id="p3">message</pc> is created to specify the command that we want to send to the app service.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The example app service expects a command to indicate which of two actions to take.</source>
					<target>The example app service expects a command to indicate which of two actions to take.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>We get the index from the textbox in the ClientApp, and then call the service with the "Item" command to get the description of the item.</source>
					<target>We get the index from the textbox in the ClientApp, and then call the service with the "Item" command to get the description of the item.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Then, we make the call with the "Price" command to get the item's price.</source>
					<target>Then, we make the call with the "Price" command to get the item's price.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>The button text is set to the result.</source>
					<target>The button text is set to the result.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921724)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceResponseStatus</pc></pc> only indicates whether the operating system was able to connect the call to the app service, we check the "Status" key in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> we receive from the app service to ensure that it was able to fulfill the request.</source>
					<target>Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppServiceResponseStatus</pc></pc> only indicates whether the operating system was able to connect the call to the app service, we check the "Status" key in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> we receive from the app service to ensure that it was able to fulfill the request.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>In Visual Studio, set the ClientApp project to be the startup project in the Solution Explorer window and run the solution.</source>
					<target>In Visual Studio, set the ClientApp project to be the startup project in the Solution Explorer window and run the solution.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Enter the number 1 into the text box and click the button.</source>
					<target>Enter the number 1 into the text box and click the button.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>You should get "Chair : Price = 88.99" back from the service.</source>
					<target>You should get "Chair : Price = 88.99" back from the service.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>sample app displaying chair price=88.99</source>
					<target>sample app displaying chair price=88.99</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>If the app service call fails, check the following in the ClientApp:</source>
					<target>If the app service call fails, check the following in the ClientApp:</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Verify that the package family name assigned to the inventory service connection matches the package family name of the AppServiceProvider app.</source>
					<target>Verify that the package family name assigned to the inventory service connection matches the package family name of the AppServiceProvider app.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`this.inventoryService.PackageFamilyName = "...";`</data>
				</originalData>
				<segment state="initial">
					<source>See: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc><ph dataRef="id3" id="ph1" />).</source>
					<target>See: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc><ph dataRef="id3" id="ph1" />).</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc>, verify that the app service name that is assigned to the inventory service connection matches the app service name in the AppServiceProvider's Package.appxmanifest file.</source>
					<target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc>, verify that the app service name that is assigned to the inventory service connection matches the app service name in the AppServiceProvider's Package.appxmanifest file.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">`this.inventoryService.AppServiceName = "com.microsoft.inventory";`</data>
				</originalData>
				<segment state="initial">
					<source>See: <ph dataRef="id1" id="ph1" />.</source>
					<target>See: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Ensure that the AppServiceProvider app has been deployed (In the Solution Explorer, right-click the solution and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy</pc>).</source>
					<target>Ensure that the AppServiceProvider app has been deployed (In the Solution Explorer, right-click the solution and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy</pc>).</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Debug the app service</source>
					<target>Debug the app service</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Ensure that the entire solution is deployed before debugging because the app service provider app must be deployed before the service can be called.</source>
					<target>Ensure that the entire solution is deployed before debugging because the app service provider app must be deployed before the service can be called.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(In Visual Studio, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build <ph dataRef="id3" id="ph1" /> Deploy Solution</pc>).</source>
					<target>(In Visual Studio, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build <ph dataRef="id3" id="ph1" /> Deploy Solution</pc>).</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Solution Explorer, right-click the AppServiceProvider project and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</source>
					<target>In the Solution Explorer, right-click the AppServiceProvider project and choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> tab, change the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start action</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Do not launch, but debug my code when it starts</pc>.</source>
					<target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> tab, change the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start action</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Do not launch, but debug my code when it starts</pc>.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>In the MyAppService project, in the Class1.cs file, set a breakpoint in OnRequestReceived().</source>
					<target>In the MyAppService project, in the Class1.cs file, set a breakpoint in OnRequestReceived().</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Set the AppServiceProvider project to be the startup project and press F5.</source>
					<target>Set the AppServiceProvider project to be the startup project and press F5.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Start ClientApp from the Start menu (not from Visual Studio).</source>
					<target>Start ClientApp from the Start menu (not from Visual Studio).</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Enter the number 1 into the text box and press the button.</source>
					<target>Enter the number 1 into the text box and press the button.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>The debugger will stop in the app service call on the breakpoint in your app service.</source>
					<target>The debugger will stop in the app service call on the breakpoint in your app service.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Debug the client</source>
					<target>Debug the client</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Follow the instructions in the preceding step to debug the app service.</source>
					<target>Follow the instructions in the preceding step to debug the app service.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Launch ClientApp from the Start menu.</source>
					<target>Launch ClientApp from the Start menu.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Attach the debugger to the ClientApp.exe process (not the ApplicationFrameHost.exe process).</source>
					<target>Attach the debugger to the ClientApp.exe process (not the ApplicationFrameHost.exe process).</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>(In Visual Studio, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug <ph dataRef="id3" id="ph1" /> Attach to Process...</pc>.)</source>
					<target>(In Visual Studio, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug <ph dataRef="id3" id="ph1" /> Attach to Process...</pc>.)</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the ClientApp project, set a breakpoint in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc>.</source>
					<target>In the ClientApp project, set a breakpoint in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button\_Click()</pc>.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>The breakpoints in both the client and the app service will now be hit when you enter the number 1 into the text box of the ClientApp and click the button.</source>
					<target>The breakpoints in both the client and the app service will now be hit when you enter the number 1 into the text box of the ClientApp and click the button.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>This example provides a simple introduction to creating an app service and calling it from another app.</source>
					<target>This example provides a simple introduction to creating an app service and calling it from another app.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn921704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The key things to note are the creation of a background task to host the app service, the addition of the windows.appservice extension to the app service provider app's Package.appxmanifest file, obtaining the package family name of the app service provider app so that we can connect to it from the client app, and using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.ApplicationModel.AppService.AppServiceConnection</pc></pc> to call the service.</source>
					<target>The key things to note are the creation of a background task to host the app service, the addition of the windows.appservice extension to the app service provider app's Package.appxmanifest file, obtaining the package family name of the app service provider app so that we can connect to it from the client app, and using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.ApplicationModel.AppService.AppServiceConnection</pc></pc> to call the service.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Full code for MyAppService</source>
					<target>Full code for MyAppService</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Support your app with background tasks</source>
					<target>Support your app with background tasks</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>