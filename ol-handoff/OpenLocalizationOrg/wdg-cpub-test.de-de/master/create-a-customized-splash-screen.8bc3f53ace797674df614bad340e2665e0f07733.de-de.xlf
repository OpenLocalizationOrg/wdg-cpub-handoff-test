<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">915d388ee2a9810acfba98ca7791b625fa472c3d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\launch-resume\create-a-customized-splash-screen.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">27c9652e4678507d7194ae2d98ed9db52747386b</mda:meta><mda:meta type="olxliffhash">cf18f7e431f497ff30a433363762098b23e02da3</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Display a splash screen for more time</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Display a splash screen for more time by creating an extended splash screen for your app.</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>This extended screen imitates the splash screen shown when your app is launched, but can be customized.</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Display a splash screen for more time</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>SplashScreen class</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Window.SizeChanged event</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Application.OnLaunched method</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Display a splash screen for more time by creating an extended splash screen for your app.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This extended screen imitates the splash screen shown when your app is launched, but can be customized.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Whether you want to show real-time loading information or simply give your app extra time to prepare its initial UI, an extended splash screen lets you define the launch experience.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The phrase "extended splash screen" in this topic refers to a splash screen that stays on the screen for an extended period of time.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It does not mean a subclass that derives from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SplashScreen</pc></pc> class.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Make sure your extended splash screen accurately imitates the default splash screen by following these recommendations:</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Your extended splash screen page should use a 620 x 300 pixel image that is consistent with the image specified for your splash screen in your app manifest (your app's splash screen image).</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In Microsoft Visual Studio 2015, splash screen settings are stored in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Splash Screen</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visual Assets</pc> tab in your app manifest (Package.appxmanifest file).</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Your extended splash screen should use a background color that is consistent with the background color specified for your splash screen in your app manifest (your app's splash screen background).</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your code should use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SplashScreen</pc></pc> class to position your app's splash screen image at the same screen coordinates as the default splash screen.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your code should respond to window resize events (such as when the screen is rotated or your app is moved next to another app onscreen) by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SplashScreen</pc></pc> class to reposition items on your extended splash screen.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Use the following steps to create an extended splash screen that effectively imitates the default splash screen.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> item to your existing app</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>This topic assumes you want to add an extended splash screen to an existing Universal Windows Platform (UWP) app project using C#, Visual Basic, or C++.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Open your app in Visual Studio 2015.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Press or open <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> from the menu bar and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New Item</pc>.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add New Item</pc> dialog box will appear.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>From this dialog box, add a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> to your app.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>This topic names the extended splash screen page "ExtendedSplash".</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Adding a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> item generates two files, one for markup (ExtendedSplash.xaml) and another for code (ExtendedSplash.xaml.cs).</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Essential XAML for an extended splash screen</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Follow these steps to add an image and progress control to your extended splash screen.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>In your ExtendedSplash.xaml file:</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209396)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242704)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Background</pc></pc> property of the default <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Grid</pc></pc> element to match the background color you set for your app's splash screen in your app manifest (in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Visual Assets</pc> section of your Package.appxmanifest file).</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>The default splash screen color is a light gray (hex value \#464646).</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Note that this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> element is provided by default when you create a new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank Page</pc>.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You don't have to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc>; it's just a convenient base for building an extended splash screen.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242704)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> element to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Grid</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You'll use this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> to position your extended splash screen image.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242752)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Add an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> element to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Use the same 600 x 320 pixel image for your extended splash screen that you chose for the default splash screen.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>(Optional) Add a progress control to show users that your app is loading.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227529)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This topic adds a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc>, instead of a determinate or indeterminate <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProgressBar</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242752)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Add the following code to define <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Image</pc></pc> elements, as well as a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ProgressRing</pc></pc> control, in ExtendedSplash.xaml:</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code sets the width of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ProgressRing</pc></pc> to 20 pixels.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>You can manually set its width to a value that works for your app, however, the control will not render at widths of less than 20 pixels.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Essential code for an extended splash screen class</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Your extended splash screen needs to respond whenever the window size (Windows only) or orientation changes.</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>The position of the image you use must be updated so that your extended splash screen looks good no matter how the window changes.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Use these steps to define methods to correctly display your extended splash screen.</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Add required namespaces</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209055)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You'll need to add the following namespaces to ExtendedSplash.xaml.cs to access the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SplashScreen</pc></pc> class, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Window.SizeChanged</pc></pc> events.</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Create a partial class and declare class variables</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Include the following code in ExtendedSplash.xaml.cs to create a partial class to represent an extended splash screen.</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>These class variables are used by several methods.</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">`splashImageRect`</data>
				</originalData>
				<segment state="initial">
					<source>The <ph dataRef="id1" id="ph1" /> variable stores the coordinates where the system displayed the splash screen image for the app.</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">`splash`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">`dismissed`</data>
				</originalData>
				<segment state="initial">
					<source>The <ph dataRef="id1" id="ph1" /> variable stores a <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">SplashScreen</pc></pc> object, and the <ph dataRef="id6" id="ph2" /> variable tracks whether or not the splash screen that is displayed by the system has been dismissed.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Define a constructor for your class that correctly positions the image</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The following code defines a constructor for the extended splash screen class that listens for window resizing events, positions the image and (optional) progress control on the extended splash screen, creates a frame for navigation, and calls an asynchronous method to restore a saved session state.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209055)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`ExtendedSplash_OnResize`</data>
				</originalData>
				<segment state="initial">
					<source>Make sure to register your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.SizeChanged</pc></pc> handler (<ph dataRef="id5" id="ph1" /> in the example) in your class constructor so that your app positions the image correctly in your extended splash screen.</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Define a class method to position the image in your extended splash screen</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">`splashImageRect`</data>
				</originalData>
				<segment state="initial">
					<source>This code demonstrates how to position the image on the extended splash screen page with the <ph dataRef="id1" id="ph1" /> class variable.</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>(Optional) Define a class method to position a progress control in your extended splash screen</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227538)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you chose to add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProgressRing</pc></pc> to your extended splash screen, position it relative to the splash screen image.</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add the following code to ExtendedSplash.xaml.cs to center the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProgressRing</pc> 32 pixels below the image.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Inside the class, define a handler for the Dismissed event</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224764)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`dismissed`</data>
				</originalData>
				<segment state="initial">
					<source>In ExtendedSplash.xaml.cs, respond when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SplashScreen.Dismissed</pc></pc> event occurs by setting the <ph dataRef="id5" id="ph1" /> class variable to true.</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>If your app has setup operations, add them to this event handler.</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>After app setup is complete, navigate away from your extended splash screen.</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">`DismissExtendedSplash`</data>
					<data id="id2">`MainPage`</data>
				</originalData>
				<segment state="initial">
					<source>The following code defines a method called <ph dataRef="id1" id="ph1" /> that navigates to the <ph dataRef="id2" id="ph2" /> defined in your app's MainPage.xaml file.</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Inside the class, define a handler for Window.SizeChanged events</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Prepare your extended splash screen to reposition its elements if a user resizes the window.</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209055)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This code responds when a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.SizeChanged</pc></pc> event occurs by capturing the new coordinates and repositioning the image.</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>If you added a progress control to your extended splash screen, reposition it inside this event handler as well.</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`splash`</data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/br224763)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Before you try to get the image location make sure the class variable (<ph dataRef="id3" id="ph1" />) contains a valid <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">SplashScreen</pc></pc> object, as shown in the example.</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>(Optional) Add a class method to restore a saved session state</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242335)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](#modify-the-launch-activation-handler)</data>
				</originalData>
				<segment state="initial">
					<source>The code you added to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnLaunched</pc></pc> method in Step 4: <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Modify the launch activation handler</pc> causes your app to display an extended splash screen when it launches.</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>To consolidate all methods related to app launch in your extended splash screen class, you could consider adding an asynchronous method to your ExtendedSplash.xaml.cs file to restore the app's state.</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">`loadstate`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br224694)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>When you modify the launch activation handler in App.xaml.cs, you'll also set <ph dataRef="id1" id="ph1" /> to true if the previous <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">ApplicationExecutionState</pc></pc> of your app was <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Terminated</pc>.</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">`RestoreStateAsync`</data>
				</originalData>
				<segment state="initial">
					<source>If so, the <ph dataRef="id1" id="ph1" /> method restores the app to its previous state.</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](app-lifecycle.md)</data>
				</originalData>
				<segment state="initial">
					<source>For an overview of app launch, suspension, and termination, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App lifecycle</pc>.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Modify the launch activation handler</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>When your app is launched, the system passes splash screen information to the app's launch activation event handler.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>You can use this information to correctly position the image on your extended splash screen page.</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242335)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`args`</data>
				</originalData>
				<segment state="initial">
					<source>You can get this splash screen information from the activation event arguments that are passed to your app's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnLaunched</pc></pc> handler (see the <ph dataRef="id5" id="ph1" /> variable in the following code).</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242335)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](app-lifecycle.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you have not already overridden the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnLaunched</pc></pc> handler for your app, see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">App lifecycle</pc> to learn how to handle activation events.</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>In App.xaml.cs, add the following code to create and display an extended splash screen.</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Complete code</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The following code slightly differs from the snippets shown in the previous steps.</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">`DismissSplash`</data>
				</originalData>
				<segment state="initial">
					<source>ExtendedSplash.xaml includes a <ph dataRef="id1" id="ph1" /> button.</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">`DismissSplashButton_Click`</data>
					<data id="id2">`DismissExtendedSplash`</data>
				</originalData>
				<segment state="initial">
					<source>When this button is clicked, an event handler, <ph dataRef="id1" id="ph1" />, calls the <ph dataRef="id2" id="ph2" /> method.</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">`DismissExtendedSplash`</data>
				</originalData>
				<segment state="initial">
					<source>In your app, call <ph dataRef="id1" id="ph1" /> when your app is done loading resources or initializing its UI.</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This app also uses a UWP app project template, which uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> navigation.</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242335)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`rootFrame`</data>
				</originalData>
				<segment state="initial">
					<source>As a result, in App.xaml.cs, the launch activation handler (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnLaunched</pc></pc>) defines a <ph dataRef="id5" id="ph1" /> and uses it to set the content of the app window.</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">`DismissSplash`</data>
				</originalData>
				<segment state="initial">
					<source>ExtendedSplash.xaml: This example includes a <ph dataRef="id1" id="ph1" /> button because it doesn't have app resources to load.</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>In your app, dismiss the extended splash screen automatically when your app is done loading resources or preparing its initial UI.</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">`DismissExtendedSplash`</data>
					<data id="id2">`DismissSplash`</data>
				</originalData>
				<segment state="initial">
					<source>ExtendedSplash.xaml.cs: Note that the <ph dataRef="id1" id="ph1" /> method is called from the click event handler for the <ph dataRef="id2" id="ph2" /> button.</source>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">`DismissSplash`</data>
				</originalData>
				<segment state="initial">
					<source>In your app, you won't need a <ph dataRef="id1" id="ph1" /> button.</source>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">`DismissExtendedSplash`</data>
				</originalData>
				<segment state="initial">
					<source>Instead, call <ph dataRef="id1" id="ph1" /> when your app is done loading resources and you want to navigate to its main page.</source>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>App.xaml.cs: This project was created using the UWP app <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (XAML)</pc> project template in Visual Studio 2015.</source>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">`OnNavigationFailed`</data>
					<data id="id2">`OnSuspending`</data>
				</originalData>
				<segment state="initial">
					<source>Both the <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> event handlers are automatically generated and don't need to be changed to implement an extended splash screen.</source>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">`OnLaunched`</data>
				</originalData>
				<segment state="initial">
					<source>This topic only modifies <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#modify_the_launch_activation_handler)</data>
					<data id="id3">`OnLaunched`</data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>If you didn't use a project template for your app, see Step 4: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Modify the launch activation handler</pc> for an example of a modified <ph dataRef="id3" id="ph1" /> that doesn't use <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Frame</pc></pc> navigation.</source>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>App lifecycle</source>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Reference</source>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Windows.ApplicationModel.Activation namespace</source>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Windows.ApplicationModel.Activation.SplashScreen class</source>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Windows.ApplicationModel.Activation.SplashScreen.ImageLocation property</source>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Windows.ApplicationModel.Core.CoreApplicationView.Activated event</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>