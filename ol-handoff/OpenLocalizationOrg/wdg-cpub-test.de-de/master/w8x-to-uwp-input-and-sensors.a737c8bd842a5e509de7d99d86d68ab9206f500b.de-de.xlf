<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">987e44b081f1d50dac2252a0a72f0ab7c1433b59</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\w8x-to-uwp-input-and-sensors.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">98e3b08c7039cce43879c598d8417cd50b1b6326</mda:meta><mda:meta type="olxliffhash">33d9372ebcd4f753713f28992a4f588a3b4fb208</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Porting Windows Runtime 8.x to UWP for I/O, device, and app model'</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Porting Windows Runtime 8.x to UWP for I/O, device, and app model</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-porting-xaml-and-ui.md)</data>
				</originalData>
				<segment state="initial">
					<source>The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting XAML and UI</pc>.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>It can also involve processing data.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>But, this code is not generally thought of as either the UI layer <pc dataRefEnd="id2" dataRefStart="id1" id="p1">or</pc> the data layer.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Application lifecycle (process lifetime management)</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>For a Universal 8.1 app, there is a two-second "debounce window" of time between the app becoming inactive and the system raising the suspending event.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Using this debounce window as extra time to suspend state is unsafe, and for a Universal Windows Platform (UWP) app, there is no debounce window at all; the suspension event is raised as soon as an app becomes inactive.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt243287)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App lifecycle</pc>.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Background audio</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227352)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement.AudioCategory</pc></pc> property, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ForegroundOnlyMedia</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundCapableMedia</pc> are deprecated for Windows 10 apps.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Use the Windows Phone Store app model instead.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt282140)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background Audio</pc>.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Detecting the platform your app is running on</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The way of thinking about app-targeting changes with Windows 10.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The new conceptual model is that an app targets the Universal Windows Platform (UWP) and runs across all Windows devices.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>It can then opt to light up features that are exclusive to particular device families.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>If needed, the app also has the option to limit itself to targeting one or more device families specifically.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on what device families are—and how to decide which device family to target—see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>If you have code in your Universal 8.1 app that detects what operating system it is running on, then you may need to change that depending on the reason for the logic.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>If the app is passing the value through, and not acting on it, then you may want to continue to collect the operating system info.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   We recommend that you not use operating system or device family to detect the presence of features.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Identifying the current operating system or device family is usually not the best way to determine whether a particular operating system or device family feature is present.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-porting-to-a-uwp-project.md#reviewing-conditional-compilation)</data>
				</originalData>
				<segment state="initial">
					<source>Rather than detecting the operating system or device family (and version number), test for the presence of the feature itself (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conditional compilation, and adaptive code</pc>).</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>If you must require a particular operating system or device family, be sure to use it as a minimum supported version, rather than design the test for that one version.</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>To tailor your app's UI to different devices, there are several techniques that we recommend.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Continue to use auto-sized elements and dynamic layout panels as you always have.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-porting-xaml-and-ui.md#effective-pixels)</data>
				</originalData>
				<segment state="initial">
					<source>In your XAML markup, continue to use sizes in effective pixels (formerly view pixels) so that your UI adapts to different resolutions and scale factors (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Effective pixels, viewing distance, and scale factors</pc>.).</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>And use Visual State Manager's adaptive triggers and setters to adapt your UI to the window size (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.).</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>However, if you have a scenario where it is unavoidable to detect the device family, then you can do that.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn960165)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AnalyticsVersionInfo</pc></pc> class to navigate to a page tailored for the mobile device family where appropriate, and we make sure to fall back to a default page otherwise.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Your app can also determine the device family that it is running on from the resource selection factors that are in effect.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br206071)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The example below shows how to do this imperatively, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceContext.QualifierValues</pc></pc> topic describes the more typical use case for the class in loading device family-specific resources based on the device family factor.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-porting-to-a-uwp-project.md#reviewing-conditional-compilation)</data>
				</originalData>
				<segment state="initial">
					<source>Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conditional compilation, and adaptive code</pc>.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Location</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>When an app that declares the Location capability in its app package manifest runs on Windows 10, the system will prompt the end-user for consent.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>This is true whether the app is a Windows Phone Store app or a Windows 10 app.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>So, if your app displays its own custom consent prompt, or if it provides an on-off toggle, then you will want to remove that so that the end-user is only prompted once.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>