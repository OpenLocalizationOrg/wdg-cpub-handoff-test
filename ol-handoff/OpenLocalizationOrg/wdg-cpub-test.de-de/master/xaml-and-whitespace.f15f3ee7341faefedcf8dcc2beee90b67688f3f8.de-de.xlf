<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">01112910296923a767e3968f35d286e661cf29e5</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\xaml-platform\xaml-and-whitespace.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">30aa1fc20dea40dc898d20aee51752e56f4d4f7b</mda:meta><mda:meta type="olxliffhash">e2bc02a50475ecf160479df9888804cffcb79195</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Learn about the whitespace processing rules as used by XAML.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>XAML and whitespace</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>XAML and whitespace</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Learn about the whitespace processing rules as used by XAML.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Whitespace processing</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Consistent with XML, whitespace characters in XAML are space, linefeed, and tab.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>These correspond to the Unicode values 0020, 000A, and 0009 respectively.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>By default this whitespace normalization occurs when a XAML processor encounters any inner text found between elements in a XAML file:</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Linefeed characters between East Asian characters are removed.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>All whitespace characters (space, linefeed, tab) are converted into spaces.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>All consecutive spaces are deleted and replaced by one space.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>A space immediately following the start tag is deleted.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>A space immediately before the end tag is deleted.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">East Asian characters</pc> is defined as a set of Unicode character ranges U+20000 to U+2FFFD and U+30000 to U+3FFFD.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>This subset is also sometimes referred to as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CJK ideographs</pc>.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>For more information, see http://www.unicode.org.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>"Default" corresponds to the state denoted by the default value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">xml:space</pc> attribute.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Whitespace in inner text, and string primitives</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The above normalization rules apply to inner text within XAML elements.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>After normalization, a XAML processor converts any inner text into an appropriate type like this:</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If the type of the property is not a collection, but is not directly an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type, the XAML processor tries to convert to that type using its type converter.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>A failed conversion here results in a XAML parse error.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If the type of the property is a collection, and the inner text is contiguous (no intervening element tags), the inner text is parsed as a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1">String</pc>.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If the collection type cannot accept <pc dataRefEnd="id2" dataRefStart="id1" id="p1">String</pc>, this also results in a XAML parser error.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the type of the property is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc>, then the inner text is parsed as a single <pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc>.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If there are intervening element tags, this results in a XAML parser error, because the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type implies a single object (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc> or otherwise).</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the type of the property is a collection, and the inner text is not contiguous, then the first substring is converted into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">String</pc> and added as a collection item, the intervening element is added as a collection item, and finally the trailing substring (if any) is added to the collection as a third <pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc> item.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Whitespace and text content models</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>In practice, preserving whitespace is of concern only for a subset of all possible content models.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>That subset is composed of content models that can take a singleton <pc dataRefEnd="id2" dataRefStart="id1" id="p1">String</pc> type in some form, a dedicated <pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc> collection, or a mixture of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">String</pc> and other types in lists, collections, or dictionaries.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Even for content models that can take strings, the default behavior within these content models is that any whitespace that remains is not treated as significant.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Preserving whitespace</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Several techniques for preserving whitespace in the source XAML for eventual presentation are not affected by XAML processor whitespace normalization.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>: Specify this attribute at the level of the element where whitespace needs to be preserved.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Note that this preserves all whitespace, including the spaces that might be added by code editors or design surfaces to align markup elements as a visually intuitive nesting.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Whether those spaces render is again a matter of the content model for the containing element.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">`xml:space="preserve"`</data>
				</originalData>
				<segment state="initial">
					<source>We don't recommend that you specify <ph dataRef="id1" id="ph1" /> at the root level, because the majority of object models don't consider whitespace as significant one way or another.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>It is a better practice to only set the attribute specifically at the level of elements that render whitespace within strings, or are whitespace significant collections.</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Entities and nonbreaking spaces: XAML supports placing any Unicode entity within a text object model.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>You can use dedicated entities such as nonbreaking space (in UTF-8 encoding).</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>You can also use rich text controls that support nonbreaking space characters.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Be cautious if you are using entities to simulate layout characteristics such as indents, because the run-time output of the entities vary based on a greater number of factors than would the general layout facilities, such as proper use of panels and margins.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>