<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">d866fe3963a1dc87c303f176e5ff1ead95d235f2</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\tiles-and-notifications-adaptive-interactive-toasts.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">86b0a49e49a414c1af8360ab7e03ecfcb34ce75d</mda:meta><mda:meta type="olxliffhash">c1b2e3fb0a4ff879f8f666de08bac15c058d01fd</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Adaptive and interactive toast notifications let you create flexible pop-up notifications with more content, optional inline images, and optional user interaction.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Adaptive and interactive toast notifications</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Adaptive and interactive toast notifications</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Adaptive and interactive toast notifications let you create flexible pop-up notifications with more content, optional inline images, and optional user interaction.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The adaptive and interactive toast notifications model has these updates over the legacy toast template catalog:</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The option to include buttons and inputs on the notifications.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Three different activation types for the main toast notification and for each action.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The option to create a notification for certain scenarios, including alarms, reminders, and incoming calls.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh761494)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   To see the legacy templates from Windows 8.1 and Windows Phone 8.1, see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">legacy toast template catalog</pc>.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Toast notification structure</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Toast notifications are constructed using XML, which would typically contain these key elements:</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>visual<ph dataRef="id1" id="ph1" /> covers the content available for the users to visually see, including text and images</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>actions<ph dataRef="id1" id="ph1" /> contains buttons/inputs the developer wants to add inside the notification</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>audio<ph dataRef="id1" id="ph1" /> specifies the sound played when the notification pops</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Here's a code example:</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>And a visual representation of the structure:</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>toast notification structure</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Visual</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Inside the visual element, you must have exactly one binding element that contains the visual content of the toast.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Tile notifications in Universal Windows Platform (UWP) apps support multiple templates that are based on different tile sizes.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Toast notifications, however, have only one template name: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ToastGeneric</pc>.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Having just the one template name means:</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>You can change the toast content, such as adding another line of text, adding an inline image, or changing the thumbnail image from displaying the app icon to something else, and do any of these things without worrying about changing the entire template or creating an invalid payload due to a mismatch between the template name and the content.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use the same code to construct the same payload for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">toast notification</pc> that targets to deliver to different types of Microsoft Windows devices, including phones, tablets, PCs, and Xbox One.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Each of these devices will accept the notification and display it to the user under their UI policies with the appropriate visual affordances and interaction model.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>For all attributes supported in the visual section and its child elements, see the Schema section below.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>For more examples, see the XML examples section below.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Actions</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>In UWP apps, you can add buttons and other inputs to your toast notifications, which lets users do more outside of the app.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>These actions are specified under the <ph dataRef="id1" id="ph1" />actions<ph dataRef="id2" id="ph2" /> element, of which there are two types that you can specify:</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>action<ph dataRef="id1" id="ph1" /> This appears as a button on desktop and mobile devices.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>You can specify up to five custom or system actions inside a toast notification.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>input<ph dataRef="id1" id="ph1" /> This allows users to provide input, such as quick replying to a message, or selecting an option from a drop-down menu.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Both <ph dataRef="id1" id="ph1" />action<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />input<ph dataRef="id4" id="ph4" /> are adaptive within the Windows family of devices.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>For example, on mobile or desktop devices, an <ph dataRef="id1" id="ph1" />action<ph dataRef="id2" id="ph2" /> to a user is a button on which to tap/click.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>A text <ph dataRef="id1" id="ph1" />input<ph dataRef="id2" id="ph2" /> is a box in which users can input text using either a physical keyboard or an on-screen keyboard.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>These elements will also adapt to future interaction scenarios, such as an action announced by voice or a text input taken by dictation.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/dn408447)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;lt;</data>
					<data id="id6">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>When an action is taken by the user, you can do one of the following by specifying the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ActivationType</pc></pc> attribute inside the <ph dataRef="id5" id="ph1" />action<ph dataRef="id6" id="ph2" /> element:</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Activating the app in the foreground, with an action-specific argument that can be used to navigate to a specific page/context.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Activating the app's background task without affecting the user.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Activating another app via protocol launch.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Specify a system action to perform.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The current available system actions are snoozing and dismissing scheduled alarm/reminder, which will be further explained in a section below.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>For all attributes supported in the visual section and its child elements, see the Schema section below.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>For more examples, see the XML examples section below.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Audio</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Custom sounds aren't currently supported on UWP apps that target the desktop platform; instead, you can choose from the list of ms-winsoundevents for your app on desktop.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>UWP apps on mobile platforms support both ms-winsoundevents, along with custom sounds in these formats:</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>ms-appx:///</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>ms-appdata:///</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230842)</data>
				</originalData>
				<segment state="initial">
					<source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audio schema page</pc> for information on audio in toast notifications, which includes a complete list of ms-winsoundevents.</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Alarms, reminders, and incoming calls</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>You can use toast notifications for alarms, reminders, and incoming calls.</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>These special toasts have an appearance that's consistent with standard toasts, though special toasts feature some custom, scenario-based UI and patterns:</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>A reminder toast notification will stay on screen until the user dismisses it or takes action.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>On Windows Mobile, the reminder toast notifications will also show up pre-expanded.</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>In addition to sharing the above behaviors with reminder notifications, alarm notifications also automatically play looping audio.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Incoming call notifications are displayed full screen on Windows Mobile devices.</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>This is done by specifying the scenario attribute inside the root element of a toast notification – <ph dataRef="id1" id="ph1" />toast<ph dataRef="id2" id="ph2" />: <ph dataRef="id3" id="ph3" />toast scenario=" { default | alarm | reminder | incomingCall } "</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>XML examples</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The toast notification screenshots for these examples were taken from an app on desktop.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>On mobile devices, a toast notification may be collapsed when it pops up, with a grabber at the bottom of the toast to expand it.</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Notification with rich visual contents</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>This example shows how you can have multiple lines of text, an optional small image to override the application logo, and an optional inline image thumbnail.</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>notification with rich visual contents</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Notification with actions, example 1</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>notification with actions, example 1</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Notification with actions, example 2</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>notification with actions, example 2</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Notification with text input and actions, example 1</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>notification with text and input actions</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Notification with text input and actions, example 2</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>notification with text input and actions</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Notification with selection input and actions</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>notification with selection input and actions</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Reminder notification</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>This example shows...</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>reminder notification</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Activation samples</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Like mentioned above, the body and actions in the toast are capable of activating apps in different ways.</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>The below sample will show you how to handle different type of activations from the toast body and/or toast actions.</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Foreground</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>In this scenario, an app uses foreground activation to respond to an action inside an actionable toast notification by launching the app and navigating to the correct content.</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Activation from toast notifications used to invoke OnLaunched().</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>In Windows 10, toast has its own activation kind and will invoke OnActivated().</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Background</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>In this scenario, an app uses a background task to handle an action inside an interactive toast notification.</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>The below code shows how to declare this background task for handling toast activations inside your app manifest, and how to get arguments from the action and user inputs when the buttons are clicked.</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Schemas: <ph dataRef="id1" id="ph1" />visual<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />audio</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>In the following schemas, a "?" suffix means that an attribute is optional.</source>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />toast</source>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>launch?</source>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>launch?</source>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>= string</source>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>This is an optional attribute.</source>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>A string that is passed to the application when it is activated by the toast.</source>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Depending on the value of activationType, this value can be received by the app in the foreground, inside the background task, or by another app that's protocol launched from the original app.</source>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>The format and contents of this string are defined by the app for its own use.</source>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>When the user taps or clicks the toast to launch its associated app, the launch string provides the context to the app that allows it to show the user a view relevant to the toast content, rather than launching in its default way.</source>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If the activation is happened because user clicked on an action, instead of the body of the toast, the developer retrieves back the "arguments" pre-defined in that <ph dataRef="id1" id="ph1" />action<ph dataRef="id2" id="ph2" /> tag, instead of "launch" pre-defined in the <ph dataRef="id3" id="ph3" />toast<ph dataRef="id4" id="ph4" /> tag.</source>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>duration?</source>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>duration?</source>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>= "short|long"</source>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>This is an optional attribute.</source>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Default value is "short".</source>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>This is only here for specific scenarios and appCompat.</source>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>You don't need this for the alarm scenario anymore.</source>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>We don't recommend using this property.</source>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>activationType?</source>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>activationType?</source>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>= "foreground | background | protocol | system"</source>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>This is an optional attribute.</source>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>The default value is "foreground".</source>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>scenario?</source>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>scenario?</source>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>= "default | alarm | reminder | incomingCall"</source>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>This is an optional attribute, default value is "default".</source>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>You do not need this unless your scenario is to pop an alarm, reminder, or incoming call.</source>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Do not use this just for keeping your notification persistent on screen.</source>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />visual</source>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>version?</source>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>version?</source>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>= nonNegativeInteger</source>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>This attribute isn't necessary because versioning will be deprecated on <ph dataRef="id1" id="ph1" />visual<ph dataRef="id2" id="ph2" />.</source>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Stay tuned for a new versioning model that you'll specify from a higher hierarchy, if needed.</source>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>lang?</source>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>baseUri?</source>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>addImageQuery?</source>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />binding</source>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>template?</source>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>\[Important\] template?</source>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>= "ToastGeneric"</source>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>If you are using any of the new adaptive and interactive notification features, please make sure you start using "ToastGeneric" template instead of the legacy template.</source>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Using the legacy templates with the new actions might work now, but that is not the intended use case, and we cannot guarantee that will continue working.</source>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>lang?</source>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>baseUri?</source>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>addImageQuery?</source>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />text</source>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>lang?</source>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230847)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />image</source>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>src</source>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230844)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this required attribute.</source>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>placement?</source>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>placement?</source>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>= "inline" | "appLogoOverride"</source>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>This attribute is optional.</source>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>This specifies where this image will be displayed.</source>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>"inline" means inside the toast body, below the text; "appLogoOverride" means replace the application icon (that shows up on the top left corner of the toast).</source>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>You can have up to one image for each placement value.</source>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>alt?</source>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230844)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>addImageQuery?</source>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230844)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>hint-crop?</source>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>hint-crop?</source>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>= "none" | "circle"</source>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>This attribute is optional.</source>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>"none" is the default value which means no cropping.</source>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>"circle" crops the image to a circular shape.</source>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>Use this for profile images of a contact, images of a person, and so on.</source>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />audio</source>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>src?</source>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230842)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>loop?</source>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230842)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>silent?</source>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br230842)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this element schema article</pc> for details on this optional attribute.</source>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Schemas: <ph dataRef="id1" id="ph1" />action</source>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>In the following schemas, a "?" suffix means that an attribute is optional.</source>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />input</source>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>id</source>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<segment state="initial">
					<source>id = string</source>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<segment state="initial">
					<source>This attribute is required.</source>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>The id attribute is required and is used by developers to retrieve user inputs once the app is activated (in the foreground or background).</source>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>type</source>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>type = "text | selection"</source>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<segment state="initial">
					<source>This attribute is required.</source>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>It is used to specify a text input or input from a list of pre-defined selections.</source>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>On mobile and desktop, this is to specify whether you want a textbox input or a listbox input.</source>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>title?</source>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<segment state="initial">
					<source>title?</source>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<segment state="initial">
					<source>= string</source>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<segment state="initial">
					<source>The title attribute is optional and is for developers to specify a title for the input for shells to render when there is affordance.</source>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<segment state="initial">
					<source>For mobile and desktop, this title will be displayed above the input.</source>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>placeHolderContent?</source>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>placeHolderContent?</source>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<segment state="initial">
					<source>= string</source>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>The placeHolderContent attribute is optional and is the grey-out hint text for text input type.</source>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>This attribute is ignored when the input type is not "text".</source>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<segment state="initial">
					<source>defaultInput?</source>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>defaultInput?</source>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>= string</source>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>The defaultInput attribute is optional and is used to provide a default input value.</source>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<segment state="initial">
					<source>If the input type is "text", this will be treated as a string input.</source>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<segment state="initial">
					<source>If the input type is "selection", this is expected to be the id of one of the available selections inside this input's elements.</source>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />selection</source>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>id</source>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>This attribute is required.</source>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<segment state="initial">
					<source>It's used to identify user selections.</source>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>The id is returned to your app.</source>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<segment state="initial">
					<source>content</source>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<segment state="initial">
					<source>This attribute is required.</source>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<segment state="initial">
					<source>It provides the string to display for this selection element.</source>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Attributes in <ph dataRef="id1" id="ph1" />action</source>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<segment state="initial">
					<source>content</source>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<segment state="initial">
					<source>content = string</source>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<segment state="initial">
					<source>The content attribute is required.</source>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>It provides the text string displayed on the button.</source>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<segment state="initial">
					<source>arguments</source>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>arguments = string</source>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<segment state="initial">
					<source>The arguments attribute it required.</source>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<segment state="initial">
					<source>It describes the app-defined data that the app can later retrieve once it is activated from user taking this action.</source>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<segment state="initial">
					<source>activationType?</source>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<segment state="initial">
					<source>activationType?</source>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<segment state="initial">
					<source>= "foreground | background | protocol | system"</source>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<segment state="initial">
					<source>The activationType attribute is optional and its default value is "foreground".</source>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<segment state="initial">
					<source>It describes the kind of activation this action will cause: foreground, background, or launching another app via protocol launch, or invoking a system action.</source>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<segment state="initial">
					<source>imageUri?</source>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<segment state="initial">
					<source>imageUri?</source>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<segment state="initial">
					<source>= string</source>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>imageUri is optional and is used to provide an image icon for this action to display inside the button alone with the text content.</source>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<segment state="initial">
					<source>hint-inputId</source>
				</segment>
			</unit>
			<unit id="337" translate="yes">
				<segment state="initial">
					<source>hint-inputId = string</source>
				</segment>
			</unit>
			<unit id="338" translate="yes">
				<segment state="initial">
					<source>The hint-inpudId attribute is required.</source>
				</segment>
			</unit>
			<unit id="339" translate="yes">
				<segment state="initial">
					<source>It's specifically used for the quick reply scenario.</source>
				</segment>
			</unit>
			<unit id="340" translate="yes">
				<segment state="initial">
					<source>The value needs to be the id of the input element desired to be associated with.</source>
				</segment>
			</unit>
			<unit id="341" translate="yes">
				<segment state="initial">
					<source>In mobile and desktop, this will put the button right next to the input box.</source>
				</segment>
			</unit>
			<unit id="342" translate="yes">
				<segment state="initial">
					<source>Attributes for system-handled actions</source>
				</segment>
			</unit>
			<unit id="343" translate="yes">
				<segment state="initial">
					<source>The system can handle actions for snoozing and dismissing notifications if you don't want your app to handle the snoozing/rescheduling of notifications as a background task.</source>
				</segment>
			</unit>
			<unit id="344" translate="yes">
				<segment state="initial">
					<source>System-handled actions can be combined (or individually specified), but we don't recommend implementing a snooze action without a dismiss action.</source>
				</segment>
			</unit>
			<unit id="345" translate="yes">
				<segment state="initial">
					<source>System commands combo: SnoozeAndDismiss</source>
				</segment>
			</unit>
			<unit id="346" translate="yes">
				<segment state="initial">
					<source>Individual system-handled actions</source>
				</segment>
			</unit>
			<unit id="347" translate="yes">
				<segment state="initial">
					<source>To construct individual snooze and dismiss actions, do the following:</source>
				</segment>
			</unit>
			<unit id="348" translate="yes">
				<segment state="initial">
					<source>Specify activationType = "system"</source>
				</segment>
			</unit>
			<unit id="349" translate="yes">
				<segment state="initial">
					<source>Specify arguments = "snooze" | "dismiss"</source>
				</segment>
			</unit>
			<unit id="350" translate="yes">
				<segment state="initial">
					<source>Specify content:</source>
				</segment>
			</unit>
			<unit id="351" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>If you want localized strings of "snooze" and "dismiss" to be displayed on the actions, specify content to be an empty string: <ph dataRef="id1" id="ph1" />action content = ""/</source>
				</segment>
			</unit>
			<unit id="352" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>If you want a customized string, just provide its value: <ph dataRef="id1" id="ph1" />action content="Remind me later" /</source>
				</segment>
			</unit>
			<unit id="353" translate="yes">
				<segment state="initial">
					<source>Specify input:</source>
				</segment>
			</unit>
			<unit id="354" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If you don't want the user to select a snooze interval and instead just want your notification to snooze only once for a system-defined time interval (that is consistent across the OS), then don't construct any <ph dataRef="id1" id="ph1" />input<ph dataRef="id2" id="ph2" /> at all.</source>
				</segment>
			</unit>
			<unit id="355" translate="yes">
				<segment state="initial">
					<source>If you want to provide snooze interval selections:</source>
				</segment>
			</unit>
			<unit id="356" translate="yes">
				<segment state="initial">
					<source>Specify hint-inputId in the snooze action</source>
				</segment>
			</unit>
			<unit id="357" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;&amp;lt;</data>
					<data id="id3">&amp;gt;&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>Match the id of the input with the hint-inputId of the snooze action: <ph dataRef="id1" id="ph1" />input id="snoozeTime"<ph dataRef="id2" id="ph2" />/input<ph dataRef="id3" id="ph3" />action hint-inputId="snoozeTime"/</source>
				</segment>
			</unit>
			<unit id="358" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Specify selection id to be a nonNegativeInteger which represents snooze interval in minutes: <ph dataRef="id1" id="ph1" />selection id="240" /<ph dataRef="id2" id="ph2" /> means snoozing for 4 hours</source>
				</segment>
			</unit>
			<unit id="359" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Make sure that the value of defaultInput in <ph dataRef="id1" id="ph1" />input<ph dataRef="id2" id="ph2" /> matches with one of the ids of the <ph dataRef="id3" id="ph3" />selection<ph dataRef="id4" id="ph4" /> children elements</source>
				</segment>
			</unit>
			<unit id="360" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Provide up to (but no more than) 5 <ph dataRef="id1" id="ph1" />selection<ph dataRef="id2" id="ph2" /> values</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>