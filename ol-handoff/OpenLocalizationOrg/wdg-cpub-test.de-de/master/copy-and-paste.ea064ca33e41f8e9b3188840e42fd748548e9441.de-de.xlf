<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">01824bcfa52c096e3e372fc450e3146fbbec5296</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\app-to-app\copy-and-paste.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">e7d10e6ed375ccad80b080d1406830cee7f59c71</mda:meta><mda:meta type="olxliffhash">b9b151cf9d29c80751b6f80eec62e54c65c94bdc</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Copy and paste</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Copy and paste</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Copy and paste is the classic way to exchange data either between apps, or within an app, and almost every app can support clipboard operations to some degree.</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Check for built-in clipboard support</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>In many cases, you do not need to write code to support clipboard operations.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Many of the default XAML controls you can use to create apps already support clipboard operations.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">[</data>
					<data id="id4">ControlsList]</data>
				</originalData>
				<segment state="initial">
					<source>For more information about which controls are available, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">controls list</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2"></pc>.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Get set up</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataTransfer]</data>
				</originalData>
				<segment state="initial">
					<source>First, include the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.ApplicationModel.DataTransfer</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> namespace in your app.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataPackage]</data>
				</originalData>
				<segment state="initial">
					<source>Then, add an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> object.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>This object contains both the data the user wants to copy and any properties (such as a description) that you want to include.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Copy and cut</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Copy and cut (also referred to as move) work almost exactly the same.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">RequestedOperation]</data>
				</originalData>
				<segment state="initial">
					<source>Choose which operation you want using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.RequestedOperation</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> property.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataPackage]</data>
				</originalData>
				<segment state="initial">
					<source>Next, you can add the data that a user has selected to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> object.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If this data is supported by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataPackage</pc> class, you can use one of the corresponding methods in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc> object.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Here's how to add text:</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataPackage]</data>
					<data id="id7">[</data>
					<data id="id8">]</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">SetContent]</data>
				</originalData>
				<segment state="initial">
					<source>The last step is to add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> to the clipboard by calling the static <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Clipboard.SetContent</pc></pc><pc dataRefEnd="id12" dataRefStart="id11" id="p6"></pc> method.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Paste</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">]</data>
				</originalData>
				<segment state="initial">
					<source>To get the contents of the clipboard, call the static [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Clipboard.GetContent</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetContent</pc> method.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataPackageView]</data>
				</originalData>
				<segment state="initial">
					<source>This method returns a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackageView</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> that contains the content.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">DataPackage]</data>
				</originalData>
				<segment state="initial">
					<source>This object is almost identical to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> object, except that its contents are read-only.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">AvailableFormats]</data>
					<data id="id7">[</data>
					<data id="id8">]</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">Contains]</data>
				</originalData>
				<segment state="initial">
					<source>With that object, you can use either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AvailableFormats</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> or the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Contains</pc></pc><pc dataRefEnd="id12" dataRefStart="id11" id="p6"></pc> method to identify what formats are available.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Then, you can call the corresponding <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataPackageView</pc> method to get the data.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Track changes to the clipboard</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>In addition to copy and paste commands, you may also want to track clipboard changes.</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">ContentChanged]</data>
				</originalData>
				<segment state="initial">
					<source>Do this by handling the clipboard's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Clipboard.ContentChanged</pc></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> event.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>GetContent</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>