<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">16e745134da1d9486337ada18f8ccc0b4b16d2ae</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\audio-video-camera\adaptive-streaming-with-playready.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">466d692170bbde6221b238257097d30dd30ca4ca</mda:meta><mda:meta type="olxliffhash">ccd77b2a14d68f828f37f49c070a7ada6a10fab1</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Adaptive Streaming with PlayReady</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Adaptive Streaming with PlayReady</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>This feature currently supports playback of Http Live Streaming (HLS) and Dynamic Streaming over HTTP (DASH) content.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This article only deals with the aspects of adaptive streaming specific to PlayReady.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](adaptive-streaming.md)</data>
				</originalData>
				<segment state="initial">
					<source>For information about implementing adaptive streaming in general, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adaptive Streaming</pc>.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You will need the following using statements:</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LicenseRequest</pc> namespace is from <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommonLicenseRequest.cs</pc>, a PlayReady file provided by Microsoft to licensees.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>You will need to declare a few global variables:</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>You will also want to declare the following constant:</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Setting up the MediaProtectionManager</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207040)</data>
				</originalData>
				<segment state="initial">
					<source>To add PlayReady content protection to your UWP app, you will need to set up a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaProtectionManager</pc> object.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn946912)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You do this when initializing your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AdaptiveMediaSource</pc></pc> object.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207040)</data>
				</originalData>
				<segment state="initial">
					<source>The following code sets up a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaProtectionManager</pc>:</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>This code can simply be copied to your app, since it is mandatory for setting up content protection.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207041)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ComponentLoadFailed</pc> event is fired when the load of binary data fails.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>We need to add an event handler to handle this, signaling that the load did not complete:</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207045)</data>
				</originalData>
				<segment state="initial">
					<source>Similarly, we need to add an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ServiceRequested</pc> event, which fires when a service is requested.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>This code checks what kind of request it is, and responds appropriately:</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Individualization service requests</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>The following code reactively makes a PlayReady individualization service request.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>We pass in the request as a parameter to the function.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>We surround the call in a try/catch block, and if there are no exceptions, we say the request completed successfully:</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">`ReactiveIndivRequest`</data>
					<data id="id2">`ProtectionManager_ServiceRequested`</data>
				</originalData>
				<segment state="initial">
					<source>Alternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling <ph dataRef="id1" id="ph1" /> in <ph dataRef="id2" id="ph2" />:</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>License acquisition service requests</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn986285)</data>
				</originalData>
				<segment state="initial">
					<source>If instead the request was a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlayReadyLicenseAcquisitionServiceRequest</pc>, we call the below function to request and acquire the PlayReady license.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>We tell the MediaProtectionServiceCompletion object that we passed in whether the request was successful or not, and we complete the request:</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Initializing the AdaptiveMediaSource</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn946912)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242926)</data>
				</originalData>
				<segment state="initial">
					<source>Finally, you will need a function to initialize the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AdaptiveMediaSource</pc>, created from a given <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaElement</pc>.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uri</pc> should be the link to the media file (HLS or DASH); the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement</pc> should be defined in your XAML.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>You can call this function in whichever event handles the start of adaptive streaming—for instance, in a button click event.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>