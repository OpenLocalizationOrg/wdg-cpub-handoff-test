<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">7380a6c7d1c4795362c0e6487bf30e574dced396</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\launch-resume\auto-launching-with-autoplay.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a45162f0301a927b44d5c01c1d046c5301e62781</mda:meta><mda:meta type="olxliffhash">4f23504e99b6b5c2906460008e522f3d8101982a</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Auto-launching with AutoPlay</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>You can use AutoPlay to provide your app as an option when a user connects a device to their PC.</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>This includes non-volume devices such as a camera or media player, or volume devices such as a USB thumb drive, SD card, or DVD.</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Auto-launching with AutoPlay</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> to provide your app as an option when a user connects a device to their PC.</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This includes non-volume devices such as a camera or media player, or volume devices such as a USB thumb drive, SD card, or DVD.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can also use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> to offer your app as an option when users share files between two PCs by using proximity (tapping).</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?LinkID=301381)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you are a device manufacturer and you want to associate your <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Store device app</pc> as an <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AutoPlay</pc> handler for your device, you can identify that app in the device metadata.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=306684)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay for Windows Store device apps</pc>.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Register for AutoPlay content</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can register apps as options for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> content events.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> content events are raised when a volume device such as a camera memory card, thumb drive, or DVD is inserted into the PC.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Here we show how to identify your app as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> option when a volume device from a camera is inserted.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>In this tutorial, you created an app that displays image files or copies them to Pictures.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You registered the app for the AutoPlay <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ShowPicturesOnArrival</pc> content event.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>AutoPlay also raises content events for content shared between PCs using proximity (tapping).</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>You can use the steps and code in this section to handle files that are shared between PCs that use proximity.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The following table lists the AutoPlay content events that are available for sharing content by using proximity.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Action</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>AutoPlay content event</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Sharing music</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>PlayMusicFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Sharing videos</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>PlayVideoFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When files are shared by using proximity, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Files</pc> property of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileActivatedEventArgs</pc> object contains a reference to a root folder that contains all of the shared files.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Step 1: Create a new project and add AutoPlay declarations</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Open Microsoft Visual Studio and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File</pc> menu.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C#</pc> section, under <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows</pc>, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Blank App (Universal Windows)</pc>.</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Name the app <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlayDisplayOrCopyImages</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK.</pc></source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the Package.appxmanifest file and select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Capabilities</pc> tab.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Removable Storage</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pictures Library</pc> capabilities.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>This gives the app access to removable storage devices for camera memory, and access to local pictures.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the manifest file, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Content</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Content</pc> item that was added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supported Declarations</pc> list.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Content</pc> declaration identifies your app as an option when AutoPlay raises a content event.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The event is based on the content of a volume device such as a DVD or a thumb drive.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>AutoPlay examines the content of the volume device and determines which content event to raise.</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the root of the volume contains a DCIM, AVCHD, or PRIVATE\\ACHD folder, or if a user has enabled <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choose what to do with each type of media</pc> in the AutoPlay Control Panel and pictures are found in the root of the volume, then AutoPlay raises the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShowPicturesOnArrival</pc> event.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch Actions</pc> section, enter the values from Table 1 below for the first launch action.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch Actions</pc> section for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Content</pc> item, click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New</pc> to add a second launch action.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Enter the values in Table 2 below for the second launch action.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File Type Associations</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Properties of the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type Associations</pc> declaration, set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Display Name</pc> field to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AutoPlay Copy or Show Images</pc> and the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Name</pc> field to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">image\_association1</pc>.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New</pc>.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type</pc> field to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.jpg</pc>.</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section, set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File Type</pc> field of the new file association to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">.png</pc>.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>For content events, AutoPlay filters out any file types that are not explicitly associated with your app.</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Save and close the manifest file.</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Table 1</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Setting</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Value</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Verb</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>show</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Action Display Name</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Show Pictures</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Content Event</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>ShowPicturesOnArrival</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action Display Name</pc> setting identifies the string that AutoPlay displays for your app.</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting identifies a value that is passed to your app for the selected option.</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can specify multiple launch actions for an AutoPlay event and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting to determine which option a user has selected for your app.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can tell which option the user selected by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">verb</pc> property of the startup event arguments passed to your app.</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use any value for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting except, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">open</pc>, which is reserved.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Table 2</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Setting</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Value</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Verb</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>copy</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Action Display Name</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Copy Pictures Into Library</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Content Event</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>ShowPicturesOnArrival</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Step 2: Add XAML UI</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Open the MainPage.xaml file and add the following XAML to the default <ph dataRef="id1" id="ph1" />Grid<ph dataRef="id2" id="ph2" /> section.</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Step 3: Add initialization code</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The code in this step checks the verb value in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> property, which is one of the startup arguments passed to the app during the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnFileActivated</pc> event.</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The code then calls a method related to the option that the user selected.</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>For the camera memory event, AutoPlay passes the root folder of the camera storage to the app.</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can retrieve this folder from the first element of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Files</pc> property.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the App.xaml.cs file and add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc> class.</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`DisplayImages`</data>
					<data id="id4">`CopyImages`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <ph dataRef="id3" id="ph1" /> and <ph dataRef="id4" id="ph2" /> methods are added in the following steps.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Step 4: Add code to display images</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MainPage.xaml.cs file add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> class.</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Step 5: Add code to copy images</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MainPage.xaml.cs file add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> class.</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Step 6: Build and run the app</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Press F5 to build and deploy the app (in debug mode).</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>To run your app, insert a camera memory card or another storage device from a camera into your PC.</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Then, select one of the content event options that you specified in your package.appxmanifest file from the AutoPlay list of options.</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>This sample code only displays or copies pictures in the DCIM folder of a camera memory card.</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>If your camera memory card stores pictures in an AVCHD or PRIVATE\\ACHD folder, you will need to update the code accordingly.</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you don't have a camera memory card, you can use a flash drive if it has a folder named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DCIM</pc> in the root and if the DCIM folder has a subfolder that contains images.</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Register for an AutoPlay device</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can register apps as options for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> device events.</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> device events are raised when a device is connected to a PC.</source>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Here we show how to identify your app as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> option when a camera is connected to a PC.</source>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app registers as a handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WPD\\ImageSourceAutoPlay</pc> event.</source>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>This is a common event that the Windows Portable Device (WPD) system raises when cameras and other imaging devices notify it that they are an ImageSource using MTP.</source>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/hardware/ff597729)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Portable Devices</pc>.</source>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225654)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.Devices.Portable.StorageDevice</pc></pc> APIs are part of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">desktop device family</pc>.</source>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Apps can use these APIs only on Windows 10 devices in the desktop device family, such as PCs.</source>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Step 1: Create a new project and add AutoPlay declarations</source>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Open Visual Studio and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File</pc> menu.</source>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C#</pc> section, under <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows</pc>, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Blank App (Universal Windows)</pc>.</source>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Name the app <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlayDevice\_Camera</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK.</pc></source>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the Package.appxmanifest file and select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Capabilities</pc> tab.</source>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Removable Storage</pc> capability.</source>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>This gives the app access to the data on the camera as a removable storage volume device.</source>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the manifest file, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</source>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Device</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Device</pc> item that was added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supported Declarations</pc> list.</source>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Device</pc> declaration identifies your app as an option when AutoPlay raises a device event for known events.</source>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch Actions</pc> section, enter the values in the table below for the first launch action.</source>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File Type Associations</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Properties of the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type Associations</pc> declaration, set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Display Name</pc> field to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Show Images from Camera</pc> and the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Name</pc> field to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">camera\_association1</pc>.</source>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New</pc> (if needed).</source>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type</pc> field to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.jpg</pc>.</source>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New</pc> again.</source>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type</pc> field of the new file association to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.png</pc>.</source>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>For content events, AutoPlay filters out any file types that are not explicitly associated with your app.</source>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Save and close the manifest file.</source>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>Setting</source>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>Value</source>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Verb</source>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>show</source>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Action Display Name</source>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Show Pictures</source>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Content Event</source>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>WPD\\ImageSource</source>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action Display Name</pc> setting identifies the string that AutoPlay displays for your app.</source>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting identifies a value that is passed to your app for the selected option.</source>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can specify multiple launch actions for an AutoPlay event and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting to determine which option a user has selected for your app.</source>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can tell which option the user selected by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">verb</pc> property of the startup event arguments passed to your app.</source>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use any value for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting except, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">open</pc>, which is reserved.</source>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#autoplaycontent)</data>
				</originalData>
				<segment state="initial">
					<source>For an example of using multiple verbs in a single app, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Register for AutoPlay content</pc>.</source>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>Step 2: Add assembly reference for the desktop extensions</source>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225654)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>The APIs required to access storage on a Windows Portable Device, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Portable.StorageDevice</pc></pc>, are part of the desktop <pc dataRefEnd="id6" dataRefStart="id5" id="p3">desktop device family</pc>.</source>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>This means a special assembly is required to use the APIs and those calls will only work on a device in the desktop device family (such as a PC).</source>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, right click on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">References</pc> and then <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add Reference...</pc>.</source>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Universal Windows</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Extensions</pc>.</source>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Desktop Extensions for the UWP</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc>.</source>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Step 3: Add XAML UI</source>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Open the MainPage.xaml file and add the following XAML to the default <ph dataRef="id1" id="ph1" />Grid<ph dataRef="id2" id="ph2" /> section.</source>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>Step 4: Add activation code</source>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225654)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225655)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The code in this step references the camera as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageDevice</pc></pc> by passing the device information Id of the camera to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FromId</pc></pc> method.</source>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224710)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br224711)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The device information Id of the camera is obtained by first casting the event arguments as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceActivatedEventArgs</pc></pc>, and then getting the value from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DeviceInformationId</pc></pc> property.</source>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the App.xaml.cs file and add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc> class.</source>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`ShowImages`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <ph dataRef="id3" id="ph1" /> method is added in the following step.</source>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>Step 5: Add code to display device information</source>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225654)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can obtain information about the camera from the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageDevice</pc></pc> class.</source>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>The code in this step displays the device name and other info to the user when the app runs.</source>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>The code then calls the GetImageList and GetThumbnail methods, which you will add in the next step, to display thumbnails of the images stored on the camera</source>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MainPage.xaml.cs file, add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> class.</source>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`GetImageList`</data>
					<data id="id4">`GetThumbnail`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <ph dataRef="id3" id="ph1" /> and <ph dataRef="id4" id="ph2" /> methods are added in the following step.</source>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>Step 6: Add code to display images</source>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>The code in this step displays thumbnails of the images stored on the camera.</source>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>The code makes asynchronous calls to the camera to get the thumbnail image.</source>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>However, the next asynchronous call doesn't occur until the previous asynchronous call completes.</source>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>This ensures that only one request is made to the camera at a time.</source>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MainPage.xaml.cs file, add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> class.</source>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>Step 7: Build and run the app</source>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>Press F5 to build and deploy the app (in debug mode).</source>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>To run your app, connect a camera to your machine.</source>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>Then select the app from the AutoPlay list of options.</source>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Not all cameras advertise for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">WPD\\ImageSource</pc> AutoPlay device event.</source>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>Configure removable storage</source>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can identify a volume device such as a memory card or thumb drive as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> device when the volume device is connected to a PC.</source>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This is especially useful when you want to associate a specific app for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> to present to the user for your volume device.</source>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Here we show how to identify your volume device as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> device.</source>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To identify your volume device as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> device, add an autorun.inf file to the root drive of your device.</source>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the autorun.inf file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomEvent</pc> key to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoRun</pc> section.</source>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When your volume device connects to a PC, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> will find the autorun.inf file and treat your volume as a device.</source>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> will create an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay</pc> event by using the name that you supplied for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CustomEvent</pc> key.</source>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can then create an app and register the app as a handler for that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> event.</source>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When the device is connected to the PC, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> will show your app as a handler for your volume device.</source>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/cc144200)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on autorun.inf files, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">autorun.inf entries</pc>.</source>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>Step 1: Create an autorun.inf file</source>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>In the root drive of your volume device, add a file named autorun.inf.</source>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>Open the autorun.inf file and add the following text.</source>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>Step 2: Create a new project and add AutoPlay declarations</source>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Open Visual Studio and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File</pc> menu.</source>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C#</pc> section, under <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows</pc>, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Blank App (Universal Windows)</pc>.</source>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Name the application <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlayCustomEvent</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK.</pc></source>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the Package.appxmanifest file and select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Capabilities</pc> tab.</source>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Removable Storage</pc> capability.</source>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>This gives the app access to the files and folders on removable storage devices.</source>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the manifest file, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</source>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Content</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Content</pc> item that was added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supported Declarations</pc> list.</source>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Alternatively, you can also choose to add an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Device</pc> declaration for your custom AutoPlay event.</source>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Launch Actions</pc> section for your <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Content</pc> event declaration, enter the values in the table below for the first launch action.</source>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Available Declarations</pc> drop-down list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">File Type Associations</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Properties of the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type Associations</pc> declaration, set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Display Name</pc> field to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Show .ms Files</pc> and the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Name</pc> field to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ms\_association</pc>.</source>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add New</pc>.</source>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File Type</pc> field to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">.ms</pc>.</source>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<segment state="initial">
					<source>For content events, AutoPlay filters out any file types that aren't explicitly associated with your app.</source>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>Save and close the manifest file.</source>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>Setting</source>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<segment state="initial">
					<source>Value</source>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>Verb</source>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>show</source>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<segment state="initial">
					<source>Action Display Name</source>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>Show Files</source>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>Content Event</source>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>AutoPlayCustomEventQuickstart</source>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content Event</pc> value is the text that you supplied for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomEvent</pc> key in your autorun.inf file.</source>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action Display Name</pc> setting identifies the string that AutoPlay displays for your app.</source>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting identifies a value that is passed to your app for the selected option.</source>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can specify multiple launch actions for an AutoPlay event and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting to determine which option a user has selected for your app.</source>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can tell which option the user selected by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">verb</pc> property of the startup event arguments passed to your app.</source>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use any value for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verb</pc> setting except, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">open</pc>, which is reserved.</source>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Step 3: Add XAML UI</source>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Open the MainPage.xaml file and add the following XAML to the default <ph dataRef="id1" id="ph1" />Grid<ph dataRef="id2" id="ph2" /> section.</source>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<segment state="initial">
					<source>Step 4: Add activation code</source>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<segment state="initial">
					<source>The code in this step calls a method to display the folders in the root drive of your volume device.</source>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For the AutoPlay content events, AutoPlay passes the root folder of the storage device in the startup arguments passed to the application during the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnFileActivated</pc> event.</source>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can retrieve this folder from the first element of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Files</pc> property.</source>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the App.xaml.cs file and add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc> class.</source>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`DisplayFiles`</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <ph dataRef="id3" id="ph1" /> method is added in the following step.</source>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>Step 5: Add code to display folders</source>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MainPage.xaml.cs file add the following code to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage</pc> class.</source>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>Step 6: Build and run the qpp</source>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<segment state="initial">
					<source>Press F5 to build and deploy the app (in debug mode).</source>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<segment state="initial">
					<source>To run your app, insert a memory card or another storage device into your PC.</source>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<segment state="initial">
					<source>Then select your app from the list of AutoPlay handler options.</source>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<segment state="initial">
					<source>AutoPlay event reference</source>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> system allows apps to register for a variety of device and volume (disk) arrival events.</source>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To register for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay</pc> content events, you must enable the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Removable Storage</pc> capability in your package manifest.</source>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<segment state="initial">
					<source>This table shows the events that you can register for and when they are raised.</source>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<segment state="initial">
					<source>Scenario</source>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<segment state="initial">
					<source>Event</source>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<segment state="initial">
					<source>Description</source>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>Using photos on a Camera</source>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<segment state="initial">
					<source>WPD\ImageSource</source>
				</segment>
			</unit>
			<unit id="337" translate="yes">
				<segment state="initial">
					<source>Raised for cameras that are identified as Windows Portable Devices and offer the ImageSource capability.</source>
				</segment>
			</unit>
			<unit id="338" translate="yes">
				<segment state="initial">
					<source>Using music on an audio player</source>
				</segment>
			</unit>
			<unit id="339" translate="yes">
				<segment state="initial">
					<source>WPD\AudioSource</source>
				</segment>
			</unit>
			<unit id="340" translate="yes">
				<segment state="initial">
					<source>Raised for media players that are identified as Windows Portable Devices and offer the AudioSource capability.</source>
				</segment>
			</unit>
			<unit id="341" translate="yes">
				<segment state="initial">
					<source>Using videos on a video camera</source>
				</segment>
			</unit>
			<unit id="342" translate="yes">
				<segment state="initial">
					<source>WPD\VideoSource</source>
				</segment>
			</unit>
			<unit id="343" translate="yes">
				<segment state="initial">
					<source>Raised for video cameras that are identified as Windows Portable Devices and offer the VideoSource capability.</source>
				</segment>
			</unit>
			<unit id="344" translate="yes">
				<segment state="initial">
					<source>Access a connected flash drive or external hard drive</source>
				</segment>
			</unit>
			<unit id="345" translate="yes">
				<segment state="initial">
					<source>StorageOnArrival</source>
				</segment>
			</unit>
			<unit id="346" translate="yes">
				<segment state="initial">
					<source>Raised when a drive or volume is connected to the PC.</source>
				</segment>
			</unit>
			<unit id="347" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If the drive or volume contains a DCIM, AVCHD, or PRIVATE\ACHD folder in the root of the disk, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ShowPicturesOnArrival</pc> event is raised instead.</source>
				</segment>
			</unit>
			<unit id="348" translate="yes">
				<segment state="initial">
					<source>Using photos from mass storage (legacy)</source>
				</segment>
			</unit>
			<unit id="349" translate="yes">
				<segment state="initial">
					<source>ShowPicturesOnArrival</source>
				</segment>
			</unit>
			<unit id="350" translate="yes">
				<segment state="initial">
					<source>Raised when a drive or volume contains a DCIM, AVCHD, or PRIVATE\ACHD folder in the root of the disk.</source>
				</segment>
			</unit>
			<unit id="351" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>IIf a user  has enabled <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choose what to do with each type of media</pc> in the AutoPlay Control Panel, AutoPlay will examine a volume connected to the PC to determine the type of content on the disk.</source>
				</segment>
			</unit>
			<unit id="352" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When pictures are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ShowPicturesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="353" translate="yes">
				<segment state="initial">
					<source>Receiving photos with Proximity Sharing (tap and send)</source>
				</segment>
			</unit>
			<unit id="354" translate="yes">
				<segment state="initial">
					<source>ShowPicturesOnArrival</source>
				</segment>
			</unit>
			<unit id="355" translate="yes">
				<segment state="initial">
					<source>When users send content with using proximity (tap and send), AutoPlay will examine the shared files to determine the type of content.</source>
				</segment>
			</unit>
			<unit id="356" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If pictures are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ShowPicturesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="357" translate="yes">
				<segment state="initial">
					<source>Using music from mass storage (legacy)</source>
				</segment>
			</unit>
			<unit id="358" translate="yes">
				<segment state="initial">
					<source>PlayMusicFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="359" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If a user has enabled <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choose what to do with each type of media</pc> in the AutoPlay Control Panel, AutoPlay will examine a volume connected to the PC to determine the type of content on the disk.</source>
				</segment>
			</unit>
			<unit id="360" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When music files are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlayMusicFilesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="361" translate="yes">
				<segment state="initial">
					<source>Receiving music with Proximity Sharing (tap and send)</source>
				</segment>
			</unit>
			<unit id="362" translate="yes">
				<segment state="initial">
					<source>PlayMusicFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="363" translate="yes">
				<segment state="initial">
					<source>When users send content with using proximity (tap and send), AutoPlay will examine the shared files to determine the type of content.</source>
				</segment>
			</unit>
			<unit id="364" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If music files are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlayMusicFilesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="365" translate="yes">
				<segment state="initial">
					<source>Using videos from mass storage (legacy)</source>
				</segment>
			</unit>
			<unit id="366" translate="yes">
				<segment state="initial">
					<source>PlayVideoFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="367" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If a user has enabled <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choose what to do with each type of media</pc> in the AutoPlay Control Panel,, AutoPlay will examine a volume connected to the PC to determine the type of content on the disk.</source>
				</segment>
			</unit>
			<unit id="368" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When video files are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlayVideoFilesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="369" translate="yes">
				<segment state="initial">
					<source>Receiving videos with Proximity Sharing (tap and send)</source>
				</segment>
			</unit>
			<unit id="370" translate="yes">
				<segment state="initial">
					<source>PlayVideoFilesOnArrival</source>
				</segment>
			</unit>
			<unit id="371" translate="yes">
				<segment state="initial">
					<source>When users send content with using proximity (tap and send), AutoPlay will examine the shared files to determine the type of content.</source>
				</segment>
			</unit>
			<unit id="372" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If video files are found, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PlayVideoFilesOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="373" translate="yes">
				<segment state="initial">
					<source>Handling mixed sets of files from a connected device</source>
				</segment>
			</unit>
			<unit id="374" translate="yes">
				<segment state="initial">
					<source>MixedContentOnArrival</source>
				</segment>
			</unit>
			<unit id="375" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If a user has enabled <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choose what to do with each type of media</pc> in the AutoPlay Control Panel, AutoPlay will examine a volume connected to the PC to determine the type of content on the disk.</source>
				</segment>
			</unit>
			<unit id="376" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If no specific content type is found (for example, pictures), <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MixedContentOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="377" translate="yes">
				<segment state="initial">
					<source>Handling mixed sets of files with Proximity Sharing (tap and send)</source>
				</segment>
			</unit>
			<unit id="378" translate="yes">
				<segment state="initial">
					<source>MixedContentOnArrival</source>
				</segment>
			</unit>
			<unit id="379" translate="yes">
				<segment state="initial">
					<source>When users send content with using proximity (tap and send), AutoPlay will examine the shared files to determine the type of content.</source>
				</segment>
			</unit>
			<unit id="380" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If no specific content type is found (for example, pictures), <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MixedContentOnArrival</pc> is raised.</source>
				</segment>
			</unit>
			<unit id="381" translate="yes">
				<segment state="initial">
					<source>Handle video from optical media</source>
				</segment>
			</unit>
			<unit id="382" translate="yes">
				<segment state="initial">
					<source>PlayDVDMovieOnArrival</source>
				</segment>
			</unit>
			<unit id="383" translate="yes">
				<segment state="initial">
					<source>PlayBluRayOnArrival</source>
				</segment>
			</unit>
			<unit id="384" translate="yes">
				<segment state="initial">
					<source>PlayVideoCDMovieOnArrival</source>
				</segment>
			</unit>
			<unit id="385" translate="yes">
				<segment state="initial">
					<source>PlaySuperVideoCDMovieOnArrival</source>
				</segment>
			</unit>
			<unit id="386" translate="yes">
				<segment state="initial">
					<source>Handle music from optical media</source>
				</segment>
			</unit>
			<unit id="387" translate="yes">
				<segment state="initial">
					<source>PlayCDAudioOnArrival</source>
				</segment>
			</unit>
			<unit id="388" translate="yes">
				<segment state="initial">
					<source>PlayDVDAudioOnArrival</source>
				</segment>
			</unit>
			<unit id="389" translate="yes">
				<segment state="initial">
					<source>Play enhanced disks</source>
				</segment>
			</unit>
			<unit id="390" translate="yes">
				<segment state="initial">
					<source>PlayEnhancedCDOnArrival</source>
				</segment>
			</unit>
			<unit id="391" translate="yes">
				<segment state="initial">
					<source>PlayEnhancedDVDOnArrival</source>
				</segment>
			</unit>
			<unit id="392" translate="yes">
				<segment state="initial">
					<source>Handle writeable optical disks</source>
				</segment>
			</unit>
			<unit id="393" translate="yes">
				<segment state="initial">
					<source>HandleCDBurningOnArrival</source>
				</segment>
			</unit>
			<unit id="394" translate="yes">
				<segment state="initial">
					<source>HandleDVDBurningOnArrival</source>
				</segment>
			</unit>
			<unit id="395" translate="yes">
				<segment state="initial">
					<source>HandleBDBurningOnArrival</source>
				</segment>
			</unit>
			<unit id="396" translate="yes">
				<segment state="initial">
					<source>Handle any other device or volume connection</source>
				</segment>
			</unit>
			<unit id="397" translate="yes">
				<segment state="initial">
					<source>UnknownContentOnArrival</source>
				</segment>
			</unit>
			<unit id="398" translate="yes">
				<segment state="initial">
					<source>Raised for all events in case content is found that does not match any of the AutoPlay content events.</source>
				</segment>
			</unit>
			<unit id="399" translate="yes">
				<segment state="initial">
					<source>Use of this event is not recommended.</source>
				</segment>
			</unit>
			<unit id="400" translate="yes">
				<segment state="initial">
					<source>You should only register your application for the specific AutoPlay events that it can handle.</source>
				</segment>
			</unit>
			<unit id="401" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can specify that AutoPlay raise a custom AutoPlay Content event using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomEvent</pc> entry in the autorun.inf file for a volume.</source>
				</segment>
			</unit>
			<unit id="402" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/cc144200)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Autorun.inf entries</pc>.</source>
				</segment>
			</unit>
			<unit id="403" translate="yes">
				<segment state="initial">
					<source>You can register your app as an AutoPlay Content or AutoPlay Device event handler by adding an extension to the package.appxmanifest file for your app.</source>
				</segment>
			</unit>
			<unit id="404" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If you are using Visual Studio, you can add an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Content</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoPlay Device</pc> declaration in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Declarations</pc> tab.</source>
				</segment>
			</unit>
			<unit id="405" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211400)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>If you are editing the package.appxmanifest file for your app directly, add an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Extension</pc></pc> element to your package manifest that specifies either <pc dataRefEnd="id6" dataRefStart="id5" id="p3">windows.autoPlayContent</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">windows.autoPlayDevice</pc> as the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Category</pc>.</source>
				</segment>
			</unit>
			<unit id="406" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, the following entry in the package manifest adds an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AutoPlay Content</pc> extension to register the app as a handler for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShowPicturesOnArrival</pc> event.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>