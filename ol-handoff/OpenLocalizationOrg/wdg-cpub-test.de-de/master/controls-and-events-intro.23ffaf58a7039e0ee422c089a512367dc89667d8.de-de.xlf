<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">3aae15c6a71990b56ab3a3db41a8949418f90cbe</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\controls-and-events-intro.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a78a7a4daa934be54067d4fe4cca76f456a3d5ce</mda:meta><mda:meta type="olxliffhash">687034957b1e7376ac1d1e54d64d853931b63db5</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to add controls to your app.</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Add controls and handle events</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Intro to controls and events</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to add controls to your app.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>There are 3 key steps to adding controls to your app:</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Add a control to your app UI.</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Set properties on the control, such as width, height, or foreground color.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Add code to the control's event handlers so that it does something.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Add a control</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You can add a control to an app in several ways:</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Use a design tool like Blend for Visual Studio or the Microsoft Visual Studio Extensible Application Markup Language (XAML) designer.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Add the control to the XAML markup in the Visual Studio XAML editor.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Add the control in code.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Controls that you add in code are visible when the app runs, but are not visible in the Visual Studio XAML designer.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>In Visual Studio, when you add and manipulate controls in your app, you can use many of the program's features, including the Toolbox, XAML designer, XAML editor, and the Properties window.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The Visual Studio Toolbox displays many of the controls that you can use in your app.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>To add a control to your app, double-click it in the Toolbox.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>For example, when you double-click the TextBox control, this XAML is added to the XAML view.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>You can also drag the control from the Toolbox to the XAML designer.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Set the name of a control</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/x-name-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>To work with a control in code, you set its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> attribute and reference it by name in your code.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>You can set the name in the Visual Studio Properties window or in XAML.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Here's how to set the name of the currently selected control by using the Name text box at the top of the Properties window.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>To name a control</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Select the element to name.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>In the Properties panel, type a name into the Name text box.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Press Enter to commit the name.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Name property in the Visual Studio designer</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Here's how to set the name of a control in the XAML editor by adding the x:Name attribute.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Set the control properties</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>You use properties to specify the appearance, content, and other attributes of controls.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>When you add a control using a design tool, some properties that control size, position, and content might be set for you by Visual Studio.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>You can change some properties, such as Width, Height or Margin, by selecting and manipulating the control in the Design view.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>This illustration shows some of the resizing tools available in Design view.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Resizing tools in the Visual Studio designer</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>You might want to let the control be sized and positioned automatically.</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>In this case, you can reset the size and position properties that Visual Studio set for you.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>To reset a property</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>In the Properties panel, click the property marker next to the property value.</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The property menu opens.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>In the property menu, click Reset.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Visual Studio property reset menu option</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>You can set control properties in the Properties window, in XAML, or in code.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>For example, to change the foreground color for a Button, you set the control's Foreground property.</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>This illustration shows how to set the Foreground property by using the color picker in the Properties window.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Color picker in the Visual Studio designer</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Here's how to set the Foreground property in the XAML editor.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Notice the Visual Studio IntelliSense window that opens to help you with the syntax.</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Intellisense in XAML part 1</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Intellisense in XAML part 2</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Here's the resulting XAML after you set the Foreground property.</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Here's how to set the Foreground property in code.</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Create an event handler</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Each control has events that enable you to respond to actions from your user or other changes in your app.</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>For example, a Button control has a Click event that is raised when a user clicks the Button.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>You create a method, called an event handler, to handle the event.</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>You can associate a control's event with an event handler method in the Properties window, in XAML, or in code.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/events-and-routed-events-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about events, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Events and routed events overview</pc>.</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>To create an event handler, select the control and then click the Events tab at the top of the Properties window.</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>The Properties window lists all of the events available for that control.</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Here are some of the events for a Button.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Visual Studio event list</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>To create an event handler with the default name, double-click the text box next to the event name in the Properties window.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>To create an event handler with a custom name, type the name of your choice into the text box and press enter.</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>The event handler is created and the code-behind file is opened in the code editor.</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The event handler method has 2 parameters.</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">`sender`</data>
				</originalData>
				<segment state="initial">
					<source>The first is <ph dataRef="id1" id="ph1" />, which is a reference to the object where the handler is attached.</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">`sender`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>The <ph dataRef="id1" id="ph1" /> parameter is an <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Object</pc> type.</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">`sender`</data>
					<data id="id2">`sender`</data>
				</originalData>
				<segment state="initial">
					<source>You typically cast <ph dataRef="id1" id="ph1" /> to a more precise type if you expect to check or change the state on the <ph dataRef="id2" id="ph2" /> object itself.</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">`sender`</data>
				</originalData>
				<segment state="initial">
					<source>Based on your own app design, you expect a type that is safe to cast the <ph dataRef="id1" id="ph1" /> to, based on where the handler is attached.</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">`e`</data>
					<data id="id2">`args`</data>
				</originalData>
				<segment state="initial">
					<source>The second value is event data, which generally appears in signatures as the <ph dataRef="id1" id="ph1" /> or <ph dataRef="id2" id="ph2" /> parameter.</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">`Button1`</data>
				</originalData>
				<segment state="initial">
					<source>Here's code that handles the Click event of a Button named <ph dataRef="id1" id="ph1" />.</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>When you click the button, the Foreground property of the Button you clicked is set to blue.</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>You can also associate an event handler in XAML.</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>In the XAML editor, type in the event name that you want to handle.</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Visual Studio shows an IntelliSense window when you begin typing.</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">`&lt;New Event Handler&gt;`</data>
				</originalData>
				<segment state="initial">
					<source>After you specify the event, you can double-click <ph dataRef="id1" id="ph1" /> in the IntelliSense window to create a new event handler with the default name, or select an existing event handler from the list.</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Here's the IntelliSense window that appears.</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>It helps you create a new event handler or select an existing event handler.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Intellisense for the click event</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>This example shows how to associate a Click event with an event handler named Button_Click in XAML.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>You can also associate an event with its event handler in the code-behind.</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Here's how to associate an event handler in code.</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://go.microsoft.com/fwlink/p/?linkid=258743)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Command bars</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Search</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Flyouts</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>