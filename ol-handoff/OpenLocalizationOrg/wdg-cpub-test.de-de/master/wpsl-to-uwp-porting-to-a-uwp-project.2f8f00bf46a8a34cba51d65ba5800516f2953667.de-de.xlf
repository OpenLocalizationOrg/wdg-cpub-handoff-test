<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-10daaac</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">88b336f697775addd58d82ca735742d7c521e3b6</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-porting-to-a-uwp-project.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">0c0a4fb614df5f8122bbd7033d5b83cc26e288f1</mda:meta><mda:meta type="olxliffhash">9390f281023bb1c3a33d37634fd15124840b9253</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Porting a Windows Phone Silverlight project to a UWP project</source>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Porting a Windows Phone Silverlight project to a UWP project</source>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
				</originalData>
				<segment state="initial">
					<source>The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc>.</source>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Create the project and copy files to it</source>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Launch Microsoft Visual Studio 2015 and create a new Blank Application (Windows Universal) project.</source>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh768232)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Jumpstart your Windows Store app using templates (C#, C++, Visual Basic)</pc>.</source>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Your new project builds an app package (an appx file) that will run on all device families.</source>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>In your Windows Phone Silverlight app project, identify all the source code files and visual asset files that you want to reuse.</source>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Using File Explorer, copy data models, view models, visual assets, Resource Dictionaries, folder structure, and anything else that you wish to re-use, to your new project.</source>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Copy or create sub-folders on disk as necessary.</source>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Copy views (for example, MainPage.xaml and MainPage.xaml.cs) into the new project node, too.</source>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Again, create new sub-folders as necessary, and remove the existing views from the project.</source>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>But, before you over-write or remove a view that Visual Studio generated, keep a copy because it may be useful to refer to it later.</source>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The first phase of porting a Windows Phone Silverlight app focuses on getting it to look good and work well on one device family.</source>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Later, you'll turn your attention to making sure the views adapt themselves well to all form factors, and optionally to adding any adaptive code to get the most from a particular device family.</source>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</source>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select the files that you copied, right-click them, and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</source>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>This will automatically include their containing folders.</source>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can then toggle <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Show All Files</pc> off if you like.</source>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>An alternative workflow, if you prefer, is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add Existing Item</pc> command, having created any necessary sub-folders in the Visual Studio <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc>.</source>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Double-check that your visual assets have <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</source>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>The differences in namespace and class names will generate lots of build errors at this stage.</source>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227503)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you open the views that Visual Studio generated, you'll see that they are of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc></pc>, and not <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PhoneApplicationPage</pc>.</source>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>There are lots of XAML markup and imperative code differences that the following topics in this porting guide cover in detail.</source>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-namespace-and-class-mappings.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>But, you'll make fast progress just following these general steps: change "clr-namespace" to "using" in your namespace prefix declarations in XAML markup; use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Namespace and class mappings</pc> topic and Visual Studio's <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Find and Replace</pc> command to make bulk changes to your source code (for example, replace "System.Windows" with "Windows.UI.Xaml"); and in the imperative code editor in Visual Studio use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Resolve</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Organize Usings</pc> commands on the context menu for more targeted changes.</source>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Extension SDKs</source>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Most of the Universal Windows Platform (UWP) APIs your ported app will call are implemented in the set of APIs known as the universal device family.</source>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>But, some are implemented in extension SDKs, and Visual Studio only recognizes APIs that are implemented by your app's target device family or by any extension SDKs that you have referenced.</source>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>If you get compile errors about namespaces or types or members that could not be found, then this is likely to be the cause.</source>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Open the API's topic in the API reference documentation and navigate to the Requirements section: that will tell you what the implementing device family is.</source>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>If that's not your target device family, then to make the API available to your project, you will need a reference to the extension SDK for that device family.</source>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">&amp;gt;</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">&amp;gt;</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
				</originalData>
				<segment state="initial">
					<source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Add Reference</pc> <ph dataRef="id6" id="ph2" /> <pc dataRefEnd="id8" dataRefStart="id7" id="p3">Windows Universal</pc> <ph dataRef="id9" id="ph3" /> <pc dataRefEnd="id11" dataRefStart="id10" id="p4">Extensions</pc> and select the appropriate extension SDK.</source>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if the APIs you want to call are available only in the mobile device family, and they were introduced in version 10.0.x.y, then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Mobile Extensions for the UWP</pc>.</source>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>That will add the following reference to your project file:</source>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>The name and version number match the folders in the installed location of your SDK.</source>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>For example, the above information matches this folder name:</source>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn949001)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Unless your app targets the device family that implements the API, you'll need to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ApiInformation</pc></pc> class to test for the presence of the API before you call it (this is called adaptive code).</source>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>This condition will then be evaluated wherever your app runs, but it will only evaluate to true on devices where the API is present and therefore available to call.</source>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Only use extension SDKs and adaptive code after first checking whether a universal API exists.</source>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Some examples are given in the section below.</source>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#appxpackage)</data>
				</originalData>
				<segment state="initial">
					<source>Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App package manifest</pc>.</source>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Maximizing markup and code reuse</source>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>You will find that refactoring a little, and/or adding adaptive code (which is explained below), will allow you to maximize the markup and code that works across all device families.</source>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Here are more details.</source>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Files that are common to all device families need no special consideration.</source>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Those files will be used by the app on all the device families that it runs on.</source>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>This includes XAML markup files, imperative source code files, and asset files.</source>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>It is possible for your app to detect the device family that it is running on and navigate to a view that has been designed specifically for that device family.</source>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</data>
				</originalData>
				<segment state="initial">
					<source>For more details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Detecting the platform your app is running on</pc>.</source>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A similar technique that you may find useful if there is no alternative is to give a markup file or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> file (or the folder that contains the file) a special name such that it is automatically loaded at runtime only when your app runs on a particular device family.</source>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore1.md#an-optional-adjustment)</data>
				</originalData>
				<segment state="initial">
					<source>This technique is illustrated in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc> case study.</source>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>To use features that are not available on all device families (for example, printers, scanners, or the camera button) you can write adaptive code.</source>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#conditional-compilation)</data>
				</originalData>
				<segment state="initial">
					<source>See the third example in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conditional compilation, and adaptive code</pc> in this topic.</source>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>If you want to support both Windows Phone Silverlight and Windows 10, then you may be able to share source code files between projects.</source>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's how: in Visual Studio, right-click the project in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add Existing Item</pc>, select the files to share, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add As Link</pc>.</source>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Store your source code files in a common folder on the file system where the projects that link to them can see them, and don't forget to add them to source control.</source>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>If you can factor your imperative source code so that most, if not all, of a file will work on both platforms, then you don't need to have two copies of it.</source>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>You can wrap any platform-specific logic in the file inside conditional compilation directives where possible, or run-time conditions where necessary.</source>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://msdn.microsoft.com/library/ed8yd1ha.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>See the next section below, and <pc dataRefEnd="id2" dataRefStart="id1" id="p1">C# Preprocessor Directives</pc>.</source>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>For reuse at the binary level, rather than the source code level, there are Portable Class Libraries, which support the subset of .NET APIs that are available in Windows Phone Silverlight as well as the subset for Windows 10 apps (.NET Core).</source>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Portable Class Library assemblies are binary compatible with these .NET platforms and more.</source>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Use Visual Studio to create a project that targets a Portable Class Library.</source>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://msdn.microsoft.com/library/gg597391.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cross-Platform Development with the Portable Class Library</pc>.</source>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Conditional compilation, and adaptive code</source>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>If you want to support both Windows Phone Silverlight and Windows 10 in a single code file then you can do that.</source>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>If you look in your Windows 10 project at the project properties pages, you'll see that the project defines WINDOWS\_UAP as a conditional compilation symbol.</source>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>In general, you can use the following logic to perform conditional compilation.</source>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>If you have code that you've been sharing between a Windows Phone Silverlight app and a Windows Store app, then you may already have source code with logic like this:</source>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>If so, and if you now want to support Windows 10 in addition, then you can do that, too.</source>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>You may have used conditional compilation to limit handling of the hardware back button to Windows Phone.</source>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>In Windows 10, the back button event is a universal concept.</source>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn893596)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Back buttons implemented in hardware or in software will all raise the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackRequested</pc></pc> event, so that's the one to handle.</source>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>You may have used conditional compilation to limit handling of the hardware camera button to Windows Phone.</source>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>In Windows 10, the hardware camera button is a concept particular to the mobile device family.</source>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Because one app package will be running on all devices, we change our compile-time condition into a run-time condition using what is known as adaptive code.</source>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn949001)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/jj207557)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To do that, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ApiInformation</pc></pc> class to query at run-time for the presence of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HardwareButtons</pc></pc> class.</source>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HardwareButtons</pc> is defined in the mobile extension SDK, so we'll need to add a reference to that SDK to our project for this code to compile.</source>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Note, though, that the handler will only be executed on a device that implements the types defined in the mobile extension SDK, and that's the mobile device family.</source>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>So, the following code is careful only to use features that are present, although it achieves it in a different way from conditional compilation.</source>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</data>
				</originalData>
				<segment state="initial">
					<source>Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Detecting the platform your app is running on</pc>.</source>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>The app package manifest</source>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The settings in your project (including any extension SDKs references) determine the API surface area that your app can call.</source>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>But, your app package manifest is what determines the actual set of devices that your customers can install your app onto from the Store.</source>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn986903)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see Examples in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetDeviceFamily</pc></pc>.</source>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>It's worth knowing how to edit the app package manifest, because the topics that follow talk about using it for various declarations, capabilities, and other settings that some features need.</source>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>You can use the Visual Studio app package manifest editor to edit it.</source>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc> is not shown, choose it from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">View</pc> menu.</source>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Double-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package.appxmanifest</pc>.</source>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>This opens the manifest editor window.</source>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Select the appropriate tab to make changes and then save the changes.</source>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn934763)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You may want to ensure that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">pm:PhoneIdentity</pc> element in the ported app manifest matches what is in the app manifest of the app you're porting (for full details, see the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">pm:PhoneIdentity</pc></pc> topic).</source>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn934820)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Package manifest schema reference for Windows 10</pc>.</source>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-troubleshooting.md)</data>
				</originalData>
				<segment state="initial">
					<source>The next topic is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Troubleshooting</pc>.</source>
				</segment>
			</unit>
		</group>
	</file>
</xliff>