<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">a7b27829ecfb8c9e92b4e6cd10adaa42675f7719</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\relativesource-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">cc3244587e93d5698197a3824ccc8393977e9842</mda:meta><mda:meta type="olxliffhash">11ebbc6d8d0156461126ef72e83963e74520bb97</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</source>
					<target>Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>RelativeSource markup extension</source>
					<target>RelativeSource markup extension</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>{RelativeSource} markup extension</source>
					<target>{RelativeSource} markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</source>
					<target>Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage (Self mode)</source>
					<target>XAML attribute usage (Self mode)</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage (TemplatedParent mode)</source>
					<target>XAML attribute usage (TemplatedParent mode)</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209915)</data>
					<data id="id3">&lt;strong&gt;</data>
					<data id="id4">&lt;/strong&gt;</data>
					<data id="id5">&lt;strong&gt;</data>
					<data id="id6">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>| Term | Description | | {RelativeSource Self} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Mode<ph dataRef="id4" id="ph2" /></pc> value is <ph dataRef="id5" id="ph3" />Self<ph dataRef="id6" id="ph4" />.</source>
					<target>| Term | Description | | {RelativeSource Self} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Mode<ph dataRef="id4" id="ph2" /></pc> value is <ph dataRef="id5" id="ph3" />Self<ph dataRef="id6" id="ph4" />.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The target element should be used as the source for this binding.</source>
					<target>The target element should be used as the source for this binding.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This is useful for binding one property of an element to another property on the same element.</source>
					<target>This is useful for binding one property of an element to another property on the same element.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
					<data id="id3">&lt;strong&gt;</data>
					<data id="id4">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>| | {RelativeSource TemplatedParent} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />ControlTemplate<ph dataRef="id4" id="ph2" /></pc> is applied is the source for this binding.</source>
					<target>| | {RelativeSource TemplatedParent} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />ControlTemplate<ph dataRef="id4" id="ph2" /></pc> is applied is the source for this binding.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>This is useful for applying runtime information to bindings at the template level.</source>
					<target>This is useful for applying runtime information to bindings at the template level.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>|</source>
					<target>|</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209831)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](binding-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> can set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> either as an attribute on a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Binding</pc> object element or as a component within a <pc dataRefEnd="id12" dataRefStart="id11" id="p6">{Binding} markup extension</pc>.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> can set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> either as an attribute on a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Binding</pc> object element or as a component within a <pc dataRefEnd="id12" dataRefStart="id11" id="p6">{Binding} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This is why two different XAML syntaxes are shown.</source>
					<target>This is why two different XAML syntaxes are shown.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](binding-markup-extension.md)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RelativeSource</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> in that it is a markup extension that is capable of returning instances of itself, supporting a string-based construction that essentially passes an argument to the constructor.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RelativeSource</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> in that it is a markup extension that is capable of returning instances of itself, supporting a string-based construction that essentially passes an argument to the constructor.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209915)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In this case, the argument being passed is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mode</pc></pc> value.</source>
					<target>In this case, the argument being passed is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mode</pc></pc> value.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Self</pc> mode is useful for cases where the same element should be used as the source object and target object for a binding, but different properties are the source and the target.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Self</pc> mode is useful for cases where the same element should be used as the source object and target object for a binding, but different properties are the source and the target.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209828)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This is useful for binding one property of an element to another property on the same element, and is a variation on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding that does not require naming and then self-referencing the element.</source>
					<target>This is useful for binding one property of an element to another property on the same element, and is a variation on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding that does not require naming and then self-referencing the element.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you bind one property of an element to another property on the same element, either the properties must use the same property type, or you must also use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> on the binding to convert the values.</source>
					<target>If you bind one property of an element to another property on the same element, either the properties must use the same property type, or you must also use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> on the binding to convert the values.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209419)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/br209006)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, you could use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> as a source for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> without conversion, but you'd need a converter to use <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IsEnabled</pc></pc> as a source for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Visibility</pc></pc>.</source>
					<target>For example, you could use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> as a source for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> without conversion, but you'd need a converter to use <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IsEnabled</pc></pc> as a source for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Visibility</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Here's an example.</source>
					<target>Here's an example.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243371)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](binding-markup-extension.md)</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc></pc> uses a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc> so that its <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Height</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Width</pc></pc> are always equal and it renders as a square.</source>
					<target>This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc></pc> uses a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc> so that its <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Height</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Width</pc></pc> are always equal and it renders as a square.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Only the Height is set as a fixed value.</source>
					<target>Only the Height is set as a fixed value.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208713)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>For this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rectangle</pc> its default <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> is <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc>, not <pc dataRefEnd="id10" dataRefStart="id9" id="p5">this</pc>.</source>
					<target>For this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rectangle</pc> its default <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> is <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc>, not <pc dataRefEnd="id10" dataRefStart="id9" id="p5">this</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">`RelativeSource={RelativeSource Self}`</data>
				</originalData>
				<segment state="initial">
					<source>So to establish the data context source to be the object itself (and enable binding to its other properties) we use the <ph dataRef="id1" id="ph1" /> argument in the {Binding} markup extension usage.</source>
					<target>So to establish the data context source to be the object itself (and enable binding to its other properties) we use the <ph dataRef="id1" id="ph1" /> argument in the {Binding} markup extension usage.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">`RelativeSource={RelativeSource Self}`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br208713)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/br227503)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
				</originalData>
				<segment state="initial">
					<source>Another technique that can be useful is to use <ph dataRef="id1" id="ph1" /> as a way to set an object's <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DataContext</pc></pc> to itself, where the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">Page</pc></pc> class has been extended with a custom property that's already providing a ready-to-go view model for its own data binding.</source>
					<target>Another technique that can be useful is to use <ph dataRef="id1" id="ph1" /> as a way to set an object's <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DataContext</pc></pc> to itself, where the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">Page</pc></pc> class has been extended with a custom property that's already providing a ready-to-go view model for its own data binding.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>You see this technique in some of the SDK examples:</source>
					<target>You see this technique in some of the SDK examples:</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209831)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The XAML usage for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc> shows only the usage for which it is intended: setting a value for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> in XAML as part of a binding expression.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The XAML usage for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc> shows only the usage for which it is intended: setting a value for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> in XAML as part of a binding expression.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209913)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Theoretically, other usages are possible if setting a property where the value is <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc></pc>.</source>
					<target>Theoretically, other usages are possible if setting a property where the value is <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>XAML overview</source>
					<target>XAML overview</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Data binding in depth</source>
					<target>Data binding in depth</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>{Binding} markup extension</source>
					<target>{Binding} markup extension</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Binding</source>
					<target>Binding</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>RelativeSource</source>
					<target>RelativeSource</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>