{"nodes":[{"pos":[60,104],"content":"Create a Hello World app in C++ (Windows 10)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create a Hello World app in C++ (Windows 10)","pos":[0,44]}]},{"pos":[118,337],"content":"With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10. These apps have a UI that's defined in Extensible Application Markup Language (XAML).","needQuote":true,"needEscape":true,"nodes":[{"content":"With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10. These apps have a UI that's defined in Extensible Application Markup Language (XAML).","pos":[0,219],"nodes":[{"content":"With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.","pos":[0,133]},{"content":"These apps have a UI that's defined in Extensible Application Markup Language (XAML).","pos":[134,219]}]}]},{"content":"Create a \"hello world\" app in C++ (Windows 10)","pos":[345,391]},{"content":"With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10.","pos":[393,526]},{"content":"These apps have a UI that's defined in Extensible Application Markup Language (XAML).","pos":[527,612]},{"content":"To develop an app that runs on Windows 8.1 and Windows Phone 8.1, use Microsoft Visual Studio 2013 Update 3 or later and follow the steps <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn263168)</ept>.","pos":[614,817],"source":"To develop an app that runs on Windows 8.1 and Windows Phone 8.1, use Microsoft Visual Studio 2013 Update 3 or later and follow the steps [here](https://msdn.microsoft.com/library/windows/apps/Dn263168)."},{"content":"The most significant difference is that for Windows 8.1 and Windows Phone 8.1, you use a solution with three projects, one for the desktop (or tablet device), one for the phone, and one for shared code.","pos":[818,1020]},{"content":"For Windows 10 development, all code shares the same project.","pos":[1021,1082]},{"content":"For tutorials in other programming languages, see:","pos":[1084,1134]},{"content":"Create your first Windows Store app using JavaScript","pos":[1141,1193]},{"content":"Create your first Windows Store app using C# or Visual Basic","pos":[1259,1319]},{"content":"Before you start...","pos":[1383,1402]},{"content":"To complete this tutorial, you must use Visual Studio 2015 Community or later, or one of the non-Community versions of Visual Studio 2015, on a computer that's running Windows 10 or Windows 8.1.","pos":[1408,1602]},{"content":"To download, see <bpt id=\"p1\">[</bpt>Get the tools<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=532666)</ept>.","pos":[1603,1685],"source":" To download, see [Get the tools](http://go.microsoft.com/fwlink/p/?LinkId=532666)."},{"pos":[1690,1810],"content":"Install the appropriate <bpt id=\"p1\">[</bpt>SDK<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=533049)</ept> for Windows Universal Platform development.","source":"Install the appropriate [SDK](http://go.microsoft.com/fwlink/?LinkId=533049) for Windows Universal Platform development."},{"content":"You also must have a developer license.","pos":[1815,1854]},{"content":"For instructions, see <bpt id=\"p1\">[</bpt>Get a developer license<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh974578)</ept>.","pos":[1855,1961],"source":" For instructions, see [Get a developer license](https://msdn.microsoft.com/library/windows/apps/Hh974578)."},{"pos":[1966,2128],"content":"We assume you have a basic understanding of standard C++, XAML, and the concepts in the <bpt id=\"p1\">[</bpt>XAML overview<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt185595)</ept>.","source":"We assume you have a basic understanding of standard C++, XAML, and the concepts in the [XAML overview](https://msdn.microsoft.com/library/windows/apps/Mt185595)."},{"content":"We assume you're using the default window layout in Visual Studio.","pos":[2133,2199]},{"content":"To reset to the default layout, on the menu bar, choose <bpt id=\"p1\">**</bpt>Window<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Reset Window Layout<ept id=\"p2\">**</ept>.","pos":[2200,2293],"source":" To reset to the default layout, on the menu bar, choose **Window** > **Reset Window Layout**."},{"content":"Note that there is a known issue with Visual Studio 2015 that can result in a NullReferenceException when loading the XAML designer.","pos":[2298,2430]},{"content":"This issue blocks some of the steps of this tutorial, unless you apply the workaround.","pos":[2431,2517]},{"content":"For details about this issue and the workaround, see <bpt id=\"p1\">[</bpt>this MSDN forum post<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=624036)</ept> .","pos":[2518,2644],"source":" For details about this issue and the workaround, see [this MSDN forum post](http://go.microsoft.com/fwlink/p/?LinkId=624036) ."},{"content":"Comparing C++ desktop apps to Windows apps","pos":[2649,2691]},{"content":"If you're coming from a background in Windows desktop programming in C++, you'll probably find that some aspects of Windows Store app and Windows Phone app programming are familiar, but other aspects require some learning.","pos":[2693,2915]},{"content":"What's the same?","pos":[2921,2937]},{"content":"You can use the STL, the CRT (with some exceptions), and any other C++ library as long as the code does not attempt to call Windows functions that are not accessible from the Windows Runtime environment.","pos":[2943,3146]},{"content":"If you're accustomed to visual designers, you can still use the designer built into Microsoft Visual Studio, or you can use the more full-featured Blend for Visual Studio.","pos":[3152,3323]},{"content":"If you're accustomed to coding UI by hand, you can hand-code your XAML.","pos":[3324,3395]},{"content":"You're still creating apps that use Windows operating system types and your own custom types.","pos":[3401,3494]},{"content":"You're still using the Visual Studio debugger, profiler, and other development tools.","pos":[3500,3585]},{"content":"You're still creating apps that are compiled to native machine code by the Visual C++ compiler.","pos":[3591,3686]},{"content":"Windows Store apps in C++ don't execute in a managed runtime environment.","pos":[3687,3760]},{"content":"What's new?","pos":[3766,3777]},{"content":"The design principles for Windows Store apps and Universal Windows apps are very different from those for desktop apps.","pos":[3783,3902]},{"content":"Window borders, labels, dialog boxes, and so on, are de-emphasized.","pos":[3903,3970]},{"content":"Content is foremost.","pos":[3971,3991]},{"content":"Great Universal Windows apps incorporate these principles from the very beginning of the planning stage.","pos":[3992,4096]},{"content":"You're using XAML to define the entire UI.","pos":[4102,4144]},{"content":"The separation between UI and core program logic is much clearer in a Windows Universal app than in an MFC or Win32 app.","pos":[4145,4265]},{"content":"Other people can work on the appearance of the UI in the XAML file while you're working on the behavior in the code file.","pos":[4266,4387]},{"content":"You're primarily programming against a new, easy-to-navigate, object-oriented API, the Windows Runtime, although on Windows devices Win32 is still available for some functionality.","pos":[4393,4573]},{"content":"You use C++/CX to consume and create Windows Runtime objects.","pos":[4579,4640]},{"content":"C++/CX enables C++ exception handling, delegates, events, and automatic reference counting of dynamically created objects.","pos":[4641,4763]},{"content":"When you use C++/CX, the details of the underlying COM and Windows architecture are hidden from your app code.","pos":[4764,4874]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>C++/CX Language Reference<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/hh699871.aspx)</ept>.","pos":[4875,4998],"source":" For more information, see [C++/CX Language Reference](https://msdn.microsoft.com/en-us/library/windows/apps/hh699871.aspx)."},{"content":"Your app is compiled into a package that also contains metadata about the types that your app contains, the resources that it uses, and the capabilities that it requires (file access, internet access, camera access, and so forth).","pos":[5004,5234]},{"content":"In the Windows Store and Windows Phone Store your app is verified as safe by a certification process and made discoverable to millions of potential customers.","pos":[5240,5398]},{"content":"Hello World Store app in C++","pos":[5403,5431]},{"content":"Our first app is a \"Hello World\" that demonstrates some basic features of interactivity, layout, and styles.","pos":[5433,5541]},{"content":"We'll create an app from the Windows Universal app project template.","pos":[5542,5610]},{"content":"If you've developed apps for Windows 8.1 and Windows Phone 8.1 before, you might remember that you had to have three projects in Visual Studio, one for the Windows app, one for the phone app, and another with shared code.","pos":[5611,5832]},{"content":"The Windows 10 Universal Windows Platform (UWP) makes it possible to have just one project, which runs on all devices, including desktop and laptop computers running Windows 10, devices such as tablets, mobile phones, and so on.","pos":[5833,6061]},{"content":"We'll start with the basics:","pos":[6063,6091]},{"content":"How to create a Universal Windows project in Visual Studio 2015 or later.","pos":[6097,6170]},{"content":"How to understand the projects and files that are created.","pos":[6176,6234]},{"content":"How to understand the extensions in Visual C++ component extensions (C++/CX), and when to use them.","pos":[6240,6339]},{"content":"First, create a solution in Visual Studio","pos":[6343,6384]},{"pos":[6392,6467],"content":"In Visual Studio, on the menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept>.","source":"In Visual Studio, on the menu bar, choose **File** > **New** > **Project**."},{"pos":[6473,6594],"content":"In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box, in the left pane, expand <bpt id=\"p2\">**</bpt>Installed<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>Visual C++<ept id=\"p3\">**</ept><ph id=\"ph2\"> &gt; </ph><bpt id=\"p4\">**</bpt>Windows<ept id=\"p4\">**</ept><ph id=\"ph3\"> &gt; </ph><bpt id=\"p5\">**</bpt>Universal<ept id=\"p5\">**</ept>.","source":"In the **New Project** dialog box, in the left pane, expand **Installed** > **Visual C++** > **Windows** > **Universal**."},{"pos":[6600,6661],"content":"In the center pane, select <bpt id=\"p1\">**</bpt>Blank App (Universal Windows)<ept id=\"p1\">**</ept>.","source":"In the center pane, select **Blank App (Universal Windows)**."},{"content":"Enter a name for the project.","pos":[6667,6696]},{"content":"We'll name it HelloWorld.","pos":[6697,6722]},{"content":"C++ project templates in the New Project dialog box","pos":[6727,6778]},{"pos":[6829,6854],"content":"Choose the <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button.","source":"Choose the **OK** button."},{"content":"If this is the first UWP project you've created, and you haven't enabled Developer Mode on your computer, the Enable Developer mode dialog box appears.","pos":[6859,7010]},{"content":"Click on the link to bring up the Settings page that lets you set Developer Mode.","pos":[7011,7092]},{"content":"Developer Mode allows your apps to be deployed and run locally.","pos":[7093,7156]},{"content":"Your project files are created.","pos":[7161,7192]},{"content":"Before we go on, let’s look at what's in the solution.","pos":[7194,7248]},{"content":"Univeral app solution with nodes collapsed","pos":[7252,7294]},{"content":"About the project files","pos":[7352,7375]},{"content":"Every .xaml file in a project folder has a corresponding .xaml.h file and .xaml.cpp file in the same folder and a .g file and a .g.hpp file in the Generated Files folder, which is on disk but not part of the project.","pos":[7377,7593]},{"content":"You modify the XAML files to create UI elements and connect them to data sources (DataBinding).","pos":[7594,7689]},{"content":"You modify the .h and .cpp files to add custom logic for event handlers.","pos":[7690,7762]},{"content":"The auto-generated files represent the transformation of the XAML markup into C++.","pos":[7763,7845]},{"content":"Don't modify these files, but you can study them to better understand how the code-behind works.","pos":[7846,7942]},{"content":"Basically, the generated file contains a partial class definition for a XAML root element; this class is the same class that you modify in the \\*.xaml.h and .cpp files.","pos":[7943,8111]},{"content":"The generated files declare the XAML UI child elements as class members so that you can reference them in the code you write.","pos":[8112,8237]},{"content":"At build time, the generated code and your code are merged into a complete class definition and then compiled.","pos":[8238,8348]},{"content":"Let's look first at the project files.","pos":[8350,8388]},{"content":"<bpt id=\"p1\">**</bpt>App.xaml, App.xaml.h, App.xaml.cpp:<ept id=\"p1\">**</ept> Represent the Application object, which is an app's entry point.","pos":[8394,8498],"source":"**App.xaml, App.xaml.h, App.xaml.cpp:** Represent the Application object, which is an app's entry point."},{"content":"App.xaml contains no page-specific UI markup, but you can add UI styles and other elements that you want to be accessible from any page.","pos":[8499,8635]},{"content":"The code-behind files contain handlers for the <bpt id=\"p1\">**</bpt>OnLaunched<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>OnSuspending<ept id=\"p2\">**</ept> events.","pos":[8636,8726],"source":" The code-behind files contain handlers for the **OnLaunched** and **OnSuspending** events."},{"content":"Typically, you add custom code here to initialize your app when it starts and perform cleanup when it's suspended or terminated.","pos":[8727,8855]},{"content":"<bpt id=\"p1\">**</bpt>MainPage.xaml, MainPage.xaml.h, MainPage.xaml.cpp:<ept id=\"p1\">**</ept>Contain the XAML markup and code-behind for the default \"start\" page in an app.","pos":[8860,8993],"source":"**MainPage.xaml, MainPage.xaml.h, MainPage.xaml.cpp:**Contain the XAML markup and code-behind for the default \"start\" page in an app."},{"content":"It has no navigation support or built-in controls.","pos":[8994,9044]},{"content":"<bpt id=\"p1\">**</bpt>pch.h, pch.cpp:<ept id=\"p1\">**</ept> A precompiled header file and the file that includes it in your project.","pos":[9049,9141],"source":"**pch.h, pch.cpp:** A precompiled header file and the file that includes it in your project."},{"content":"In pch.h, you can include any headers that do not change often and are included in other files in the solution.","pos":[9142,9253]},{"content":"<bpt id=\"p1\">**</bpt>Package.appxmanifest:<ept id=\"p1\">**</ept> An XML file that describes the device capabilities that your app requires, and the app version info and other metadata.","pos":[9258,9403],"source":"**Package.appxmanifest:** An XML file that describes the device capabilities that your app requires, and the app version info and other metadata."},{"content":"To open this file in the <bpt id=\"p1\">**</bpt>Manifest Designer<ept id=\"p1\">**</ept>, just double-click it.","pos":[9404,9473],"source":" To open this file in the **Manifest Designer**, just double-click it."},{"pos":[9478,9588],"content":"<bpt id=\"p1\">**</bpt>HelloWorld\\_TemporaryKey.pfx:<ept id=\"p1\">**</ept>A key that enables deployment of the app on this machine, from Visual Studio.","source":"**HelloWorld\\_TemporaryKey.pfx:**A key that enables deployment of the app on this machine, from Visual Studio."},{"content":"A first look at the code","pos":[9593,9617]},{"content":"If you examine the code in App.xaml.h, App.xaml.cpp in the shared project, you'll notice that it's mostly C++ code that looks familiar.","pos":[9619,9754]},{"content":"However, some syntax elements might not be as familiar if you are new to Windows Runtime apps, or you've worked with C++/CLI.","pos":[9755,9880]},{"content":"Here are the most common non-standard syntax elements you'll see in C++/CX:","pos":[9881,9956]},{"content":"Ref classes","pos":[9964,9975]},{"content":"Almost all Windows Runtime classes, which includes all the types in the Windows API--XAML controls, the pages in your app, the App class itself, all device and network objects, all container types--are declared as a <bpt id=\"p1\">**</bpt>ref class<ept id=\"p1\">**</ept>.","pos":[9979,10209],"source":"Almost all Windows Runtime classes, which includes all the types in the Windows API--XAML controls, the pages in your app, the App class itself, all device and network objects, all container types--are declared as a **ref class**."},{"content":"(A few Windows types are <bpt id=\"p1\">**</bpt>value class<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>value struct<ept id=\"p2\">**</ept>).","pos":[10210,10272],"source":" (A few Windows types are **value class** or **value struct**)."},{"content":"A ref class is consumable from any language.","pos":[10273,10317]},{"content":"In C++, the lifetime of these types is governed by automatic reference counting (not garbage collection) so that you never explicitly delete these objects.","pos":[10318,10473]},{"content":"You can create your own ref classes as well.","pos":[10474,10518]},{"content":"All Windows Runtime types must be declared within a namespace and unlike in ISO C++ the types themselves have an accessibility modifier.","pos":[10807,10943]},{"content":"The <bpt id=\"p1\">**</bpt>public<ept id=\"p1\">**</ept> modifier makes the class visible to Windows Runtime components outside the namespace.","pos":[10944,11044],"source":" The **public** modifier makes the class visible to Windows Runtime components outside the namespace."},{"content":"The <bpt id=\"p1\">**</bpt>sealed<ept id=\"p1\">**</ept> keyword means the class cannot serve as a base class.","pos":[11045,11113],"source":" The **sealed** keyword means the class cannot serve as a base class."},{"content":"Almost all ref classes are sealed; class inheritance is not broadly used because Javascript does not understand it.","pos":[11114,11229]},{"pos":[11235,11263],"content":"<bpt id=\"p1\">**</bpt>ref new<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>^ (hats)<ept id=\"p2\">**</ept>","source":"**ref new** and **^ (hats)**"},{"content":"You declare a variable of a ref class by using the ^ (hat) operator, and you instantiate the object with the ref new keyword.","pos":[11266,11391]},{"content":"Thereafter you access the object's instance methods with the -&gt; operator just like a C++ pointer.","pos":[11392,11489],"source":" Thereafter you access the object's instance methods with the -> operator just like a C++ pointer."},{"content":"Static methods are accessed with the :: operator just as in ISO C++.","pos":[11490,11558]},{"content":"In the following code, we use the fully qualified name to instantiate an object, and use the -&gt; operator to call an instance method.","pos":[11561,11693],"source":"In the following code, we use the fully qualified name to instantiate an object, and use the -> operator to call an instance method."},{"pos":[11894,12063],"content":"Typically, in a .cpp file we would add a <ph id=\"ph1\">`using namespace  Windows::UI::Xaml::Media::Imaging`</ph> directive and the auto keyword, so that the same code would look like this:","source":"Typically, in a .cpp file we would add a `using namespace  Windows::UI::Xaml::Media::Imaging` directive and the auto keyword, so that the same code would look like this:"},{"content":"Properties","pos":[12169,12179]},{"content":"A ref class can have properties, which, just as in managed languages, are special member functions that appear as fields to consuming code.","pos":[12186,12325]},{"content":"Delegates","pos":[13019,13028]},{"content":"Just as in managed languages, a delegate is a reference type that encapsulates a function with a specific signature.","pos":[13035,13151]},{"content":"They are most often used with events and event handlers","pos":[13152,13207]},{"content":"Adding content to the app","pos":[13801,13826]},{"content":"Let's add some content to the app.","pos":[13828,13862]},{"content":"Step 1: Modify your start page","pos":[13866,13896]},{"pos":[13904,13949],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, open MainPage.xaml.","source":"In **Solution Explorer**, open MainPage.xaml."},{"content":"Create controls for the UI by adding the following XAML to the root <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept>, immediately before its closing tag.","pos":[13954,14127],"source":"Create controls for the UI by adding the following XAML to the root [**Grid**](https://msdn.microsoft.com/library/windows/apps/BR242704), immediately before its closing tag."},{"content":"It contains a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> that has a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>TextBlock<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> that asks the user's name, a <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>TextBox<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> element that accepts the user's name, a <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Button<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept>, and another <bpt id=\"p9\">**</bpt>TextBlock<ept id=\"p9\">**</ept> element.","pos":[14128,14549],"source":" It contains a [**StackPanel**](https://msdn.microsoft.com/library/windows/apps/BR209635) that has a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) that asks the user's name, a [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) element that accepts the user's name, a [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265), and another **TextBlock** element."},{"pos":[15067,15203],"content":"We talk more about XAML layout in the <bpt id=\"p1\">[</bpt>Navigation, layout, and views<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn263172)</ept> article.","source":"We talk more about XAML layout in the [Navigation, layout, and views](https://msdn.microsoft.com/library/windows/apps/Dn263172) article."},{"content":"At this point, you have created a very basic Universal Windows app.","pos":[15209,15276]},{"content":"To see what the UWP app looks like, press F5 to build, deploy, and run the app in debugging mode.","pos":[15277,15374]},{"content":"The default splash screen appears first.","pos":[15376,15416]},{"content":"It has an image—Assets\\\\SplashScreen.scale-100.png—and a background color that are specified in the app's manifest file.","pos":[15417,15537]},{"content":"To learn how to customize the splash screen, see <bpt id=\"p1\">[</bpt>Adding a splash screen<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh465332)</ept>.","pos":[15538,15670],"source":" To learn how to customize the splash screen, see [Adding a splash screen](https://msdn.microsoft.com/library/windows/apps/Hh465332)."},{"content":"When the splash screen disappears, your app appears.","pos":[15672,15724]},{"content":"It displays the main page of the App.","pos":[15725,15762]},{"content":"Press the Windows key or click the Start button to go to the Start menu, and notice that deploying the app adds it to the Start menu's list of installed apps.","pos":[15764,15922]},{"content":"It also appears when you click on the the New link next to the All Apps button.","pos":[15923,16002]},{"content":"To run the app again, just tap or click its tile, press F5 or Ctrl+F5 in Visual Studio as usual.","pos":[16003,16099]},{"content":"Windows Store app screen, with controls","pos":[16104,16143]},{"content":"It doesn't do much—yet—but congratulations, you've built your first Universal Windows Platform app!","pos":[16174,16273]},{"content":"To stop debugging and close the app, return to Visual Studio and press Shift+F5.","pos":[16278,16358]},{"pos":[16363,16475],"content":"For more information, see <bpt id=\"p1\">[</bpt>Run a Store app from Visual Studio<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=619619)</ept>.","source":"For more information, see [Run a Store app from Visual Studio](http://go.microsoft.com/fwlink/p/?LinkId=619619)."},{"content":"In the app, you can type in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept>, but clicking the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Button<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> doesn't do anything.","pos":[16480,16693],"source":"In the app, you can type in the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683), but clicking the [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) doesn't do anything."},{"content":"In later steps, you create an event handler for the button's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event, which displays a personalized greeting.","pos":[16694,16871],"source":" In later steps, you create an event handler for the button's [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event, which displays a personalized greeting."},{"content":"Start the app on a mobile device emulator","pos":[16876,16917]},{"content":"Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.","pos":[16920,17005]},{"content":"This section requires a Windows Phone running Windows 10, or access to a Windows Phone emulator and it requires that Visual Studio be running on a physical computer (not a virtual machine) with HyperV supported and enabled.","pos":[17006,17229]},{"content":"In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.","pos":[17231,17442]},{"content":"You can choose among emulators for devices with different memory and display configurations.","pos":[17443,17535]},{"content":"Device","pos":[17543,17549]},{"content":"Emulator 10.0.0.0 WVGA 4 inch 512MB","pos":[17558,17593]},{"content":"Various emulators in other configurations","pos":[17600,17641]},{"content":"It's a good idea to test your app on a device with a small screen and limited memory, so use the <bpt id=\"p1\">**</bpt>Emulator 10.0.0.0 WVGA 4 inch 512MB<ept id=\"p1\">**</ept> option.","pos":[17643,17787],"source":"It's a good idea to test your app on a device with a small screen and limited memory, so use the **Emulator 10.0.0.0 WVGA 4 inch 512MB** option."},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  For more info about using the phone emulator, see <bpt id=\"p2\">[</bpt>Run Windows Phone apps in the emulator<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=394233)</ept>.","pos":[17788,17937],"source":"**Tip**  For more info about using the phone emulator, see [Run Windows Phone apps in the emulator](http://go.microsoft.com/fwlink/p/?LinkId=394233)."},{"content":"To debug your app on a physical device, you must have a device that’s registered for development.","pos":[17942,18039]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Register your Windows Phone<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn614128)</ept>.","pos":[18040,18147],"source":" For more info, see [Register your Windows Phone](https://msdn.microsoft.com/library/windows/apps/Dn614128)."},{"content":"To start debugging on a mobile device emulator","pos":[18151,18197]},{"pos":[18205,18359],"content":"In the target device menu (<ph id=\"ph1\">![</ph>Start debugging menu<ph id=\"ph2\">](images/startdebug-full.png)</ph>) on the <bpt id=\"p1\">**</bpt>Standard<ept id=\"p1\">**</ept> toolbar, pick <bpt id=\"p2\">**</bpt>Emulator 10.0.0.0 WVGA 4 inch 512MB<ept id=\"p2\">**</ept>.","source":"In the target device menu (![Start debugging menu](images/startdebug-full.png)) on the **Standard** toolbar, pick **Emulator 10.0.0.0 WVGA 4 inch 512MB**."},{"pos":[18364,18470],"content":"Click the <bpt id=\"p1\">**</bpt>Start Debugging<ept id=\"p1\">**</ept> button (<ph id=\"ph1\">![</ph>Start debugging button<ph id=\"ph2\">](images/startdebug-sm.png)</ph>) in the toolbar.","source":"Click the **Start Debugging** button (![Start debugging button](images/startdebug-sm.png)) in the toolbar."},{"content":"–or–","pos":[18475,18479]},{"pos":[18484,18535],"content":"From the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Start Debugging<ept id=\"p2\">**</ept>.","source":"From the **Debug** menu, click **Start Debugging**."},{"content":"–or–","pos":[18540,18544]},{"content":"Press F5.","pos":[18549,18558]},{"content":"On the mobile device emulator, the app looks like this.","pos":[18560,18615]},{"content":"Initial app screen on mobile device","pos":[18619,18654]},{"content":"Visual Studio starts the selected emulator and then deploys and starts your app.","pos":[18686,18766]},{"content":"The first thing you'll notice is that the 120-pixel left margin that looks good on the local machine pushes your content off the smaller screen of a mobile device.","pos":[18767,18930]},{"content":"Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.","pos":[18931,19044]},{"content":"Step 2: Create an event handler","pos":[19049,19080]},{"pos":[19086,19329],"content":"In MainPage.xaml, in either XAML or design view, select the \"Say Hello\" <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> in the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StackPanel<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209635)</ept> you added earlier.","source":"In MainPage.xaml, in either XAML or design view, select the \"Say Hello\" [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) in the [**StackPanel**](https://msdn.microsoft.com/library/windows/apps/BR209635) you added earlier."},{"pos":[19334,19466],"content":"Open the <bpt id=\"p1\">**</bpt>Properties Window<ept id=\"p1\">**</ept> by pressing Alt+Enter, and then choose the Events button (<ph id=\"ph1\">![</ph>Events button<ph id=\"ph2\">](IMAGES/EVENTSBUTTON.png)</ph>).","source":"Open the **Properties Window** by pressing Alt+Enter, and then choose the Events button (![Events button](IMAGES/EVENTSBUTTON.png))."},{"content":"Find the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event.","pos":[19471,19556],"source":"Find the [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event."},{"content":"In its text box, type the name of the function that handles the <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> event.","pos":[19557,19637],"source":" In its text box, type the name of the function that handles the **Click** event."},{"content":"For this example, type \"Button\\_Click\".","pos":[19638,19677]},{"content":"Properties window, Events view","pos":[19681,19711]},{"content":"Press Enter.","pos":[19744,19756]},{"content":"The event handler method is created in MainPage.xaml.cpp and opened so that you can add the code that's executed when the event occurs.","pos":[19757,19892]},{"pos":[19897,20142],"content":"At the same time, in MainPage.xaml, the XAML for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> is updated to declare the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Click<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR227737)</ept> event handler, like this:","source":"At the same time, in MainPage.xaml, the XAML for the [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) is updated to declare the [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event handler, like this:"},{"content":"You could also have simply added this to the xaml code manually, which can be helpful if the designer doesn't load.","pos":[20215,20330]},{"content":"If you enter this manually, type \"Click\" and then let IntelliSense pop up the option to add a new event handler.","pos":[20331,20443]},{"content":"That way, Visual Studio creates the necessary method declaration and stub.","pos":[20444,20518]},{"content":"The designer fails to load if an unhandled exception occurs during rendering.","pos":[20520,20597]},{"content":"Rendering in the designer involves running a design-time version of the page.","pos":[20598,20675]},{"content":"It can be helpful to disable running user code.","pos":[20676,20723]},{"content":"You can do this by changing the setting in the <bpt id=\"p1\">**</bpt>Tools, Options<ept id=\"p1\">**</ept> dialog box.","pos":[20724,20801],"source":" You can do this by changing the setting in the **Tools, Options** dialog box."},{"content":"Under <bpt id=\"p1\">**</bpt>XAML Designer<ept id=\"p1\">**</ept>, uncheck <bpt id=\"p2\">**</bpt>Run project code in XAML designer (if supported)<ept id=\"p2\">**</ept>.","pos":[20802,20888],"source":" Under **XAML Designer**, uncheck **Run project code in XAML designer (if supported)**."},{"content":"In MainPage.xaml.cpp, add the following code to the <bpt id=\"p1\">**</bpt>Button\\_Click<ept id=\"p1\">**</ept> event handler that you just created.","pos":[20894,21000],"source":"In MainPage.xaml.cpp, add the following code to the **Button\\_Click** event handler that you just created."},{"content":"This code retrieves the user's name from the <ph id=\"ph1\">`nameInput`</ph> <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> control and uses it to create a greeting.","pos":[21001,21171],"source":" This code retrieves the user's name from the `nameInput` [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) control and uses it to create a greeting."},{"content":"The <ph id=\"ph1\">`greetingOutput`</ph> <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> displays the result.","pos":[21172,21287],"source":" The `greetingOutput` [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) displays the result."},{"content":"Set the project as the startup, and then press F5 to build and run the app.","pos":[21492,21567]},{"content":"When you type a name in the text box and click the button, the app displays a personalized greeting.","pos":[21568,21668]},{"content":"App screen with message display","pos":[21672,21703]},{"content":"Step 3: Style the start page","pos":[21734,21762]},{"content":"Choosing a theme","pos":[21768,21784]},{"content":"It's easy to customize the look and feel of your app.","pos":[21786,21839]},{"content":"By default, your app uses resources that have a light style.","pos":[21840,21900]},{"content":"The system resources also include a light theme.","pos":[21901,21949]},{"content":"Let's try it out and see what it looks like.","pos":[21950,21994]},{"content":"To switch to the dark theme","pos":[21998,22025]},{"content":"Open App.xaml.","pos":[22033,22047]},{"pos":[22052,22309],"content":"In the opening <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Application<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242324)</ept> tag, edit the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RequestedTheme<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.application.requestedtheme)</ept> property and set its value to <bpt id=\"p5\">**</bpt>Dark<ept id=\"p5\">**</ept>:","source":"In the opening [**Application**](https://msdn.microsoft.com/library/windows/apps/BR242324) tag, edit the [**RequestedTheme**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.application.requestedtheme) property and set its value to **Dark**:"},{"pos":[22349,22466],"content":"Here's the full <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Application<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242324)</ept> tag with the dark theme :","source":"Here's the full [**Application**](https://msdn.microsoft.com/library/windows/apps/BR242324) tag with the dark theme :"},{"content":"Press F5 to build and run it.","pos":[22747,22776]},{"content":"Notice that it uses the dark theme.","pos":[22777,22812]},{"content":"App screen with dark theme","pos":[22816,22842]},{"content":"Which theme should you use?","pos":[22870,22897]},{"content":"Whichever one you want.","pos":[22898,22921]},{"content":"Here's our take: for apps that mostly display images or video, we recommend the dark theme; for apps that contain a lot of text, we recommend the light theme.","pos":[22922,23080]},{"content":"If you're using a custom color scheme, use the theme that goes best with your app's look and feel.","pos":[23081,23179]},{"content":"In the rest of this tutorial, we use the Light theme in screenshots.","pos":[23180,23248]},{"pos":[23250,23351],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The theme is applied when the app is started and can't be changed while the app is running.","source":"**Note**  The theme is applied when the app is started and can't be changed while the app is running."},{"content":"Using system styles","pos":[23357,23376]},{"content":"Right now, in the Windows app the text is very small and difficult to read.","pos":[23378,23453]},{"content":"Let's fix that by applying a system style.","pos":[23454,23496]},{"content":"To change the style of an element","pos":[23500,23533]},{"content":"In the Windows project, open MainPage.xaml.","pos":[23541,23584]},{"pos":[23589,23747],"content":"In either XAML or design view, select the \"What's your name?\"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> that you added earlier.","source":"In either XAML or design view, select the \"What's your name?\"[**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) that you added earlier."},{"pos":[23752,23891],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window (<bpt id=\"p2\">**</bpt>F4<ept id=\"p2\">**</ept>), choose the Properties button (<ph id=\"ph1\">![</ph>Properties button<ph id=\"ph2\">](IMAGES/PROPERTIESBUTTON.png)</ph>) in the upper right.","source":"In the **Properties** window (**F4**), choose the Properties button (![Properties button](IMAGES/PROPERTIESBUTTON.png)) in the upper right."},{"pos":[23896,23953],"content":"Expand the <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept> group and set the font size to 18 px.","source":"Expand the **Text** group and set the font size to 18 px."},{"pos":[23958,24025],"content":"Expand the <bpt id=\"p1\">**</bpt>Miscellaneous<ept id=\"p1\">**</ept> group and find the <bpt id=\"p2\">**</bpt>Style<ept id=\"p2\">**</ept> property.","source":"Expand the **Miscellaneous** group and find the **Style** property."},{"pos":[24030,24187],"content":"Click the property marker (the green box to the right of the <bpt id=\"p1\">**</bpt>Style<ept id=\"p1\">**</ept> property), and then, on the menu, choose <bpt id=\"p2\">**</bpt>System Resource<ept id=\"p2\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p3\">**</bpt>BaseTextBlockStyle<ept id=\"p3\">**</ept>.","source":"Click the property marker (the green box to the right of the **Style** property), and then, on the menu, choose **System Resource** > **BaseTextBlockStyle**."},{"pos":[24190,24419],"content":"<bpt id=\"p1\">**</bpt>BaseTextBlockStyle<ept id=\"p1\">**</ept> is a resource that's defined in the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ResourceDictionary<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR208794)</ept> in <ph id=\"ph1\">&lt;root&gt;</ph>\\\\Program Files\\\\Windows Kits\\\\10\\\\Include\\\\winrt\\\\xaml\\\\design\\\\generic.xaml.","source":"**BaseTextBlockStyle** is a resource that's defined in the [**ResourceDictionary**](https://msdn.microsoft.com/library/windows/apps/BR208794) in <root>\\\\Program Files\\\\Windows Kits\\\\10\\\\Include\\\\winrt\\\\xaml\\\\design\\\\generic.xaml."},{"content":"Properties window, Properties view","pos":[24423,24457]},{"content":"On the XAML design surface, the appearance of the text changes.","pos":[24491,24554]},{"content":"In the XAML editor, the XAML for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> is updated:","pos":[24555,24677],"source":" In the XAML editor, the XAML for the [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) is updated:"},{"pos":[24777,24960],"content":"Repeat the process to set the font size and assign the <bpt id=\"p1\">**</bpt>BaseTextBlockStyle<ept id=\"p1\">**</ept> to the <ph id=\"ph1\">`greetingOutput`</ph><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>TextBlock<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> element.","source":"Repeat the process to set the font size and assign the **BaseTextBlockStyle** to the `greetingOutput`[**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) element."},{"pos":[24964,25196],"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  Although there's no text in this <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>TextBlock<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept>, when you move the pointer over the XAML design surface, a blue outline shows where it is so that you can select it.","source":"**Tip**  Although there's no text in this [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652), when you move the pointer over the XAML design surface, a blue outline shows where it is so that you can select it."},{"content":"Your XAML now looks like this:","pos":[25202,25232]},{"content":"Press F5 to build and run the app.","pos":[25808,25842]},{"content":"It now looks like this:","pos":[25843,25866]},{"content":"App screen with larger text","pos":[25871,25898]},{"content":"Step 4: Adapt the UI to different window sizes","pos":[25930,25976]},{"content":"Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.","pos":[25978,26067]},{"content":"To do this, you add a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209021)</ept> and set properties that are applied for different visual states.","pos":[26068,26237],"source":" To do this, you add a [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) and set properties that are applied for different visual states."},{"content":"To adjust the UI layout","pos":[26241,26264]},{"pos":[26272,26426],"content":"In the XAML editor, add this block of XAML after the opening tag of the root <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Grid<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242704)</ept> element.","source":"In the XAML editor, add this block of XAML after the opening tag of the root [**Grid**](https://msdn.microsoft.com/library/windows/apps/BR242704) element."},{"content":"Debug the app on the local machine.","pos":[27337,27372]},{"content":"Notice that the UI looks the same as before unless the window gets narrower than 641 device-independent pixels (DIPs).","pos":[27373,27491]},{"content":"Debug the app on the mobile device emulator.","pos":[27496,27540]},{"content":"Notice that the UI uses the properties you defined in the <ph id=\"ph1\">`narrowState`</ph> and appears correctly on the small screen.","pos":[27541,27655],"source":" Notice that the UI uses the properties you defined in the `narrowState` and appears correctly on the small screen."},{"content":"Mobile app screen with styled text","pos":[27659,27693]},{"pos":[27725,27916],"content":"If you've used a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209021)</ept> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.","source":"If you've used a [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) in previous versions of XAML, you might notice that the XAML here uses a simplified syntax."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209007)</ept> named <ph id=\"ph1\">`wideState`</ph> has an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>AdaptiveTrigger<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</ept> with its <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>MinWindowWidth<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</ept> property set to 641.","pos":[27918,28255],"source":"The [**VisualState**](https://msdn.microsoft.com/library/windows/apps/BR209007) named `wideState` has an [**AdaptiveTrigger**](https://msdn.microsoft.com/library/windows/apps/Dn890382) with its [**MinWindowWidth**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth) property set to 641."},{"content":"This means that the state is to be applied only when the window width is not less than the minimum of 641 DIPs.","pos":[28256,28367]},{"content":"You don't define any <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Setter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208817)</ept> objects for this state, so it uses the layout properties you defined in the XAML for the page content.","pos":[28368,28562],"source":" You don't define any [**Setter**](https://msdn.microsoft.com/library/windows/apps/BR208817) objects for this state, so it uses the layout properties you defined in the XAML for the page content."},{"content":"The second <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualState<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209007)</ept>, <ph id=\"ph1\">`narrowState`</ph>, has an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>AdaptiveTrigger<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</ept> with its <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>MinWindowWidth<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</ept> property set to 0.","pos":[28564,28904],"source":"The second [**VisualState**](https://msdn.microsoft.com/library/windows/apps/BR209007), `narrowState`, has an [**AdaptiveTrigger**](https://msdn.microsoft.com/library/windows/apps/Dn890382) with its [**MinWindowWidth**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth) property set to 0."},{"content":"This state is applied when the window width is greater than 0, but less than 641 DIPs.","pos":[28905,28991]},{"content":"(At 641 DIPs, the <ph id=\"ph1\">`wideState`</ph> is applied.) In this state, you do define some <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Setter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208817)</ept> objects to change the layout properties of controls in the UI:","pos":[28992,29202],"source":" (At 641 DIPs, the `wideState` is applied.) In this state, you do define some [**Setter**](https://msdn.microsoft.com/library/windows/apps/BR208817) objects to change the layout properties of controls in the UI:"},{"pos":[29208,29280],"content":"You reduce the left margin of the <ph id=\"ph1\">`contentPanel`</ph> element from 120 to 20.","source":"You reduce the left margin of the `contentPanel` element from 120 to 20."},{"pos":[29285,29479],"content":"You change the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Orientation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.stackpanel.orientation)</ept> of the <ph id=\"ph1\">`inputPanel`</ph> element from <bpt id=\"p3\">**</bpt>Horizontal<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>Vertical<ept id=\"p4\">**</ept>.","source":"You change the [**Orientation**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.stackpanel.orientation) of the `inputPanel` element from **Horizontal** to **Vertical**."},{"pos":[29484,29544],"content":"You add a top margin of 4 DIPs to the <ph id=\"ph1\">`inputButton`</ph> element.","source":"You add a top margin of 4 DIPs to the `inputButton` element."},{"content":"Summary","pos":[29550,29557]},{"content":"Congratulations, you've completed the first tutorial!","pos":[29559,29612]},{"content":"It taught how to add content to Windows Universal apps, how to add interactivity to them, and how to change their appearance.","pos":[29613,29738]},{"content":"Next steps","pos":[29743,29753]},{"content":"If you have a Windows Universal app project that targets Windows 8.1 and/or Windows Phone 8.1, you can port it to Windows 10.","pos":[29755,29880]},{"content":"There is no automatic process for this, but you can do it manually with a little effort.","pos":[29881,29969]},{"content":"Start with a new Windows Universal project to get the latest project system structure and manifest files, copy your code files into the project's directory structure, add the items to your project, and rewrite your XAML using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VisualStateManager<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209021)</ept> according to the guidance in this topic.","pos":[29970,30323],"source":" Start with a new Windows Universal project to get the latest project system structure and manifest files, copy your code files into the project's directory structure, add the items to your project, and rewrite your XAML using the [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) according to the guidance in this topic."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Porting a Windows Runtime 8 project to a Universal Windows Platform (UWP) project<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt188203)</ept> and <bpt id=\"p2\">[</bpt>Porting to the Universal Windows Platform (C++)<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=619525)</ept>.","pos":[30324,30595],"source":" For more information, see [Porting a Windows Runtime 8 project to a Universal Windows Platform (UWP) project](https://msdn.microsoft.com/library/windows/apps/Mt188203) and [Porting to the Universal Windows Platform (C++)](http://go.microsoft.com/fwlink/p/?LinkId=619525)."},{"pos":[30597,30846],"content":"If you have existing C++ code that you want to integrate with a UWP app, such as to create a new UWP UI for an existing application, see <bpt id=\"p1\">[</bpt>How to: Use existing C++ code in a Universal Windows project<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=619623)</ept>.","source":"If you have existing C++ code that you want to integrate with a UWP app, such as to create a new UWP UI for an existing application, see [How to: Use existing C++ code in a Universal Windows project](http://go.microsoft.com/fwlink/p/?LinkId=619623)."}],"content":"---\nms.assetid: DC235C16-8DAF-4078-9365-6612A10F3EC3\ntitle: Create a Hello World app in C++ (Windows 10)\ndescription: With Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10. These apps have a UI that's defined in Extensible Application Markup Language (XAML).\n---\n\n# Create a \"hello world\" app in C++ (Windows 10)\n\nWith Microsoft Visual Studio 2015, you can use C++ to develop an app that runs on Windows 10, including on phones running Windows 10. These apps have a UI that's defined in Extensible Application Markup Language (XAML).\n\nTo develop an app that runs on Windows 8.1 and Windows Phone 8.1, use Microsoft Visual Studio 2013 Update 3 or later and follow the steps [here](https://msdn.microsoft.com/library/windows/apps/Dn263168). The most significant difference is that for Windows 8.1 and Windows Phone 8.1, you use a solution with three projects, one for the desktop (or tablet device), one for the phone, and one for shared code. For Windows 10 development, all code shares the same project.\n\nFor tutorials in other programming languages, see:\n\n-   [Create your first Windows Store app using JavaScript](https://msdn.microsoft.com/library/windows/apps/BR211385)\n\n-   [Create your first Windows Store app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581)\n\n## Before you start...\n\n-   To complete this tutorial, you must use Visual Studio 2015 Community or later, or one of the non-Community versions of Visual Studio 2015, on a computer that's running Windows 10 or Windows 8.1. To download, see [Get the tools](http://go.microsoft.com/fwlink/p/?LinkId=532666).\n-   Install the appropriate [SDK](http://go.microsoft.com/fwlink/?LinkId=533049) for Windows Universal Platform development.\n-   You also must have a developer license. For instructions, see [Get a developer license](https://msdn.microsoft.com/library/windows/apps/Hh974578).\n-   We assume you have a basic understanding of standard C++, XAML, and the concepts in the [XAML overview](https://msdn.microsoft.com/library/windows/apps/Mt185595).\n-   We assume you're using the default window layout in Visual Studio. To reset to the default layout, on the menu bar, choose **Window** > **Reset Window Layout**.\n-   Note that there is a known issue with Visual Studio 2015 that can result in a NullReferenceException when loading the XAML designer. This issue blocks some of the steps of this tutorial, unless you apply the workaround. For details about this issue and the workaround, see [this MSDN forum post](http://go.microsoft.com/fwlink/p/?LinkId=624036) .\n\n## Comparing C++ desktop apps to Windows apps\n\nIf you're coming from a background in Windows desktop programming in C++, you'll probably find that some aspects of Windows Store app and Windows Phone app programming are familiar, but other aspects require some learning.\n\n### What's the same?\n\n-   You can use the STL, the CRT (with some exceptions), and any other C++ library as long as the code does not attempt to call Windows functions that are not accessible from the Windows Runtime environment.\n\n-   If you're accustomed to visual designers, you can still use the designer built into Microsoft Visual Studio, or you can use the more full-featured Blend for Visual Studio. If you're accustomed to coding UI by hand, you can hand-code your XAML.\n\n-   You're still creating apps that use Windows operating system types and your own custom types.\n\n-   You're still using the Visual Studio debugger, profiler, and other development tools.\n\n-   You're still creating apps that are compiled to native machine code by the Visual C++ compiler. Windows Store apps in C++ don't execute in a managed runtime environment.\n\n### What's new?\n\n-   The design principles for Windows Store apps and Universal Windows apps are very different from those for desktop apps. Window borders, labels, dialog boxes, and so on, are de-emphasized. Content is foremost. Great Universal Windows apps incorporate these principles from the very beginning of the planning stage.\n\n-   You're using XAML to define the entire UI. The separation between UI and core program logic is much clearer in a Windows Universal app than in an MFC or Win32 app. Other people can work on the appearance of the UI in the XAML file while you're working on the behavior in the code file.\n\n-   You're primarily programming against a new, easy-to-navigate, object-oriented API, the Windows Runtime, although on Windows devices Win32 is still available for some functionality.\n\n-   You use C++/CX to consume and create Windows Runtime objects. C++/CX enables C++ exception handling, delegates, events, and automatic reference counting of dynamically created objects. When you use C++/CX, the details of the underlying COM and Windows architecture are hidden from your app code. For more information, see [C++/CX Language Reference](https://msdn.microsoft.com/en-us/library/windows/apps/hh699871.aspx).\n\n-   Your app is compiled into a package that also contains metadata about the types that your app contains, the resources that it uses, and the capabilities that it requires (file access, internet access, camera access, and so forth).\n\n-   In the Windows Store and Windows Phone Store your app is verified as safe by a certification process and made discoverable to millions of potential customers.\n\n## Hello World Store app in C++\n\nOur first app is a \"Hello World\" that demonstrates some basic features of interactivity, layout, and styles. We'll create an app from the Windows Universal app project template. If you've developed apps for Windows 8.1 and Windows Phone 8.1 before, you might remember that you had to have three projects in Visual Studio, one for the Windows app, one for the phone app, and another with shared code. The Windows 10 Universal Windows Platform (UWP) makes it possible to have just one project, which runs on all devices, including desktop and laptop computers running Windows 10, devices such as tablets, mobile phones, and so on.\n\nWe'll start with the basics:\n\n-   How to create a Universal Windows project in Visual Studio 2015 or later.\n\n-   How to understand the projects and files that are created.\n\n-   How to understand the extensions in Visual C++ component extensions (C++/CX), and when to use them.\n\n**First, create a solution in Visual Studio**\n\n1.  In Visual Studio, on the menu bar, choose **File** > **New** > **Project**.\n\n2.  In the **New Project** dialog box, in the left pane, expand **Installed** > **Visual C++** > **Windows** > **Universal**.\n\n3.  In the center pane, select **Blank App (Universal Windows)**.\n\n4.  Enter a name for the project. We'll name it HelloWorld.\n\n ![C++ project templates in the New Project dialog box ](images/vs2015-newuniversalproject-cpp.png)\n\n5.  Choose the **OK** button.\n\n   If this is the first UWP project you've created, and you haven't enabled Developer Mode on your computer, the Enable Developer mode dialog box appears. Click on the link to bring up the Settings page that lets you set Developer Mode. Developer Mode allows your apps to be deployed and run locally.\n\n   Your project files are created.\n\nBefore we go on, let’s look at what's in the solution.\n\n![Univeral app solution with nodes collapsed](images/vs2015-solutionexploreruniversal-0-cpp.png)\n\n### About the project files\n\nEvery .xaml file in a project folder has a corresponding .xaml.h file and .xaml.cpp file in the same folder and a .g file and a .g.hpp file in the Generated Files folder, which is on disk but not part of the project. You modify the XAML files to create UI elements and connect them to data sources (DataBinding). You modify the .h and .cpp files to add custom logic for event handlers. The auto-generated files represent the transformation of the XAML markup into C++. Don't modify these files, but you can study them to better understand how the code-behind works. Basically, the generated file contains a partial class definition for a XAML root element; this class is the same class that you modify in the \\*.xaml.h and .cpp files. The generated files declare the XAML UI child elements as class members so that you can reference them in the code you write. At build time, the generated code and your code are merged into a complete class definition and then compiled.\n\nLet's look first at the project files.\n\n-   **App.xaml, App.xaml.h, App.xaml.cpp:** Represent the Application object, which is an app's entry point. App.xaml contains no page-specific UI markup, but you can add UI styles and other elements that you want to be accessible from any page. The code-behind files contain handlers for the **OnLaunched** and **OnSuspending** events. Typically, you add custom code here to initialize your app when it starts and perform cleanup when it's suspended or terminated.\n-   **MainPage.xaml, MainPage.xaml.h, MainPage.xaml.cpp:**Contain the XAML markup and code-behind for the default \"start\" page in an app. It has no navigation support or built-in controls.\n-   **pch.h, pch.cpp:** A precompiled header file and the file that includes it in your project. In pch.h, you can include any headers that do not change often and are included in other files in the solution.\n-   **Package.appxmanifest:** An XML file that describes the device capabilities that your app requires, and the app version info and other metadata. To open this file in the **Manifest Designer**, just double-click it.\n-   **HelloWorld\\_TemporaryKey.pfx:**A key that enables deployment of the app on this machine, from Visual Studio.\n\n## A first look at the code\n\nIf you examine the code in App.xaml.h, App.xaml.cpp in the shared project, you'll notice that it's mostly C++ code that looks familiar. However, some syntax elements might not be as familiar if you are new to Windows Runtime apps, or you've worked with C++/CLI. Here are the most common non-standard syntax elements you'll see in C++/CX:\n\n-   **Ref classes**\n\nAlmost all Windows Runtime classes, which includes all the types in the Windows API--XAML controls, the pages in your app, the App class itself, all device and network objects, all container types--are declared as a **ref class**. (A few Windows types are **value class** or **value struct**). A ref class is consumable from any language. In C++, the lifetime of these types is governed by automatic reference counting (not garbage collection) so that you never explicitly delete these objects. You can create your own ref classes as well.\n\n```cpp\n    namespace HelloWorld\n    {\n        /// <summary>\n        /// An empty page that can be used on its own or navigated to within a Frame.\n        /// </summary>\n        public ref class MainPage sealed\n        {\n        public:\n            MainPage();\n\n        };\n    }\n```    \n\nAll Windows Runtime types must be declared within a namespace and unlike in ISO C++ the types themselves have an accessibility modifier. The **public** modifier makes the class visible to Windows Runtime components outside the namespace. The **sealed** keyword means the class cannot serve as a base class. Almost all ref classes are sealed; class inheritance is not broadly used because Javascript does not understand it.\n\n-   **ref new** and **^ (hats)**\n\n You declare a variable of a ref class by using the ^ (hat) operator, and you instantiate the object with the ref new keyword. Thereafter you access the object's instance methods with the -> operator just like a C++ pointer. Static methods are accessed with the :: operator just as in ISO C++.\n\n In the following code, we use the fully qualified name to instantiate an object, and use the -> operator to call an instance method.\n\n ```cpp\n    Windows::UI::Xaml::Media::Imaging::BitmapImage^ bitmapImage =\n        ref new Windows::UI::Xaml::Media::Imaging::BitmapImage();\n      \n    bitmapImage->SetSource(fileStream);\n    ```\n\n   Typically, in a .cpp file we would add a `using namespace  Windows::UI::Xaml::Media::Imaging` directive and the auto keyword, so that the same code would look like this:\n\n```cpp\n    auto bitmapImage = ref new BitmapImage();\n    bitmapImage->SetSource(fileStream);\n```\n\n-   **Properties**\n\n   A ref class can have properties, which, just as in managed languages, are special member functions that appear as fields to consuming code.\n\n```cpp\n    public ref class SaveStateEventArgs sealed\n            {\n            public:\n\n                // Declare the property\n                property Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ PageState\n                {\n                    Windows::Foundation::Collections::IMap<Platform::String^, Platform::Object^>^ get();\n                }\n    ...\n    };\n\n    ...\n    // consume the property like a public field\n    void PhotoPage::SaveState(Object^ sender, Common::SaveStateEventArgs^ e)\n    {    \n        if (mruToken != nullptr && !mruToken->IsEmpty())\n        {\n            e->PageState->Insert(\"mruToken\", mruToken);\n        }\n    }\n```\n\n-   **Delegates**\n\n   Just as in managed languages, a delegate is a reference type that encapsulates a function with a specific signature. They are most often used with events and event handlers\n\n```cpp\n    // Delegate declaration (within namespace scope)\n    public delegate void LoadStateEventHandler(Platform::Object^ sender, LoadStateEventArgs^ e);\n\n    // Event declaration (class scope)\n    public ref class NavigationHelper sealed\n    {\n      public:\n        event LoadStateEventHandler^ LoadState;\n    };\n\n    // Create the event handler in consuming class\n    MainPage::MainPage()\n    {\n        auto navigationHelper = ref new Common::NavigationHelper(this);\n        navigationHelper->LoadState += ref new Common::LoadStateEventHandler(this, &MainPage::LoadState);\n    }\n```\n\n## Adding content to the app\n\nLet's add some content to the app.\n\n**Step 1: Modify your start page**\n\n1.  In **Solution Explorer**, open MainPage.xaml.\n2.  Create controls for the UI by adding the following XAML to the root [**Grid**](https://msdn.microsoft.com/library/windows/apps/BR242704), immediately before its closing tag. It contains a [**StackPanel**](https://msdn.microsoft.com/library/windows/apps/BR209635) that has a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) that asks the user's name, a [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) element that accepts the user's name, a [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265), and another **TextBlock** element.\n\n```xml\n    <StackPanel x:Name=\"contentPanel\" Margin=\"120,30,0,0\">\n        <TextBlock HorizontalAlignment=\"Left\" Text=\"Hello World\" FontSize=\"36\"/>\n        <TextBlock Text=\"What's your name?\"/>\n        <StackPanel x:Name=\"inputPanel\" Orientation=\"Horizontal\" Margin=\"0,20,0,20\">\n            <TextBox x:Name=\"nameInput\" Width=\"300\" HorizontalAlignment=\"Left\"/>\n            <Button x:Name=\"inputButton\" Content=\"Say \\\"Hello\\\"\"/>\n        </StackPanel>\n        <TextBlock x:Name=\"greetingOutput\"/>\n    </StackPanel>\n```\n\nWe talk more about XAML layout in the [Navigation, layout, and views](https://msdn.microsoft.com/library/windows/apps/Dn263172) article.\n\n3.  At this point, you have created a very basic Universal Windows app. To see what the UWP app looks like, press F5 to build, deploy, and run the app in debugging mode.\n\nThe default splash screen appears first. It has an image—Assets\\\\SplashScreen.scale-100.png—and a background color that are specified in the app's manifest file. To learn how to customize the splash screen, see [Adding a splash screen](https://msdn.microsoft.com/library/windows/apps/Hh465332).\n\nWhen the splash screen disappears, your app appears. It displays the main page of the App.\n\nPress the Windows key or click the Start button to go to the Start menu, and notice that deploying the app adds it to the Start menu's list of installed apps. It also appears when you click on the the New link next to the All Apps button. To run the app again, just tap or click its tile, press F5 or Ctrl+F5 in Visual Studio as usual.\n\n ![Windows Store app screen, with controls](images/xaml-hw-app2.png)\n\n   It doesn't do much—yet—but congratulations, you've built your first Universal Windows Platform app!\n\n   To stop debugging and close the app, return to Visual Studio and press Shift+F5.\n\n   For more information, see [Run a Store app from Visual Studio](http://go.microsoft.com/fwlink/p/?LinkId=619619).\n\n   In the app, you can type in the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683), but clicking the [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) doesn't do anything. In later steps, you create an event handler for the button's [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event, which displays a personalized greeting.\n\n## Start the app on a mobile device emulator\n\n\nYour app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone. This section requires a Windows Phone running Windows 10, or access to a Windows Phone emulator and it requires that Visual Studio be running on a physical computer (not a virtual machine) with HyperV supported and enabled.\n\nIn addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator. You can choose among emulators for devices with different memory and display configurations.\n\n-   **Device**\n-   **Emulator 10.0.0.0 WVGA 4 inch 512MB**\n-   Various emulators in other configurations\n\nIt's a good idea to test your app on a device with a small screen and limited memory, so use the **Emulator 10.0.0.0 WVGA 4 inch 512MB** option.\n**Tip**  For more info about using the phone emulator, see [Run Windows Phone apps in the emulator](http://go.microsoft.com/fwlink/p/?LinkId=394233).\n\n \n\nTo debug your app on a physical device, you must have a device that’s registered for development. For more info, see [Register your Windows Phone](https://msdn.microsoft.com/library/windows/apps/Dn614128).\n\n**To start debugging on a mobile device emulator**\n\n1.  In the target device menu (![Start debugging menu](images/startdebug-full.png)) on the **Standard** toolbar, pick **Emulator 10.0.0.0 WVGA 4 inch 512MB**.\n2.  Click the **Start Debugging** button (![Start debugging button](images/startdebug-sm.png)) in the toolbar.\n\n   –or–\n\n   From the **Debug** menu, click **Start Debugging**.\n\n   –or–\n\n   Press F5.\n\nOn the mobile device emulator, the app looks like this.\n\n![Initial app screen on mobile device](images/hw10-screen1-mob.png)\n\nVisual Studio starts the selected emulator and then deploys and starts your app. The first thing you'll notice is that the 120-pixel left margin that looks good on the local machine pushes your content off the smaller screen of a mobile device. Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.\n\n## Step 2: Create an event handler\n\n1.  In MainPage.xaml, in either XAML or design view, select the \"Say Hello\" [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) in the [**StackPanel**](https://msdn.microsoft.com/library/windows/apps/BR209635) you added earlier.\n2.  Open the **Properties Window** by pressing Alt+Enter, and then choose the Events button (![Events button](IMAGES/EVENTSBUTTON.png)).\n3.  Find the [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event. In its text box, type the name of the function that handles the **Click** event. For this example, type \"Button\\_Click\".\n\n![Properties window, Events view](images/xaml-hw-event.png)\n\n4.  Press Enter. The event handler method is created in MainPage.xaml.cpp and opened so that you can add the code that's executed when the event occurs.\n\n   At the same time, in MainPage.xaml, the XAML for the [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) is updated to declare the [**Click**](https://msdn.microsoft.com/library/windows/apps/BR227737) event handler, like this:\n\n```xml\n    <Button Content=\"Say \\\"Hello\\\"\" Click=\"Button_Click\"/>\n```\n\nYou could also have simply added this to the xaml code manually, which can be helpful if the designer doesn't load. If you enter this manually, type \"Click\" and then let IntelliSense pop up the option to add a new event handler. That way, Visual Studio creates the necessary method declaration and stub.\n\nThe designer fails to load if an unhandled exception occurs during rendering. Rendering in the designer involves running a design-time version of the page. It can be helpful to disable running user code. You can do this by changing the setting in the **Tools, Options** dialog box. Under **XAML Designer**, uncheck **Run project code in XAML designer (if supported)**.\n\n5.  In MainPage.xaml.cpp, add the following code to the **Button\\_Click** event handler that you just created. This code retrieves the user's name from the `nameInput` [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) control and uses it to create a greeting. The `greetingOutput` [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) displays the result.\n\n```cpp\n    void HelloWorld::MainPage::Button_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e)\n    {\n        greetingOutput->Text = \"Hello, \" + nameInput->Text + \"!\";\n    }\n```\n\n6.  Set the project as the startup, and then press F5 to build and run the app. When you type a name in the text box and click the button, the app displays a personalized greeting.\n\n![App screen with message display](images/xaml-hw-app4.png)\n\n## Step 3: Style the start page\n\n### Choosing a theme\n\nIt's easy to customize the look and feel of your app. By default, your app uses resources that have a light style. The system resources also include a light theme. Let's try it out and see what it looks like.\n\n**To switch to the dark theme**\n\n1.  Open App.xaml.\n2.  In the opening [**Application**](https://msdn.microsoft.com/library/windows/apps/BR242324) tag, edit the [**RequestedTheme**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.application.requestedtheme) property and set its value to **Dark**:\n\n```xml\n   RequestedTheme=\"Light\"\n```\n\nHere's the full [**Application**](https://msdn.microsoft.com/library/windows/apps/BR242324) tag with the dark theme :\n\n```xml \n        <Application\n        x:Class=\"HelloWorld.App\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"using:HelloWorld\" \n        RequestedTheme=\"Dark\">\n```\n\n3.  Press F5 to build and run it. Notice that it uses the dark theme.\n\n![App screen with dark theme](images/xaml-hw-app3.png)\n\nWhich theme should you use? Whichever one you want. Here's our take: for apps that mostly display images or video, we recommend the dark theme; for apps that contain a lot of text, we recommend the light theme. If you're using a custom color scheme, use the theme that goes best with your app's look and feel. In the rest of this tutorial, we use the Light theme in screenshots.\n\n**Note**  The theme is applied when the app is started and can't be changed while the app is running.\n\n### Using system styles\n\nRight now, in the Windows app the text is very small and difficult to read. Let's fix that by applying a system style.\n\n**To change the style of an element**\n\n1.  In the Windows project, open MainPage.xaml.\n2.  In either XAML or design view, select the \"What's your name?\"[**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) that you added earlier.\n3.  In the **Properties** window (**F4**), choose the Properties button (![Properties button](IMAGES/PROPERTIESBUTTON.png)) in the upper right.\n4.  Expand the **Text** group and set the font size to 18 px.\n5.  Expand the **Miscellaneous** group and find the **Style** property.\n6.  Click the property marker (the green box to the right of the **Style** property), and then, on the menu, choose **System Resource** > **BaseTextBlockStyle**.\n\n **BaseTextBlockStyle** is a resource that's defined in the [**ResourceDictionary**](https://msdn.microsoft.com/library/windows/apps/BR208794) in <root>\\\\Program Files\\\\Windows Kits\\\\10\\\\Include\\\\winrt\\\\xaml\\\\design\\\\generic.xaml.\n\n![Properties window, Properties view](images/xaml-hw-style-cpp.png)\n\n On the XAML design surface, the appearance of the text changes. In the XAML editor, the XAML for the [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) is updated:\n\n```xml\n   <TextBlock Text=\"What's your name?\" Style=\"{StaticResource BasicTextStyle}\"/><\n```\n\n7.  Repeat the process to set the font size and assign the **BaseTextBlockStyle** to the `greetingOutput`[**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) element.\n\n  **Tip**  Although there's no text in this [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652), when you move the pointer over the XAML design surface, a blue outline shows where it is so that you can select it.  \n\n  Your XAML now looks like this:\n\n```xml\n    <StackPanel x:Name=\"contentPanel\" Margin=\"120,30,0,0\">\n        <TextBlock Style=\"{ThemeResource BaseTextBlockStyle}\" FontSize=\"16\" Text=\"What's your name?\"/>\n        <StackPanel x:Name=\"inputPanel\" Orientation=\"Horizontal\" Margin=\"0,20,0,20\">\n            <TextBox x:Name=\"nameInput\" Width=\"300\" HorizontalAlignment=\"Left\"/>\n            <Button x:Name=\"inputButton\" Content=\"Say \\\"Hello\\\"\" Click=\"Button_Click\"/>\n        </StackPanel>\n        <TextBlock Style=\"{ThemeResource BaseTextBlockStyle}\" FontSize=\"16\" x:Name=\"greetingOutput\"/>\n    </StackPanel>\n```\n\n8.  Press F5 to build and run the app. It now looks like this:\n\n ![App screen with larger text](images/xaml-hw-app5.png)\n\n### Step 4: Adapt the UI to different window sizes\n\nNow we'll make the UI adapt to different screen sizes so it looks good on mobile devices. To do this, you add a [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) and set properties that are applied for different visual states.\n\n**To adjust the UI layout**\n\n1.  In the XAML editor, add this block of XAML after the opening tag of the root [**Grid**](https://msdn.microsoft.com/library/windows/apps/BR242704) element.\n\n```xml\n    <VisualStateManager.VisualStateGroups>\n        <VisualStateGroup>\n            <VisualState x:Name=\"wideState\">\n                <VisualState.StateTriggers>\n                    <AdaptiveTrigger MinWindowWidth=\"641\" />\n                </VisualState.StateTriggers>\n            </VisualState>\n            <VisualState x:Name=\"narrowState\">\n                <VisualState.StateTriggers>\n                    <AdaptiveTrigger MinWindowWidth=\"0\" />\n                </VisualState.StateTriggers>\n                <VisualState.Setters>\n                    <Setter Target=\"contentPanel.Margin\" Value=\"20,30,0,0\"/>\n                    <Setter Target=\"inputPanel.Orientation\" Value=\"Vertical\"/>\n                    <Setter Target=\"inputButton.Margin\" Value=\"0,4,0,0\"/>\n                </VisualState.Setters>\n            </VisualState>\n        </VisualStateGroup>\n    </VisualStateManager.VisualStateGroups>\n```\n\n2.  Debug the app on the local machine. Notice that the UI looks the same as before unless the window gets narrower than 641 device-independent pixels (DIPs).\n3.  Debug the app on the mobile device emulator. Notice that the UI uses the properties you defined in the `narrowState` and appears correctly on the small screen.\n\n![Mobile app screen with styled text](images/hw10-screen2-mob.png)\n\nIf you've used a [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.\n\nThe [**VisualState**](https://msdn.microsoft.com/library/windows/apps/BR209007) named `wideState` has an [**AdaptiveTrigger**](https://msdn.microsoft.com/library/windows/apps/Dn890382) with its [**MinWindowWidth**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth) property set to 641. This means that the state is to be applied only when the window width is not less than the minimum of 641 DIPs. You don't define any [**Setter**](https://msdn.microsoft.com/library/windows/apps/BR208817) objects for this state, so it uses the layout properties you defined in the XAML for the page content.\n\nThe second [**VisualState**](https://msdn.microsoft.com/library/windows/apps/BR209007), `narrowState`, has an [**AdaptiveTrigger**](https://msdn.microsoft.com/library/windows/apps/Dn890382) with its [**MinWindowWidth**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth) property set to 0. This state is applied when the window width is greater than 0, but less than 641 DIPs. (At 641 DIPs, the `wideState` is applied.) In this state, you do define some [**Setter**](https://msdn.microsoft.com/library/windows/apps/BR208817) objects to change the layout properties of controls in the UI:\n\n-   You reduce the left margin of the `contentPanel` element from 120 to 20.\n-   You change the [**Orientation**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.stackpanel.orientation) of the `inputPanel` element from **Horizontal** to **Vertical**.\n-   You add a top margin of 4 DIPs to the `inputButton` element.\n\n### Summary\n\nCongratulations, you've completed the first tutorial! It taught how to add content to Windows Universal apps, how to add interactivity to them, and how to change their appearance.\n\n## Next steps\n\nIf you have a Windows Universal app project that targets Windows 8.1 and/or Windows Phone 8.1, you can port it to Windows 10. There is no automatic process for this, but you can do it manually with a little effort. Start with a new Windows Universal project to get the latest project system structure and manifest files, copy your code files into the project's directory structure, add the items to your project, and rewrite your XAML using the [**VisualStateManager**](https://msdn.microsoft.com/library/windows/apps/BR209021) according to the guidance in this topic. For more information, see [Porting a Windows Runtime 8 project to a Universal Windows Platform (UWP) project](https://msdn.microsoft.com/library/windows/apps/Mt188203) and [Porting to the Universal Windows Platform (C++)](http://go.microsoft.com/fwlink/p/?LinkId=619525).\n\nIf you have existing C++ code that you want to integrate with a UWP app, such as to create a new UWP UI for an existing application, see [How to: Use existing C++ code in a Universal Windows project](http://go.microsoft.com/fwlink/p/?LinkId=619623).\n\n"}