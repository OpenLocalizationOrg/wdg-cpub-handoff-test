{"nodes":[{"pos":[11,69],"content":"Creating Windows Runtime Components in C# and Visual Basic","needQuote":true,"needEscape":true,"nodes":[{"content":"Creating Windows Runtime Components in C# and Visual Basic","pos":[0,58]}]},{"pos":[83,228],"content":"Starting with the .NET Framework 4.5, you can use managed code to create your own Windows Runtime types, packaged in a Windows Runtime component.","needQuote":true,"needEscape":true,"nodes":[{"content":"Starting with the .NET Framework 4.5, you can use managed code to create your own Windows Runtime types, packaged in a Windows Runtime component.","pos":[0,145]}]},{"content":"Creating Windows Runtime Components in C# and Visual Basic","pos":[285,343]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[346,384]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[385,480],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"\\[Some information relates to pre-released product which may be substantially modified before it's commercially released.","pos":[483,604]},{"content":"Microsoft makes no warranties, express or implied, with respect to the information provided here.\\]","pos":[605,704]},{"content":"Starting with the .NET Framework 4.5, you can use managed code to create your own Windows Runtime types, packaged in a Windows Runtime component.","pos":[706,851]},{"content":"You can use your component in Universal Windows Platform (UWP) apps with C++, JavaScript, Visual Basic, or C#.","pos":[852,962]},{"content":"This article outlines the rules for creating a component, and discusses some aspects of .NET Framework support for the Windows Runtime.","pos":[963,1098]},{"content":"In general, that support is designed to be transparent to the .NET Framework programmer.","pos":[1099,1187]},{"content":"However, when you create a component to use with JavaScript or C++, you need to be aware of differences in the way those languages support the Windows Runtime.","pos":[1188,1347]},{"content":"If you are creating a component for use only in UWP apps with Visual Basic or C#, and the component does not contain UWP controls, consider using the <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> template instead of the <bpt id=\"p2\">**</bpt>Windows Runtime Component<ept id=\"p2\">**</ept> template.","pos":[1349,1580],"source":"If you are creating a component for use only in UWP apps with Visual Basic or C#, and the component does not contain UWP controls, consider using the **Class Library** template instead of the **Windows Runtime Component** template."},{"content":"There are fewer restrictions on a simple class library.","pos":[1581,1636]},{"content":"This article contains the following sections:","pos":[1638,1683]},{"content":"Declaring types in Windows Runtime Components","pos":[1688,1733]},{"content":"Internally, the Windows Runtime types in your component can use any .NET Framework functionality that's allowed in a Universal Windows app.","pos":[1736,1875]},{"content":"(See <bpt id=\"p1\">[</bpt>.NET for UWP apps<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx)</ept> overview for more information.) Externally, the members of your types can expose only Windows Runtime types for their parameters and return values.","pos":[1876,2116],"source":" (See [.NET for UWP apps](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx) overview for more information.) Externally, the members of your types can expose only Windows Runtime types for their parameters and return values."},{"content":"The following list describes the limitations on .NET Framework types that are exposed from Windows Runtime Components.","pos":[2117,2235]},{"content":"The fields, parameters, and return values of all the public types and members in your component must be Windows Runtime types.","pos":[2241,2367]},{"content":"This restriction includes the Windows Runtime types that you create as well as types that are provided by the Windows Runtime itself.","pos":[2373,2506]},{"content":"It also includes a number of .NET Framework types.","pos":[2507,2557]},{"content":"The inclusion of these types is part of the support the .NET Framework provides to enable the natural use of the Windows Runtime in managed code: Your code appears to use familiar .NET Framework types instead of the underlying Windows Runtime types.","pos":[2558,2807]},{"content":"For example, you can use .NET Framework primitive types such as Int32 and Double, certain fundamental types such as DateTimeOffset and Uri, and some commonly used generic interface types such as IEnumerable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph> (IEnumerable(Of T) in Visual Basic) and IDictionary<ph id=\"ph3\">&amp;lt;</ph>TKey,TValue<ph id=\"ph4\">&amp;gt;</ph>.","pos":[2808,3095],"source":" For example, you can use .NET Framework primitive types such as Int32 and Double, certain fundamental types such as DateTimeOffset and Uri, and some commonly used generic interface types such as IEnumerable&lt;T&gt; (IEnumerable(Of T) in Visual Basic) and IDictionary&lt;TKey,TValue&gt;."},{"content":"(Note that the type arguments of these generic types must be Windows Runtime types.) This is discussed in the sections Passing Windows Runtime types to managed code and Passing managed types to the Windows Runtime, later in this article.","pos":[3096,3333]},{"content":"Public classes and interfaces can contain methods, properties, and events.","pos":[3339,3413]},{"content":"You can declare delegates for your events, or use the EventHandler<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph> delegate.","pos":[3414,3499],"source":" You can declare delegates for your events, or use the EventHandler&lt;T&gt; delegate."},{"content":"A public class or interface cannot:","pos":[3500,3535]},{"content":"Be generic.","pos":[3545,3556]},{"content":"Implement an interface that is not a Windows Runtime interface.","pos":[3565,3628]},{"content":"(However, you can create your own Windows Runtime interfaces and implement them.)","pos":[3629,3710]},{"content":"Derive from types that are not in the Windows Runtime, such as System.Exception and System.EventArgs.","pos":[3719,3820]},{"content":"All public types must have a root namespace that matches the assembly name, and the assembly name must not begin with \"Windows\".","pos":[3825,3953]},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  By default, Visual Studio projects have namespace names that match the assembly name.","pos":[3961,4055],"source":"**Tip**  By default, Visual Studio projects have namespace names that match the assembly name."},{"content":"In Visual Basic, the Namespace statement for this default namespace is not shown in your code.","pos":[4056,4150]},{"content":"Public structures can't have any members other than public fields, and those fields must be value types or strings.","pos":[4156,4271]},{"content":"Public classes must be <bpt id=\"p1\">**</bpt>sealed<ept id=\"p1\">**</ept> (<bpt id=\"p2\">**</bpt>NotInheritable<ept id=\"p2\">**</ept> in Visual Basic).","pos":[4276,4347],"source":"Public classes must be **sealed** (**NotInheritable** in Visual Basic)."},{"content":"If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.","pos":[4348,4500]},{"content":"Debugging your component","pos":[4505,4529]},{"content":"If both your Universal Windows app and your component are built with managed code, you can debug them at the same time.","pos":[4532,4651]},{"content":"When you're testing your component as part of a Universal Windows app using C++, you can debug managed and native code at the same time.","pos":[4653,4789]},{"content":"The default is native code only.","pos":[4790,4822]},{"content":"To debug both native C++ code and managed code","pos":[4829,4875]},{"pos":[4883,4961],"content":"Open the shortcut menu for your Visual C++ project, and choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","source":"Open the shortcut menu for your Visual C++ project, and choose **Properties**."},{"pos":[4966,5046],"content":"In the property pages, under <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept>, choose <bpt id=\"p2\">**</bpt>Debugging<ept id=\"p2\">**</ept>.","source":"In the property pages, under **Configuration Properties**, choose **Debugging**."},{"content":"Choose <bpt id=\"p1\">**</bpt>Debugger Type<ept id=\"p1\">**</ept>, and in the drop-down list box change <bpt id=\"p2\">**</bpt>Native Only<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Mixed (Managed and Native)<ept id=\"p3\">**</ept>.","pos":[5051,5164],"source":"Choose **Debugger Type**, and in the drop-down list box change **Native Only** to **Mixed (Managed and Native)**."},{"content":"Choose <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[5165,5179],"source":" Choose **OK**."},{"content":"Set breakpoints in native and managed code.","pos":[5184,5227]},{"content":"When you're testing your component as part of a Universal Windows app using JavaScript, by default the solution is in JavaScript debugging mode.","pos":[5229,5373]},{"content":"In Visual Studio, you can't debug JavaScript and managed code at the same time.","pos":[5374,5453]},{"content":"To debug managed code instead of JavaScript","pos":[5460,5503]},{"pos":[5511,5589],"content":"Open the shortcut menu for your JavaScript project, and choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","source":"Open the shortcut menu for your JavaScript project, and choose **Properties**."},{"pos":[5594,5674],"content":"In the property pages, under <bpt id=\"p1\">**</bpt>Configuration Properties<ept id=\"p1\">**</ept>, choose <bpt id=\"p2\">**</bpt>Debugging<ept id=\"p2\">**</ept>.","source":"In the property pages, under **Configuration Properties**, choose **Debugging**."},{"content":"Choose <bpt id=\"p1\">**</bpt>Debugger Type<ept id=\"p1\">**</ept>, and in the drop-down list box change <bpt id=\"p2\">**</bpt>Script Only<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Managed Only<ept id=\"p3\">**</ept>.","pos":[5679,5778],"source":"Choose **Debugger Type**, and in the drop-down list box change **Script Only** to **Managed Only**."},{"content":"Choose <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[5779,5793],"source":" Choose **OK**."},{"content":"Set breakpoints in managed code and debug as usual.","pos":[5798,5849]},{"content":"Passing Windows Runtime types to managed code","pos":[5854,5899]},{"content":"As mentioned previously in the section Declaring types in Windows Runtime Components, certain .NET Framework types can appear in the signatures of members of public classes.","pos":[5902,6075]},{"content":"This is part of the support that the .NET Framework provides to enable the natural use of the Windows Runtime in managed code.","pos":[6076,6202]},{"content":"It includes primitive types and some classes and interfaces.","pos":[6203,6263]},{"content":"When your component is used from JavaScript or from C++ code, it's important to know how your .NET Framework types appear to the caller.","pos":[6264,6400]},{"content":"See <bpt id=\"p1\">[</bpt>Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript<ept id=\"p1\">](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)</ept> for examples with JavaScript.","pos":[6401,6621],"source":" See [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md) for examples with JavaScript."},{"content":"This section discusses commonly used types.","pos":[6622,6665]},{"content":"In the .NET Framework, primitive types like the Int32 structure have many useful properties and methods, such as the TryParse method.","pos":[6667,6800]},{"content":"By contrast, primitive types and structures in the Windows Runtime only have fields.","pos":[6801,6885]},{"content":"When you pass these types to managed code, they appear to be .NET Framework types, and you can use the properties and methods of the .NET Framework types as you normally would.","pos":[6886,7062]},{"content":"The following list summarizes the substitutions that are made automatically in the IDE:","pos":[7063,7150]},{"content":"For the Windows Runtime primitives Int32, Int64, Single, Double, Boolean, String (an immutable collection of Unicode characters), Enum, UInt32, UInt64, and Guid, use the type of the same name in the System namespace.","pos":[7156,7372]},{"content":"For UInt8, use System.Byte.","pos":[7377,7404]},{"content":"For Char16, use System.Char.","pos":[7409,7437]},{"content":"For the IInspectable interface, use System.Object.","pos":[7442,7492]},{"content":"If C# or Visual Basic provides a language keyword for any of these types, you can use the language keyword instead.","pos":[7494,7609]},{"content":"In addition to primitive types, some basic, commonly used Windows Runtime types appear in managed code as their .NET Framework equivalents.","pos":[7611,7750]},{"content":"For example, suppose your JavaScript code uses the Windows.Foundation.Uri class, and you want to pass it to a C# or Visual Basic method.","pos":[7751,7887]},{"content":"The equivalent type in managed code is the .NET Framework System.Uri class, and that's the type to use for the method parameter.","pos":[7888,8016]},{"content":"You can tell when a Windows Runtime type appears as a .NET Framework type, because IntelliSense in Visual Studio hides the Windows Runtime type when you're writing managed code, and presents the equivalent .NET Framework type.","pos":[8017,8243]},{"content":"(Usually the two types have the same name.","pos":[8244,8286]},{"content":"However, note that the Windows.Foundation.DateTime structure appears in managed code as System.DateTimeOffset and not as System.DateTime.)","pos":[8287,8425]},{"content":"For some commonly used collection types, the mapping is between the interfaces that are implemented by a Windows Runtime type and the interfaces that are implemented by the corresponding .NET Framework type.","pos":[8427,8634]},{"content":"As with the types mentioned above, you declare parameter types by using the .NET Framework type.","pos":[8635,8731]},{"content":"This hides some differences between the types and makes writing .NET Framework code more natural.","pos":[8732,8829]},{"content":"The following table lists the most common of these generic interface types, along with other common class and interface mappings.","pos":[8830,8959]},{"content":"For a complete list of Windows Runtime types that the .NET Framework maps, see .NET Framework mappings of Windows Runtime types.","pos":[8960,9088]},{"content":"Windows Runtime","pos":[9092,9107]},{"content":".NET Framework","pos":[9143,9157]},{"content":"IIterable<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9302,9316],"source":"IIterable&lt;T"},{"content":"IEnumerable<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9353,9369],"source":"IEnumerable&lt;T"},{"content":"IVector<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9407,9419],"source":"IVector&lt;T"},{"content":"IList<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9458,9468],"source":"IList&lt;T"},{"content":"IVectorView<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9512,9528],"source":"IVectorView&lt;T"},{"content":"IReadOnlyList<ph id=\"ph1\">&amp;lt;</ph>T","pos":[9563,9581],"source":"IReadOnlyList&lt;T"},{"content":"IMap<ph id=\"ph1\">&amp;lt;</ph>K, V","pos":[9617,9629],"source":"IMap&lt;K, V"},{"content":"IDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue","pos":[9668,9695],"source":"IDictionary&lt;TKey, TValue"},{"content":"IMapView<ph id=\"ph1\">&amp;lt;</ph>K, V","pos":[9722,9738],"source":"IMapView&lt;K, V"},{"content":"IReadOnlyDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue","pos":[9773,9808],"source":"IReadOnlyDictionary&lt;TKey, TValue"},{"content":"IKeyValuePair<ph id=\"ph1\">&amp;lt;</ph>K, V","pos":[9827,9848],"source":"IKeyValuePair&lt;K, V"},{"content":"KeyValuePair<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue","pos":[9878,9906],"source":"KeyValuePair&lt;TKey, TValue"},{"content":"IBindableIterable","pos":[9932,9949]},{"content":"IEnumerable","pos":[9983,9994]},{"content":"IBindableVector","pos":[10037,10052]},{"content":"IList","pos":[10088,10093]},{"content":"Windows.UI.Xaml.Data.INotifyPropertyChanged","pos":[10142,10185]},{"content":"System.ComponentModel.INotifyPropertyChanged","pos":[10193,10237]},{"content":"Windows.UI.Xaml.Data.PropertyChangedEventHandler","pos":[10247,10295]},{"content":"System.ComponentModel.PropertyChangedEventHandler","pos":[10298,10347]},{"content":"Windows.UI.Xaml.Data.PropertyChangedEventArgs","pos":[10352,10397]},{"content":"System.ComponentModel.PropertyChangedEventArgs","pos":[10403,10449]},{"content":"When a type implements more than one interface, you can use any of the interfaces it implements as a parameter type or return type of a member.","pos":[10459,10602]},{"content":"For example, you can pass or return a Dictionary<ph id=\"ph1\">&amp;lt;</ph>int, string<ph id=\"ph2\">&amp;gt;</ph> (Dictionary(Of Integer, String) in Visual Basic) as IDictionary<ph id=\"ph3\">&amp;lt;</ph>int, string<ph id=\"ph4\">&amp;gt;</ph>, IReadOnlyDictionary<ph id=\"ph5\">&amp;lt;</ph>int, string<ph id=\"ph6\">&amp;gt;</ph>, or IEnumerable<ph id=\"ph7\">&amp;lt;</ph>System.Collections.Generic.KeyValuePair<ph id=\"ph8\">&amp;lt;</ph>TKey, TValue<ph id=\"ph9\">&amp;gt;&amp;gt;</ph>.","pos":[10603,10877],"source":" For example, you can pass or return a Dictionary&lt;int, string&gt; (Dictionary(Of Integer, String) in Visual Basic) as IDictionary&lt;int, string&gt;, IReadOnlyDictionary&lt;int, string&gt;, or IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt;&gt;."},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  JavaScript uses the interface that appears first in the list of interfaces that a managed type implements.","pos":[10879,11000],"source":"**Important**  JavaScript uses the interface that appears first in the list of interfaces that a managed type implements."},{"content":"For example, if you return Dictionary<ph id=\"ph1\">&amp;lt;</ph>int, string<ph id=\"ph2\">&amp;gt;</ph> to JavaScript code, it appears as IDictionary<ph id=\"ph3\">&amp;lt;</ph>int, string<ph id=\"ph4\">&amp;gt;</ph> no matter which interface you specify as the return type.","pos":[11001,11180],"source":" For example, if you return Dictionary&lt;int, string&gt; to JavaScript code, it appears as IDictionary&lt;int, string&gt; no matter which interface you specify as the return type."},{"content":"This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.","pos":[11181,11319]},{"content":"In the Windows Runtime, IMap<ph id=\"ph1\">&amp;lt;</ph>K, V<ph id=\"ph2\">&amp;gt;</ph> and IMapView<ph id=\"ph3\">&amp;lt;</ph>K, V<ph id=\"ph4\">&amp;gt;</ph> are iterated by using IKeyValuePair.","pos":[11321,11423],"source":"In the Windows Runtime, IMap&lt;K, V&gt; and IMapView&lt;K, V&gt; are iterated by using IKeyValuePair."},{"content":"When you pass them to managed code, they appear as IDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph> and IReadOnlyDictionary<ph id=\"ph3\">&amp;lt;</ph>TKey, TValue<ph id=\"ph4\">&amp;gt;</ph>, so naturally you use System.Collections.Generic.KeyValuePair<ph id=\"ph5\">&amp;lt;</ph>TKey, TValue<ph id=\"ph6\">&amp;gt;</ph> to enumerate them.","pos":[11424,11651],"source":" When you pass them to managed code, they appear as IDictionary&lt;TKey, TValue&gt; and IReadOnlyDictionary&lt;TKey, TValue&gt;, so naturally you use System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt; to enumerate them."},{"content":"The way interfaces appear in managed code affects the way types that implement these interfaces appear.","pos":[11653,11756]},{"content":"For example, the PropertySet class implements IMap<ph id=\"ph1\">&amp;lt;</ph>K, V<ph id=\"ph2\">&amp;gt;</ph>, which appears in managed code as IDictionary<ph id=\"ph3\">&amp;lt;</ph>TKey, TValue<ph id=\"ph4\">&amp;gt;</ph>.","pos":[11757,11886],"source":" For example, the PropertySet class implements IMap&lt;K, V&gt;, which appears in managed code as IDictionary&lt;TKey, TValue&gt;."},{"content":"PropertySet appears as if it implemented IDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph> instead of IMap<ph id=\"ph3\">&amp;lt;</ph>K, V<ph id=\"ph4\">&amp;gt;</ph>, so in managed code it appears to have an Add method, which behaves like the Add method on .NET Framework dictionaries.","pos":[11887,12107],"source":" PropertySet appears as if it implemented IDictionary&lt;TKey, TValue&gt; instead of IMap&lt;K, V&gt;, so in managed code it appears to have an Add method, which behaves like the Add method on .NET Framework dictionaries."},{"content":"It doesn't appear to have an Insert method.","pos":[12108,12151]},{"content":"You can see this example in the article <bpt id=\"p1\">[</bpt>Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript<ept id=\"p1\">](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)</ept>.","pos":[12152,12379],"source":" You can see this example in the article [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)."},{"content":"Passing managed types to the Windows Runtime","pos":[12384,12428]},{"content":"As discussed in the previous section, some Windows Runtime types can appear as .NET Framework types in the signatures of your component's members, or in the signatures of Windows Runtime members when you use them in the IDE.","pos":[12431,12655]},{"content":"When you pass .NET Framework types to these members or use them as the return values of your component's members, they appear to the code on the other side as the corresponding Windows Runtime type.","pos":[12656,12854]},{"content":"For examples of the effects this can have when your component is called from JavaScript, see the \"Returning managed types from your component\" section in <bpt id=\"p1\">[</bpt>Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript<ept id=\"p1\">](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)</ept>.","pos":[12855,13196],"source":" For examples of the effects this can have when your component is called from JavaScript, see the \"Returning managed types from your component\" section in [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)."},{"content":"Overloaded methods","pos":[13201,13219]},{"content":"In the Windows Runtime, methods can be overloaded.","pos":[13222,13272]},{"content":"However, if you declare multiple overloads with the same number of parameters, you must apply the <bpt id=\"p1\">[</bpt>Windows.Foundation.Metadata.DefaultOverloadAttribute<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.defaultoverloadattribute.aspx)</ept> attribute to only one of those overloads.","pos":[13273,13574],"source":" However, if you declare multiple overloads with the same number of parameters, you must apply the [Windows.Foundation.Metadata.DefaultOverloadAttribute](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.defaultoverloadattribute.aspx) attribute to only one of those overloads."},{"content":"That overload is the only one you can call from JavaScript.","pos":[13575,13634]},{"content":"For example, in the following code the overload that takes an <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept> (<bpt id=\"p2\">**</bpt>Integer<ept id=\"p2\">**</ept> in Visual Basic) is the default overload.","pos":[13635,13759],"source":" For example, in the following code the overload that takes an **int** (**Integer** in Visual Basic) is the default overload."},{"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept>  JavaScript allows you to pass any value to OverloadExample, and coerces the value to the type that is required by the parameter.","pos":[14248,14389],"source":"**Caution**  JavaScript allows you to pass any value to OverloadExample, and coerces the value to the type that is required by the parameter."},{"content":"You can call OverloadExample with \"forty-two\", \"42\", or 42.3, but all those values are passed to the default overload.","pos":[14390,14508]},{"content":"The default overload in the previous example returns 0, 42, and 42 respectively.","pos":[14509,14589]},{"content":"You cannot apply the DefaultOverloadAttribute attribute to constructors.","pos":[14591,14663]},{"content":"All the constructors in a class must have different numbers of parameters.","pos":[14664,14738]},{"content":"Implementing IStringable","pos":[14743,14767]},{"content":"Starting with Windows 8.1, the Windows Runtime includes an IStringable interface whose single method, IStringable.ToString, provides basic formatting support comparable to that provided by Object.ToString.","pos":[14770,14975]},{"content":"If you do choose to implement IStringable in a public managed type that is exported in a Windows Runtime component, the following restrictions apply:","pos":[14976,15125]},{"content":"You can define the IStringable interface only in a \"class implements\" relationship, such as the following code in C#:","pos":[15131,15248]},{"content":"Or the following Visual Basic code:","pos":[15313,15348]},{"content":"You cannot implement IStringable on an interface.","pos":[15424,15473]},{"content":"You cannot declare a parameter to be of type IStringable.","pos":[15478,15535]},{"content":"IStringable cannot be the return type of a method, property, or field.","pos":[15540,15610]},{"content":"You cannot hide your IStringable implementation from base classes by using a method definition such as the following:","pos":[15615,15732]},{"content":"Instead, the IStringable.ToString implementation must always override the base class implementation.","pos":[15908,16008]},{"content":"You can hide a ToString implementation only by invoking it on a strongly typed class instance.","pos":[16009,16103]},{"content":"Note that under a variety of conditions, calls from native code to a managed type that implements IStringable or hides its ToString implementation can produce unexpected behavior.","pos":[16105,16284]},{"content":"Asynchronous operations","pos":[16289,16312]},{"content":"To implement an asynchronous method in your component, add \"Async\" to the end of the method name and return one of the Windows Runtime interfaces that represent asynchronous actions or operations: IAsyncAction, IAsyncActionWithProgress<ph id=\"ph1\">&amp;lt;</ph>TProgress<ph id=\"ph2\">&amp;gt;</ph>, IAsyncOperation<ph id=\"ph3\">&amp;lt;</ph>TResult<ph id=\"ph4\">&amp;gt;</ph>, or IAsyncOperationWithProgress<ph id=\"ph5\">&amp;lt;</ph>TResult, TProgress<ph id=\"ph6\">&amp;gt;</ph>.","pos":[16315,16658],"source":"To implement an asynchronous method in your component, add \"Async\" to the end of the method name and return one of the Windows Runtime interfaces that represent asynchronous actions or operations: IAsyncAction, IAsyncActionWithProgress&lt;TProgress&gt;, IAsyncOperation&lt;TResult&gt;, or IAsyncOperationWithProgress&lt;TResult, TProgress&gt;."},{"content":"You can use .NET Framework tasks (the <bpt id=\"p1\">[</bpt>Task<ept id=\"p1\">](https://msdn.microsoft.com/library/system.threading.tasks.task.aspx)</ept> class and generic <bpt id=\"p2\">[</bpt>Task<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/dd321424.aspx)</ept> class) to implement your asynchronous method.","pos":[16660,16909],"source":"You can use .NET Framework tasks (the [Task](https://msdn.microsoft.com/library/system.threading.tasks.task.aspx) class and generic [Task&lt;TResult&gt;](https://msdn.microsoft.com/library/dd321424.aspx) class) to implement your asynchronous method."},{"content":"You must return a task that represents an ongoing operation, such as a task that is returned from an asynchronous method written in C# or Visual Basic, or a task that is returned from the <bpt id=\"p1\">[</bpt>Task.Run<ept id=\"p1\">](https://msdn.microsoft.com/library/system.threading.tasks.task.run.aspx)</ept> method.","pos":[16910,17189],"source":" You must return a task that represents an ongoing operation, such as a task that is returned from an asynchronous method written in C# or Visual Basic, or a task that is returned from the [Task.Run](https://msdn.microsoft.com/library/system.threading.tasks.task.run.aspx) method."},{"content":"If you use a constructor to create the task, you must call its <bpt id=\"p1\">[</bpt>Task.Start<ept id=\"p1\">](https://msdn.microsoft.com/library/system.threading.tasks.task.start.aspx)</ept> method before returning it.","pos":[17190,17368],"source":" If you use a constructor to create the task, you must call its [Task.Start](https://msdn.microsoft.com/library/system.threading.tasks.task.start.aspx) method before returning it."},{"content":"A method that uses await (Await in Visual Basic) requires the <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> keyword (<bpt id=\"p2\">**</bpt>Async<ept id=\"p2\">**</ept> in Visual Basic).","pos":[17370,17478],"source":"A method that uses await (Await in Visual Basic) requires the **async** keyword (**Async** in Visual Basic)."},{"content":"If you expose such a method from a Windows Runtime component, apply the <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> keyword to the delegate that you pass to the Run method.","pos":[17479,17617],"source":" If you expose such a method from a Windows Runtime component, apply the **async** keyword to the delegate that you pass to the Run method."},{"content":"For asynchronous actions and operations that do not support cancellation or progress reporting, you can use the <bpt id=\"p1\">[</bpt>WindowsRuntimeSystemExtensions.AsAsyncAction<ept id=\"p1\">](https://msdn.microsoft.com/library/system.windowsruntimesystemextensions.asasyncaction.aspx)</ept> or <bpt id=\"p2\">[</bpt>AsAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">](https://msdn.microsoft.com/library/hh779745.aspx)</ept> extension method to wrap the task in the appropriate interface.","pos":[17619,18021],"source":"For asynchronous actions and operations that do not support cancellation or progress reporting, you can use the [WindowsRuntimeSystemExtensions.AsAsyncAction](https://msdn.microsoft.com/library/system.windowsruntimesystemextensions.asasyncaction.aspx) or [AsAsyncOperation&lt;TResult&gt;](https://msdn.microsoft.com/library/hh779745.aspx) extension method to wrap the task in the appropriate interface."},{"content":"For example, the following code implements an asynchronous method by using the Task.Run<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph> method to start a task.","pos":[18022,18148],"source":" For example, the following code implements an asynchronous method by using the Task.Run&lt;TResult&gt; method to start a task."},{"content":"The AsAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph> extension method returns the task as a Windows Runtime asynchronous operation.","pos":[18149,18263],"source":" The AsAsyncOperation&lt;TResult&gt; extension method returns the task as a Windows Runtime asynchronous operation."},{"content":"The following JavaScript code shows how the method could be called by using a <bpt id=\"p1\">[</bpt>WinJS.Promise<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br211867.aspx)</ept> object.","pos":[18942,19106],"source":"The following JavaScript code shows how the method could be called by using a [WinJS.Promise](https://msdn.microsoft.com/library/windows/apps/br211867.aspx) object."},{"content":"The function that is passed to the then method is executed when the asynchronous call completes.","pos":[19107,19203]},{"content":"The stringList parameter contains the list of strings that is returned by the DownloadAsStringAsync method, and the function does whatever processing is required.","pos":[19204,19366]},{"content":"For asynchronous actions and operations that support cancellation or progress reporting, use the <bpt id=\"p1\">[</bpt>AsyncInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx)</ept> class to generate a started task and to hook up the cancellation and progress reporting features of the task with the cancellation and progress reporting features of the appropriate Windows Runtime interface.","pos":[19606,20020],"source":"For asynchronous actions and operations that support cancellation or progress reporting, use the [AsyncInfo](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx) class to generate a started task and to hook up the cancellation and progress reporting features of the task with the cancellation and progress reporting features of the appropriate Windows Runtime interface."},{"content":"For an example that supports both cancellation and progress reporting, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript<ept id=\"p1\">](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)</ept>.","pos":[20021,20283],"source":" For an example that supports both cancellation and progress reporting, see [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)."},{"content":"Note that you can use the methods of the AsyncInfo class even if your asynchronous method doesn't support cancellation or progress reporting.","pos":[20285,20426]},{"content":"If you use a Visual Basic lambda function or a C# anonymous method, don't supply parameters for the token and <bpt id=\"p1\">[</bpt>IProgress<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/hh138298.aspx)</ept> interface.","pos":[20427,20618],"source":" If you use a Visual Basic lambda function or a C# anonymous method, don't supply parameters for the token and [IProgress&lt;T&gt;](https://msdn.microsoft.com/library/hh138298.aspx) interface."},{"content":"If you use a C# lambda function, supply a token parameter but ignore it.","pos":[20619,20691]},{"content":"The previous example, which used the AsAsyncOperation<ph id=\"ph1\">&amp;lt;</ph>TResult<ph id=\"ph2\">&amp;gt;</ph> method, looks like this when you use the <bpt id=\"p1\">[</bpt>AsyncInfo.Run<ph id=\"ph3\">&amp;lt;</ph>TResult<ph id=\"ph4\">&amp;gt;</ph>(Func<ph id=\"ph5\">&amp;lt;</ph>CancellationToken, Task<ph id=\"ph6\">&amp;lt;</ph>TResult<ph id=\"ph7\">&amp;gt;&amp;gt;</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/hh779740.aspx)</ept>) method overload instead:","pos":[20692,20959],"source":" The previous example, which used the AsAsyncOperation&lt;TResult&gt; method, looks like this when you use the [AsyncInfo.Run&lt;TResult&gt;(Func&lt;CancellationToken, Task&lt;TResult&gt;&gt;](https://msdn.microsoft.com/library/hh779740.aspx)) method overload instead:"},{"content":"If you create an asynchronous method that optionally supports cancellation or progress reporting, consider adding overloads that don't have parameters for a cancellation token or the IProgress<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph> interface.","pos":[21614,21826],"source":"If you create an asynchronous method that optionally supports cancellation or progress reporting, consider adding overloads that don't have parameters for a cancellation token or the IProgress&lt;T&gt; interface."},{"content":"Throwing exceptions","pos":[21831,21850]},{"content":"You can throw any exception type that is included in the .NET for Windows apps.","pos":[21853,21932]},{"content":"You can't declare your own public exception types in a Windows Runtime component, but you can declare and throw non-public types.","pos":[21933,22062]},{"content":"If your component doesn't handle the exception, a corresponding exception is raised in the code that called your component.","pos":[22064,22187]},{"content":"The way the exception appears to the caller depends on the way the calling language supports the Windows Runtime.","pos":[22188,22301]},{"content":"In JavaScript, the exception appears as an object in which the exception message is replaced by a stack trace.","pos":[22307,22417]},{"content":"When you debug your app in Visual Studio, you can see the original message text displayed in the debugger exception dialog box, identified as \"WinRT Information\".","pos":[22418,22580]},{"content":"You can't access the original message text from JavaScript code.","pos":[22581,22645]},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  Currently, the stack trace contains the managed exception type, but we don't recommend parsing the trace to identify the exception type.","pos":[22653,22798],"source":"**Tip**  Currently, the stack trace contains the managed exception type, but we don't recommend parsing the trace to identify the exception type."},{"content":"Instead, use an HRESULT value as described later in this section.","pos":[22799,22864]},{"content":"In C++, the exception appears as a platform exception.","pos":[22870,22924]},{"content":"If the managed exception's HResult property can be mapped to the HRESULT of a specific platform exception, the specific exception is used; otherwise, a <bpt id=\"p1\">[</bpt>Platform::COMException<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710414.aspx)</ept> exception is thrown.","pos":[22925,23190],"source":" If the managed exception's HResult property can be mapped to the HRESULT of a specific platform exception, the specific exception is used; otherwise, a [Platform::COMException](https://msdn.microsoft.com/library/windows/apps/xaml/hh710414.aspx) exception is thrown."},{"content":"The message text of the managed exception is not available to C++ code.","pos":[23191,23262]},{"content":"If a specific platform exception was thrown, the default message text for that exception type appears; otherwise, no message text appears.","pos":[23263,23401]},{"content":"See <bpt id=\"p1\">[</bpt>Exceptions (C++/CX)<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699896.aspx)</ept>.","pos":[23402,23496],"source":" See [Exceptions (C++/CX)](https://msdn.microsoft.com/library/windows/apps/xaml/hh699896.aspx)."},{"content":"In C# or Visual Basic, the exception is a normal managed exception.","pos":[23501,23568]},{"content":"When you throw an exception from your component, you can make it easier for a JavaScript or C++ caller to handle the exception by throwing a non-public exception type whose HResult property value is specific to your component.","pos":[23570,23796]},{"content":"The HRESULT is available to a JavaScript caller through the exception object's number property, and to a C++ caller through the <bpt id=\"p1\">[</bpt>COMException::HResult<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710415.aspx)</ept> property.","pos":[23797,24026],"source":" The HRESULT is available to a JavaScript caller through the exception object's number property, and to a C++ caller through the [COMException::HResult](https://msdn.microsoft.com/library/windows/apps/xaml/hh710415.aspx) property."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Use a negative value for your HRESULT.","pos":[24030,24078],"source":"**Note**  Use a negative value for your HRESULT."},{"content":"A positive value is interpreted as success, and no exception is thrown in the JavaScript or C++ caller.","pos":[24079,24182]},{"content":"Declaring and raising events","pos":[24187,24215]},{"content":"When you declare a type to hold the data for your event, derive from Object instead of from EventArgs, because EventArgs is not a Windows Runtime type.","pos":[24217,24368]},{"content":"Use <bpt id=\"p1\">[</bpt>EventHandler<ph id=\"ph1\">&amp;lt;</ph>TEventArgs<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://msdn.microsoft.com/library/db0etb8x.aspx)</ept> as the type of the event, and use your event argument type as the generic type argument.","pos":[24369,24544],"source":" Use [EventHandler&lt;TEventArgs&gt;](https://msdn.microsoft.com/library/db0etb8x.aspx) as the type of the event, and use your event argument type as the generic type argument."},{"content":"Raise the event just as you would in a .NET Framework application.","pos":[24545,24611]},{"content":"When your Windows Runtime component is used from JavaScript or C++, the event follows the Windows Runtime event pattern that those languages expect.","pos":[24613,24761]},{"content":"When you use the component from C# or Visual Basic, the event appears as an ordinary .NET Framework event.","pos":[24762,24868]},{"content":"An example is provided in <bpt id=\"p1\">[</bpt>Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript<ept id=\"p1\">]()</ept>.","pos":[24869,24993],"source":" An example is provided in [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript]()."},{"content":"If you implement custom event accessors (declare an event with the <bpt id=\"p1\">**</bpt>Custom<ept id=\"p1\">**</ept> keyword, in Visual Basic), you must follow the Windows Runtime event pattern in your implementation.","pos":[24995,25173],"source":"If you implement custom event accessors (declare an event with the **Custom** keyword, in Visual Basic), you must follow the Windows Runtime event pattern in your implementation."},{"content":"See <bpt id=\"p1\">[</bpt>Custom events and event accessors in Windows Runtime Components<ept id=\"p1\">](custom-events-and-event-accessors-in-windows-runtime-components.md)</ept>.","pos":[25174,25312],"source":" See [Custom events and event accessors in Windows Runtime Components](custom-events-and-event-accessors-in-windows-runtime-components.md)."},{"content":"Note that when you handle the event from C# or Visual Basic code, it still appears to be an ordinary .NET Framework event.","pos":[25313,25435]},{"content":"Next steps","pos":[25440,25450]},{"content":"After you’ve created a Windows Runtime component for your own use, you may find that the functionality it encapsulates is useful to other developers.","pos":[25453,25602]},{"content":"You have two options for packaging a component for distribution to other developers.","pos":[25603,25687]},{"content":"See <bpt id=\"p1\">[</bpt>Distributing a managed Windows Runtime component<ept id=\"p1\">](https://msdn.microsoft.com/library/jj614475.aspx)</ept>.","pos":[25688,25793],"source":" See [Distributing a managed Windows Runtime component](https://msdn.microsoft.com/library/jj614475.aspx)."},{"pos":[25795,26026],"content":"For more information about Visual Basic and C# language features, and .NET Framework support for the Windows Runtime, see <bpt id=\"p1\">[</bpt>Visual Basic and C# language reference<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/br212458.aspx)</ept>.","source":"For more information about Visual Basic and C# language features, and .NET Framework support for the Windows Runtime, see [Visual Basic and C# language reference](https://msdn.microsoft.com/library/windows/apps/xaml/br212458.aspx)."},{"content":"Related topics","pos":[26031,26045]},{"content":".NET for Windows Store Apps Overview","pos":[26050,26086]},{"content":".NET for UWP apps","pos":[26159,26176]},{"content":"Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript","pos":[26249,26336]}],"content":"---\ntitle: Creating Windows Runtime Components in C# and Visual Basic\ndescription: Starting with the .NET Framework 4.5, you can use managed code to create your own Windows Runtime types, packaged in a Windows Runtime component.\nms.assetid: A5672966-74DF-40AB-B01E-01E3FCD0AD7A\n---\n\n# Creating Windows Runtime Components in C# and Visual Basic\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n\\[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\\]\n\nStarting with the .NET Framework 4.5, you can use managed code to create your own Windows Runtime types, packaged in a Windows Runtime component. You can use your component in Universal Windows Platform (UWP) apps with C++, JavaScript, Visual Basic, or C#. This article outlines the rules for creating a component, and discusses some aspects of .NET Framework support for the Windows Runtime. In general, that support is designed to be transparent to the .NET Framework programmer. However, when you create a component to use with JavaScript or C++, you need to be aware of differences in the way those languages support the Windows Runtime.\n\nIf you are creating a component for use only in UWP apps with Visual Basic or C#, and the component does not contain UWP controls, consider using the **Class Library** template instead of the **Windows Runtime Component** template. There are fewer restrictions on a simple class library.\n\nThis article contains the following sections:\n\n## Declaring types in Windows Runtime Components\n\n\nInternally, the Windows Runtime types in your component can use any .NET Framework functionality that's allowed in a Universal Windows app. (See [.NET for UWP apps](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx) overview for more information.) Externally, the members of your types can expose only Windows Runtime types for their parameters and return values. The following list describes the limitations on .NET Framework types that are exposed from Windows Runtime Components.\n\n-   The fields, parameters, and return values of all the public types and members in your component must be Windows Runtime types.\n\n    This restriction includes the Windows Runtime types that you create as well as types that are provided by the Windows Runtime itself. It also includes a number of .NET Framework types. The inclusion of these types is part of the support the .NET Framework provides to enable the natural use of the Windows Runtime in managed code: Your code appears to use familiar .NET Framework types instead of the underlying Windows Runtime types. For example, you can use .NET Framework primitive types such as Int32 and Double, certain fundamental types such as DateTimeOffset and Uri, and some commonly used generic interface types such as IEnumerable&lt;T&gt; (IEnumerable(Of T) in Visual Basic) and IDictionary&lt;TKey,TValue&gt;. (Note that the type arguments of these generic types must be Windows Runtime types.) This is discussed in the sections Passing Windows Runtime types to managed code and Passing managed types to the Windows Runtime, later in this article.\n\n-   Public classes and interfaces can contain methods, properties, and events. You can declare delegates for your events, or use the EventHandler&lt;T&gt; delegate. A public class or interface cannot:\n\n    -   Be generic.\n    -   Implement an interface that is not a Windows Runtime interface. (However, you can create your own Windows Runtime interfaces and implement them.)\n    -   Derive from types that are not in the Windows Runtime, such as System.Exception and System.EventArgs.\n-   All public types must have a root namespace that matches the assembly name, and the assembly name must not begin with \"Windows\".\n\n    > **Tip**  By default, Visual Studio projects have namespace names that match the assembly name. In Visual Basic, the Namespace statement for this default namespace is not shown in your code.\n\n-   Public structures can't have any members other than public fields, and those fields must be value types or strings.\n-   Public classes must be **sealed** (**NotInheritable** in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.\n\n## Debugging your component\n\n\nIf both your Universal Windows app and your component are built with managed code, you can debug them at the same time.\n\nWhen you're testing your component as part of a Universal Windows app using C++, you can debug managed and native code at the same time. The default is native code only.\n\n## **To debug both native C++ code and managed code**\n\n1.  Open the shortcut menu for your Visual C++ project, and choose **Properties**.\n2.  In the property pages, under **Configuration Properties**, choose **Debugging**.\n3.  Choose **Debugger Type**, and in the drop-down list box change **Native Only** to **Mixed (Managed and Native)**. Choose **OK**.\n4.  Set breakpoints in native and managed code.\n\nWhen you're testing your component as part of a Universal Windows app using JavaScript, by default the solution is in JavaScript debugging mode. In Visual Studio, you can't debug JavaScript and managed code at the same time.\n\n## **To debug managed code instead of JavaScript**\n\n1.  Open the shortcut menu for your JavaScript project, and choose **Properties**.\n2.  In the property pages, under **Configuration Properties**, choose **Debugging**.\n3.  Choose **Debugger Type**, and in the drop-down list box change **Script Only** to **Managed Only**. Choose **OK**.\n4.  Set breakpoints in managed code and debug as usual.\n\n## Passing Windows Runtime types to managed code\n\n\nAs mentioned previously in the section Declaring types in Windows Runtime Components, certain .NET Framework types can appear in the signatures of members of public classes. This is part of the support that the .NET Framework provides to enable the natural use of the Windows Runtime in managed code. It includes primitive types and some classes and interfaces. When your component is used from JavaScript or from C++ code, it's important to know how your .NET Framework types appear to the caller. See [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md) for examples with JavaScript. This section discusses commonly used types.\n\nIn the .NET Framework, primitive types like the Int32 structure have many useful properties and methods, such as the TryParse method. By contrast, primitive types and structures in the Windows Runtime only have fields. When you pass these types to managed code, they appear to be .NET Framework types, and you can use the properties and methods of the .NET Framework types as you normally would. The following list summarizes the substitutions that are made automatically in the IDE:\n\n-   For the Windows Runtime primitives Int32, Int64, Single, Double, Boolean, String (an immutable collection of Unicode characters), Enum, UInt32, UInt64, and Guid, use the type of the same name in the System namespace.\n-   For UInt8, use System.Byte.\n-   For Char16, use System.Char.\n-   For the IInspectable interface, use System.Object.\n\nIf C# or Visual Basic provides a language keyword for any of these types, you can use the language keyword instead.\n\nIn addition to primitive types, some basic, commonly used Windows Runtime types appear in managed code as their .NET Framework equivalents. For example, suppose your JavaScript code uses the Windows.Foundation.Uri class, and you want to pass it to a C# or Visual Basic method. The equivalent type in managed code is the .NET Framework System.Uri class, and that's the type to use for the method parameter. You can tell when a Windows Runtime type appears as a .NET Framework type, because IntelliSense in Visual Studio hides the Windows Runtime type when you're writing managed code, and presents the equivalent .NET Framework type. (Usually the two types have the same name. However, note that the Windows.Foundation.DateTime structure appears in managed code as System.DateTimeOffset and not as System.DateTime.)\n\nFor some commonly used collection types, the mapping is between the interfaces that are implemented by a Windows Runtime type and the interfaces that are implemented by the corresponding .NET Framework type. As with the types mentioned above, you declare parameter types by using the .NET Framework type. This hides some differences between the types and makes writing .NET Framework code more natural. The following table lists the most common of these generic interface types, along with other common class and interface mappings. For a complete list of Windows Runtime types that the .NET Framework maps, see .NET Framework mappings of Windows Runtime types.\n\n| Windows Runtime                                  | .NET Framework                                    |\n|--------------------------------------------------|---------------------------------------------------|\n| IIterable&lt;T&gt;                               | IEnumerable&lt;T&gt;                              |\n| IVector&lt;T&gt;                                 | IList&lt;T&gt;                                    |\n| IVectorView&lt;T&gt;                             | IReadOnlyList&lt;T&gt;                            |\n| IMap&lt;K, V&gt;                                 | IDictionary&lt;TKey, TValue&gt;                   |\n| IMapView&lt;K, V&gt;                             | IReadOnlyDictionary&lt;TKey, TValue&gt;           |\n| IKeyValuePair&lt;K, V&gt;                        | KeyValuePair&lt;TKey, TValue&gt;                  |\n| IBindableIterable                                | IEnumerable                                       |\n| IBindableVector                                  | IList                                             |\n| Windows.UI.Xaml.Data.INotifyPropertyChanged      | System.ComponentModel.INotifyPropertyChanged      |\n| Windows.UI.Xaml.Data.PropertyChangedEventHandler | System.ComponentModel.PropertyChangedEventHandler |\n| Windows.UI.Xaml.Data.PropertyChangedEventArgs    | System.ComponentModel.PropertyChangedEventArgs    |\n\n \n\nWhen a type implements more than one interface, you can use any of the interfaces it implements as a parameter type or return type of a member. For example, you can pass or return a Dictionary&lt;int, string&gt; (Dictionary(Of Integer, String) in Visual Basic) as IDictionary&lt;int, string&gt;, IReadOnlyDictionary&lt;int, string&gt;, or IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt;&gt;.\n\n**Important**  JavaScript uses the interface that appears first in the list of interfaces that a managed type implements. For example, if you return Dictionary&lt;int, string&gt; to JavaScript code, it appears as IDictionary&lt;int, string&gt; no matter which interface you specify as the return type. This means that if the first interface doesn't include a member that appears on later interfaces, that member isn't visible to JavaScript.\n\nIn the Windows Runtime, IMap&lt;K, V&gt; and IMapView&lt;K, V&gt; are iterated by using IKeyValuePair. When you pass them to managed code, they appear as IDictionary&lt;TKey, TValue&gt; and IReadOnlyDictionary&lt;TKey, TValue&gt;, so naturally you use System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt; to enumerate them.\n\nThe way interfaces appear in managed code affects the way types that implement these interfaces appear. For example, the PropertySet class implements IMap&lt;K, V&gt;, which appears in managed code as IDictionary&lt;TKey, TValue&gt;. PropertySet appears as if it implemented IDictionary&lt;TKey, TValue&gt; instead of IMap&lt;K, V&gt;, so in managed code it appears to have an Add method, which behaves like the Add method on .NET Framework dictionaries. It doesn't appear to have an Insert method. You can see this example in the article [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md).\n\n## Passing managed types to the Windows Runtime\n\n\nAs discussed in the previous section, some Windows Runtime types can appear as .NET Framework types in the signatures of your component's members, or in the signatures of Windows Runtime members when you use them in the IDE. When you pass .NET Framework types to these members or use them as the return values of your component's members, they appear to the code on the other side as the corresponding Windows Runtime type. For examples of the effects this can have when your component is called from JavaScript, see the \"Returning managed types from your component\" section in [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md).\n\n## Overloaded methods\n\n\nIn the Windows Runtime, methods can be overloaded. However, if you declare multiple overloads with the same number of parameters, you must apply the [Windows.Foundation.Metadata.DefaultOverloadAttribute](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.defaultoverloadattribute.aspx) attribute to only one of those overloads. That overload is the only one you can call from JavaScript. For example, in the following code the overload that takes an **int** (**Integer** in Visual Basic) is the default overload.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```csharp\n> public string OverloadExample(string s)\n> {\n>     return s;\n> }\n> [Windows.Foundation.Metadata.DefaultOverload()] \n> public int OverloadExample(int x)\n> {\n>     return x;\n> } \n> ```\n> ```vb\n> Public Function OverloadExample(ByVal s As String) As String\n>     Return s\n> End Function\n> <Windows.Foundation.Metadata.DefaultOverload> _\n> Public Function OverloadExample(ByVal x As Integer) As Integer\n>     Return x\n> End Function\n> ```\n\n> **Caution**  JavaScript allows you to pass any value to OverloadExample, and coerces the value to the type that is required by the parameter. You can call OverloadExample with \"forty-two\", \"42\", or 42.3, but all those values are passed to the default overload. The default overload in the previous example returns 0, 42, and 42 respectively.\n\nYou cannot apply the DefaultOverloadAttribute attribute to constructors. All the constructors in a class must have different numbers of parameters.\n\n## Implementing IStringable\n\n\nStarting with Windows 8.1, the Windows Runtime includes an IStringable interface whose single method, IStringable.ToString, provides basic formatting support comparable to that provided by Object.ToString. If you do choose to implement IStringable in a public managed type that is exported in a Windows Runtime component, the following restrictions apply:\n\n-   You can define the IStringable interface only in a \"class implements\" relationship, such as the following code in C#:\n\n    ```cs\n    public class NewClass : IStringable\n    ```\n\n    Or the following Visual Basic code:\n\n    ```vb\n    Public Class NewClass : Implements IStringable\n    ```\n\n-   You cannot implement IStringable on an interface.\n-   You cannot declare a parameter to be of type IStringable.\n-   IStringable cannot be the return type of a method, property, or field.\n-   You cannot hide your IStringable implementation from base classes by using a method definition such as the following:\n\n    ```cs\n    public class NewClass : IStringable\n    {\n       public new string ToString()\n       {\n          return \"New ToString in NewClass\";\n       }\n    }\n    ```\n\n    Instead, the IStringable.ToString implementation must always override the base class implementation. You can hide a ToString implementation only by invoking it on a strongly typed class instance.\n\nNote that under a variety of conditions, calls from native code to a managed type that implements IStringable or hides its ToString implementation can produce unexpected behavior.\n\n## Asynchronous operations\n\n\nTo implement an asynchronous method in your component, add \"Async\" to the end of the method name and return one of the Windows Runtime interfaces that represent asynchronous actions or operations: IAsyncAction, IAsyncActionWithProgress&lt;TProgress&gt;, IAsyncOperation&lt;TResult&gt;, or IAsyncOperationWithProgress&lt;TResult, TProgress&gt;.\n\nYou can use .NET Framework tasks (the [Task](https://msdn.microsoft.com/library/system.threading.tasks.task.aspx) class and generic [Task&lt;TResult&gt;](https://msdn.microsoft.com/library/dd321424.aspx) class) to implement your asynchronous method. You must return a task that represents an ongoing operation, such as a task that is returned from an asynchronous method written in C# or Visual Basic, or a task that is returned from the [Task.Run](https://msdn.microsoft.com/library/system.threading.tasks.task.run.aspx) method. If you use a constructor to create the task, you must call its [Task.Start](https://msdn.microsoft.com/library/system.threading.tasks.task.start.aspx) method before returning it.\n\nA method that uses await (Await in Visual Basic) requires the **async** keyword (**Async** in Visual Basic). If you expose such a method from a Windows Runtime component, apply the **async** keyword to the delegate that you pass to the Run method.\n\nFor asynchronous actions and operations that do not support cancellation or progress reporting, you can use the [WindowsRuntimeSystemExtensions.AsAsyncAction](https://msdn.microsoft.com/library/system.windowsruntimesystemextensions.asasyncaction.aspx) or [AsAsyncOperation&lt;TResult&gt;](https://msdn.microsoft.com/library/hh779745.aspx) extension method to wrap the task in the appropriate interface. For example, the following code implements an asynchronous method by using the Task.Run&lt;TResult&gt; method to start a task. The AsAsyncOperation&lt;TResult&gt; extension method returns the task as a Windows Runtime asynchronous operation.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```csharp\n> public static IAsyncOperation<IList<string>> DownloadAsStringsAsync(string id)\n> {\n>     return Task.Run<IList<string>>(async () =>\n>     {\n>         var data = await DownloadDataAsync(id);\n>         return ExtractStrings(data);\n>     }).AsAsyncOperation();\n> }\n> ```\n> ```vb\n> Public Shared Function DownloadAsStringsAsync(ByVal id As String) _\n>      As IAsyncOperation(Of IList(Of String))\n> \n>     Return Task.Run(Of IList(Of String))(\n>         Async Function()\n>             Dim data = Await DownloadDataAsync(id)\n>             Return ExtractStrings(data)\n>         End Function).AsAsyncOperation()\n> End Function\n> ```\n\nThe following JavaScript code shows how the method could be called by using a [WinJS.Promise](https://msdn.microsoft.com/library/windows/apps/br211867.aspx) object. The function that is passed to the then method is executed when the asynchronous call completes. The stringList parameter contains the list of strings that is returned by the DownloadAsStringAsync method, and the function does whatever processing is required.\n\n```javascript\nfunction asyncExample(id) {\n\n    var result = SampleComponent.Example.downloadAsStringAsync(id).then(\n        function (stringList) {\n            // Place code that uses the returned list of strings here.\n        });\n}\n```\n\nFor asynchronous actions and operations that support cancellation or progress reporting, use the [AsyncInfo](https://msdn.microsoft.com/library/system.runtime.interopservices.windowsruntime.asyncinfo.aspx) class to generate a started task and to hook up the cancellation and progress reporting features of the task with the cancellation and progress reporting features of the appropriate Windows Runtime interface. For an example that supports both cancellation and progress reporting, see [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md).\n\nNote that you can use the methods of the AsyncInfo class even if your asynchronous method doesn't support cancellation or progress reporting. If you use a Visual Basic lambda function or a C# anonymous method, don't supply parameters for the token and [IProgress&lt;T&gt;](https://msdn.microsoft.com/library/hh138298.aspx) interface. If you use a C# lambda function, supply a token parameter but ignore it. The previous example, which used the AsAsyncOperation&lt;TResult&gt; method, looks like this when you use the [AsyncInfo.Run&lt;TResult&gt;(Func&lt;CancellationToken, Task&lt;TResult&gt;&gt;](https://msdn.microsoft.com/library/hh779740.aspx)) method overload instead:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```csharp\n> public static IAsyncOperation<IList<string>> DownloadAsStringsAsync(string id)\n> {\n>     return AsyncInfo.Run<IList<string>>(async (token) =>\n>     {\n>         var data = await DownloadDataAsync(id);\n>         return ExtractStrings(data);\n>     });\n> }\n> ```\n> ```vb\n> Public Shared Function DownloadAsStringsAsync(ByVal id As String) _\n>     As IAsyncOperation(Of IList(Of String))\n> \n>     Return AsyncInfo.Run(Of IList(Of String))(\n>         Async Function()\n>             Dim data = Await DownloadDataAsync(id)\n>             Return ExtractStrings(data)\n>         End Function)\n> End Function\n> ```\n\nIf you create an asynchronous method that optionally supports cancellation or progress reporting, consider adding overloads that don't have parameters for a cancellation token or the IProgress&lt;T&gt; interface.\n\n## Throwing exceptions\n\n\nYou can throw any exception type that is included in the .NET for Windows apps. You can't declare your own public exception types in a Windows Runtime component, but you can declare and throw non-public types.\n\nIf your component doesn't handle the exception, a corresponding exception is raised in the code that called your component. The way the exception appears to the caller depends on the way the calling language supports the Windows Runtime.\n\n-   In JavaScript, the exception appears as an object in which the exception message is replaced by a stack trace. When you debug your app in Visual Studio, you can see the original message text displayed in the debugger exception dialog box, identified as \"WinRT Information\". You can't access the original message text from JavaScript code.\n\n    > **Tip**  Currently, the stack trace contains the managed exception type, but we don't recommend parsing the trace to identify the exception type. Instead, use an HRESULT value as described later in this section.\n\n-   In C++, the exception appears as a platform exception. If the managed exception's HResult property can be mapped to the HRESULT of a specific platform exception, the specific exception is used; otherwise, a [Platform::COMException](https://msdn.microsoft.com/library/windows/apps/xaml/hh710414.aspx) exception is thrown. The message text of the managed exception is not available to C++ code. If a specific platform exception was thrown, the default message text for that exception type appears; otherwise, no message text appears. See [Exceptions (C++/CX)](https://msdn.microsoft.com/library/windows/apps/xaml/hh699896.aspx).\n-   In C# or Visual Basic, the exception is a normal managed exception.\n\nWhen you throw an exception from your component, you can make it easier for a JavaScript or C++ caller to handle the exception by throwing a non-public exception type whose HResult property value is specific to your component. The HRESULT is available to a JavaScript caller through the exception object's number property, and to a C++ caller through the [COMException::HResult](https://msdn.microsoft.com/library/windows/apps/xaml/hh710415.aspx) property.\n\n> **Note**  Use a negative value for your HRESULT. A positive value is interpreted as success, and no exception is thrown in the JavaScript or C++ caller.\n\n## Declaring and raising events\n\nWhen you declare a type to hold the data for your event, derive from Object instead of from EventArgs, because EventArgs is not a Windows Runtime type. Use [EventHandler&lt;TEventArgs&gt;](https://msdn.microsoft.com/library/db0etb8x.aspx) as the type of the event, and use your event argument type as the generic type argument. Raise the event just as you would in a .NET Framework application.\n\nWhen your Windows Runtime component is used from JavaScript or C++, the event follows the Windows Runtime event pattern that those languages expect. When you use the component from C# or Visual Basic, the event appears as an ordinary .NET Framework event. An example is provided in [Walkthrough: Creating a simple component in C# or Visual Basic and calling it from JavaScript]().\n\nIf you implement custom event accessors (declare an event with the **Custom** keyword, in Visual Basic), you must follow the Windows Runtime event pattern in your implementation. See [Custom events and event accessors in Windows Runtime Components](custom-events-and-event-accessors-in-windows-runtime-components.md). Note that when you handle the event from C# or Visual Basic code, it still appears to be an ordinary .NET Framework event.\n\n## Next steps\n\n\nAfter you’ve created a Windows Runtime component for your own use, you may find that the functionality it encapsulates is useful to other developers. You have two options for packaging a component for distribution to other developers. See [Distributing a managed Windows Runtime component](https://msdn.microsoft.com/library/jj614475.aspx).\n\nFor more information about Visual Basic and C# language features, and .NET Framework support for the Windows Runtime, see [Visual Basic and C# language reference](https://msdn.microsoft.com/library/windows/apps/xaml/br212458.aspx).\n\n## Related topics\n\n* [.NET for Windows Store Apps Overview](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx)\n* [.NET for UWP apps](https://msdn.microsoft.com/library/windows/apps/xaml/mt185501.aspx)\n* [Walkthrough: Creating a Simple Windows Runtime Component and calling it from JavaScript](walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript.md)\n\n\n"}