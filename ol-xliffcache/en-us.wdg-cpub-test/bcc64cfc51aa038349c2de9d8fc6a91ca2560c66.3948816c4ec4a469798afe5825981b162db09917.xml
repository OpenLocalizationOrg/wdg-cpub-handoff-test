{"nodes":[{"pos":[17,223],"content":"We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or Visual C++ component extensions (C++/CX) as your programming language, and XAML for your UI definition.","needQuote":true,"needEscape":true,"nodes":[{"content":"We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or Visual C++ component extensions (C++/CX) as your programming language, and XAML for your UI definition.","pos":[0,206]}]},{"pos":[231,264],"content":"Events and routed events overview","needQuote":true,"needEscape":true,"nodes":[{"content":"Events and routed events overview","pos":[0,33]}]},{"content":"Events and routed events overview","pos":[321,354]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[356,394]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[395,490],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[494,508]},{"content":"UIElement","pos":[518,527]},{"content":"RoutedEventArgs","pos":[596,611]},{"content":"We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or Visual C++ component extensions (C++/CX) as your programming language, and XAML for your UI definition.","pos":[674,880]},{"content":"You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code.","pos":[881,1005]},{"content":"Windows Runtime supports <bpt id=\"p1\">*</bpt>routed events<ept id=\"p1\">*</ept>: certain input events and data events can be handled by objects beyond the object that fired the event.","pos":[1006,1150],"source":" Windows Runtime supports *routed events*: certain input events and data events can be handled by objects beyond the object that fired the event."},{"content":"Routed events are useful when you define control templates, or use pages or layout containers.","pos":[1151,1245]},{"content":"Events as a programming concept","pos":[1250,1281]},{"content":"Generally speaking, event concepts when programming a Windows Runtime app are similar to the event model in most popular programming languages.","pos":[1283,1426]},{"content":"If you know how to work with Microsoft .NET or C++ events already, you have a head start.","pos":[1427,1516]},{"content":"But you don't need to know that much about event model concepts to perform some basic tasks, such as attaching handlers.","pos":[1517,1637]},{"content":"When you use C#, Visual Basic or C++/CX as your programming language, the UI is defined in markup (XAML).","pos":[1639,1744]},{"content":"In XAML markup syntax, some of the principles of connecting events between markup elements and runtime code entities are similar to other Web technologies, such as ASP.NET, or HTML5.","pos":[1745,1927]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The code that provides the runtime logic for a XAML-defined UI is often referred to as <bpt id=\"p2\">*</bpt>code-behind<ept id=\"p2\">*</ept> or the code-behind file.","pos":[1929,2064],"source":"**Note**  The code that provides the runtime logic for a XAML-defined UI is often referred to as *code-behind* or the code-behind file."},{"content":"In the Microsoft Visual Studio solution views, this relationship is shown graphically, with the code-behind file being a dependent and nested file versus the XAML page it refers to.","pos":[2065,2246]},{"content":"Button.Click: an introduction to events and XAML","pos":[2251,2299]},{"content":"One of the most common programming tasks for a Windows Runtime app is to capture user input to the UI.","pos":[2301,2403]},{"content":"For example, your UI might have a button that the user must click to submit info or to change state.","pos":[2404,2504]},{"content":"You define the UI for your Windows Runtime app by generating XAML.","pos":[2506,2572]},{"content":"This XAML is usually the output from a design surface in Visual Studio.","pos":[2573,2644]},{"content":"You can also write the XAML in a plain-text editor or a third-party XAML editor.","pos":[2645,2725]},{"content":"While generating that XAML, you can wire event handlers for individual UI elements at the same time that you define all the other XAML attributes that establish property values of that UI element.","pos":[2726,2922]},{"content":"To wire the events in XAML, you specify the string-form name of the handler method that you've already defined or will define later in your code-behind.","pos":[2924,3076]},{"content":"For example, this XAML defines a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> object with other properties (<bpt id=\"p3\">[</bpt>x:Name attribute<ept id=\"p3\">](x-name-attribute.md)</ept>, <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Content<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br209366)</ept>) assigned as attributes, and wires a handler for the button's <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>Click<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event by referencing a method named <ph id=\"ph1\">`showUpdatesButton_Click`</ph>:","pos":[3077,3518],"source":" For example, this XAML defines a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) object with other properties ([x:Name attribute](x-name-attribute.md), [**Content**](https://msdn.microsoft.com/library/windows/apps/br209366)) assigned as attributes, and wires a handler for the button's [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event by referencing a method named `showUpdatesButton_Click`:"},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>Event wiring<ept id=\"p2\">*</ept> is a programming term.","pos":[3642,3688],"source":"**Tip**  *Event wiring* is a programming term."},{"content":"It refers to the process or code whereby you indicate that occurrences of an event should invoke a named handler method.","pos":[3689,3809]},{"content":"In most procedural code models, event wiring is implicit or explicit \"AddHandler\" code that names both the event and method, and usually involves a target object instance.","pos":[3810,3981]},{"content":"In XAML, the \"AddHandler\" is implicit, and event wiring consists entirely of naming the event as the attribute name of an object element, and naming the handler as that attribute's value.","pos":[3982,4169]},{"content":"You write the actual handler in the programming language that you're using for all your app's code and code-behind.","pos":[4171,4286]},{"content":"With the attribute <ph id=\"ph1\">`Click=\"showUpdatesButton_Click\"`</ph>, you have created a contract that when the XAML is markup-compiled and parsed, both the XAML markup compile step in your IDE's build action and the eventual XAML parse when the app loads can find a method named <ph id=\"ph2\">`showUpdatesButton_Click`</ph> as part of the app's code.","pos":[4287,4603],"source":" With the attribute `Click=\"showUpdatesButton_Click\"`, you have created a contract that when the XAML is markup-compiled and parsed, both the XAML markup compile step in your IDE's build action and the eventual XAML parse when the app loads can find a method named `showUpdatesButton_Click` as part of the app's code."},{"content":"must be a method that implements a compatible method signature (based on a delegate) for any handler of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event.","pos":[4630,4814],"source":" must be a method that implements a compatible method signature (based on a delegate) for any handler of the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event."},{"content":"For example, this code defines the <ph id=\"ph1\">`showUpdatesButton_Click`</ph> handler.","pos":[4815,4884],"source":" For example, this code defines the `showUpdatesButton_Click` handler."},{"content":"In this example, the <ph id=\"ph1\">`showUpdatesButton_Click`</ph> method is based on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RoutedEventHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208812)</ept> delegate.","pos":[5464,5626],"source":"In this example, the `showUpdatesButton_Click` method is based on the [**RoutedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br208812) delegate."},{"content":"You'd know that this is the delegate to use because you'll see that delegate named in the syntax for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> method on the MSDN reference page.","pos":[5627,5836],"source":" You'd know that this is the delegate to use because you'll see that delegate named in the syntax for the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) method on the MSDN reference page."},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  Visual Studio provides a convenient way to name the event handler and define the handler method while you're editing XAML.","pos":[5838,5969],"source":"**Tip**  Visual Studio provides a convenient way to name the event handler and define the handler method while you're editing XAML."},{"content":"When you provide the attribute name of the event in the XAML text editor, wait a moment until a Microsoft IntelliSense list displays.","pos":[5970,6103]},{"content":"If you click <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>New Event Handler<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> from the list, Microsoft Visual Studio will suggest a method name based on the element's <bpt id=\"p2\">**</bpt>x:Name<ept id=\"p2\">**</ept> (or type name), the event name, and a numeric suffix.","pos":[6104,6300],"source":" If you click **&lt;New Event Handler&gt;** from the list, Microsoft Visual Studio will suggest a method name based on the element's **x:Name** (or type name), the event name, and a numeric suffix."},{"content":"You can then right-click the selected event handler name and click <bpt id=\"p1\">**</bpt>Navigate to Event Handler<ept id=\"p1\">**</ept>.","pos":[6301,6398],"source":" You can then right-click the selected event handler name and click **Navigate to Event Handler**."},{"content":"This will navigate directly to the newly inserted event handler definition, as seen in the code editor view of your code-behind file for the XAML page.","pos":[6399,6550]},{"content":"The event handler already has the correct signature, including the <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> parameter and the event data class that the event uses.","pos":[6551,6682],"source":" The event handler already has the correct signature, including the *sender* parameter and the event data class that the event uses."},{"content":"Also, if a handler method with the correct signature already exists in your code-behind, that method's name appears in the auto-complete drop-down along with the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>New Event Handler<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> option.","pos":[6683,6882],"source":" Also, if a handler method with the correct signature already exists in your code-behind, that method's name appears in the auto-complete drop-down along with the **&lt;New Event Handler&gt;** option."},{"content":"You can also press the Tab key as a shortcut instead of clicking the IntelliSense list items.","pos":[6883,6976]},{"content":"Defining an event handler","pos":[6981,7006]},{"content":"For objects that are UI elements and declared in XAML, event handler code is defined in the partial class that serves as the code-behind for a XAML page.","pos":[7008,7161]},{"content":"Event handlers are methods that you write as part of the partial class that is associated with your XAML.","pos":[7162,7267]},{"content":"These event handlers are based on the delegates that a particular event uses.","pos":[7268,7345]},{"content":"Your event handler methods can be public or private.","pos":[7346,7398]},{"content":"Private access works because the handler and instance created by the XAML are ultimately joined by code generation.","pos":[7399,7514]},{"content":"In general, we recommend that you make your event handler methods private in the class.","pos":[7515,7602]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Event handlers for C++ don't get defined in partial classes, they are declared in the header as a private class member.","pos":[7604,7733],"source":"**Note**  Event handlers for C++ don't get defined in partial classes, they are declared in the header as a private class member."},{"content":"The build actions for a C++ project take care of generating code that supports the XAML type system and code-behind model for C++.","pos":[7734,7864]},{"pos":[7870,7907],"content":"The <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> parameter and event data","source":"The *sender* parameter and event data"},{"content":"The handler you write for the event can access two values that are available as input for each case where your handler is invoked.","pos":[7909,8039]},{"content":"The first such value is <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept>, which is a reference to the object where the handler is attached.","pos":[8040,8139],"source":" The first such value is *sender*, which is a reference to the object where the handler is attached."},{"content":"The <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> parameter is typed as the base <bpt id=\"p2\">**</bpt>Object<ept id=\"p2\">**</ept> type.","pos":[8140,8200],"source":" The *sender* parameter is typed as the base **Object** type."},{"content":"A common technique is to cast <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> to a more precise type.","pos":[8201,8263],"source":" A common technique is to cast *sender* to a more precise type."},{"content":"This technique is useful if you expect to check or change state on the <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> object itself.","pos":[8264,8358],"source":" This technique is useful if you expect to check or change state on the *sender* object itself."},{"content":"Based on your own app design, you usually know a type that is safe to cast <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> to, based on where the handler is attached or other design specifics.","pos":[8359,8512],"source":" Based on your own app design, you usually know a type that is safe to cast *sender* to, based on where the handler is attached or other design specifics."},{"content":"The second value is event data, which generally appears in syntax definitions as the <bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept> parameter.","pos":[8514,8613],"source":"The second value is event data, which generally appears in syntax definitions as the *e* parameter."},{"content":"You can discover which properties for event data are available by looking at the <bpt id=\"p1\">*</bpt>e<ept id=\"p1\">*</ept> parameter of the delegate that is assigned for the specific event you are handling, and then using IntelliSense or Object Browser in Visual Studio.","pos":[8614,8846],"source":" You can discover which properties for event data are available by looking at the *e* parameter of the delegate that is assigned for the specific event you are handling, and then using IntelliSense or Object Browser in Visual Studio."},{"content":"Or you can use the Windows Runtime reference documentation.","pos":[8847,8906]},{"content":"For some events, the event data's specific property values are as important as knowing that the event occurred.","pos":[8908,9019]},{"content":"This is especially true of the input events.","pos":[9020,9064]},{"content":"For pointer events, the position of the pointer when the event occurred might be important.","pos":[9065,9156]},{"content":"For keyboard events, all possible key presses fire a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>KeyDown<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>KeyUp<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event.","pos":[9157,9362],"source":" For keyboard events, all possible key presses fire a [**KeyDown**](https://msdn.microsoft.com/library/windows/apps/br208941) and [**KeyUp**](https://msdn.microsoft.com/library/windows/apps/br208942) event."},{"content":"To determine which key a user pressed, you must access the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>KeyRoutedEventArgs<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh943072)</ept> that is available to the event handler.","pos":[9363,9544],"source":" To determine which key a user pressed, you must access the [**KeyRoutedEventArgs**](https://msdn.microsoft.com/library/windows/apps/hh943072) that is available to the event handler."},{"content":"For more info about handling input events, see <bpt id=\"p1\">[</bpt>Keyboard interactions<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt185607)</ept> and <bpt id=\"p2\">[</bpt>Handle pointer input<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/mt404610)</ept>.","pos":[9545,9759],"source":" For more info about handling input events, see [Keyboard interactions](https://msdn.microsoft.com/library/windows/apps/mt185607) and [Handle pointer input](https://msdn.microsoft.com/library/windows/apps/mt404610)."},{"content":"Input events and input scenarios often have additional considerations that are not covered in this topic, such as pointer capture for pointer events, and modifier keys and platform key codes for keyboard events.","pos":[9760,9971]},{"pos":[9977,10022],"content":"Event handlers that use the <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> pattern","source":"Event handlers that use the **async** pattern"},{"content":"In some cases you'll want to use APIs that use an <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> pattern within an event handler.","pos":[10024,10116],"source":"In some cases you'll want to use APIs that use an **async** pattern within an event handler."},{"content":"For example, you might use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> in an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>AppBar<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh701927)</ept> to display a file picker and interact with it.","pos":[10117,10340],"source":" For example, you might use a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) in an [**AppBar**](https://msdn.microsoft.com/library/windows/apps/hh701927) to display a file picker and interact with it."},{"content":"However, many of the file picker APIs are asynchronous.","pos":[10341,10396]},{"content":"They have to be called within an <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept>/awaitable scope, and the compiler will enforce this.","pos":[10397,10492],"source":" They have to be called within an **async**/awaitable scope, and the compiler will enforce this."},{"content":"So what you can do is add the <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> keyword to your event handler such that the handler is now <bpt id=\"p2\">**</bpt>async<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>void<ept id=\"p3\">**</ept>.","pos":[10493,10611],"source":" So what you can do is add the **async** keyword to your event handler such that the handler is now **async** **void**."},{"content":"Now your event handler is permitted to make <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept>/awaitable calls.","pos":[10612,10682],"source":" Now your event handler is permitted to make **async**/awaitable calls."},{"content":"For an example of user-interaction event handling using the <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> pattern, see <bpt id=\"p2\">[</bpt>File access and pickers<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/jj655411)</ept> (part of the<bpt id=\"p3\">[</bpt>Create your first Windows Runtime app using C# or Visual Basic<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh974581)</ept> series).","pos":[10684,10994],"source":"For an example of user-interaction event handling using the **async** pattern, see [File access and pickers](https://msdn.microsoft.com/library/windows/apps/jj655411) (part of the[Create your first Windows Runtime app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/hh974581) series)."},{"content":"See also [Call asynchronous APIs in C).","pos":[10995,11034]},{"content":"Adding event handlers in code","pos":[11039,11068]},{"content":"XAML is not the only way to assign an event handler to an object.","pos":[11070,11135]},{"content":"To add event handlers to any given object in code, including to objects that are not usable in XAML, you can use the language-specific syntax for adding event handlers.","pos":[11136,11304]},{"content":"In C#, the syntax is to use the <ph id=\"ph1\">`+=`</ph> operator.","pos":[11306,11352],"source":"In C#, the syntax is to use the `+=` operator."},{"content":"You register the handler by referencing the event handler method name on the right side of the operator.","pos":[11353,11457]},{"content":"If you use code to add event handlers to objects that appear in the run-time UI, a common practice is to add such handlers in response to an object lifetime event or callback, such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Loaded<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208723)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>OnApplyTemplate<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208737)</ept>, so that the event handlers on the relevant object are ready for user-initiated events at run time.","pos":[11459,11896],"source":"If you use code to add event handlers to objects that appear in the run-time UI, a common practice is to add such handlers in response to an object lifetime event or callback, such as [**Loaded**](https://msdn.microsoft.com/library/windows/apps/br208723) or [**OnApplyTemplate**](https://msdn.microsoft.com/library/windows/apps/br208737), so that the event handlers on the relevant object are ready for user-initiated events at run time."},{"content":"This example shows a XAML outline of the page structure and then provides the C# language syntax for adding an event handler to an object.","pos":[11897,12035]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  A more verbose syntax exists.","pos":[12417,12456],"source":"**Note**  A more verbose syntax exists."},{"content":"In 2005, C# added a feature called delegate inference, which enables a compiler to infer the new delegate instance and enables the previous, simpler syntax.","pos":[12457,12613]},{"content":"The verbose syntax is functionally identical to the previous example, but explicitly creates a new delegate instance before registering it, thus not taking advantage of delegate inference.","pos":[12614,12802]},{"content":"This explicit syntax is less common, but you might still see it in some code examples.","pos":[12803,12889]},{"content":"There are two possibilities for Visual Basic syntax.","pos":[13133,13185]},{"content":"One is to parallel the C# syntax and attach handlers directly to instances.","pos":[13186,13261]},{"content":"This requires the <bpt id=\"p1\">**</bpt>AddHandler<ept id=\"p1\">**</ept> keyword and also the <bpt id=\"p2\">**</bpt>AddressOf<ept id=\"p2\">**</ept> operator that dereferences the handler method name.","pos":[13262,13381],"source":" This requires the **AddHandler** keyword and also the **AddressOf** operator that dereferences the handler method name."},{"content":"The other option for Visual Basic syntax is to use the <bpt id=\"p1\">**</bpt>Handles<ept id=\"p1\">**</ept> keyword on event handlers.","pos":[13383,13476],"source":"The other option for Visual Basic syntax is to use the **Handles** keyword on event handlers."},{"content":"This technique is appropriate for cases where handlers are expected to exist on objects at load time and persist throughout the object lifetime.","pos":[13477,13621]},{"content":"Using <bpt id=\"p1\">**</bpt>Handles<ept id=\"p1\">**</ept> on an object that is defined in XAML requires that you provide a <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept><ph id=\"ph1\"> / </ph><bpt id=\"p3\">**</bpt>x:Name<ept id=\"p3\">**</ept>.","pos":[13622,13727],"source":" Using **Handles** on an object that is defined in XAML requires that you provide a **Name** / **x:Name**."},{"content":"This name becomes the instance qualifier that is needed for the <bpt id=\"p1\">*</bpt>Instance.Event<ept id=\"p1\">*</ept> part of the <bpt id=\"p2\">**</bpt>Handles<ept id=\"p2\">**</ept> syntax.","pos":[13728,13840],"source":" This name becomes the instance qualifier that is needed for the *Instance.Event* part of the **Handles** syntax."},{"content":"In this case you don't need an object lifetime-based event handler to initiate attaching the other event handlers; the <bpt id=\"p1\">**</bpt>Handles<ept id=\"p1\">**</ept> connections are created when you compile your XAML page.","pos":[13841,14028],"source":" In this case you don't need an object lifetime-based event handler to initiate attaching the other event handlers; the **Handles** connections are created when you compile your XAML page."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Visual Studio and its XAML design surface generally promote the instance-handling technique instead of the <bpt id=\"p2\">**</bpt>Handles<ept id=\"p2\">**</ept> keyword.","pos":[14186,14323],"source":"**Note**  Visual Studio and its XAML design surface generally promote the instance-handling technique instead of the **Handles** keyword."},{"content":"This is because establishing the event handler wiring in XAML is part of typical designer-developer workflow, and the <bpt id=\"p1\">**</bpt>Handles<ept id=\"p1\">**</ept> keyword technique is incompatible with wiring the event handlers in XAML.","pos":[14324,14527],"source":" This is because establishing the event handler wiring in XAML is part of typical designer-developer workflow, and the **Handles** keyword technique is incompatible with wiring the event handlers in XAML."},{"pos":[14529,14618],"content":"In C++, you also use the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">+=</ph><ept id=\"p1\">**</ept> syntax, but there are differences from the basic C# form:","source":"In C++, you also use the **+=** syntax, but there are differences from the basic C# form:"},{"pos":[14624,14708],"content":"No delegate inference exists, so you must use <bpt id=\"p1\">**</bpt>ref new<ept id=\"p1\">**</ept> for the delegate instance.","source":"No delegate inference exists, so you must use **ref new** for the delegate instance."},{"content":"The delegate constructor has two parameters, and requires the target object as the first parameter.","pos":[14713,14812]},{"content":"Typically you specify <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept>.","pos":[14813,14844],"source":" Typically you specify **this**."},{"pos":[14849,14984],"content":"The delegate constructor requires the method address as the second parameter, so the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;</ph><ept id=\"p1\">**</ept> reference operator precedes the method name.","source":"The delegate constructor requires the method address as the second parameter, so the **&** reference operator precedes the method name."},{"content":"Removing event handlers in code","pos":[15109,15140]},{"content":"It's not usually necessary to remove event handlers in code, even if you added them in code.","pos":[15142,15234]},{"content":"The object lifetime behavior for most Windows Runtime objects such as pages and controls will destroy the objects when they are disconnected from the main <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209041)</ept> and its visual tree, and any delegate references are destroyed too.","pos":[15235,15528],"source":" The object lifetime behavior for most Windows Runtime objects such as pages and controls will destroy the objects when they are disconnected from the main [**Window**](https://msdn.microsoft.com/library/windows/apps/br209041) and its visual tree, and any delegate references are destroyed too."},{"content":".NET does this through garbage collection and Windows Runtime with C++/CX uses weak references by default.","pos":[15529,15635]},{"content":"There are some rare cases where you do want to remove event handlers explicitly.","pos":[15637,15717]},{"content":"These include:","pos":[15718,15732]},{"content":"Handlers you added for static events, which can't get garbage-collected in a conventional way.","pos":[15738,15832]},{"content":"Examples of static events in the Windows Runtime API are the events of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CompositionTarget<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br228126)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Clipboard<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br205867)</ept> classes.","pos":[15833,16076],"source":" Examples of static events in the Windows Runtime API are the events of the [**CompositionTarget**](https://msdn.microsoft.com/library/windows/apps/br228126) and [**Clipboard**](https://msdn.microsoft.com/library/windows/apps/br205867) classes."},{"content":"Test code where you want the timing of handler removal to be immediate, or code where you what to swap old/new event handlers for an event at run time.","pos":[16081,16232]},{"pos":[16237,16288],"content":"The implementation of a custom <bpt id=\"p1\">**</bpt>remove<ept id=\"p1\">**</ept> accessor.","source":"The implementation of a custom **remove** accessor."},{"content":"Custom static events.","pos":[16293,16314]},{"content":"Handlers for page navigations.","pos":[16319,16349]},{"pos":[16351,16693],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement.Unloaded<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208748)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Page.NavigatedFrom<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227507)</ept> are possible event triggers that have appropriate positions in state management and object lifetime such that you can use them for removing handlers for other events.","source":"[**FrameworkElement.Unloaded**](https://msdn.microsoft.com/library/windows/apps/br208748) or [**Page.NavigatedFrom**](https://msdn.microsoft.com/library/windows/apps/br227507) are possible event triggers that have appropriate positions in state management and object lifetime such that you can use them for removing handlers for other events."},{"pos":[16695,16831],"content":"For example, you can remove an event handler named <bpt id=\"p1\">**</bpt>textBlock1\\_PointerEntered<ept id=\"p1\">**</ept> from the target object <bpt id=\"p2\">**</bpt>textBlock1<ept id=\"p2\">**</ept> using this code.","source":"For example, you can remove an event handler named **textBlock1\\_PointerEntered** from the target object **textBlock1** using this code."},{"content":"You can also remove handlers for cases where the event was added through a XAML attribute, which means that the handler was added in generated code.","pos":[17027,17175]},{"content":"This is easier to do if you provided a <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> value for the element where the handler was attached, because that provides an object reference for code later; however, you could also walk the object tree in order to find the necessary object reference in cases where the object has no <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept>.","pos":[17176,17471],"source":" This is easier to do if you provided a **Name** value for the element where the handler was attached, because that provides an object reference for code later; however, you could also walk the object tree in order to find the necessary object reference in cases where the object has no **Name**."},{"content":"If you need to remove an event handler in C++/CX, you'll need a registration token, which you should've received from the return value of the <ph id=\"ph1\">`+=`</ph> event handler registration.","pos":[17473,17647],"source":"If you need to remove an event handler in C++/CX, you'll need a registration token, which you should've received from the return value of the `+=` event handler registration."},{"content":"That's because the value you use for the right side of the <ph id=\"ph1\">`-=`</ph> deregistration in the C++/CX syntax is the token, not the method name.","pos":[17648,17782],"source":" That's because the value you use for the right side of the `-=` deregistration in the C++/CX syntax is the token, not the method name."},{"content":"For C++/CX, you can't remove handlers that were added as a XAML attribute because the C++/CX generated code doesn't save a token.","pos":[17783,17912]},{"content":"Routed events","pos":[17917,17930]},{"content":"The Windows Runtime with C#, Microsoft Visual Basic or C++/CX supports the concept of a routed event for a set of events that are present on most UI elements.","pos":[17932,18090]},{"content":"These events are for input and user interaction scenarios, and they are implemented on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>UIElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> base class.","pos":[18091,18267],"source":" These events are for input and user interaction scenarios, and they are implemented on the [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) base class."},{"content":"Here's a list of input events that are routed events:","pos":[18268,18321]},{"content":"DoubleTapped","pos":[18330,18342]},{"content":"DragEnter","pos":[18411,18420]},{"content":"DragLeave","pos":[18489,18498]},{"content":"DragOver","pos":[18567,18575]},{"content":"Drop","pos":[18644,18648]},{"content":"Holding","pos":[18717,18724]},{"content":"KeyDown","pos":[18793,18800]},{"content":"KeyUp","pos":[18869,18874]},{"content":"ManipulationCompleted","pos":[18943,18964]},{"content":"ManipulationDelta","pos":[19033,19050]},{"content":"ManipulationInertiaStarting","pos":[19119,19146]},{"content":"ManipulationStarted","pos":[19215,19234]},{"content":"ManipulationStarting","pos":[19303,19323]},{"content":"PointerCanceled","pos":[19392,19407]},{"content":"PointerCaptureLost","pos":[19476,19494]},{"content":"PointerEntered","pos":[19563,19577]},{"content":"PointerExited","pos":[19646,19659]},{"content":"PointerMoved","pos":[19728,19740]},{"content":"PointerPressed","pos":[19809,19823]},{"content":"PointerReleased","pos":[19892,19907]},{"content":"PointerWheelChanged","pos":[19976,19995]},{"content":"RightTapped","pos":[20064,20075]},{"content":"Tapped","pos":[20144,20150]},{"content":"GotFocus","pos":[20219,20227]},{"content":"LostFocus","pos":[20296,20305]},{"content":"A routed event is an event that is potentially passed on (<bpt id=\"p1\">*</bpt>routed<ept id=\"p1\">*</ept>) from a child object to each of its successive parent objects in an object tree.","pos":[20368,20515],"source":"A routed event is an event that is potentially passed on (*routed*) from a child object to each of its successive parent objects in an object tree."},{"content":"The XAML structure of your UI approximates this tree, with the root of that tree being the root element in XAML.","pos":[20516,20628]},{"content":"The true object tree might vary somewhat from the XAML element nesting, because the object tree doesn't include XAML language features such as property element tags.","pos":[20629,20794]},{"content":"You can conceive of the routed event as <bpt id=\"p1\">*</bpt>bubbling<ept id=\"p1\">*</ept> from any XAML object element child element that fires the event, toward the parent object element that contains it.","pos":[20795,20961],"source":" You can conceive of the routed event as *bubbling* from any XAML object element child element that fires the event, toward the parent object element that contains it."},{"content":"The event and its event data can be handled on multiple objects along the event route.","pos":[20962,21048]},{"content":"If no element has handlers, the route potentially keeps going until the root element is reached.","pos":[21049,21145]},{"pos":[21147,21279],"content":"If you know Web technologies such as Dynamic HTML (DHTML) or HTML5, you might already be familiar with the <bpt id=\"p1\">*</bpt>bubbling<ept id=\"p1\">*</ept> event concept.","source":"If you know Web technologies such as Dynamic HTML (DHTML) or HTML5, you might already be familiar with the *bubbling* event concept."},{"content":"When a routed event bubbles through its event route, any attached event handlers all access a shared instance of event data.","pos":[21281,21405]},{"content":"Therefore, if any of the event data is writeable by a handler, any changes made to event data will be passed on to the next handler, and may no longer represent the original event data from the event.","pos":[21406,21606]},{"content":"When an event has a routed event behavior, the reference documentation will include remarks or other notations about the routed behavior.","pos":[21607,21744]},{"pos":[21750,21804],"content":"The <bpt id=\"p1\">**</bpt>OriginalSource<ept id=\"p1\">**</ept> property of <bpt id=\"p2\">**</bpt>RoutedEventArgs<ept id=\"p2\">**</ept>","source":"The **OriginalSource** property of **RoutedEventArgs**"},{"content":"When an event bubbles up an event route, <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> is no longer the same object as the event-raising object.","pos":[21806,21913],"source":"When an event bubbles up an event route, *sender* is no longer the same object as the event-raising object."},{"content":"Instead, <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> is the object where the handler that is being invoked is attached.","pos":[21914,21998],"source":" Instead, *sender* is the object where the handler that is being invoked is attached."},{"content":"In some cases, <bpt id=\"p1\">*</bpt>sender<ept id=\"p1\">*</ept> is not interesting, and you are instead interested in info such as which of the possible child objects the pointer is over when a pointer event fired, or which object in a larger UI held focus when a user pressed a keyboard key.","pos":[22000,22252],"source":"In some cases, *sender* is not interesting, and you are instead interested in info such as which of the possible child objects the pointer is over when a pointer event fired, or which object in a larger UI held focus when a user pressed a keyboard key."},{"content":"For these cases, you can use the value of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>OriginalSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept> property.","pos":[22253,22387],"source":" For these cases, you can use the value of the [**OriginalSource**](https://msdn.microsoft.com/library/windows/apps/br208810) property."},{"content":"At all points on the route, <bpt id=\"p1\">**</bpt>OriginalSource<ept id=\"p1\">**</ept> reports the original object that fired the event, instead of the object where the handler is attached.","pos":[22388,22537],"source":" At all points on the route, **OriginalSource** reports the original object that fired the event, instead of the object where the handler is attached."},{"content":"However, for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>UIElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> input events, that original object is often an object that is not immediately visible in the page-level UI definition XAML.","pos":[22538,22748],"source":" However, for [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) input events, that original object is often an object that is not immediately visible in the page-level UI definition XAML."},{"content":"Instead, that original source object might be a templated part of a control.","pos":[22749,22825]},{"content":"For example, if the user hovers the pointer over the very edge of a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept>, for most pointer events the <bpt id=\"p3\">**</bpt>OriginalSource<ept id=\"p3\">**</ept> is a <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Border<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> template part in the <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>Template<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br209465)</ept>, not the <bpt id=\"p8\">**</bpt>Button<ept id=\"p8\">**</ept> itself.","pos":[22826,23210],"source":" For example, if the user hovers the pointer over the very edge of a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265), for most pointer events the **OriginalSource** is a [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250) template part in the [**Template**](https://msdn.microsoft.com/library/windows/apps/br209465), not the **Button** itself."},{"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept>  Input event bubbling is especially useful if you are creating a templated control.","pos":[23212,23303],"source":"**Tip**  Input event bubbling is especially useful if you are creating a templated control."},{"content":"Any control that has a template can have a new template applied by its consumer.","pos":[23304,23384]},{"content":"The consumer that's trying to recreate a working template might unintentionally eliminate some event handling declared in the default template.","pos":[23385,23528]},{"content":"You can still provide control-level event handling by attaching handlers as part of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>OnApplyTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208737)</ept> override in the class definition.","pos":[23529,23730],"source":" You can still provide control-level event handling by attaching handlers as part of the [**OnApplyTemplate**](https://msdn.microsoft.com/library/windows/apps/br208737) override in the class definition."},{"content":"Then you can catch the input events that bubble up to the control's root on instantiation.","pos":[23731,23821]},{"pos":[23827,23851],"content":"The <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> property","source":"The **Handled** property"},{"content":"Several event data classes for specific routed events contain a property named <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept>.","pos":[23853,23944],"source":"Several event data classes for specific routed events contain a property named **Handled**."},{"content":"For examples, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PointerRoutedEventArgs.Handled<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh943079)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>KeyRoutedEventArgs.Handled<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>DragEventArgs.Handled<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br242375)</ept>.","pos":[23945,24237],"source":" For examples, see [**PointerRoutedEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/hh943079), [**KeyRoutedEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/hh943073), [**DragEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/br242375)."},{"content":"In all cases <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> is a settable Boolean property.","pos":[24238,24294],"source":" In all cases **Handled** is a settable Boolean property."},{"content":"Setting the <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> property to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> influences the event system behavior.","pos":[24296,24378],"source":"Setting the **Handled** property to **true** influences the event system behavior."},{"content":"When <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, the routing stops for most event handlers; the event doesn't continue along the route to notify other attached handlers of that particular event case.","pos":[24379,24559],"source":" When **Handled** is **true**, the routing stops for most event handlers; the event doesn't continue along the route to notify other attached handlers of that particular event case."},{"content":"What \"handled\" means in the context of the event and how your app responds to it is up to you.","pos":[24560,24654]},{"content":"Basically, <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> is a simple protocol that enables app code to state that an occurrence of an event doesn't need to bubble to any containers, your app logic has taken care of what needs done.","pos":[24655,24852],"source":" Basically, **Handled** is a simple protocol that enables app code to state that an occurrence of an event doesn't need to bubble to any containers, your app logic has taken care of what needs done."},{"content":"Conversely though, you do have to be careful that you aren't handling events that probably should bubble so that built-in system or control behaviors can act.","pos":[24853,25011]},{"content":"For example, handling low-level events within the parts or items of a selection control can be detrimental.","pos":[25012,25119]},{"content":"The selection control might be looking for input events to know that the selection should change.","pos":[25120,25217]},{"content":"Not all of the routed events can cancel a route in this way, and you can tell that because they won't have a <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> property.","pos":[25219,25349],"source":"Not all of the routed events can cancel a route in this way, and you can tell that because they won't have a **Handled** property."},{"content":"For example, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GotFocus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208927)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>LostFocus<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208943)</ept> do bubble, but they always bubble all the way to the root, and their event data classes don't have a <bpt id=\"p5\">**</bpt>Handled<ept id=\"p5\">**</ept> property that can influence that behavior.","pos":[25350,25669],"source":" For example, [**GotFocus**](https://msdn.microsoft.com/library/windows/apps/br208927) and [**LostFocus**](https://msdn.microsoft.com/library/windows/apps/br208943) do bubble, but they always bubble all the way to the root, and their event data classes don't have a **Handled** property that can influence that behavior."},{"content":"Input event handlers in controls","pos":[25675,25707]},{"content":"Specific Windows Runtime controls sometimes use the <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> concept for input events internally.","pos":[25709,25809],"source":"Specific Windows Runtime controls sometimes use the **Handled** concept for input events internally."},{"content":"This can make it seem like an input event never occurs, because your user code can't handle it.","pos":[25810,25905]},{"content":"For example, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> class includes logic that deliberately handles the general input event <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PointerPressed<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208971)</ept>.","pos":[25906,26144],"source":" For example, the [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) class includes logic that deliberately handles the general input event [**PointerPressed**](https://msdn.microsoft.com/library/windows/apps/br208971)."},{"content":"It does so because buttons fire a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event that is initiated by pointer-pressed input, as well as by other input modes such as handling keys like the Enter key that can invoke the button when it's focused.","pos":[26145,26417],"source":" It does so because buttons fire a [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event that is initiated by pointer-pressed input, as well as by other input modes such as handling keys like the Enter key that can invoke the button when it's focused."},{"content":"For purposes of the class design of <bpt id=\"p1\">**</bpt>Button<ept id=\"p1\">**</ept>, the raw input event is conceptually handled, and class consumers such as your user code can instead interact with the control-relevant <bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept> event.","pos":[26418,26617],"source":" For purposes of the class design of **Button**, the raw input event is conceptually handled, and class consumers such as your user code can instead interact with the control-relevant **Click** event."},{"content":"Topics for specific control classes in the Windows Runtime API reference often note the event handling behavior that the class implements.","pos":[26618,26756]},{"content":"In some cases, you can change the behavior by overriding <bpt id=\"p1\">**</bpt>On<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>Event<ept id=\"p2\">*</ept> methods.","pos":[26757,26836],"source":" In some cases, you can change the behavior by overriding **On***Event* methods."},{"content":"For example, you can change how your <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept> derived class reacts to key input by overriding <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Control.OnKeyDown<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh967982)</ept>.","pos":[26837,27076],"source":" For example, you can change how your [**TextBox**](https://msdn.microsoft.com/library/windows/apps/br209683) derived class reacts to key input by overriding [**Control.OnKeyDown**](https://msdn.microsoft.com/library/windows/apps/hh967982)."},{"content":"Registering handlers for already-handled routed events","pos":[27082,27136]},{"content":"Earlier we said that setting <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> prevents most handlers from being called.","pos":[27138,27232],"source":"Earlier we said that setting **Handled** to **true** prevents most handlers from being called."},{"content":"But the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AddHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh702399)</ept> method provides a technique where you can attach a handler that is always invoked for the route, even if some other handler earlier in the route has set <bpt id=\"p3\">**</bpt>Handled<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>true<ept id=\"p4\">**</ept> in the shared event data.","pos":[27233,27518],"source":" But the [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) method provides a technique where you can attach a handler that is always invoked for the route, even if some other handler earlier in the route has set **Handled** to **true** in the shared event data."},{"content":"This technique is useful if a control you are using has handled the event in its internal compositing or for control-specific logic.","pos":[27519,27651]},{"content":"but you still want to respond to it from a control instance, or your app UI.","pos":[27652,27728]},{"content":"But use this technique with caution, because it can contradict the purpose of <bpt id=\"p1\">**</bpt>Handled<ept id=\"p1\">**</ept> and possibly break a control's intended interactions.","pos":[27729,27872],"source":" But use this technique with caution, because it can contradict the purpose of **Handled** and possibly break a control's intended interactions."},{"content":"Only the routed events that have a corresponding routed event identifier can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AddHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh702399)</ept> event handling technique, because the identifier is a required input of the <bpt id=\"p3\">**</bpt>AddHandler<ept id=\"p3\">**</ept> method.","pos":[27874,28132],"source":"Only the routed events that have a corresponding routed event identifier can use the [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) event handling technique, because the identifier is a required input of the **AddHandler** method."},{"content":"See the reference documentation for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AddHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh702399)</ept> for a list of events that have routed event identifiers available.","pos":[28133,28310],"source":" See the reference documentation for [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) for a list of events that have routed event identifiers available."},{"content":"For the most part this is the same list of routed events we showed you earlier.","pos":[28311,28390]},{"content":"The exception is that the last two in the list: <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GotFocus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208927)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>LostFocus<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208943)</ept> don't have a routed event identifier, so you can't use <bpt id=\"p5\">**</bpt>AddHandler<ept id=\"p5\">**</ept> for those.","pos":[28391,28670],"source":" The exception is that the last two in the list: [**GotFocus**](https://msdn.microsoft.com/library/windows/apps/br208927) and [**LostFocus**](https://msdn.microsoft.com/library/windows/apps/br208943) don't have a routed event identifier, so you can't use **AddHandler** for those."},{"content":"Routed events outside the visual tree","pos":[28675,28712]},{"content":"Certain objects participate in a relationship with the primary visual tree that is conceptually like having an overlay over the main visuals.","pos":[28714,28855]},{"content":"These objects are not part of the usual parent-child relationships that connect all tree elements to the visual root.","pos":[28856,28973]},{"content":"This is the case for any displayed <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Popup<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227842)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ToolTip<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227608)</ept>.","pos":[28974,29154],"source":" This is the case for any displayed [**Popup**](https://msdn.microsoft.com/library/windows/apps/br227842) or [**ToolTip**](https://msdn.microsoft.com/library/windows/apps/br227608)."},{"content":"If you want to handle routed events from a <bpt id=\"p1\">**</bpt>Popup<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ToolTip<ept id=\"p2\">**</ept>, place the handlers on specific UI elements that are within the <bpt id=\"p3\">**</bpt>Popup<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>ToolTip<ept id=\"p4\">**</ept> and not the <bpt id=\"p5\">**</bpt>Popup<ept id=\"p5\">**</ept> or <bpt id=\"p6\">**</bpt>ToolTip<ept id=\"p6\">**</ept> elements themselves.","pos":[29155,29369],"source":" If you want to handle routed events from a **Popup** or **ToolTip**, place the handlers on specific UI elements that are within the **Popup** or **ToolTip** and not the **Popup** or **ToolTip** elements themselves."},{"content":"Don't rely on routing inside any compositing that is performed for <bpt id=\"p1\">**</bpt>Popup<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ToolTip<ept id=\"p2\">**</ept> content.","pos":[29370,29470],"source":" Don't rely on routing inside any compositing that is performed for **Popup** or **ToolTip** content."},{"content":"This is because event routing for routed events works only along the main visual tree.","pos":[29471,29557]},{"content":"A <bpt id=\"p1\">**</bpt>Popup<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ToolTip<ept id=\"p2\">**</ept> is not considered a parent of subsidiary UI elements and never receives the routed event, even if it is trying to use something like the <bpt id=\"p3\">**</bpt>Popup<ept id=\"p3\">**</ept> default background as the capture area for input events.","pos":[29558,29788],"source":" A **Popup** or **ToolTip** is not considered a parent of subsidiary UI elements and never receives the routed event, even if it is trying to use something like the **Popup** default background as the capture area for input events."},{"content":"Hit testing and input events","pos":[29793,29821]},{"content":"Determining whether and where in UI an element is visible to mouse, touch, and stylus input is called <bpt id=\"p1\">*</bpt>hit testing<ept id=\"p1\">*</ept>.","pos":[29823,29939],"source":"Determining whether and where in UI an element is visible to mouse, touch, and stylus input is called *hit testing*."},{"content":"For touch actions and also for interaction-specific or manipulation events that are consequences of a touch action, an element must be hit-test visible in order to be the event source and fire the event that is associated with the action.","pos":[29940,30178]},{"content":"Otherwise, the action passes through the element to any underlying elements or parent elements in the visual tree that could interact with that input.","pos":[30179,30329]},{"content":"There are several factors that affect hit testing, but you can determine whether a given element can fire input events by checking its <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IsHitTestVisible<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208933)</ept> property.","pos":[30330,30555],"source":" There are several factors that affect hit testing, but you can determine whether a given element can fire input events by checking its [**IsHitTestVisible**](https://msdn.microsoft.com/library/windows/apps/br208933) property."},{"content":"This property returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> only if the element meets these criteria:","pos":[30556,30628],"source":" This property returns **true** only if the element meets these criteria:"},{"pos":[30634,30813],"content":"The element's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Visibility<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208992)</ept> property value is <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Visible<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209006)</ept>.","source":"The element's [**Visibility**](https://msdn.microsoft.com/library/windows/apps/br208992) property value is [**Visible**](https://msdn.microsoft.com/library/windows/apps/br209006)."},{"content":"The element's <bpt id=\"p1\">**</bpt>Background<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Fill<ept id=\"p2\">**</ept> property value is not <bpt id=\"p3\">**</bpt>null<ept id=\"p3\">**</ept>.","pos":[30818,30890],"source":"The element's **Background** or **Fill** property value is not **null**."},{"content":"A <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Brush<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> value results in transparency and hit test invisibility.","pos":[30891,31028],"source":" A **null** [**Brush**](https://msdn.microsoft.com/library/windows/apps/br228076) value results in transparency and hit test invisibility."},{"content":"(To make an element transparent but also hit testable, use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Transparent<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh748061)</ept> brush instead of <bpt id=\"p3\">**</bpt>null<ept id=\"p3\">**</ept>.)","pos":[31029,31193],"source":" (To make an element transparent but also hit testable, use a [**Transparent**](https://msdn.microsoft.com/library/windows/apps/hh748061) brush instead of **null**.)"},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  <bpt id=\"p2\">**</bpt>Background<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Fill<ept id=\"p3\">**</ept> aren't defined by <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>UIElement<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept>, and are instead defined by different derived classes such as <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>Control<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br209390)</ept> and <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>Shape<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/library/windows/apps/br243377)</ept>.","pos":[31195,31533],"source":"**Note**  **Background** and **Fill** aren't defined by [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911), and are instead defined by different derived classes such as [**Control**](https://msdn.microsoft.com/library/windows/apps/br209390) and [**Shape**](https://msdn.microsoft.com/library/windows/apps/br243377)."},{"content":"But the implications of brushes you use for foreground and background properties are the same for hit testing and input events, no matter which subclass implements the properties.","pos":[31534,31713]},{"pos":[31719,31858],"content":"If the element is a control, its <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IsEnabled<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209419)</ept> property value must be <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept>.","source":"If the element is a control, its [**IsEnabled**](https://msdn.microsoft.com/library/windows/apps/br209419) property value must be **true**."},{"content":"The element must have actual dimensions in layout.","pos":[31863,31913]},{"content":"An element where either <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ActualHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208707)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ActualWidth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208709)</ept> are 0 won't fire input events.","pos":[31914,32125],"source":" An element where either [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) and [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709) are 0 won't fire input events."},{"content":"Some controls have special rules for hit testing.","pos":[32127,32176]},{"content":"For example, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> has no <bpt id=\"p3\">**</bpt>Background<ept id=\"p3\">**</ept> property, but is still hit testable within the entire region of its dimensions.","pos":[32177,32365],"source":" For example, [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) has no **Background** property, but is still hit testable within the entire region of its dimensions."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242752)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MediaElement<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242926)</ept> controls are hit testable over their defined rectangle dimensions, regardless of transparent content such as alpha channel in the media source file being displayed.","pos":[32366,32681],"source":"[**Image**](https://msdn.microsoft.com/library/windows/apps/br242752) and [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/br242926) controls are hit testable over their defined rectangle dimensions, regardless of transparent content such as alpha channel in the media source file being displayed."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>WebView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227702)</ept> controls have special hit testing behavior because the input can be handled by the hosted HTML and fire script events.","pos":[32682,32872],"source":"[**WebView**](https://msdn.microsoft.com/library/windows/apps/br227702) controls have special hit testing behavior because the input can be handled by the hosted HTML and fire script events."},{"pos":[32874,33173],"content":"Most <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Panel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227511)</ept> classes and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Border<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209250)</ept> are not hit-testable in their own background, but can still handle the user input events that are routed from the elements that they contain.","source":"Most [**Panel**](https://msdn.microsoft.com/library/windows/apps/br227511) classes and [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250) are not hit-testable in their own background, but can still handle the user input events that are routed from the elements that they contain."},{"content":"You can determine which elements are located at the same position as a user input event, regardless of whether the elements are hit-testable.","pos":[33175,33316]},{"content":"To do this, call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FindElementsInHostCoordinates<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243039)</ept> method.","pos":[33317,33439],"source":" To do this, call the [**FindElementsInHostCoordinates**](https://msdn.microsoft.com/library/windows/apps/br243039) method."},{"content":"As the name implies, this method finds the elements at a location relative to a specified host element.","pos":[33440,33543]},{"content":"However, applied transforms and layout changes can adjust the relative coordinate system of an element, and therefore affect which elements are found at a given location.","pos":[33544,33714]},{"content":"Commanding","pos":[33719,33729]},{"content":"A small number of UI elements support <bpt id=\"p1\">*</bpt>commanding<ept id=\"p1\">*</ept>.","pos":[33731,33782],"source":"A small number of UI elements support *commanding*."},{"content":"Commanding uses input-related routed events in its underlying implementation and enables processing of related UI input (a certain pointer action, a specific accelerator key) by invoking a single command handler.","pos":[33783,33995]},{"content":"If commanding is available for a UI element, consider using its commanding APIs instead of any discrete input events.","pos":[33996,34113]},{"content":"You typically use a <bpt id=\"p1\">**</bpt>Binding<ept id=\"p1\">**</ept> reference into properties of a class that defines the view model for data.","pos":[34114,34220],"source":" You typically use a **Binding** reference into properties of a class that defines the view model for data."},{"content":"The properties hold named commands that implement the language-specific <bpt id=\"p1\">**</bpt>ICommand<ept id=\"p1\">**</ept> commanding pattern.","pos":[34221,34325],"source":" The properties hold named commands that implement the language-specific **ICommand** commanding pattern."},{"content":"For more info, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ButtonBase.Command<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227740)</ept>.","pos":[34326,34428],"source":" For more info, see [**ButtonBase.Command**](https://msdn.microsoft.com/library/windows/apps/br227740)."},{"content":"Custom events in the Windows Runtime","pos":[34433,34469]},{"content":"For purposes of defining custom events, how you add the event and what that means for your class design is highly dependent on which programming language you are using.","pos":[34471,34639]},{"content":"For C# and Visual Basic, you are defining a CLR event.","pos":[34645,34699]},{"content":"You can use the standard .NET event pattern, so long as you aren't using custom accessors (<bpt id=\"p1\">**</bpt>add<ept id=\"p1\">**</ept><ph id=\"ph1\">/</ph><bpt id=\"p2\">**</bpt>remove<ept id=\"p2\">**</ept>).","pos":[34700,34811],"source":" You can use the standard .NET event pattern, so long as you aren't using custom accessors (**add**/**remove**)."},{"content":"Additional tips:","pos":[34812,34828]},{"pos":[34837,35151],"content":"For the event handler it's a good idea to use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>System.EventHandler<ph id=\"ph1\">&lt;TEventArgs&gt;</ph><ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/db0etb8x.aspx)</ept> because it has built-in translation to the Windows Runtime generic event delegate <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>EventHandler<ph id=\"ph2\">&lt;T&gt;</ph><ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br206577)</ept>.","source":"For the event handler it's a good idea to use [**System.EventHandler<TEventArgs>**](https://msdn.microsoft.com/library/windows/apps/xaml/db0etb8x.aspx) because it has built-in translation to the Windows Runtime generic event delegate [**EventHandler<T>**](https://msdn.microsoft.com/library/windows/apps/br206577)."},{"content":"Don't base your event data class on <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>System.EventArgs<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.eventargs.aspx)</ept> because it doesn't translate to the Windows Runtime.","pos":[35160,35347],"source":"Don't base your event data class on [**System.EventArgs**](https://msdn.microsoft.com/library/windows/apps/xaml/system.eventargs.aspx) because it doesn't translate to the Windows Runtime."},{"content":"Use an existing event data class or no base class at all.","pos":[35348,35405]},{"pos":[35414,35587],"content":"If you are using custom accessors, see <bpt id=\"p1\">[</bpt>Custom events and event accessors in Windows Runtime Components<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh972883.aspx)</ept>.","source":"If you are using custom accessors, see [Custom events and event accessors in Windows Runtime Components](https://msdn.microsoft.com/library/windows/apps/xaml/hh972883.aspx)."},{"content":"If you're not clear on what the standard .NET event pattern is, see <bpt id=\"p1\">[</bpt>Defining Events for Custom Silverlight Classes<ept id=\"p1\">](http://msdn.microsoft.com/library/dd833067.aspx)</ept>.","pos":[35596,35762],"source":"If you're not clear on what the standard .NET event pattern is, see [Defining Events for Custom Silverlight Classes](http://msdn.microsoft.com/library/dd833067.aspx)."},{"content":"This is written for Microsoft Silverlight but it's still a good summation of the code and concepts for the standard .NET event pattern.","pos":[35763,35898]},{"pos":[35903,36005],"content":"For C++/CX, see <bpt id=\"p1\">[</bpt>Events (C++/CX)<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh755799.aspx)</ept>.","source":"For C++/CX, see [Events (C++/CX)](https://msdn.microsoft.com/library/windows/apps/xaml/hh755799.aspx)."},{"content":"Use named references even for your own usages of custom events.","pos":[36014,36077]},{"content":"Don't use lambda for custom events, it can create a circular reference.","pos":[36078,36149]},{"content":"You can't declare a custom routed event for Windows Runtime; routed events are limited to the set that comes from the Windows Runtime.","pos":[36151,36285]},{"content":"Defining a custom event is usually done as part of the exercise of defining a custom control.","pos":[36287,36380]},{"content":"It's a common pattern to have a dependency property that has a property-changed callback, and to also define a custom event that's fired by the dependency property callback in some or all cases.","pos":[36381,36575]},{"content":"Consumers of your control don't have access to the property-changed callback you defined, but having a notification event available is the next best thing.","pos":[36576,36731]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Custom dependency properties<ept id=\"p1\">](custom-dependency-properties.md)</ept>.","pos":[36732,36815],"source":" For more info, see [Custom dependency properties](custom-dependency-properties.md)."},{"content":"Related topics","pos":[36820,36834]},{"content":"XAML overview","pos":[36839,36852]},{"content":"Quickstart: Touch input","pos":[36875,36898]},{"content":"Keyboard interactions","pos":[36966,36987]},{"content":".NET events and delegates","pos":[37050,37075]},{"content":"Creating Windows Runtime components","pos":[37129,37164]},{"content":"AddHandler","pos":[37239,37249]}],"content":"---\ndescription: We describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or Visual C++ component extensions (C++/CX) as your programming language, and XAML for your UI definition.\ntitle: Events and routed events overview\nms.assetid: 34C219E8-3EFB-45BC-8BBD-6FD937698832\n---\n\n# Events and routed events overview\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n**Important APIs**\n-   [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911)\n-   [**RoutedEventArgs**](https://msdn.microsoft.com/library/windows/apps/br208809)\n\nWe describe the programming concept of events in a Windows Runtime app, when using C#, Visual Basic or Visual C++ component extensions (C++/CX) as your programming language, and XAML for your UI definition. You can assign handlers for events as part of the declarations for UI elements in XAML, or you can add the handlers in code. Windows Runtime supports *routed events*: certain input events and data events can be handled by objects beyond the object that fired the event. Routed events are useful when you define control templates, or use pages or layout containers.\n\n## Events as a programming concept\n\nGenerally speaking, event concepts when programming a Windows Runtime app are similar to the event model in most popular programming languages. If you know how to work with Microsoft .NET or C++ events already, you have a head start. But you don't need to know that much about event model concepts to perform some basic tasks, such as attaching handlers.\n\nWhen you use C#, Visual Basic or C++/CX as your programming language, the UI is defined in markup (XAML). In XAML markup syntax, some of the principles of connecting events between markup elements and runtime code entities are similar to other Web technologies, such as ASP.NET, or HTML5.\n\n**Note**  The code that provides the runtime logic for a XAML-defined UI is often referred to as *code-behind* or the code-behind file. In the Microsoft Visual Studio solution views, this relationship is shown graphically, with the code-behind file being a dependent and nested file versus the XAML page it refers to.\n\n## Button.Click: an introduction to events and XAML\n\nOne of the most common programming tasks for a Windows Runtime app is to capture user input to the UI. For example, your UI might have a button that the user must click to submit info or to change state.\n\nYou define the UI for your Windows Runtime app by generating XAML. This XAML is usually the output from a design surface in Visual Studio. You can also write the XAML in a plain-text editor or a third-party XAML editor. While generating that XAML, you can wire event handlers for individual UI elements at the same time that you define all the other XAML attributes that establish property values of that UI element.\n\nTo wire the events in XAML, you specify the string-form name of the handler method that you've already defined or will define later in your code-behind. For example, this XAML defines a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) object with other properties ([x:Name attribute](x-name-attribute.md), [**Content**](https://msdn.microsoft.com/library/windows/apps/br209366)) assigned as attributes, and wires a handler for the button's [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event by referencing a method named `showUpdatesButton_Click`:\n\n```XAML\n<Button x:Name=\"showUpdatesButton\"\n  Content=\"{Binding ShowUpdatesText}\"\n  Click=\"showUpdatesButton_Click\"/>\n```\n\n**Tip**  *Event wiring* is a programming term. It refers to the process or code whereby you indicate that occurrences of an event should invoke a named handler method. In most procedural code models, event wiring is implicit or explicit \"AddHandler\" code that names both the event and method, and usually involves a target object instance. In XAML, the \"AddHandler\" is implicit, and event wiring consists entirely of naming the event as the attribute name of an object element, and naming the handler as that attribute's value.\n\nYou write the actual handler in the programming language that you're using for all your app's code and code-behind. With the attribute `Click=\"showUpdatesButton_Click\"`, you have created a contract that when the XAML is markup-compiled and parsed, both the XAML markup compile step in your IDE's build action and the eventual XAML parse when the app loads can find a method named `showUpdatesButton_Click` as part of the app's code. `showUpdatesButton_Click` must be a method that implements a compatible method signature (based on a delegate) for any handler of the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event. For example, this code defines the `showUpdatesButton_Click` handler.\n\n> [!div class=\"tabbedCodeSnippets\"]\n```csharp\nprivate void showUpdatesButton_Click (object sender, RoutedEventArgs e) {\n    Button b = sender as Button;\n    //more logic to do here...\n}\n```\n```vb\nPrivate Sub showUpdatesButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)\n    Dim b As Button = CType(sender, Button)\n    '  more logic to do here...\nEnd Sub\n```\n```cpp\nvoid MyNamespace::BlankPage::showUpdatesButton_Click(Platform::Object^ sender, Windows::UI::Xaml::Input::RoutedEventArgs^ e) {\n    Button^ b = (Button^) sender;\n    //more logic to do here...\n}\n```\n\nIn this example, the `showUpdatesButton_Click` method is based on the [**RoutedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br208812) delegate. You'd know that this is the delegate to use because you'll see that delegate named in the syntax for the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) method on the MSDN reference page.\n\n**Tip**  Visual Studio provides a convenient way to name the event handler and define the handler method while you're editing XAML. When you provide the attribute name of the event in the XAML text editor, wait a moment until a Microsoft IntelliSense list displays. If you click **&lt;New Event Handler&gt;** from the list, Microsoft Visual Studio will suggest a method name based on the element's **x:Name** (or type name), the event name, and a numeric suffix. You can then right-click the selected event handler name and click **Navigate to Event Handler**. This will navigate directly to the newly inserted event handler definition, as seen in the code editor view of your code-behind file for the XAML page. The event handler already has the correct signature, including the *sender* parameter and the event data class that the event uses. Also, if a handler method with the correct signature already exists in your code-behind, that method's name appears in the auto-complete drop-down along with the **&lt;New Event Handler&gt;** option. You can also press the Tab key as a shortcut instead of clicking the IntelliSense list items.\n\n## Defining an event handler\n\nFor objects that are UI elements and declared in XAML, event handler code is defined in the partial class that serves as the code-behind for a XAML page. Event handlers are methods that you write as part of the partial class that is associated with your XAML. These event handlers are based on the delegates that a particular event uses. Your event handler methods can be public or private. Private access works because the handler and instance created by the XAML are ultimately joined by code generation. In general, we recommend that you make your event handler methods private in the class.\n\n**Note**  Event handlers for C++ don't get defined in partial classes, they are declared in the header as a private class member. The build actions for a C++ project take care of generating code that supports the XAML type system and code-behind model for C++.\n\n### The *sender* parameter and event data\n\nThe handler you write for the event can access two values that are available as input for each case where your handler is invoked. The first such value is *sender*, which is a reference to the object where the handler is attached. The *sender* parameter is typed as the base **Object** type. A common technique is to cast *sender* to a more precise type. This technique is useful if you expect to check or change state on the *sender* object itself. Based on your own app design, you usually know a type that is safe to cast *sender* to, based on where the handler is attached or other design specifics.\n\nThe second value is event data, which generally appears in syntax definitions as the *e* parameter. You can discover which properties for event data are available by looking at the *e* parameter of the delegate that is assigned for the specific event you are handling, and then using IntelliSense or Object Browser in Visual Studio. Or you can use the Windows Runtime reference documentation.\n\nFor some events, the event data's specific property values are as important as knowing that the event occurred. This is especially true of the input events. For pointer events, the position of the pointer when the event occurred might be important. For keyboard events, all possible key presses fire a [**KeyDown**](https://msdn.microsoft.com/library/windows/apps/br208941) and [**KeyUp**](https://msdn.microsoft.com/library/windows/apps/br208942) event. To determine which key a user pressed, you must access the [**KeyRoutedEventArgs**](https://msdn.microsoft.com/library/windows/apps/hh943072) that is available to the event handler. For more info about handling input events, see [Keyboard interactions](https://msdn.microsoft.com/library/windows/apps/mt185607) and [Handle pointer input](https://msdn.microsoft.com/library/windows/apps/mt404610). Input events and input scenarios often have additional considerations that are not covered in this topic, such as pointer capture for pointer events, and modifier keys and platform key codes for keyboard events.\n\n### Event handlers that use the **async** pattern\n\nIn some cases you'll want to use APIs that use an **async** pattern within an event handler. For example, you might use a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) in an [**AppBar**](https://msdn.microsoft.com/library/windows/apps/hh701927) to display a file picker and interact with it. However, many of the file picker APIs are asynchronous. They have to be called within an **async**/awaitable scope, and the compiler will enforce this. So what you can do is add the **async** keyword to your event handler such that the handler is now **async** **void**. Now your event handler is permitted to make **async**/awaitable calls.\n\nFor an example of user-interaction event handling using the **async** pattern, see [File access and pickers](https://msdn.microsoft.com/library/windows/apps/jj655411) (part of the[Create your first Windows Runtime app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/hh974581) series). See also [Call asynchronous APIs in C).\n\n## Adding event handlers in code\n\nXAML is not the only way to assign an event handler to an object. To add event handlers to any given object in code, including to objects that are not usable in XAML, you can use the language-specific syntax for adding event handlers.\n\nIn C#, the syntax is to use the `+=` operator. You register the handler by referencing the event handler method name on the right side of the operator.\n\nIf you use code to add event handlers to objects that appear in the run-time UI, a common practice is to add such handlers in response to an object lifetime event or callback, such as [**Loaded**](https://msdn.microsoft.com/library/windows/apps/br208723) or [**OnApplyTemplate**](https://msdn.microsoft.com/library/windows/apps/br208737), so that the event handlers on the relevant object are ready for user-initiated events at run time. This example shows a XAML outline of the page structure and then provides the C# language syntax for adding an event handler to an object.\n\n```xaml\n<Grid x:Name=\"LayoutRoot\" Loaded=\"LayoutRoot_Loaded\">\n  <StackPanel>\n    <TextBlock Name=\"textBlock1\">Put the pointer over this text</TextBlock>\n...\n  </StackPanel>\n</Grid>\n```\n\n```csharp\nvoid LayoutRoot_Loaded(object sender, RoutedEventArgs e)\n{\n    textBlock1.PointerEntered += textBlock1_PointerEntered;\n    textBlock1.PointerExited += textBlock1_PointerExited;\n}\n```\n\n**Note**  A more verbose syntax exists. In 2005, C# added a feature called delegate inference, which enables a compiler to infer the new delegate instance and enables the previous, simpler syntax. The verbose syntax is functionally identical to the previous example, but explicitly creates a new delegate instance before registering it, thus not taking advantage of delegate inference. This explicit syntax is less common, but you might still see it in some code examples.\n\n```csharp\nvoid LayoutRoot_Loaded(object sender, RoutedEventArgs e)\n{\n    textBlock1.PointerEntered += new PointerEventHandler(textBlock1_PointerEntered);\n    textBlock1.PointerExited += new MouseEventHandler(textBlock1_PointerExited);\n}\n```\n\nThere are two possibilities for Visual Basic syntax. One is to parallel the C# syntax and attach handlers directly to instances. This requires the **AddHandler** keyword and also the **AddressOf** operator that dereferences the handler method name.\n\nThe other option for Visual Basic syntax is to use the **Handles** keyword on event handlers. This technique is appropriate for cases where handlers are expected to exist on objects at load time and persist throughout the object lifetime. Using **Handles** on an object that is defined in XAML requires that you provide a **Name** / **x:Name**. This name becomes the instance qualifier that is needed for the *Instance.Event* part of the **Handles** syntax. In this case you don't need an object lifetime-based event handler to initiate attaching the other event handlers; the **Handles** connections are created when you compile your XAML page.\n\n```vb\nPrivate Sub textBlock1_PointerEntered(ByVal sender As Object, ByVal e As PointerRoutedEventArgs) Handles textBlock1.PointerEntered\n' ...\nEnd Sub\n```\n\n**Note**  Visual Studio and its XAML design surface generally promote the instance-handling technique instead of the **Handles** keyword. This is because establishing the event handler wiring in XAML is part of typical designer-developer workflow, and the **Handles** keyword technique is incompatible with wiring the event handlers in XAML.\n\nIn C++, you also use the **+=** syntax, but there are differences from the basic C# form:\n\n-   No delegate inference exists, so you must use **ref new** for the delegate instance.\n-   The delegate constructor has two parameters, and requires the target object as the first parameter. Typically you specify **this**.\n-   The delegate constructor requires the method address as the second parameter, so the **&** reference operator precedes the method name.\n\n```cpp\ntextBlock1->PointerEntered += \nref new PointerEventHandler(this,&amp;BlankPage::textBlock1_PointerExited);\n```\n\n### Removing event handlers in code\n\nIt's not usually necessary to remove event handlers in code, even if you added them in code. The object lifetime behavior for most Windows Runtime objects such as pages and controls will destroy the objects when they are disconnected from the main [**Window**](https://msdn.microsoft.com/library/windows/apps/br209041) and its visual tree, and any delegate references are destroyed too. .NET does this through garbage collection and Windows Runtime with C++/CX uses weak references by default.\n\nThere are some rare cases where you do want to remove event handlers explicitly. These include:\n\n-   Handlers you added for static events, which can't get garbage-collected in a conventional way. Examples of static events in the Windows Runtime API are the events of the [**CompositionTarget**](https://msdn.microsoft.com/library/windows/apps/br228126) and [**Clipboard**](https://msdn.microsoft.com/library/windows/apps/br205867) classes.\n-   Test code where you want the timing of handler removal to be immediate, or code where you what to swap old/new event handlers for an event at run time.\n-   The implementation of a custom **remove** accessor.\n-   Custom static events.\n-   Handlers for page navigations.\n\n[**FrameworkElement.Unloaded**](https://msdn.microsoft.com/library/windows/apps/br208748) or [**Page.NavigatedFrom**](https://msdn.microsoft.com/library/windows/apps/br227507) are possible event triggers that have appropriate positions in state management and object lifetime such that you can use them for removing handlers for other events.\n\nFor example, you can remove an event handler named **textBlock1\\_PointerEntered** from the target object **textBlock1** using this code.\n\n> [!div class=\"tabbedCodeSnippets\"]\n```csharp\ntextBlock1.PointerEntered -= textBlock1_PointerEntered;\n```\n```vb\nRemoveHandler textBlock1.PointerEntered, AddressOf textBlock1_PointerEntered\n```\n\nYou can also remove handlers for cases where the event was added through a XAML attribute, which means that the handler was added in generated code. This is easier to do if you provided a **Name** value for the element where the handler was attached, because that provides an object reference for code later; however, you could also walk the object tree in order to find the necessary object reference in cases where the object has no **Name**.\n\nIf you need to remove an event handler in C++/CX, you'll need a registration token, which you should've received from the return value of the `+=` event handler registration. That's because the value you use for the right side of the `-=` deregistration in the C++/CX syntax is the token, not the method name. For C++/CX, you can't remove handlers that were added as a XAML attribute because the C++/CX generated code doesn't save a token.\n\n## Routed events\n\nThe Windows Runtime with C#, Microsoft Visual Basic or C++/CX supports the concept of a routed event for a set of events that are present on most UI elements. These events are for input and user interaction scenarios, and they are implemented on the [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) base class. Here's a list of input events that are routed events:\n\n-   [**DoubleTapped**](https://msdn.microsoft.com/library/windows/apps/br208922)\n-   [**DragEnter**](https://msdn.microsoft.com/library/windows/apps/br208923)\n-   [**DragLeave**](https://msdn.microsoft.com/library/windows/apps/br208924)\n-   [**DragOver**](https://msdn.microsoft.com/library/windows/apps/br208925)\n-   [**Drop**](https://msdn.microsoft.com/library/windows/apps/br208926)\n-   [**Holding**](https://msdn.microsoft.com/library/windows/apps/br208928)\n-   [**KeyDown**](https://msdn.microsoft.com/library/windows/apps/br208941)\n-   [**KeyUp**](https://msdn.microsoft.com/library/windows/apps/br208942)\n-   [**ManipulationCompleted**](https://msdn.microsoft.com/library/windows/apps/br208945)\n-   [**ManipulationDelta**](https://msdn.microsoft.com/library/windows/apps/br208946)\n-   [**ManipulationInertiaStarting**](https://msdn.microsoft.com/library/windows/apps/br208947)\n-   [**ManipulationStarted**](https://msdn.microsoft.com/library/windows/apps/br208950)\n-   [**ManipulationStarting**](https://msdn.microsoft.com/library/windows/apps/br208951)\n-   [**PointerCanceled**](https://msdn.microsoft.com/library/windows/apps/br208964)\n-   [**PointerCaptureLost**](https://msdn.microsoft.com/library/windows/apps/br208965)\n-   [**PointerEntered**](https://msdn.microsoft.com/library/windows/apps/br208968)\n-   [**PointerExited**](https://msdn.microsoft.com/library/windows/apps/br208969)\n-   [**PointerMoved**](https://msdn.microsoft.com/library/windows/apps/br208970)\n-   [**PointerPressed**](https://msdn.microsoft.com/library/windows/apps/br208971)\n-   [**PointerReleased**](https://msdn.microsoft.com/library/windows/apps/br208972)\n-   [**PointerWheelChanged**](https://msdn.microsoft.com/library/windows/apps/br208973)\n-   [**RightTapped**](https://msdn.microsoft.com/library/windows/apps/br208984)\n-   [**Tapped**](https://msdn.microsoft.com/library/windows/apps/br208985)\n-   [**GotFocus**](https://msdn.microsoft.com/library/windows/apps/br208927)\n-   [**LostFocus**](https://msdn.microsoft.com/library/windows/apps/br208943)\n\nA routed event is an event that is potentially passed on (*routed*) from a child object to each of its successive parent objects in an object tree. The XAML structure of your UI approximates this tree, with the root of that tree being the root element in XAML. The true object tree might vary somewhat from the XAML element nesting, because the object tree doesn't include XAML language features such as property element tags. You can conceive of the routed event as *bubbling* from any XAML object element child element that fires the event, toward the parent object element that contains it. The event and its event data can be handled on multiple objects along the event route. If no element has handlers, the route potentially keeps going until the root element is reached.\n\nIf you know Web technologies such as Dynamic HTML (DHTML) or HTML5, you might already be familiar with the *bubbling* event concept.\n\nWhen a routed event bubbles through its event route, any attached event handlers all access a shared instance of event data. Therefore, if any of the event data is writeable by a handler, any changes made to event data will be passed on to the next handler, and may no longer represent the original event data from the event. When an event has a routed event behavior, the reference documentation will include remarks or other notations about the routed behavior.\n\n### The **OriginalSource** property of **RoutedEventArgs**\n\nWhen an event bubbles up an event route, *sender* is no longer the same object as the event-raising object. Instead, *sender* is the object where the handler that is being invoked is attached.\n\nIn some cases, *sender* is not interesting, and you are instead interested in info such as which of the possible child objects the pointer is over when a pointer event fired, or which object in a larger UI held focus when a user pressed a keyboard key. For these cases, you can use the value of the [**OriginalSource**](https://msdn.microsoft.com/library/windows/apps/br208810) property. At all points on the route, **OriginalSource** reports the original object that fired the event, instead of the object where the handler is attached. However, for [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) input events, that original object is often an object that is not immediately visible in the page-level UI definition XAML. Instead, that original source object might be a templated part of a control. For example, if the user hovers the pointer over the very edge of a [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265), for most pointer events the **OriginalSource** is a [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250) template part in the [**Template**](https://msdn.microsoft.com/library/windows/apps/br209465), not the **Button** itself.\n\n**Tip**  Input event bubbling is especially useful if you are creating a templated control. Any control that has a template can have a new template applied by its consumer. The consumer that's trying to recreate a working template might unintentionally eliminate some event handling declared in the default template. You can still provide control-level event handling by attaching handlers as part of the [**OnApplyTemplate**](https://msdn.microsoft.com/library/windows/apps/br208737) override in the class definition. Then you can catch the input events that bubble up to the control's root on instantiation.\n\n### The **Handled** property\n\nSeveral event data classes for specific routed events contain a property named **Handled**. For examples, see [**PointerRoutedEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/hh943079), [**KeyRoutedEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/hh943073), [**DragEventArgs.Handled**](https://msdn.microsoft.com/library/windows/apps/br242375). In all cases **Handled** is a settable Boolean property.\n\nSetting the **Handled** property to **true** influences the event system behavior. When **Handled** is **true**, the routing stops for most event handlers; the event doesn't continue along the route to notify other attached handlers of that particular event case. What \"handled\" means in the context of the event and how your app responds to it is up to you. Basically, **Handled** is a simple protocol that enables app code to state that an occurrence of an event doesn't need to bubble to any containers, your app logic has taken care of what needs done. Conversely though, you do have to be careful that you aren't handling events that probably should bubble so that built-in system or control behaviors can act. For example, handling low-level events within the parts or items of a selection control can be detrimental. The selection control might be looking for input events to know that the selection should change.\n\nNot all of the routed events can cancel a route in this way, and you can tell that because they won't have a **Handled** property. For example, [**GotFocus**](https://msdn.microsoft.com/library/windows/apps/br208927) and [**LostFocus**](https://msdn.microsoft.com/library/windows/apps/br208943) do bubble, but they always bubble all the way to the root, and their event data classes don't have a **Handled** property that can influence that behavior.\n\n##  Input event handlers in controls\n\nSpecific Windows Runtime controls sometimes use the **Handled** concept for input events internally. This can make it seem like an input event never occurs, because your user code can't handle it. For example, the [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) class includes logic that deliberately handles the general input event [**PointerPressed**](https://msdn.microsoft.com/library/windows/apps/br208971). It does so because buttons fire a [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event that is initiated by pointer-pressed input, as well as by other input modes such as handling keys like the Enter key that can invoke the button when it's focused. For purposes of the class design of **Button**, the raw input event is conceptually handled, and class consumers such as your user code can instead interact with the control-relevant **Click** event. Topics for specific control classes in the Windows Runtime API reference often note the event handling behavior that the class implements. In some cases, you can change the behavior by overriding **On***Event* methods. For example, you can change how your [**TextBox**](https://msdn.microsoft.com/library/windows/apps/br209683) derived class reacts to key input by overriding [**Control.OnKeyDown**](https://msdn.microsoft.com/library/windows/apps/hh967982).\n\n##  Registering handlers for already-handled routed events\n\nEarlier we said that setting **Handled** to **true** prevents most handlers from being called. But the [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) method provides a technique where you can attach a handler that is always invoked for the route, even if some other handler earlier in the route has set **Handled** to **true** in the shared event data. This technique is useful if a control you are using has handled the event in its internal compositing or for control-specific logic. but you still want to respond to it from a control instance, or your app UI. But use this technique with caution, because it can contradict the purpose of **Handled** and possibly break a control's intended interactions.\n\nOnly the routed events that have a corresponding routed event identifier can use the [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) event handling technique, because the identifier is a required input of the **AddHandler** method. See the reference documentation for [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399) for a list of events that have routed event identifiers available. For the most part this is the same list of routed events we showed you earlier. The exception is that the last two in the list: [**GotFocus**](https://msdn.microsoft.com/library/windows/apps/br208927) and [**LostFocus**](https://msdn.microsoft.com/library/windows/apps/br208943) don't have a routed event identifier, so you can't use **AddHandler** for those.\n\n## Routed events outside the visual tree\n\nCertain objects participate in a relationship with the primary visual tree that is conceptually like having an overlay over the main visuals. These objects are not part of the usual parent-child relationships that connect all tree elements to the visual root. This is the case for any displayed [**Popup**](https://msdn.microsoft.com/library/windows/apps/br227842) or [**ToolTip**](https://msdn.microsoft.com/library/windows/apps/br227608). If you want to handle routed events from a **Popup** or **ToolTip**, place the handlers on specific UI elements that are within the **Popup** or **ToolTip** and not the **Popup** or **ToolTip** elements themselves. Don't rely on routing inside any compositing that is performed for **Popup** or **ToolTip** content. This is because event routing for routed events works only along the main visual tree. A **Popup** or **ToolTip** is not considered a parent of subsidiary UI elements and never receives the routed event, even if it is trying to use something like the **Popup** default background as the capture area for input events.\n\n## Hit testing and input events\n\nDetermining whether and where in UI an element is visible to mouse, touch, and stylus input is called *hit testing*. For touch actions and also for interaction-specific or manipulation events that are consequences of a touch action, an element must be hit-test visible in order to be the event source and fire the event that is associated with the action. Otherwise, the action passes through the element to any underlying elements or parent elements in the visual tree that could interact with that input. There are several factors that affect hit testing, but you can determine whether a given element can fire input events by checking its [**IsHitTestVisible**](https://msdn.microsoft.com/library/windows/apps/br208933) property. This property returns **true** only if the element meets these criteria:\n\n-   The element's [**Visibility**](https://msdn.microsoft.com/library/windows/apps/br208992) property value is [**Visible**](https://msdn.microsoft.com/library/windows/apps/br209006).\n-   The element's **Background** or **Fill** property value is not **null**. A **null** [**Brush**](https://msdn.microsoft.com/library/windows/apps/br228076) value results in transparency and hit test invisibility. (To make an element transparent but also hit testable, use a [**Transparent**](https://msdn.microsoft.com/library/windows/apps/hh748061) brush instead of **null**.)\n\n**Note**  **Background** and **Fill** aren't defined by [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911), and are instead defined by different derived classes such as [**Control**](https://msdn.microsoft.com/library/windows/apps/br209390) and [**Shape**](https://msdn.microsoft.com/library/windows/apps/br243377). But the implications of brushes you use for foreground and background properties are the same for hit testing and input events, no matter which subclass implements the properties.\n\n-   If the element is a control, its [**IsEnabled**](https://msdn.microsoft.com/library/windows/apps/br209419) property value must be **true**.\n-   The element must have actual dimensions in layout. An element where either [**ActualHeight**](https://msdn.microsoft.com/library/windows/apps/br208707) and [**ActualWidth**](https://msdn.microsoft.com/library/windows/apps/br208709) are 0 won't fire input events.\n\nSome controls have special rules for hit testing. For example, [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) has no **Background** property, but is still hit testable within the entire region of its dimensions. [**Image**](https://msdn.microsoft.com/library/windows/apps/br242752) and [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/br242926) controls are hit testable over their defined rectangle dimensions, regardless of transparent content such as alpha channel in the media source file being displayed. [**WebView**](https://msdn.microsoft.com/library/windows/apps/br227702) controls have special hit testing behavior because the input can be handled by the hosted HTML and fire script events.\n\nMost [**Panel**](https://msdn.microsoft.com/library/windows/apps/br227511) classes and [**Border**](https://msdn.microsoft.com/library/windows/apps/br209250) are not hit-testable in their own background, but can still handle the user input events that are routed from the elements that they contain.\n\nYou can determine which elements are located at the same position as a user input event, regardless of whether the elements are hit-testable. To do this, call the [**FindElementsInHostCoordinates**](https://msdn.microsoft.com/library/windows/apps/br243039) method. As the name implies, this method finds the elements at a location relative to a specified host element. However, applied transforms and layout changes can adjust the relative coordinate system of an element, and therefore affect which elements are found at a given location.\n\n## Commanding\n\nA small number of UI elements support *commanding*. Commanding uses input-related routed events in its underlying implementation and enables processing of related UI input (a certain pointer action, a specific accelerator key) by invoking a single command handler. If commanding is available for a UI element, consider using its commanding APIs instead of any discrete input events. You typically use a **Binding** reference into properties of a class that defines the view model for data. The properties hold named commands that implement the language-specific **ICommand** commanding pattern. For more info, see [**ButtonBase.Command**](https://msdn.microsoft.com/library/windows/apps/br227740).\n\n## Custom events in the Windows Runtime\n\nFor purposes of defining custom events, how you add the event and what that means for your class design is highly dependent on which programming language you are using.\n\n-   For C# and Visual Basic, you are defining a CLR event. You can use the standard .NET event pattern, so long as you aren't using custom accessors (**add**/**remove**). Additional tips:\n    -   For the event handler it's a good idea to use [**System.EventHandler<TEventArgs>**](https://msdn.microsoft.com/library/windows/apps/xaml/db0etb8x.aspx) because it has built-in translation to the Windows Runtime generic event delegate [**EventHandler<T>**](https://msdn.microsoft.com/library/windows/apps/br206577).\n    -   Don't base your event data class on [**System.EventArgs**](https://msdn.microsoft.com/library/windows/apps/xaml/system.eventargs.aspx) because it doesn't translate to the Windows Runtime. Use an existing event data class or no base class at all.\n    -   If you are using custom accessors, see [Custom events and event accessors in Windows Runtime Components](https://msdn.microsoft.com/library/windows/apps/xaml/hh972883.aspx).\n    -   If you're not clear on what the standard .NET event pattern is, see [Defining Events for Custom Silverlight Classes](http://msdn.microsoft.com/library/dd833067.aspx). This is written for Microsoft Silverlight but it's still a good summation of the code and concepts for the standard .NET event pattern.\n-   For C++/CX, see [Events (C++/CX)](https://msdn.microsoft.com/library/windows/apps/xaml/hh755799.aspx).\n    -   Use named references even for your own usages of custom events. Don't use lambda for custom events, it can create a circular reference.\n\nYou can't declare a custom routed event for Windows Runtime; routed events are limited to the set that comes from the Windows Runtime.\n\nDefining a custom event is usually done as part of the exercise of defining a custom control. It's a common pattern to have a dependency property that has a property-changed callback, and to also define a custom event that's fired by the dependency property callback in some or all cases. Consumers of your control don't have access to the property-changed callback you defined, but having a notification event available is the next best thing. For more info, see [Custom dependency properties](custom-dependency-properties.md).\n\n## Related topics\n\n* [XAML overview](xaml-overview.md)\n* [Quickstart: Touch input](https://msdn.microsoft.com/library/windows/apps/xaml/hh465387)\n* [Keyboard interactions](https://msdn.microsoft.com/library/windows/apps/mt185607)\n* [.NET events and delegates](http://go.microsoft.com/fwlink/p/?linkid=214364)\n* [Creating Windows Runtime components](https://msdn.microsoft.com/library/windows/apps/xaml/hh441572.aspx)\n* [**AddHandler**](https://msdn.microsoft.com/library/windows/apps/hh702399)\n \n\n"}