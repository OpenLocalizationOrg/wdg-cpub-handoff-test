{"nodes":[{"pos":[11,29],"content":"Port the game loop","needQuote":true,"needEscape":true,"nodes":[{"content":"Port the game loop","pos":[0,18]}]},{"pos":[43,233],"content":"Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an IFrameworkView to control a full-screen CoreWindow.","needQuote":true,"needEscape":true,"nodes":[{"content":"Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an IFrameworkView to control a full-screen CoreWindow.","pos":[0,190]}]},{"content":"Port the game loop","pos":[290,308]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[311,349]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[350,445],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Summary","pos":[449,456]},{"content":"Part 1: Initialize Direct3D 11","pos":[465,495]},{"content":"Part 2: Convert the rendering framework","pos":[572,611]},{"content":"Part 3: Port the game loop","pos":[675,701]},{"content":"Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> to control a full-screen <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CoreWindow<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept>.","pos":[704,1022],"source":"Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) to control a full-screen [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225)."},{"content":"Part 3 of the <bpt id=\"p1\">[</bpt>Port a simple Direct3D 9 app to DirectX 11 and UWP<ept id=\"p1\">](walkthrough--simple-port-from-direct3d-9-to-11-1.md)</ept> walkthrough.","pos":[1023,1155],"source":" Part 3 of the [Port a simple Direct3D 9 app to DirectX 11 and UWP](walkthrough--simple-port-from-direct3d-9-to-11-1.md) walkthrough."},{"content":"Create a window","pos":[1160,1175]},{"content":"To set up a desktop window with a Direct3D 9 viewport, we had to implement the traditional windowing framework for desktop apps.","pos":[1178,1306]},{"content":"We had to create an HWND, set the window size, provide a window processing callback, make it visible, and so on.","pos":[1307,1419]},{"content":"The UWP environment has a much simpler system.","pos":[1421,1467]},{"content":"Instead of setting up a traditional window, a Windows Store game using DirectX implements <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept>.","pos":[1468,1637],"source":" Instead of setting up a traditional window, a Windows Store game using DirectX implements [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478)."},{"content":"This interface exists for DirectX apps and games to run directly in a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreWindow<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> inside the app container.","pos":[1638,1808],"source":" This interface exists for DirectX apps and games to run directly in a [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225) inside the app container."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>   Windows supplies managed pointers to resources such as the source application object and the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CoreWindow<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept>.","pos":[1812,1991],"source":"**Note**   Windows supplies managed pointers to resources such as the source application object and the [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225)."},{"content":"See [<bpt id=\"p1\">**</bpt>Handle to Object Operator (^)<ept id=\"p1\">**</ept>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx.","pos":[1992,2093],"source":" See [**Handle to Object Operator (^)**]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx."},{"content":"Your \"main\" class needs to inherit from <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> and implement the five <bpt id=\"p3\">**</bpt>IFrameworkView<ept id=\"p3\">**</ept> methods: <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Initialize<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/hh700495)</ept>, <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>SetWindow<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/hh700509)</ept>, <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>Load<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/library/windows/apps/hh700501)</ept>, <bpt id=\"p10\">[</bpt><bpt id=\"p11\">**</bpt>Run<ept id=\"p11\">**</ept><ept id=\"p10\">](https://msdn.microsoft.com/library/windows/apps/hh700505)</ept>, and <bpt id=\"p12\">[</bpt><bpt id=\"p13\">**</bpt>Uninitialize<ept id=\"p13\">**</ept><ept id=\"p12\">](https://msdn.microsoft.com/library/windows/apps/hh700523)</ept>.","pos":[2098,2639],"source":"Your \"main\" class needs to inherit from [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) and implement the five **IFrameworkView** methods: [**Initialize**](https://msdn.microsoft.com/library/windows/apps/hh700495), [**SetWindow**](https://msdn.microsoft.com/library/windows/apps/hh700509), [**Load**](https://msdn.microsoft.com/library/windows/apps/hh700501), [**Run**](https://msdn.microsoft.com/library/windows/apps/hh700505), and [**Uninitialize**](https://msdn.microsoft.com/library/windows/apps/hh700523)."},{"content":"In addition to creating the <bpt id=\"p1\">**</bpt>IFrameworkView<ept id=\"p1\">**</ept>, which is (essentially) where your game will reside, you need to implement a factory class that creates an instance of your <bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept>.","pos":[2640,2830],"source":" In addition to creating the **IFrameworkView**, which is (essentially) where your game will reside, you need to implement a factory class that creates an instance of your **IFrameworkView**."},{"content":"Your game still has an executable with a method called <bpt id=\"p1\">**</bpt>main()<ept id=\"p1\">**</ept>, but all main can do is use the factory to create the <bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept> instance.","pos":[2831,2979],"source":" Your game still has an executable with a method called **main()**, but all main can do is use the factory to create the **IFrameworkView** instance."},{"content":"Main function","pos":[2981,2994]},{"content":"IFrameworkView factory","pos":[3504,3526]},{"content":"Port the game loop","pos":[3982,4000]},{"content":"Let's look at the game loop from our Direct3D 9 implementation.","pos":[4003,4066]},{"content":"This code exists in the app's main function.","pos":[4067,4111]},{"content":"Each iteration of this loop processes a window message or renders a frame.","pos":[4112,4186]},{"content":"Game loop in Direct3D 9 desktop game","pos":[4188,4224]},{"content":"The game loop is similar - but easier - in the UWP version of our game:","pos":[4725,4796]},{"pos":[4798,5062],"content":"The game loop goes in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IFrameworkView::Run<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700505)</ept> method (instead of <bpt id=\"p3\">**</bpt>main()<ept id=\"p3\">**</ept>) because our game functions within the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>IFrameworkView<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> class.","source":"The game loop goes in the [**IFrameworkView::Run**](https://msdn.microsoft.com/library/windows/apps/hh700505) method (instead of **main()**) because our game functions within the [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) class."},{"content":"Instead of implementing a message handling framework and calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PeekMessage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ms644943)</ept>, we can call the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ProcessEvents<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208215)</ept> method built in to our app window's <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>CoreDispatcher<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept>.","pos":[5064,5418],"source":"Instead of implementing a message handling framework and calling [**PeekMessage**](https://msdn.microsoft.com/library/windows/desktop/ms644943), we can call the [**ProcessEvents**](https://msdn.microsoft.com/library/windows/apps/br208215) method built in to our app window's [**CoreDispatcher**](https://msdn.microsoft.com/library/windows/apps/br208211)."},{"content":"There's no need for the game loop to branch and handle messages - just call <bpt id=\"p1\">**</bpt>ProcessEvents<ept id=\"p1\">**</ept> and proceed.","pos":[5419,5525],"source":" There's no need for the game loop to branch and handle messages - just call **ProcessEvents** and proceed."},{"content":"Game loop in Direct3D 11 Windows Store game","pos":[5527,5570]},{"content":"Now we have a UWP app that sets up the same basic graphics infrastructure, and renders the same colorful cube, as our DirectX 9 example.","pos":[5897,6033]},{"content":"Where do I go from here?","pos":[6038,6062]},{"pos":[6065,6127],"content":"Bookmark the <bpt id=\"p1\">[</bpt>DirectX 11 porting FAQ<ept id=\"p1\">](directx-porting-faq.md)</ept>.","source":"Bookmark the [DirectX 11 porting FAQ](directx-porting-faq.md)."},{"content":"The DirectX UWP templates include a robust Direct3D device infrastructure that's ready for use with your game.","pos":[6129,6239]},{"content":"See <bpt id=\"p1\">[</bpt>Create a DirectX game project from a template<ept id=\"p1\">](user-interface.md)</ept> for guidance on picking the right template.","pos":[6240,6354],"source":" See [Create a DirectX game project from a template](user-interface.md) for guidance on picking the right template."},{"content":"Visit the following in-depth Windows Store game game development articles:","pos":[6356,6430]},{"content":"Walkthrough: a simple UWP game with DirectX","pos":[6437,6480]},{"content":"Audio for games","pos":[6544,6559]},{"content":"Move-look controls for games","pos":[6610,6638]}],"content":"---\ntitle: Port the game loop\ndescription: Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an IFrameworkView to control a full-screen CoreWindow.\nms.assetid: 070dd802-cb27-4672-12ba-a7f036ff495c\n---\n\n# Port the game loop\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n**Summary**\n\n-   [Part 1: Initialize Direct3D 11](simple-port-from-direct3d-9-to-11-1-part-1--initializing-direct3d.md)\n-   [Part 2: Convert the rendering framework](simple-port-from-direct3d-9-to-11-1-part-2--rendering.md)\n-   Part 3: Port the game loop\n\n\nShows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) to control a full-screen [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225). Part 3 of the [Port a simple Direct3D 9 app to DirectX 11 and UWP](walkthrough--simple-port-from-direct3d-9-to-11-1.md) walkthrough.\n\n## Create a window\n\n\nTo set up a desktop window with a Direct3D 9 viewport, we had to implement the traditional windowing framework for desktop apps. We had to create an HWND, set the window size, provide a window processing callback, make it visible, and so on.\n\nThe UWP environment has a much simpler system. Instead of setting up a traditional window, a Windows Store game using DirectX implements [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478). This interface exists for DirectX apps and games to run directly in a [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225) inside the app container.\n\n> **Note**   Windows supplies managed pointers to resources such as the source application object and the [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225). See [**Handle to Object Operator (^)**]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx.\n\n \n\nYour \"main\" class needs to inherit from [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) and implement the five **IFrameworkView** methods: [**Initialize**](https://msdn.microsoft.com/library/windows/apps/hh700495), [**SetWindow**](https://msdn.microsoft.com/library/windows/apps/hh700509), [**Load**](https://msdn.microsoft.com/library/windows/apps/hh700501), [**Run**](https://msdn.microsoft.com/library/windows/apps/hh700505), and [**Uninitialize**](https://msdn.microsoft.com/library/windows/apps/hh700523). In addition to creating the **IFrameworkView**, which is (essentially) where your game will reside, you need to implement a factory class that creates an instance of your **IFrameworkView**. Your game still has an executable with a method called **main()**, but all main can do is use the factory to create the **IFrameworkView** instance.\n\nMain function\n\n```cpp\n//-----------------------------------------------------------------------------\n// Required method for a DirectX-only app.\n// The main function is only used to initialize the app's IFrameworkView class.\n//-----------------------------------------------------------------------------\n[Platform::MTAThread]\nint main(Platform::Array<Platform::String^>^)\n{\n    auto direct3DApplicationSource = ref new Direct3DApplicationSource();\n    CoreApplication::Run(direct3DApplicationSource);\n    return 0;\n}\n```\n\nIFrameworkView factory\n\n```cpp\n//-----------------------------------------------------------------------------\n// This class creates our IFrameworkView.\n//-----------------------------------------------------------------------------\nref class Direct3DApplicationSource sealed : \n    Windows::ApplicationModel::Core::IFrameworkViewSource\n{\npublic:\n    virtual Windows::ApplicationModel::Core::IFrameworkView^ CreateView()\n    {\n        return ref new Cube11();\n    };\n};\n```\n\n## Port the game loop\n\n\nLet's look at the game loop from our Direct3D 9 implementation. This code exists in the app's main function. Each iteration of this loop processes a window message or renders a frame.\n\nGame loop in Direct3D 9 desktop game\n\n```cpp\nwhile(WM_QUIT != msg.message)\n{\n    // Process window events.\n    // Use PeekMessage() so we can use idle time to render the scene. \n    bGotMsg = (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE) != 0);\n\n    if(bGotMsg)\n    {\n        // Translate and dispatch the message\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n    }\n    else\n    {\n        // Render a new frame.\n        // Render frames during idle time (when no messages are waiting).\n        RenderFrame();\n    }\n}\n```\n\nThe game loop is similar - but easier - in the UWP version of our game:\n\nThe game loop goes in the [**IFrameworkView::Run**](https://msdn.microsoft.com/library/windows/apps/hh700505) method (instead of **main()**) because our game functions within the [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) class.\n\nInstead of implementing a message handling framework and calling [**PeekMessage**](https://msdn.microsoft.com/library/windows/desktop/ms644943), we can call the [**ProcessEvents**](https://msdn.microsoft.com/library/windows/apps/br208215) method built in to our app window's [**CoreDispatcher**](https://msdn.microsoft.com/library/windows/apps/br208211). There's no need for the game loop to branch and handle messages - just call **ProcessEvents** and proceed.\n\nGame loop in Direct3D 11 Windows Store game\n\n```cpp\n// Windows Store apps should not exit. Use app lifecycle events instead.\nwhile (true)\n{\n    // Process window events.\n    auto dispatcher = CoreWindow::GetForCurrentThread()->Dispatcher;\n    dispatcher->ProcessEvents(CoreProcessEventsOption::ProcessAllIfPresent);\n\n    // Render a new frame.\n    RenderFrame();\n}\n```\n\nNow we have a UWP app that sets up the same basic graphics infrastructure, and renders the same colorful cube, as our DirectX 9 example.\n\n## Where do I go from here?\n\n\nBookmark the [DirectX 11 porting FAQ](directx-porting-faq.md).\n\nThe DirectX UWP templates include a robust Direct3D device infrastructure that's ready for use with your game. See [Create a DirectX game project from a template](user-interface.md) for guidance on picking the right template.\n\nVisit the following in-depth Windows Store game game development articles:\n\n-   [Walkthrough: a simple UWP game with DirectX](tutorial--create-your-first-metro-style-directx-game.md)\n-   [Audio for games](working-with-audio-in-your-directx-game.md)\n-   [Move-look controls for games](tutorial--adding-move-look-controls-to-your-directx-game.md)\n\n \n\n \n\n\n\n\n"}