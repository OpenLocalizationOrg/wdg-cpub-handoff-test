{"nodes":[{"pos":[66,187],"content":"Each Windows Store transaction that results in a successful product purchase can optionally return a transaction receipt.","needQuote":true,"needEscape":true,"nodes":[{"content":"Each Windows Store transaction that results in a successful product purchase can optionally return a transaction receipt.","pos":[0,121]}]},{"pos":[195,235],"content":"Use receipts to verify product purchases","needQuote":true,"needEscape":true,"nodes":[{"content":"Use receipts to verify product purchases","pos":[0,40]}]},{"content":"Use receipts to verify product purchases","pos":[243,283]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[286,324]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[325,420],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[425,439]},{"content":"CurrentApp","pos":[450,460]},{"content":"CurrentAppSimulator","pos":[529,548]},{"content":"Each Windows Store transaction that results in a successful product purchase can optionally return a transaction receipt.","pos":[611,732]},{"content":"This receipts provides information about the listed product and monetary cost to the customer.","pos":[733,827]},{"content":"Having access to this information supports scenarios where your app needs to verify that a user purchased your app, or has made in-app product purchases from the Windows Store.","pos":[829,1005]},{"content":"For example, imagine a game that offers downloaded content.","pos":[1006,1065]},{"content":"If the user who purchased the game content wants to play it on a different device, you need to verify that the user already owns the content.","pos":[1066,1207]},{"content":"Here's how.","pos":[1208,1219]},{"content":"Requesting a receipt","pos":[1224,1244]},{"content":"The <bpt id=\"p1\">**</bpt>Windows.ApplicationModel.Store<ept id=\"p1\">**</ept> namespace supports two ways of getting a receipt: by using the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CurrentApp.RequestProductPurchaseAsync | requestProductPurchaseAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn263381)</ept> or <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>CurrentApp.RequestAppPurchaseAsync | requestAppPurchaseAsync<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/hh967813)</ept> method and using the <bpt id=\"p6\">*</bpt>includeReceipt<ept id=\"p6\">*</ept> parameter, or by calling the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>CurrentApp.GetAppReceiptAsync | getAppReceiptAsync<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/hh967811)</ept> method.","pos":[1247,1799],"source":"The **Windows.ApplicationModel.Store** namespace supports two ways of getting a receipt: by using the [**CurrentApp.RequestProductPurchaseAsync | requestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) or [**CurrentApp.RequestAppPurchaseAsync | requestAppPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/hh967813) method and using the *includeReceipt* parameter, or by calling the [**CurrentApp.GetAppReceiptAsync | getAppReceiptAsync**](https://msdn.microsoft.com/library/windows/apps/hh967811) method."},{"content":"An app receipt looks something like this.","pos":[1800,1841]},{"content":"A product receipt looks like this.","pos":[3553,3587]},{"content":"You can use either of these receipt examples to test your validation code.","pos":[5113,5187]},{"content":"Validating a receipt","pos":[5192,5212]},{"content":"After you get a receipt, you need your back-end system (a web service or something similar) to validate it.","pos":[5215,5322]},{"content":"Here's a .NET Framework example of that validation process.","pos":[5323,5382]}],"content":"---\nms.assetid: E322DFFE-8EEC-499D-87BC-EDA5CFC27551\ndescription: Each Windows Store transaction that results in a successful product purchase can optionally return a transaction receipt.\ntitle: Use receipts to verify product purchases\n---\n\n# Use receipts to verify product purchases\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**CurrentApp**](https://msdn.microsoft.com/library/windows/apps/hh779765)\n-   [**CurrentAppSimulator**](https://msdn.microsoft.com/library/windows/apps/hh779766)\n\nEach Windows Store transaction that results in a successful product purchase can optionally return a transaction receipt. This receipts provides information about the listed product and monetary cost to the customer.\n\nHaving access to this information supports scenarios where your app needs to verify that a user purchased your app, or has made in-app product purchases from the Windows Store. For example, imagine a game that offers downloaded content. If the user who purchased the game content wants to play it on a different device, you need to verify that the user already owns the content. Here's how.\n\n## Requesting a receipt\n\n\nThe **Windows.ApplicationModel.Store** namespace supports two ways of getting a receipt: by using the [**CurrentApp.RequestProductPurchaseAsync | requestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) or [**CurrentApp.RequestAppPurchaseAsync | requestAppPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/hh967813) method and using the *includeReceipt* parameter, or by calling the [**CurrentApp.GetAppReceiptAsync | getAppReceiptAsync**](https://msdn.microsoft.com/library/windows/apps/hh967811) method. An app receipt looks something like this.\n\n```XML\n<Receipt Version=\"1.0\" ReceiptDate=\"2012-08-30T23:10:05Z\" CertificateId=\"b809e47cd0110a4db043b3f73e83acd917fe1336\" ReceiptDeviceId=\"4e362949-acc3-fe3a-e71b-89893eb4f528\">\n    <AppReceipt Id=\"8ffa256d-eca8-712a-7cf8-cbf5522df24b\" AppId=\"55428GreenlakeApps.CurrentAppSimulatorEventTest_z7q3q7z11crfr\" PurchaseDate=\"2012-06-04T23:07:24Z\" LicenseType=\"Full\" />\n    <ProductReceipt Id=\"6bbf4366-6fb2-8be8-7947-92fd5f683530\" ProductId=\"Product1\" PurchaseDate=\"2012-08-30T23:08:52Z\" ExpirationDate=\"2012-09-02T23:08:49Z\" ProductType=\"Durable\" AppId=\"55428GreenlakeApps.CurrentAppSimulatorEventTest_z7q3q7z11crfr\" />\n    <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n        <SignedInfo>\n            <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n            <SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n            <Reference URI=\"\">\n                <Transforms>\n                    <Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n                </Transforms>\n                <DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n                <DigestValue>cdiU06eD8X/w1aGCHeaGCG9w/kWZ8I099rw4mmPpvdU=</DigestValue>\n            </Reference>\n        </SignedInfo>\n        <SignatureValue>SjRIxS/2r2P6ZdgaR9bwUSa6ZItYYFpKLJZrnAa3zkMylbiWjh9oZGGng2p6/gtBHC2dSTZlLbqnysJjl7mQp/A3wKaIkzjyRXv3kxoVaSV0pkqiPt04cIfFTP0JZkE5QD/vYxiWjeyGp1dThEM2RV811sRWvmEs/hHhVxb32e8xCLtpALYx3a9lW51zRJJN0eNdPAvNoiCJlnogAoTToUQLHs72I1dECnSbeNPXiG7klpy5boKKMCZfnVXXkneWvVFtAA1h2sB7ll40LEHO4oYN6VzD+uKd76QOgGmsu9iGVyRvvmMtahvtL1/pxoxsTRedhKq6zrzCfT8qfh3C1w==</SignatureValue>\n    </Signature>\n</Receipt>\n```\n\nA product receipt looks like this.\n\n```XML\n<Receipt Version=\"1.0\" ReceiptDate=\"2012-08-30T23:08:52Z\" CertificateId=\"b809e47cd0110a4db043b3f73e83acd917fe1336\" ReceiptDeviceId=\"4e362949-acc3-fe3a-e71b-89893eb4f528\">\n    <ProductReceipt Id=\"6bbf4366-6fb2-8be8-7947-92fd5f683530\" ProductId=\"Product1\" PurchaseDate=\"2012-08-30T23:08:52Z\" ExpirationDate=\"2012-09-02T23:08:49Z\" ProductType=\"Durable\" AppId=\"55428GreenlakeApps.CurrentAppSimulatorEventTest_z7q3q7z11crfr\" />\n    <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n        <SignedInfo>\n            <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\n            <SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" />\n            <Reference URI=\"\">\n                <Transforms>\n                    <Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" />\n                </Transforms>\n                <DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\" />\n                <DigestValue>Uvi8jkTYd3HtpMmAMpOm94fLeqmcQ2KCrV1XmSuY1xI=</DigestValue>\n            </Reference>\n        </SignedInfo>\n        <SignatureValue>TT5fDET1X9nBk9/yKEJAjVASKjall3gw8u9N5Uizx4/Le9RtJtv+E9XSMjrOXK/TDicidIPLBjTbcZylYZdGPkMvAIc3/1mdLMZYJc+EXG9IsE9L74LmJ0OqGH5WjGK/UexAXxVBWDtBbDI2JLOaBevYsyy+4hLOcTXDSUA4tXwPa2Bi+BRoUTdYE2mFW7ytOJNEs3jTiHrCK6JRvTyU9lGkNDMNx9loIr+mRks+BSf70KxPtE9XCpCvXyWa/Q1JaIyZI7llCH45Dn4SKFn6L/JBw8G8xSTrZ3sBYBKOnUDbSCfc8ucQX97EyivSPURvTyImmjpsXDm2LBaEgAMADg==</SignatureValue>\n    </Signature>\n</Receipt>\n```\n\nYou can use either of these receipt examples to test your validation code.\n\n## Validating a receipt\n\n\nAfter you get a receipt, you need your back-end system (a web service or something similar) to validate it. Here's a .NET Framework example of that validation process.\n\n```CSharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Xml;\nusing System.IO;\nusing System.Security.Cryptography.Xml;\nusing System.Net;\n\nnamespace ReceiptVerificationSample\n{\n        public sealed class RSAPKCS1SHA256SignatureDescription : SignatureDescription\n        {\n            public RSAPKCS1SHA256SignatureDescription()\n            {\n                base.KeyAlgorithm = typeof(RSACryptoServiceProvider).FullName;\n                base.DigestAlgorithm = typeof(SHA256Managed).FullName;\n                base.FormatterAlgorithm = typeof(RSAPKCS1SignatureFormatter).FullName;\n                base.DeformatterAlgorithm = typeof(RSAPKCS1SignatureDeformatter).FullName;\n            }\n\n            public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)\n            {\n                if (key == null)\n                {\n                    throw new ArgumentNullException(\"key\");\n                }\n\n                RSAPKCS1SignatureDeformatter deformatter = new RSAPKCS1SignatureDeformatter(key);\n                deformatter.SetHashAlgorithm(\"SHA256\");\n                return deformatter;\n            }\n\n            public override AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key)\n            {\n                if (key == null)\n                {\n                    throw new ArgumentNullException(\"key\");\n                }\n\n                RSAPKCS1SignatureFormatter formatter = new RSAPKCS1SignatureFormatter(key);\n                formatter.SetHashAlgorithm(\"SHA256\");\n                return formatter;\n            }\n\n        }\n\n        class Program\n        {\n\n            // Utility function to read the bytes from an HTTP response\n            private static int ReadResponseBytes(byte[] responseBuffer, Stream resStream)\n            {\n                int count = 0;\n\n                int numBytesRead = 0;\n                int numBytesToRead = responseBuffer.Length;\n\n                do\n                {\n                    count = resStream.Read(responseBuffer, numBytesRead, numBytesToRead);\n\n                    numBytesRead += count;\n                    numBytesToRead -= count;\n\n                } while (count > 0);\n\n                return numBytesRead;\n            }\n\n            public static X509Certificate2 RetrieveCertificate(string certificateId)\n            {\n                const int MaxCertificateSize = 10000;\n\n                // We are attempting to retrieve the following url. The getAppReceiptAsync website at \n                // http://msdn.microsoft.com/library/windows/apps/windows.applicationmodel.store.currentapp.getappreceiptasync.aspx\n                // lists the following format for the certificate url.\n                String certificateUrl = String.Format(\"https://go.microsoft.com/fwlink/?LinkId=246509&amp;cid={0}\", certificateId);\n\n                // Make an HTTP GET request for the certificate\n                HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(certificateUrl);\n                request.Method = \"GET\";\n\n                HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n\n                // Retrieve the certificate out of the response stream\n                byte[] responseBuffer = new byte[MaxCertificateSize];\n                Stream resStream = response.GetResponseStream();\n                int bytesRead = ReadResponseBytes(responseBuffer, resStream);\n\n                if (bytesRead < 1)\n                {\n                    //TODO: Handle error here\n                }\n\n                return new X509Certificate2(responseBuffer);\n            }\n\n            static bool ValidateXml(XmlDocument receipt, X509Certificate2 certificate)\n            {\n                // Create the signed XML object.\n                SignedXml sxml = new SignedXml(receipt);\n\n                // Get the XML Signature node and load it into the signed XML object.\n                XmlNode dsig = receipt.GetElementsByTagName(\"Signature\", SignedXml.XmlDsigNamespaceUrl)[0];\n                if (dsig == null)\n                {\n                    // If signature is not found return false\n                    System.Console.WriteLine(\"Signature not found.\");\n                    return false;\n                }\n\n                sxml.LoadXml((XmlElement)dsig);\n\n                // Check the signature\n                bool isValid = sxml.CheckSignature(certificate, true);\n\n                return isValid;\n            }\n\n            static void Main(string[] args)\n            {\n                // .NET does not support SHA256-RSA2048 signature verification by default, so register this algorithm for verification\n                CryptoConfig.AddAlgorithm(typeof(RSAPKCS1SHA256SignatureDescription), \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\");\n\n                // Load the receipt that needs to be verified as an XML document\n                XmlDocument xmlDoc = new XmlDocument();\n                xmlDoc.Load(\"..\\\\..\\\\receipt.xml\");\n\n                // The certificateId attribute is present in the document root, retrieve it\n                XmlNode node = xmlDoc.DocumentElement;\n                string certificateId = node.Attributes[\"CertificateId\"].Value;\n\n                // Retrieve the certificate from the official site.\n                // NOTE: For sake of performance, you would want to cache this certificate locally.\n                //       Otherwise, every single call will incur the delay of certificate retrieval.\n                X509Certificate2 verificationCertificate = RetrieveCertificate(certificateId);\n\n                try\n                {\n                    // Validate the receipt with the certificate retrieved earlier\n                    bool isValid = ValidateXml(xmlDoc, verificationCertificate);\n                    System.Console.WriteLine(\"Certificate valid: \" + isValid);\n                }\n                catch (Exception ex)\n                {\n                    System.Console.WriteLine(ex.ToString());\n                }\n            }\n        }\n}\n```\n\n \n\n \n\n\n\n"}