<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">789e2ca9bc49393f50c5e06bb38b4d156fae5446</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\launch-resume\how-to-launch-an-app-for-results.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">399d6bc8ed2d86b1db19f911f722c048e7798f4d</mda:meta><mda:meta type="olxliffhash">9e38709ffbf3dcd208e2fd73bccafea38c03834d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Launch an app for results</source>
					<target>Launch an app for results</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Learn how to launch an app from another app and exchange data between the two.</source>
					<target>Learn how to launch an app from another app and exchange data between the two.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>This is called launching an app for results.</source>
					<target>This is called launching an app for results.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Launch an app for results</source>
					<target>Launch an app for results</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>LaunchUriForResultsAsync</source>
					<target>LaunchUriForResultsAsync</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>ValueSet</source>
					<target>ValueSet</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Learn how to launch an app from another app and exchange data between the two.</source>
					<target>Learn how to launch an app from another app and exchange data between the two.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>This is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">launching an app for results</pc>.</source>
					<target>This is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">launching an app for results</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956686)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The example here shows you how to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriForResultsAsync</pc></pc> to launch an app for results.</source>
					<target>The example here shows you how to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriForResultsAsync</pc></pc> to launch an app for results.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>New app-to-app communication APIs in Windows 10 make it possible for Windows apps (and Windows Web apps) to launch an app and exchange data and files.</source>
					<target>New app-to-app communication APIs in Windows 10 make it possible for Windows apps (and Windows Web apps) to launch an app and exchange data and files.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>This enables you to build mash-up solutions from multiple apps.</source>
					<target>This enables you to build mash-up solutions from multiple apps.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Using these new APIs, complex tasks that would have required the user to use multiple apps can now be handled seamlessly.</source>
					<target>Using these new APIs, complex tasks that would have required the user to use multiple apps can now be handled seamlessly.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>For example, your app could launch a social networking app to choose a contact, or launch a checkout app to complete a payment process.</source>
					<target>For example, your app could launch a social networking app to choose a contact, or launch a checkout app to complete a payment process.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>The app that you'll launch for results will be referred to as the launched app.</source>
					<target>The app that you'll launch for results will be referred to as the launched app.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The app that launches the app will be referred to as the calling app.</source>
					<target>The app that launches the app will be referred to as the calling app.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>For this example you will write both the calling app and the launched app.</source>
					<target>For this example you will write both the calling app and the launched app.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Step 1: Register the protocol to be handled in the app that you'll launch for results</source>
					<target>Step 1: Register the protocol to be handled in the app that you'll launch for results</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;lt;</data>
					<data id="id4">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>In the Package.appxmanifest file of the launched app, add a protocol extension to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Application<ph dataRef="id4" id="ph2" /></pc> section.</source>
					<target>In the Package.appxmanifest file of the launched app, add a protocol extension to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Application<ph dataRef="id4" id="ph2" /></pc> section.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The example here uses a fictional protocol named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">test-app2app</pc>.</source>
					<target>The example here uses a fictional protocol named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">test-app2app</pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReturnResults</pc> attribute in the protocol extension accepts one of these values:</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReturnResults</pc> attribute in the protocol extension accepts one of these values:</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn956686)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh701476)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">optional</pc>—The app can be launched for results by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriForResultsAsync</pc></pc> method, or not for results by using <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">LaunchUriAsync</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">optional</pc>—The app can be launched for results by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriForResultsAsync</pc></pc> method, or not for results by using <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">LaunchUriAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">optional</pc>, the launched app must determine whether it was launched for results.</source>
					<target>When you use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">optional</pc>, the launched app must determine whether it was launched for results.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242330)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It can do that by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc> event argument.</source>
					<target>It can do that by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc> event argument.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224728)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br224693)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br224742)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
				</originalData>
				<segment state="initial">
					<source>If the argument's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IActivatedEventArgs.Kind</pc></pc> property returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActivationKind.ProtocolForResults</pc></pc>, or if the type of the event argument is <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ProtocolActivatedEventArgs</pc></pc>, the app was launched via <pc dataRefEnd="id14" dataRefStart="id13" id="p7">LaunchUriForResultsAsync</pc>.</source>
					<target>If the argument's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IActivatedEventArgs.Kind</pc></pc> property returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActivationKind.ProtocolForResults</pc></pc>, or if the type of the event argument is <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ProtocolActivatedEventArgs</pc></pc>, the app was launched via <pc dataRefEnd="id14" dataRefStart="id13" id="p7">LaunchUriForResultsAsync</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn956686)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">always</pc>—The app can be launched only for results; that is, it can respond only to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriForResultsAsync</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">always</pc>—The app can be launched only for results; that is, it can respond only to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriForResultsAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh701476)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">none</pc>—The app cannot be launched for results; it can respond only to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriAsync</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">none</pc>—The app cannot be launched for results; it can respond only to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>In this protocol-extension example, the app can be launched only for results.</source>
					<target>In this protocol-extension example, the app can be launched only for results.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This simplifies the logic inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnActivated</pc> method, discussed below, because we have to handle only the "launched for results" case and not the other ways that the app could be activated.</source>
					<target>This simplifies the logic inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnActivated</pc> method, discussed below, because we have to handle only the "launched for results" case and not the other ways that the app could be activated.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Step 2: Override Application.OnActivated in the app that you'll launch for results</source>
					<target>Step 2: Override Application.OnActivated in the app that you'll launch for results</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">`App`</data>
				</originalData>
				<segment state="initial">
					<source>If this method does not already exist in the launched app, create it within the <ph dataRef="id1" id="ph1" /> class defined in App.xaml.cs.</source>
					<target>If this method does not already exist in the launched app, create it within the <ph dataRef="id1" id="ph1" /> class defined in App.xaml.cs.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>In an app that lets you pick your friends in a social network, this function could be where you open the people-picker page.</source>
					<target>In an app that lets you pick your friends in a social network, this function could be where you open the people-picker page.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In this next example, a page named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchedForResultsPage</pc> is displayed when the app is activated for results.</source>
					<target>In this next example, a page named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchedForResultsPage</pc> is displayed when the app is activated for results.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Ensure that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement is included at the top of the file.</source>
					<target>Ensure that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement is included at the top of the file.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`args`</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/dn906905)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
				</originalData>
				<segment state="initial">
					<source>Because the protocol extension in the Package.appxmanifest file specifies <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReturnResults</pc> as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">always</pc>, the code just shown can cast <ph dataRef="id5" id="ph1" /> directly to <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">ProtocolForResultsActivatedEventArgs</pc></pc> with confidence that only <pc dataRefEnd="id11" dataRefStart="id10" id="p5">ProtocolForResultsActivatedEventArgs</pc> will be sent to <pc dataRefEnd="id13" dataRefStart="id12" id="p6">OnActivated</pc> for this app.</source>
					<target>Because the protocol extension in the Package.appxmanifest file specifies <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReturnResults</pc> as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">always</pc>, the code just shown can cast <ph dataRef="id5" id="ph1" /> directly to <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">ProtocolForResultsActivatedEventArgs</pc></pc> with confidence that only <pc dataRefEnd="id11" dataRefStart="id10" id="p5">ProtocolForResultsActivatedEventArgs</pc> will be sent to <pc dataRefEnd="id13" dataRefStart="id12" id="p6">OnActivated</pc> for this app.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224728)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br224693)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If your app can be activated in ways other than launching for results, you can check whether <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IActivatedEventArgs.Kind</pc></pc> property returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActivationKind.ProtocolForResults</pc></pc> to tell whether the app was launched for results.</source>
					<target>If your app can be activated in ways other than launching for results, you can check whether <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IActivatedEventArgs.Kind</pc></pc> property returns <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActivationKind.ProtocolForResults</pc></pc> to tell whether the app was launched for results.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Step 3: Add a ProtocolForResultsOperation field to the app you launch for results</source>
					<target>Step 3: Add a ProtocolForResultsOperation field to the app you launch for results</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn906913)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You'll use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtocolForResultsOperation</pc></pc> field to signal when the launched app is ready to return the result to the calling app.</source>
					<target>You'll use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtocolForResultsOperation</pc></pc> field to signal when the launched app is ready to return the result to the calling app.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, the field is added to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchedForResultsPage</pc> class because you'll complete the launch-for-results operation from that page and will need access to it.</source>
					<target>In this example, the field is added to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchedForResultsPage</pc> class because you'll complete the launch-for-results operation from that page and will need access to it.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Step 4: Override OnNavigatedTo() in the app you launch for results</source>
					<target>Step 4: Override OnNavigatedTo() in the app you launch for results</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227508)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Override the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnNavigatedTo</pc></pc> method on the page that you'll display when your app is launched for results.</source>
					<target>Override the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnNavigatedTo</pc></pc> method on the page that you'll display when your app is launched for results.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>If this method does not already exist, create it within the class for the page defined in <ph dataRef="id1" id="ph1" />pagename<ph dataRef="id2" id="ph2" />.xaml.cs.</source>
					<target>If this method does not already exist, create it within the class for the page defined in <ph dataRef="id1" id="ph1" />pagename<ph dataRef="id2" id="ph2" />.xaml.cs.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Ensure that the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement is included at the top of the file:</source>
					<target>Ensure that the following <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statement is included at the top of the file:</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243285)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227508)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationEventArgs</pc></pc> object in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnNavigatedTo</pc></pc> method contains the data passed from the calling app.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationEventArgs</pc></pc> object in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnNavigatedTo</pc></pc> method contains the data passed from the calling app.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The data may not exceed 100KB and is stored in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> object.</source>
					<target>The data may not exceed 100KB and is stored in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> object.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example code, the launched app expects the data sent from the calling app to be in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> under a key named <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TestData</pc>, because that's what the example's calling app is coded to send.</source>
					<target>In this example code, the launched app expects the data sent from the calling app to be in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> under a key named <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TestData</pc>, because that's what the example's calling app is coded to send.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Step 5: Write code to return data to the calling app</source>
					<target>Step 5: Write code to return data to the calling app</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn906913)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the launched app, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtocolForResultsOperation</pc></pc> to return data to the calling app.</source>
					<target>In the launched app, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtocolForResultsOperation</pc></pc> to return data to the calling app.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example code, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> object is created that contains the value to return to the calling app.</source>
					<target>In this example code, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> object is created that contains the value to return to the calling app.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProtocolForResultsOperation</pc> field is then used to send the value to the calling app.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProtocolForResultsOperation</pc> field is then used to send the value to the calling app.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Step 6: Write code to launch the app for results and get the returned data</source>
					<target>Step 6: Write code to launch the app for results and get the returned data</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Launch the app from within an async method in your calling app as shown in this example code.</source>
					<target>Launch the app from within an async method in your calling app as shown in this example code.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Note the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements, which are necessary for the code to compile:</source>
					<target>Note the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">using</pc> statements, which are necessary for the code to compile:</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In this example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> containing the key <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TestData</pc> is passed to the launched app.</source>
					<target>In this example, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> containing the key <pc dataRefEnd="id6" dataRefStart="id5" id="p3">TestData</pc> is passed to the launched app.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The launched app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> with a key named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReturnedData</pc> that contains the result returned to the caller.</source>
					<target>The launched app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> with a key named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReturnedData</pc> that contains the result returned to the caller.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>You must build and deploy the app that you'll launch for results before running your calling app.</source>
					<target>You must build and deploy the app that you'll launch for results before running your calling app.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn906892)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Otherwise, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriResult.Status</pc></pc> will report <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriStatus.AppUnavailable</pc>.</source>
					<target>Otherwise, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriResult.Status</pc></pc> will report <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LaunchUriStatus.AppUnavailable</pc>.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn893511)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You'll need the family name of the launched app when you set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetApplicationPackageFamilyName</pc></pc>.</source>
					<target>You'll need the family name of the launched app when you set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetApplicationPackageFamilyName</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>One way to get the family name is to make the following call from within the launched app:</source>
					<target>One way to get the family name is to make the following call from within the launched app:</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The example in this how-to provides a "hello world" introduction to launching an app for results.</source>
					<target>The example in this how-to provides a "hello world" introduction to launching an app for results.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn956686)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The key things to note are that the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriForResultsAsync</pc></pc> API lets you asynchronously launch an app and communicate via the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> class.</source>
					<target>The key things to note are that the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LaunchUriForResultsAsync</pc></pc> API lets you asynchronously launch an app and communicate via the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ValueSet</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Passing data via a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> is limited to 100KB.</source>
					<target>Passing data via a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> is limited to 100KB.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn889985)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you need to pass larger amounts of data, you can share files by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SharedStorageAccessManager</pc></pc> class to create file tokens that you can pass between apps.</source>
					<target>If you need to pass larger amounts of data, you can share files by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SharedStorageAccessManager</pc></pc> class to create file tokens that you can pass between apps.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`inputData`</data>
				</originalData>
				<segment state="initial">
					<source>For example, given a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> named <ph dataRef="id3" id="ph1" />, you could store the token to a file that you want to share with the launched app:</source>
					<target>For example, given a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ValueSet</pc> named <ph dataRef="id3" id="ph1" />, you could store the token to a file that you want to share with the launched app:</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Then pass it to the launched app via <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchUriForResultsAsync</pc>.</source>
					<target>Then pass it to the launched app via <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LaunchUriForResultsAsync</pc>.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>LaunchUri</source>
					<target>LaunchUri</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>LaunchUriForResultsAsync</source>
					<target>LaunchUriForResultsAsync</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>ValueSet</source>
					<target>ValueSet</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>