{"nodes":[{"content":"Enumerate and query files and folders","pos":[2,39]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[42,80]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[81,176],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Access files and folders in either a folder, library, device, or network location.","pos":[179,261]},{"content":"You can also query the files and folders in a location by constructing file and folder queries.","pos":[262,357]},{"pos":[359,459],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Also see the <bpt id=\"p2\">[</bpt>Folder enumeration sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.","source":"**Note**  Also see the [Folder enumeration sample](http://go.microsoft.com/fwlink/p/?linkid=619993)."},{"content":"Prerequisites","pos":[466,479]},{"content":"Understand async programming for Universal Windows Platform (UWP) apps","pos":[487,557]},{"content":"You can learn how to write asynchronous apps in C\\# or Visual Basic, see <bpt id=\"p1\">[</bpt>Call asynchronous APIs in C\\# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.","pos":[565,744],"source":"You can learn how to write asynchronous apps in C\\# or Visual Basic, see [Call asynchronous APIs in C\\# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/mt187337)."},{"content":"To learn how to write asynchronous apps in C++, see <bpt id=\"p1\">[</bpt>Asynchronous programming in C++<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.","pos":[745,889],"source":" To learn how to write asynchronous apps in C++, see [Asynchronous programming in C++](https://msdn.microsoft.com/library/windows/apps/mt187334)."},{"content":"Access permissions to the location","pos":[897,931]},{"content":"For example, the code in these examples require the <bpt id=\"p1\">**</bpt>picturesLibrary<ept id=\"p1\">**</ept> capability, but your location may require a different capability or no capability at all.","pos":[939,1100],"source":"For example, the code in these examples require the **picturesLibrary** capability, but your location may require a different capability or no capability at all."},{"content":"To learn more, see <bpt id=\"p1\">[</bpt>File access permissions<ept id=\"p1\">](file-access-permissions.md)</ept>.","pos":[1101,1174],"source":" To learn more, see [File access permissions](file-access-permissions.md)."},{"content":"Enumerate files and folders in a location","pos":[1179,1220]},{"pos":[1222,1287],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Remember to declare the <bpt id=\"p2\">**</bpt>picturesLibrary<ept id=\"p2\">**</ept> capability.","source":"**Note**  Remember to declare the **picturesLibrary** capability."},{"content":"In this example we first use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolder.GetFilesAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PicturesLibrary<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.","pos":[1289,1599],"source":"In this example we first use the [**StorageFolder.GetFilesAsync**](https://msdn.microsoft.com/library/windows/apps/br227276) method to get all the files in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders) and list the name of each file."},{"content":"Next, we use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetFoldersAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id=\"p3\">**</bpt>PicturesLibrary<ept id=\"p3\">**</ept> and list the name of each subfolder.","pos":[1600,1793],"source":" Next, we use the [**GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br227280) method to get all the subfolders in the **PicturesLibrary** and list the name of each subfolder."}],"content":"# Enumerate and query files and folders\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nAccess files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.\n\n**Note**  Also see the [Folder enumeration sample](http://go.microsoft.com/fwlink/p/?linkid=619993).\n\n \n## Prerequisites\n\n-   **Understand async programming for Universal Windows Platform (UWP) apps**\n\n    You can learn how to write asynchronous apps in C\\# or Visual Basic, see [Call asynchronous APIs in C\\# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/mt187337). To learn how to write asynchronous apps in C++, see [Asynchronous programming in C++](https://msdn.microsoft.com/library/windows/apps/mt187334).\n\n-   **Access permissions to the location**\n\n    For example, the code in these examples require the **picturesLibrary** capability, but your location may require a different capability or no capability at all. To learn more, see [File access permissions](file-access-permissions.md).\n\n## Enumerate files and folders in a location\n\n**Note**  Remember to declare the **picturesLibrary** capability.\n\nIn this example we first use the [**StorageFolder.GetFilesAsync**](https://msdn.microsoft.com/library/windows/apps/br227276) method to get all the files in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders) and list the name of each file. Next, we use the [**GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br227280) method to get all the subfolders in the **PicturesLibrary** and list the name of each subfolder.\n\n```cpp\n//#include <ppltasks.h>\n//#include <string>\n//#include <memory>\nusing namespace Windows::Storage;\nusing namespace Platform::Collections;\nusing namespace concurrency;\nusing namespace std;\n\n// Be sure to specify the Pictures Folder capability in the appxmanifext file.\nStorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n\n// Use a shared_ptr so that the string stays in memory\n// until the last task is complete.\nauto outputString = make_shared<wstring>();\n*outputString += L\"Files:\\n\";\n\n// Get a read-only vector of the file objects\n// and pass it to the continuation. \ncreate_task(picturesFolder->GetFilesAsync())        \n    // outputString is captured by value, which creates a copy \n    // of the shared_ptr and increments its reference count.\n    .then ([outputString] (IVectorView<StorageFile^>^ files)\n{        \n    for ( unsigned int i = 0 ; i < files->Size; i++)\n    {\n        *outputString += files->GetAt(i)->Name->Data();\n        *outputString += L\"\\n\";\n    }\n})\n    // We need to explicitly state the return type \n    // here: -> IAsyncOperation<...>\n    .then([picturesFolder]() -> IAsyncOperation<IVectorView<StorageFolder^>^>^ \n{\n    return picturesFolder->GetFoldersAsync();\n})\n    // Capture \"this\" to access m_OutputTextBlock from within the lambda.\n    .then([this, outputString](IVectorView<StorageFolder^>^ folders)\n{        \n    *outputString += L\"Folders:\\n\";\n\n    for ( unsigned int i = 0; i < folders->Size; i++)\n    {\n        *outputString += folders->GetAt(i)->Name->Data();\n        *outputString += L\"\\n\";\n    }\n\n    // Assume m_OutputTextBlock is a TextBlock defined in the XAML.\n    m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n});\n```\n"}