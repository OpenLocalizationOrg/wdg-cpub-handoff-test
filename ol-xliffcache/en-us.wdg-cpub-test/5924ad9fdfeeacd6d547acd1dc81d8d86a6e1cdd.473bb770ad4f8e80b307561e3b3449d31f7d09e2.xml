{"nodes":[{"pos":[11,37],"content":"Register a background task","needQuote":true,"needEscape":true,"nodes":[{"content":"Register a background task","pos":[0,26]}]},{"pos":[51,143],"content":"Learn how to create a function that can be re-used to safely register most background tasks.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to create a function that can be re-used to safely register most background tasks.","pos":[0,92]}]},{"content":"Register a background task","pos":[200,226]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[229,267]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[268,363],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[368,382]},{"content":"BackgroundTaskRegistration class","pos":[393,425]},{"content":"BackgroundTaskBuilder class","pos":[494,521]},{"content":"SystemCondition class","pos":[590,611]},{"content":"Learn how to create a function that can be re-used to safely register most background tasks.","pos":[674,766]},{"content":"This topic assumes that you already have a background task that needs to be registered.","pos":[768,855]},{"content":"(See <bpt id=\"p1\">[</bpt>Create and register a background task<ept id=\"p1\">](create-and-register-a-background-task.md)</ept> for information about how to write a background task).","pos":[856,997],"source":" (See [Create and register a background task](create-and-register-a-background-task.md) for information about how to write a background task)."},{"content":"This topic walks through a utility function that registers background tasks.","pos":[999,1075]},{"content":"This utility function checks for existing registrations first before registering the task multiple times to avoid problems with multiple registrations, and it can apply a system condition to the background task.","pos":[1076,1287]},{"content":"The walkthrough includes a complete, working example of this utility function.","pos":[1288,1366]},{"content":"Note","pos":[1370,1374]},{"pos":[1380,1551],"content":"Universal Windows apps must call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestAccessAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700485)</ept> before registering any of the background trigger types.","source":"Universal Windows apps must call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) before registering any of the background trigger types."},{"content":"To ensure that your Universal Windows app continues to run properly after you release an update, you must call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RemoveAccess<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700471)</ept> and then call <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RequestAccessAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh700485)</ept> when your app launches after being updated.","pos":[1553,1881],"source":"To ensure that your Universal Windows app continues to run properly after you release an update, you must call [**RemoveAccess**](https://msdn.microsoft.com/library/windows/apps/hh700471) and then call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) when your app launches after being updated."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Guidelines for background tasks<ept id=\"p1\">](guidelines-for-background-tasks.md)</ept>.","pos":[1882,1978],"source":" For more information, see [Guidelines for background tasks](guidelines-for-background-tasks.md)."},{"content":"Define the method signature and return type","pos":[1983,2026]},{"content":"This method takes in the task entry point, task name, a pre-constructed background task trigger, and (optionally) a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SystemCondition<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224834)</ept> for the background task.","pos":[2029,2249],"source":"This method takes in the task entry point, task name, a pre-constructed background task trigger, and (optionally) a [**SystemCondition**](https://msdn.microsoft.com/library/windows/apps/br224834) for the background task."},{"content":"This method returns a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskRegistration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224786)</ept> object.","pos":[2250,2370],"source":" This method returns a [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) object."},{"content":"Check for existing registrations","pos":[3345,3377]},{"content":"Check whether the task is already registered.","pos":[3380,3425]},{"content":"It's important to check this because if a task is registered multiple times, it will run more than once whenever it’s triggered; this can use excess CPU and may cause unexpected behavior.","pos":[3426,3613]},{"content":"You can check for existing registrations by querying the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskRegistration.AllTasks<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224787)</ept> property and iterating on the result.","pos":[3615,3809],"source":"You can check for existing registrations by querying the [**BackgroundTaskRegistration.AllTasks**](https://msdn.microsoft.com/library/windows/apps/br224787) property and iterating on the result."},{"content":"Check the name of each instance – if it matches the name of the task you’re registering, then break out of the loop and set a flag variable so that your code can choose a different path in the next step.","pos":[3810,4013]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Use background task names that are unique to your app.","pos":[4017,4081],"source":"**Note**  Use background task names that are unique to your app."},{"content":"Ensure each background task has a unique name.","pos":[4082,4128]},{"pos":[4130,4293],"content":"The following code registers a background task using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SystemTrigger<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224838)</ept> we created in the last step:","source":"The following code registers a background task using the [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224838) we created in the last step:"},{"content":"Register the background task (or return the existing registration)","pos":[6171,6237]},{"content":"Check to see if the task was found in the list of existing background task registrations.","pos":[6240,6329]},{"content":"If so, return that instance of the task.","pos":[6330,6370]},{"content":"Then, register the task using a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskBuilder<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> object.","pos":[6372,6501],"source":"Then, register the task using a new [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) object."},{"content":"This code should check whether the condition parameter is null, and if not, add the condition to the registration object.","pos":[6502,6623]},{"content":"Return the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskRegistration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224786)</ept> returned by the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BackgroundTaskBuilder.Register<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br224772)</ept> method.","pos":[6624,6844],"source":" Return the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) returned by the [**BackgroundTaskBuilder.Register**](https://msdn.microsoft.com/library/windows/apps/br224772) method."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Background task registration parameters are validated at the time of registration.","pos":[6848,6940],"source":"**Note**  Background task registration parameters are validated at the time of registration."},{"content":"An error is returned if any of the registration parameters are invalid.","pos":[6941,7012]},{"content":"Ensure that your app gracefully handles scenarios where background task registration fails - if instead your app depends on having a valid registration object after attempting to register a task, it may crash.","pos":[7013,7222]},{"content":"The following example either returns the existing task, or adds code that registers the background task (including the optional system condition if present):","pos":[7224,7381]},{"content":"Complete background task registration utility function","pos":[9981,10035]},{"content":"This example shows the completed background task registration function.","pos":[10038,10109]},{"content":"This function can be used to register most background tasks, with the exception of networking background tasks.","pos":[10110,10221]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.","pos":[13593,13691],"source":"**Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps."},{"content":"If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[13692,13833],"source":" If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132)."},{"content":"Related topics","pos":[13840,13854]},{"content":"Create and register a background task","pos":[13866,13903]},{"content":"Declare background tasks in the application manifest","pos":[13950,14002]},{"content":"Handle a cancelled background task","pos":[14064,14098]},{"content":"Monitor background task progress and completion","pos":[14142,14189]},{"content":"Respond to system events with background tasks","pos":[14246,14292]},{"content":"Set conditions for running a background task","pos":[14348,14392]},{"content":"Update a live tile from a background task","pos":[14446,14487]},{"content":"Use a maintenance trigger","pos":[14538,14563]},{"content":"Run a background task on a timer","pos":[14598,14630]},{"content":"Guidelines for background tasks","pos":[14673,14704]},{"content":"Debug a background task","pos":[14752,14775]},{"content":"How to trigger suspend, resume, and background events in Windows Store apps (when debugging)","pos":[14808,14900]}],"content":"---\ntitle: Register a background task\ndescription: Learn how to create a function that can be re-used to safely register most background tasks.\nms.assetid: 8B1CADC5-F630-48B8-B3CE-5AB62E3DFB0D\n---\n\n# Register a background task\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**BackgroundTaskRegistration class**](https://msdn.microsoft.com/library/windows/apps/br224786)\n-   [**BackgroundTaskBuilder class**](https://msdn.microsoft.com/library/windows/apps/br224768)\n-   [**SystemCondition class**](https://msdn.microsoft.com/library/windows/apps/br224834)\n\nLearn how to create a function that can be re-used to safely register most background tasks.\n\nThis topic assumes that you already have a background task that needs to be registered. (See [Create and register a background task](create-and-register-a-background-task.md) for information about how to write a background task).\n\nThis topic walks through a utility function that registers background tasks. This utility function checks for existing registrations first before registering the task multiple times to avoid problems with multiple registrations, and it can apply a system condition to the background task. The walkthrough includes a complete, working example of this utility function.\n\n**Note**  \n\nUniversal Windows apps must call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) before registering any of the background trigger types.\n\nTo ensure that your Universal Windows app continues to run properly after you release an update, you must call [**RemoveAccess**](https://msdn.microsoft.com/library/windows/apps/hh700471) and then call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) when your app launches after being updated. For more information, see [Guidelines for background tasks](guidelines-for-background-tasks.md).\n\n## Define the method signature and return type\n\n\nThis method takes in the task entry point, task name, a pre-constructed background task trigger, and (optionally) a [**SystemCondition**](https://msdn.microsoft.com/library/windows/apps/br224834) for the background task. This method returns a [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) object.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n> public static BackgroundTaskRegistration RegisterBackgroundTask(\n>                                                 string taskEntryPoint, \n>                                                 string name,\n>                                                 IBackgroundTrigger trigger,\n>                                                 IBackgroundCondition condition)\n> {\n>     \n>     // We’ll add code to this function in subsequent steps.\n> \n> }\n> ```\n> ```cpp\n> BackgroundTaskRegistration^ MainPage::RegisterBackgroundTask(\n>                                              Platform::String ^ taskEntryPoint,\n>                                              Platform::String ^ taskName,\n>                                              IBackgroundTrigger ^ trigger,\n>                                              IBackgroundCondition ^ condition)\n> {\n>     \n>     // We’ll add code to this function in subsequent steps.\n> \n> }\n> ```\n\n## Check for existing registrations\n\n\nCheck whether the task is already registered. It's important to check this because if a task is registered multiple times, it will run more than once whenever it’s triggered; this can use excess CPU and may cause unexpected behavior.\n\nYou can check for existing registrations by querying the [**BackgroundTaskRegistration.AllTasks**](https://msdn.microsoft.com/library/windows/apps/br224787) property and iterating on the result. Check the name of each instance – if it matches the name of the task you’re registering, then break out of the loop and set a flag variable so that your code can choose a different path in the next step.\n\n> **Note**  Use background task names that are unique to your app. Ensure each background task has a unique name.\n\nThe following code registers a background task using the [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224838) we created in the last step:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n> public static BackgroundTaskRegistration RegisterBackgroundTask(\n>                                                 string taskEntryPoint, \n>                                                 string name,\n>                                                 IBackgroundTrigger trigger,\n>                                                 IBackgroundCondition condition)\n> {\n>     //\n>     // Check for existing registrations of this background task.\n>     //\n> \n>     foreach (var cur in BackgroundTaskRegistration.AllTasks)\n>     {\n> \n>         if (cur.Value.Name == name)\n>         {\n>             // \n>             // The task is already registered.\n>             // \n> \n>             return (BackgroundTaskRegistration)(cur.Value);\n>         }\n>     }\n>     \n>     // We’ll register the task in the next step.\n> }\n> ```\n> ```cpp\n> BackgroundTaskRegistration^ MainPage::RegisterBackgroundTask(\n>                                              Platform::String ^ taskEntryPoint,\n>                                              Platform::String ^ taskName,\n>                                              IBackgroundTrigger ^ trigger,\n>                                              IBackgroundCondition ^ condition)\n> {\n>     //\n>     // Check for existing registrations of this background task.\n>     //\n>     \n>     auto iter   = BackgroundTaskRegistration::AllTasks->First();\n>     auto hascur = iter->HasCurrent;\n>     \n>     while (hascur)\n>     {\n>         auto cur = iter->Current->Value;\n>         \n>         if(cur->Name == name)\n>         {\n>             // \n>             // The task is registered.\n>             // \n>             \n>             return (BackgroundTaskRegistration ^)(cur);\n>         }\n>         \n>         hascur = iter->MoveNext();\n>     }\n>     \n>     // We’ll register the task in the next step.\n> }\n> ```\n\n## Register the background task (or return the existing registration)\n\n\nCheck to see if the task was found in the list of existing background task registrations. If so, return that instance of the task.\n\nThen, register the task using a new [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) object. This code should check whether the condition parameter is null, and if not, add the condition to the registration object. Return the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) returned by the [**BackgroundTaskBuilder.Register**](https://msdn.microsoft.com/library/windows/apps/br224772) method.\n\n> **Note**  Background task registration parameters are validated at the time of registration. An error is returned if any of the registration parameters are invalid. Ensure that your app gracefully handles scenarios where background task registration fails - if instead your app depends on having a valid registration object after attempting to register a task, it may crash.\n\nThe following example either returns the existing task, or adds code that registers the background task (including the optional system condition if present):\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n> public static BackgroundTaskRegistration RegisterBackgroundTask(\n>                                                 string taskEntryPoint, \n>                                                 string name,\n>                                                 IBackgroundTrigger trigger,\n>                                                 IBackgroundCondition condition)\n> {\n>     //\n>     // Check for existing registrations of this background task.\n>     //\n> \n>     foreach (var cur in BackgroundTaskRegistration.AllTasks)\n>     {\n> \n>         if (cur.Value.Name == taskName)\n>         {\n>             // \n>             // The task is already registered.\n>             // \n> \n>             return (BackgroundTaskRegistration)(cur.Value);\n>         }\n>     }\n>     \n>     //\n>     // Register the background task.\n>     //\n> \n>     var builder = new BackgroundTaskBuilder();\n> \n>     builder.Name = name;\n>     builder.TaskEntryPoint = taskEntryPoint;\n>     builder.SetTrigger(trigger);\n> \n>     if (condition != null)\n>     {\n> \n>         builder.AddCondition(condition);\n>     }\n> \n>     BackgroundTaskRegistration task = builder.Register();\n> \n>     return task;\n> }\n> ```\n> ```cpp\n> BackgroundTaskRegistration^ MainPage::RegisterBackgroundTask(\n>                                              Platform::String ^ taskEntryPoint,\n>                                              Platform::String ^ taskName,\n>                                              IBackgroundTrigger ^ trigger,\n>                                              IBackgroundCondition ^ condition)\n> {\n> \n>     //\n>     // Check for existing registrations of this background task.\n>     //\n>     \n>     auto iter   = BackgroundTaskRegistration::AllTasks->First();\n>     auto hascur = iter->HasCurrent;\n>     \n>     while (hascur)\n>     {\n>         auto cur = iter->Current->Value;\n>         \n>         if(cur->Name == name)\n>         {\n>             // \n>             // The task is registered.\n>             // \n>             \n>             return (BackgroundTaskRegistration ^)(cur);\n>         }\n>         \n>         hascur = iter->MoveNext();\n>     }\n>     \n>     //\n>     // Register the background task.\n>     //\n> \n>     auto builder = ref new BackgroundTaskBuilder();\n> \n>     builder->Name = name;\n>     builder->TaskEntryPoint = taskEntryPoint;\n>     builder->SetTrigger(trigger);\n> \n>     if (condition != nullptr) {\n>         \n>         builder->AddCondition(condition);\n>     }\n> \n>     BackgroundTaskRegistration ^ task = builder->Register();\n> \n>     return task;\n> }\n> ```\n\n## Complete background task registration utility function\n\n\nThis example shows the completed background task registration function. This function can be used to register most background tasks, with the exception of networking background tasks.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n> //\n> // Register a background task with the specified taskEntryPoint, name, trigger,\n> // and condition (optional).\n> //\n> // taskEntryPoint: Task entry point for the background task.\n> // taskName: A name for the background task.\n> // trigger: The trigger for the background task.\n> // condition: Optional parameter. A conditional event that must be true for the task to fire.\n> //\n> public static BackgroundTaskRegistration RegisterBackgroundTask(string taskEntryPoint,\n>                                                                 string taskName,\n>                                                                 IBackgroundTrigger trigger,\n>                                                                 IBackgroundCondition condition)\n> {\n>     //\n>     // Check for existing registrations of this background task.\n>     //\n> \n>     foreach (var cur in BackgroundTaskRegistration.AllTasks)\n>     {\n> \n>         if (cur.Value.Name == taskName)\n>         {\n>             // \n>             // The task is already registered.\n>             // \n> \n>             return (BackgroundTaskRegistration)(cur.Value);\n>         }\n>     }\n>     \n>     //\n>     // Register the background task.\n>     //\n> \n>     var builder = new BackgroundTaskBuilder();\n> \n>     builder.Name = taskName;\n>     builder.TaskEntryPoint = taskEntryPoint;\n>     builder.SetTrigger(trigger);\n> \n>     if (condition != null)\n>     {\n> \n>         builder.AddCondition(condition);\n>     }\n> \n>     BackgroundTaskRegistration task = builder.Register();\n> \n>     return task;\n> }\n> ```\n> ```cpp\n> //\n> // Register a background task with the specified taskEntryPoint, name, trigger,\n> // and condition (optional).\n> //\n> // taskEntryPoint: Task entry point for the background task.\n> // taskName: A name for the background task.\n> // trigger: The trigger for the background task.\n> // condition: Optional parameter. A conditional event that must be true for the task to fire.\n> //\n> BackgroundTaskRegistration^ MainPage::RegisterBackgroundTask(Platform::String ^ taskEntryPoint,\n>                                                              Platform::String ^ taskName,\n>                                                              IBackgroundTrigger ^ trigger,\n>                                                              IBackgroundCondition ^ condition)\n> {\n> \n>     //\n>     // Check for existing registrations of this background task.\n>     //\n>     \n>     auto iter   = BackgroundTaskRegistration::AllTasks->First();\n>     auto hascur = iter->HasCurrent;\n>     \n>     while (hascur)\n>     {\n>         auto cur = iter->Current->Value;\n>         \n>         if(cur->Name == name)\n>         {\n>             // \n>             // The task is registered.\n>             // \n>             \n>             return (BackgroundTaskRegistration ^)(cur);\n>         }\n>         \n>         hascur = iter->MoveNext();\n>     }\n> \n> \n>     //\n>     // Register the background task.\n>     //\n> \n>     auto builder = ref new BackgroundTaskBuilder();\n> \n>     builder->Name = name;\n>     builder->TaskEntryPoint = taskEntryPoint;\n>     builder->SetTrigger(trigger);\n> \n>     if (condition != nullptr) {\n>         \n>         builder->AddCondition(condition);\n>     }\n> \n>     BackgroundTaskRegistration ^ task = builder->Register();\n> \n>     return task;\n> }\n> ```\n\n> **Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps. If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n \n## Related topics\n\n\n****\n\n* [Create and register a background task](create-and-register-a-background-task.md)\n* [Declare background tasks in the application manifest](declare-background-tasks-in-the-application-manifest.md)\n* [Handle a cancelled background task](handle-a-cancelled-background-task.md)\n* [Monitor background task progress and completion](monitor-background-task-progress-and-completion.md)\n* [Respond to system events with background tasks](respond-to-system-events-with-background-tasks.md)\n* [Set conditions for running a background task](set-conditions-for-running-a-background-task.md)\n* [Update a live tile from a background task](update-a-live-tile-from-a-background-task.md)\n* [Use a maintenance trigger](use-a-maintenance-trigger.md)\n* [Run a background task on a timer](run-a-background-task-on-a-timer-.md)\n* [Guidelines for background tasks](guidelines-for-background-tasks.md)\n\n****\n\n* [Debug a background task](debug-a-background-task.md)\n* [How to trigger suspend, resume, and background events in Windows Store apps (when debugging)](http://go.microsoft.com/fwlink/p/?linkid=254345)\n\n \n\n \n\n\n\n"}