<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">0ad8e79c0a11ef315703c3585aa08e17dd47a33d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\flipview.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">5315b62f85f73b40c57e1a6eb81931598efacf9e</mda:meta><mda:meta type="olxliffhash">3ca6de67623abe8ee306fcf7dda27b5b725a206c</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Displays images in a collection, such as photos in an album or items in a product details page, one image at a time.</source>
					<target>Displays images in a collection, such as photos in an album or items in a product details page, one image at a time.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Guidelines for flip view controls</source>
					<target>Guidelines for flip view controls</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Flip view</source>
					<target>Flip view</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Use a flip view for browsing images or other items in a collection, such as photos in an album or items in a product details page, one item at a time.</source>
					<target>Use a flip view for browsing images or other items in a collection, such as photos in an album or items in a product details page, one item at a time.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>For touch devices, swiping across an item moves through the collection.</source>
					<target>For touch devices, swiping across an item moves through the collection.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>For a mouse, navigation buttons appear on mouse hover.</source>
					<target>For a mouse, navigation buttons appear on mouse hover.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>For a keyboard, arrow keys move through the collection.</source>
					<target>For a keyboard, arrow keys move through the collection.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>FlipView class</source>
					<target>FlipView class</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>ItemsSource</source>
					<target>ItemsSource</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>ItemTemplate</source>
					<target>ItemTemplate</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Is this the right control?</source>
					<target>Is this the right control?</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Flip view is best for perusing images in small to medium collections (up to 25 or so items).</source>
					<target>Flip view is best for perusing images in small to medium collections (up to 25 or so items).</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Examples of such collections include items in a product details page or photos in a photo album.</source>
					<target>Examples of such collections include items in a product details page or photos in a photo album.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Although we don't recommend flip view for most large collections, the control is common for viewing individual images in a photo album.</source>
					<target>Although we don't recommend flip view for most large collections, the control is common for viewing individual images in a photo album.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Horizontal browsing, starting at the left-most item and flipping right, is the typical layout for a flip view.</source>
					<target>Horizontal browsing, starting at the left-most item and flipping right, is the typical layout for a flip view.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This layout works well in either portrait or landscape orientation on all devices:</source>
					<target>This layout works well in either portrait or landscape orientation on all devices:</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Example of horizontal flip view layout</source>
					<target>Example of horizontal flip view layout</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>A flip view can also be browsed vertically:</source>
					<target>A flip view can also be browsed vertically:</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Example of vertical flip view</source>
					<target>Example of vertical flip view</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Create a flip view</source>
					<target>Create a flip view</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>FlipView is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsControl</pc>, so it can contain a collection of items of any type.</source>
					<target>FlipView is an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsControl</pc>, so it can contain a collection of items of any type.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.items.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemssource.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To populate the view, add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection, or set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsSource</pc></pc> property to a data source.</source>
					<target>To populate the view, add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection, or set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ItemsSource</pc></pc> property to a data source.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>By default, a data item is displayed in the flip view as the string representation of the data object it's bound to.</source>
					<target>By default, a data item is displayed in the flip view as the string representation of the data object it's bound to.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.datatemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To specify exactly how items in the flip view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc> to define the layout of controls used to display an individual item.</source>
					<target>To specify exactly how items in the flip view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc> to define the layout of controls used to display an individual item.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The controls in the layout can be bound to properties of a data object, or have content defined inline.</source>
					<target>The controls in the layout can be bound to properties of a data object, or have content defined inline.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You assign the DataTemplate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the FlipView.</source>
					<target>You assign the DataTemplate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the FlipView.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Add items to the Items collection</source>
					<target>Add items to the Items collection</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.items.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection using XAML or code.</source>
					<target>You can add items to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Items</pc></pc> collection using XAML or code.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>You typically add items this way if you have a small number of items that don't change and are easily defined in XAML, or if you generate the items in code at run time.</source>
					<target>You typically add items this way if you have a small number of items that don't change and are easily defined in XAML, or if you generate the items in code at run time.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Here's a flip view with items defined inline.</source>
					<target>Here's a flip view with items defined inline.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.flipviewitem.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When you add items to a flip view they are automatically placed in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlipViewItem</pc></pc> container.</source>
					<target>When you add items to a flip view they are automatically placed in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FlipViewItem</pc></pc> container.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemcontainerstyle.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To change how an item is displayed you can apply a style to the item container by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemContainerStyle</pc></pc> property.</source>
					<target>To change how an item is displayed you can apply a style to the item container by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemContainerStyle</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>When you define the items in XAML, they are automatically added to the Items collection.</source>
					<target>When you define the items in XAML, they are automatically added to the Items collection.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Set the items source</source>
					<target>Set the items source</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>You typically use a flip view to display data from a source such as a database or the Internet.</source>
					<target>You typically use a flip view to display data from a source such as a database or the Internet.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemssource.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To populate a flip view from a data source, you set its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> property to a collection of data items.</source>
					<target>To populate a flip view from a data source, you set its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> property to a collection of data items.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Here, the flip view's ItemsSource is set in code directly to an instance of a collection.</source>
					<target>Here, the flip view's ItemsSource is set in code directly to an instance of a collection.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>You can also bind the ItemsSource property to a collection in XAML.</source>
					<target>You can also bind the ItemsSource property to a collection in XAML.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../data-binding/data-binding-quickstart.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding with XAML</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding with XAML</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.data.collectionviewsource.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`itemsViewSource`</data>
				</originalData>
				<segment state="initial">
					<source>Here, the ItemsSource is bound to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> named <ph dataRef="id5" id="ph1" />.</source>
					<target>Here, the ItemsSource is bound to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> named <ph dataRef="id5" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />You can populate a flip view either by adding items to its Items collection, or by setting its ItemsSource property, but you can't use both ways at the same time.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />You can populate a flip view either by adding items to its Items collection, or by setting its ItemsSource property, but you can't use both ways at the same time.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>If you set the ItemsSource property and you add an item in XAML, the added item is ignored.</source>
					<target>If you set the ItemsSource property and you add an item in XAML, the added item is ignored.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>If you set the ItemsSource property and you add an item to the Items collection in code, an exception is thrown.</source>
					<target>If you set the ItemsSource property and you add an item to the Items collection in code, an exception is thrown.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Specify the look of the items</source>
					<target>Specify the look of the items</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>By default, a data item is displayed in the flip view as the string representation of the data object it's bound to.</source>
					<target>By default, a data item is displayed in the flip view as the string representation of the data object it's bound to.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>You typically want to show a more rich presentation of your data.</source>
					<target>You typically want to show a more rich presentation of your data.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.datatemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To specify exactly how items in the flip view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc>.</source>
					<target>To specify exactly how items in the flip view are displayed, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataTemplate</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>The XAML in the DataTemplate defines the layout and appearance of controls used to display an individual item.</source>
					<target>The XAML in the DataTemplate defines the layout and appearance of controls used to display an individual item.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The controls in the layout can be bound to properties of a data object, or have content defined inline.</source>
					<target>The controls in the layout can be bound to properties of a data object, or have content defined inline.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.itemscontrol.itemtemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The DataTemplate is assigned to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the FlipView control.</source>
					<target>The DataTemplate is assigned to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemTemplate</pc></pc> property of the FlipView control.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>In this example, the ItemTemplate of a FlipView is defined inline.</source>
					<target>In this example, the ItemTemplate of a FlipView is defined inline.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>An overlay is added to the image to display the image name.</source>
					<target>An overlay is added to the image to display the image name.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Here's what the layout defined by the data template looks like.</source>
					<target>Here's what the layout defined by the data template looks like.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Flip view data template.</source>
					<target>Flip view data template.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Set the orientation of the flip view</source>
					<target>Set the orientation of the flip view</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>By default, the flip view flips horizontally.</source>
					<target>By default, the flip view flips horizontally.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.itemscontrol.itemspanel.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To make the it flip vertically, use a stack panel with a vertical orientation as the flip view's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPanel</pc></pc>.</source>
					<target>To make the it flip vertically, use a stack panel with a vertical orientation as the flip view's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPanel</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>This example shows how to use a stack panel with a vertical orientation as the ItemsPanel of a FlipView.</source>
					<target>This example shows how to use a stack panel with a vertical orientation as the ItemsPanel of a FlipView.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Here's what the flip view looks like with a vertical orientation.</source>
					<target>Here's what the flip view looks like with a vertical orientation.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Example of vertical flip view</source>
					<target>Example of vertical flip view</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Adding a context indicator</source>
					<target>Adding a context indicator</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>A context indicator in a flip view provides a useful point of reference.</source>
					<target>A context indicator in a flip view provides a useful point of reference.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>The dots in a standard context indicator aren't interactive.</source>
					<target>The dots in a standard context indicator aren't interactive.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>As seen in this example, the best placement is usually centered and below the gallery:</source>
					<target>As seen in this example, the best placement is usually centered and below the gallery:</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Example of a page indicator</source>
					<target>Example of a page indicator</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>For larger collections (10-25 items), consider using an indicator that provides more context, such as a film strip of thumbnails.</source>
					<target>For larger collections (10-25 items), consider using an indicator that provides more context, such as a film strip of thumbnails.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Unlike a context indicator that uses simple dots, each thumbnail in the film strip shows a small version of the corresponding image and should be selectable:</source>
					<target>Unlike a context indicator that uses simple dots, each thumbnail in the film strip shows a small version of the corresponding image and should be selectable:</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Example of context indicator</source>
					<target>Example of context indicator</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Recommendations</source>
					<target>Recommendations</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Flip views work best for collections of up to 25 or so items.</source>
					<target>Flip views work best for collections of up to 25 or so items.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Avoid using a flip view control for larger collections, as the repetitive motion of flipping through each item can be tedious.</source>
					<target>Avoid using a flip view control for larger collections, as the repetitive motion of flipping through each item can be tedious.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>An exception would be for photo albums, which often have hundreds or thousands of images.</source>
					<target>An exception would be for photo albums, which often have hundreds or thousands of images.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Photo albums almost always switch to a flip view once a photo has been selected in the grid view layout.</source>
					<target>Photo albums almost always switch to a flip view once a photo has been selected in the grid view layout.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](lists.md)</data>
				</originalData>
				<segment state="initial">
					<source>For other large collections, consider a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List view or grid view</pc>.</source>
					<target>For other large collections, consider a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List view or grid view</pc>.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>For context indicators:</source>
					<target>For context indicators:</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>The order of dots (or whichever visual marker you choose) works best when centered and below a horizontally-panning gallery.</source>
					<target>The order of dots (or whichever visual marker you choose) works best when centered and below a horizontally-panning gallery.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>If you want a context indicator in a vertically-panning gallery, it works best centered and to the right of the images.</source>
					<target>If you want a context indicator in a vertically-panning gallery, it works best centered and to the right of the images.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>The highlighted dot indicates the current item.</source>
					<target>The highlighted dot indicates the current item.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Usually the highlighted dot is white and the other dots are gray.</source>
					<target>Usually the highlighted dot is white and the other dots are gray.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>The number of dots can vary, but don't have so many that the user might struggle to find his or her place - 10 dots is usually the maximum number to show.</source>
					<target>The number of dots can vary, but don't have so many that the user might struggle to find his or her place - 10 dots is usually the maximum number to show.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Globalization and localization checklist</source>
					<target>Globalization and localization checklist</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Bi-directional considerations</source>
					<target>Bi-directional considerations</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Use standard mirroring for RTL languages.</source>
					<target>Use standard mirroring for RTL languages.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The back and forward controls should be based on the language's direction, so for RTL languages, the right button should navigate backwards and the left button should navigate forward.</source>
					<target>The back and forward controls should be based on the language's direction, so for RTL languages, the right button should navigate backwards and the left button should navigate forward.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Guidelines for lists</source>
					<target>Guidelines for lists</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>FlipView class (XAML)</source>
					<target>FlipView class (XAML)</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>CarouselPanel class (XAML)</source>
					<target>CarouselPanel class (XAML)</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>