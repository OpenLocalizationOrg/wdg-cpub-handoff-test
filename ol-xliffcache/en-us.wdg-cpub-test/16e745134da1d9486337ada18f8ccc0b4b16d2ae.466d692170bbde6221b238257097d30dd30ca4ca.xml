{"nodes":[{"pos":[66,227],"content":"This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.","pos":[0,161]}]},{"pos":[235,268],"content":"Adaptive Streaming with PlayReady","needQuote":true,"needEscape":true,"nodes":[{"content":"Adaptive Streaming with PlayReady","pos":[0,33]}]},{"content":"Adaptive Streaming with PlayReady","pos":[276,309]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[311,349]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[350,445],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"\\[Some information relates to pre-released product which may be substantially modified before it's commercially released.","pos":[447,568]},{"content":"Microsoft makes no warranties, express or implied, with respect to the information provided here.\\]","pos":[569,668]},{"content":"This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.","pos":[670,831]},{"content":"This feature currently supports playback of Http Live Streaming (HLS) and Dynamic Streaming over HTTP (DASH) content.","pos":[832,949]},{"content":"This article only deals with the aspects of adaptive streaming specific to PlayReady.","pos":[951,1036]},{"content":"For information about implementing adaptive streaming in general, see <bpt id=\"p1\">[</bpt>Adaptive Streaming<ept id=\"p1\">](adaptive-streaming.md)</ept>.","pos":[1037,1151],"source":" For information about implementing adaptive streaming in general, see [Adaptive Streaming](adaptive-streaming.md)."},{"content":"You will need the following using statements:","pos":[1153,1198]},{"pos":[1557,1679],"content":"The <bpt id=\"p1\">**</bpt>LicenseRequest<ept id=\"p1\">**</ept> namespace is from <bpt id=\"p2\">**</bpt>CommonLicenseRequest.cs<ept id=\"p2\">**</ept>, a PlayReady file provided by Microsoft to licensees.","source":"The **LicenseRequest** namespace is from **CommonLicenseRequest.cs**, a PlayReady file provided by Microsoft to licensees."},{"content":"You will need to declare a few global variables:","pos":[1681,1729]},{"content":"You will also want to declare the following constant:","pos":[1934,1987]},{"content":"Setting up the MediaProtectionManager","pos":[2080,2117]},{"content":"To add PlayReady content protection to your UWP app, you will need to set up a <bpt id=\"p1\">[</bpt>MediaProtectionManager<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept> object.","pos":[2119,2288],"source":"To add PlayReady content protection to your UWP app, you will need to set up a [MediaProtectionManager](https://msdn.microsoft.com/library/windows/apps/br207040) object."},{"content":"You do this when initializing your <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AdaptiveMediaSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept> object.","pos":[2289,2415],"source":" You do this when initializing your [**AdaptiveMediaSource**](https://msdn.microsoft.com/library/windows/apps/dn946912) object."},{"pos":[2417,2529],"content":"The following code sets up a <bpt id=\"p1\">[</bpt>MediaProtectionManager<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept>:","source":"The following code sets up a [MediaProtectionManager](https://msdn.microsoft.com/library/windows/apps/br207040):"},{"content":"This code can simply be copied to your app, since it is mandatory for setting up content protection.","pos":[3590,3690]},{"content":"The <bpt id=\"p1\">[</bpt>ComponentLoadFailed<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207041)</ept> event is fired when the load of binary data fails.","pos":[3692,3826],"source":"The [ComponentLoadFailed](https://msdn.microsoft.com/library/windows/apps/br207041) event is fired when the load of binary data fails."},{"content":"We need to add an event handler to handle this, signaling that the load did not complete:","pos":[3827,3916]},{"content":"Similarly, we need to add an event handler for the <bpt id=\"p1\">[</bpt>ServiceRequested<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207045)</ept> event, which fires when a service is requested.","pos":[4095,4270],"source":"Similarly, we need to add an event handler for the [ServiceRequested](https://msdn.microsoft.com/library/windows/apps/br207045) event, which fires when a service is requested."},{"content":"This code checks what kind of request it is, and responds appropriately:","pos":[4271,4343]},{"content":"Individualization service requests","pos":[5169,5203]},{"content":"The following code reactively makes a PlayReady individualization service request.","pos":[5205,5287]},{"content":"We pass in the request as a parameter to the function.","pos":[5288,5342]},{"content":"We surround the call in a try/catch block, and if there are no exceptions, we say the request completed successfully:","pos":[5343,5460]},{"pos":[6317,6535],"content":"Alternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling <ph id=\"ph1\">`ReactiveIndivRequest`</ph> in <ph id=\"ph2\">`ProtectionManager_ServiceRequested`</ph>:","source":"Alternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling `ReactiveIndivRequest` in `ProtectionManager_ServiceRequested`:"},{"content":"License acquisition service requests","pos":[6774,6810]},{"content":"If instead the request was a <bpt id=\"p1\">[</bpt>PlayReadyLicenseAcquisitionServiceRequest<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn986285)</ept>, we call the below function to request and acquire the PlayReady license.","pos":[6812,7016],"source":"If instead the request was a [PlayReadyLicenseAcquisitionServiceRequest](https://msdn.microsoft.com/library/windows/apps/dn986285), we call the below function to request and acquire the PlayReady license."},{"content":"We tell the MediaProtectionServiceCompletion object that we passed in whether the request was successful or not, and we complete the request:","pos":[7017,7158]},{"content":"Initializing the AdaptiveMediaSource","pos":[9700,9736]},{"content":"Finally, you will need a function to initialize the <bpt id=\"p1\">[</bpt>AdaptiveMediaSource<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept>, created from a given <bpt id=\"p2\">[</bpt>Uri<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx)</ept> and <bpt id=\"p3\">[</bpt>MediaElement<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242926)</ept>.","pos":[9738,10045],"source":"Finally, you will need a function to initialize the [AdaptiveMediaSource](https://msdn.microsoft.com/library/windows/apps/dn946912), created from a given [Uri](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx) and [MediaElement](https://msdn.microsoft.com/library/windows/apps/br242926)."},{"content":"The <bpt id=\"p1\">**</bpt>Uri<ept id=\"p1\">**</ept> should be the link to the media file (HLS or DASH); the <bpt id=\"p2\">**</bpt>MediaElement<ept id=\"p2\">**</ept> should be defined in your XAML.","pos":[10046,10162],"source":" The **Uri** should be the link to the media file (HLS or DASH); the **MediaElement** should be defined in your XAML."},{"content":"You can call this function in whichever event handles the start of adaptive streamingâ€”for instance, in a button click event.","pos":[10599,10723]}],"content":"---\nms.assetid: BF877F23-1238-4586-9C16-246F3F25AE35\ndescription: This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.\ntitle: Adaptive Streaming with PlayReady\n---\n\n# Adaptive Streaming with PlayReady\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\\[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\\]\n\nThis article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app. This feature currently supports playback of Http Live Streaming (HLS) and Dynamic Streaming over HTTP (DASH) content.\n\nThis article only deals with the aspects of adaptive streaming specific to PlayReady. For information about implementing adaptive streaming in general, see [Adaptive Streaming](adaptive-streaming.md).\n\nYou will need the following using statements:\n\n```csharp\nusing LicenseRequest;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Runtime.InteropServices;\nusing System.Threading.Tasks;\nusing Windows.Foundation.Collections;\nusing Windows.Media.Protection;\nusing Windows.Media.Protection.PlayReady;\nusing Windows.Media.Streaming.Adaptive;\nusing Windows.UI.Xaml.Controls;\n```\n\nThe **LicenseRequest** namespace is from **CommonLicenseRequest.cs**, a PlayReady file provided by Microsoft to licensees.\n\nYou will need to declare a few global variables:\n\n```csharp\nprivate AdaptiveMediaSource ams = null;\nprivate MediaProtectionManager protectionManager = null;\nprivate string playReadyLicenseUrl = \"\";\nprivate string playReadyChallengeCustomData = \"\";\n```\n\nYou will also want to declare the following constant:\n\n```csharp\nprivate const int MSPR_E_CONTENT_ENABLING_ACTION_REQUIRED = -2147174251;\n```\n\n## Setting up the MediaProtectionManager\n\nTo add PlayReady content protection to your UWP app, you will need to set up a [MediaProtectionManager](https://msdn.microsoft.com/library/windows/apps/br207040) object. You do this when initializing your [**AdaptiveMediaSource**](https://msdn.microsoft.com/library/windows/apps/dn946912) object.\n\nThe following code sets up a [MediaProtectionManager](https://msdn.microsoft.com/library/windows/apps/br207040):\n\n```csharp\nprivate void SetUpProtectionManager(ref MediaElement mediaElement)\n{\n    protectionManager = new MediaProtectionManager();\n\n    protectionManager.ComponentLoadFailed += \n        new ComponentLoadFailedEventHandler(ProtectionManager_ComponentLoadFailed);\n\n    protectionManager.ServiceRequested += \n        new ServiceRequestedEventHandler(ProtectionManager_ServiceRequested);\n\n    PropertySet cpSystems = new PropertySet();\n\n    cpSystems.Add(\n        \"{F4637010-03C3-42CD-B932-B48ADF3A6A54}\", \n        \"Windows.Media.Protection.PlayReady.PlayReadyWinRTTrustedInput\");\n\n    protectionManager.Properties.Add(\"Windows.Media.Protection.MediaProtectionSystemIdMapping\", cpSystems);\n\n    protectionManager.Properties.Add(\n        \"Windows.Media.Protection.MediaProtectionSystemId\", \n        \"{F4637010-03C3-42CD-B932-B48ADF3A6A54}\");\n\n    protectionManager.Properties.Add(\n        \"Windows.Media.Protection.MediaProtectionContainerGuid\", \n        \"{9A04F079-9840-4286-AB92-E65BE0885F95}\");\n\n    mediaElement.ProtectionManager = protectionManager;\n}\n```\n\nThis code can simply be copied to your app, since it is mandatory for setting up content protection.\n\nThe [ComponentLoadFailed](https://msdn.microsoft.com/library/windows/apps/br207041) event is fired when the load of binary data fails. We need to add an event handler to handle this, signaling that the load did not complete:\n\n```csharp\nprivate void ProtectionManager_ComponentLoadFailed(\n    MediaProtectionManager sender, \n    ComponentLoadFailedEventArgs e)\n{\n    e.Completion.Complete(false);\n}\n```\n\nSimilarly, we need to add an event handler for the [ServiceRequested](https://msdn.microsoft.com/library/windows/apps/br207045) event, which fires when a service is requested. This code checks what kind of request it is, and responds appropriately:\n\n```csharp\nprivate async void ProtectionManager_ServiceRequested(\n    MediaProtectionManager sender, \n    ServiceRequestedEventArgs e)\n{\n    if (e.Request is PlayReadyIndividualizationServiceRequest)\n    {\n        PlayReadyIndividualizationServiceRequest IndivRequest = \n            e.Request as PlayReadyIndividualizationServiceRequest;\n\n        bool bResultIndiv = await ReactiveIndivRequest(IndivRequest, e.Completion);\n    }\n    else if (e.Request is PlayReadyLicenseAcquisitionServiceRequest)\n    {\n        PlayReadyLicenseAcquisitionServiceRequest licenseRequest = \n            e.Request as PlayReadyLicenseAcquisitionServiceRequest;\n\n        LicenseAcquisitionRequest(\n            licenseRequest, \n            e.Completion, \n            playReadyLicenseUrl, \n            playReadyChallengeCustomData);\n    }\n}\n```\n\n## Individualization service requests\n\nThe following code reactively makes a PlayReady individualization service request. We pass in the request as a parameter to the function. We surround the call in a try/catch block, and if there are no exceptions, we say the request completed successfully:\n\n```csharp\nasync Task<bool> ReactiveIndivRequest(\n    PlayReadyIndividualizationServiceRequest IndivRequest, \n    MediaProtectionServiceCompletion CompletionNotifier)\n{\n    bool bResult = false;\n    Exception exception = null;\n\n    try\n    {\n        await IndivRequest.BeginServiceRequest();\n    }\n    catch (Exception ex)\n    {\n        exception = ex;\n    }\n    finally\n    {\n        if (exception == null)\n        {\n            bResult = true;\n        }\n        else\n        {\n            COMException comException = exception as COMException;\n            if (comException != null &amp;&amp; comException.HResult == MSPR_E_CONTENT_ENABLING_ACTION_REQUIRED)\n            {\n                IndivRequest.NextServiceRequest();\n            }\n        }\n    }\n\n    if (CompletionNotifier != null) CompletionNotifier.Complete(bResult);\n    return bResult;\n}\n```\n\nAlternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling `ReactiveIndivRequest` in `ProtectionManager_ServiceRequested`:\n\n```csharp\nasync void ProActiveIndivRequest()\n{\n    PlayReadyIndividualizationServiceRequest indivRequest = new PlayReadyIndividualizationServiceRequest();\n    bool bResultIndiv = await ReactiveIndivRequest(indivRequest, null);\n}\n```\n\n## License acquisition service requests\n\nIf instead the request was a [PlayReadyLicenseAcquisitionServiceRequest](https://msdn.microsoft.com/library/windows/apps/dn986285), we call the below function to request and acquire the PlayReady license. We tell the MediaProtectionServiceCompletion object that we passed in whether the request was successful or not, and we complete the request:\n\n```csharp\nasync void LicenseAcquisitionRequest(\n    PlayReadyLicenseAcquisitionServiceRequest licenseRequest, \n    MediaProtectionServiceCompletion CompletionNotifier, \n    string Url, \n    string ChallengeCustomData)\n{\n    bool bResult = false;\n    string ExceptionMessage = string.Empty;\n\n    try\n    {\n        if (!string.IsNullOrEmpty(Url))\n        {\n            if (!string.IsNullOrEmpty(ChallengeCustomData))\n            {\n                System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();\n                byte[] b = encoding.GetBytes(ChallengeCustomData);\n                licenseRequest.ChallengeCustomData = Convert.ToBase64String(b, 0, b.Length);\n            }\n\n            PlayReadySoapMessage soapMessage = licenseRequest.GenerateManualEnablingChallenge();\n\n            byte[] messageBytes = soapMessage.GetMessageBody();\n            HttpContent httpContent = new ByteArrayContent(messageBytes);\n\n            IPropertySet propertySetHeaders = soapMessage.MessageHeaders;\n\n            foreach (string strHeaderName in propertySetHeaders.Keys)\n            {\n                string strHeaderValue = propertySetHeaders[strHeaderName].ToString();\n\n                if (strHeaderName.Equals(\"Content-Type\", StringComparison.OrdinalIgnoreCase))\n                {\n                    httpContent.Headers.ContentType = MediaTypeHeaderValue.Parse(strHeaderValue);\n                }\n                else\n                {\n                    httpContent.Headers.Add(strHeaderName.ToString(), strHeaderValue);\n                }\n            }\n\n            CommonLicenseRequest licenseAcquision = new CommonLicenseRequest();\n\n            HttpContent responseHttpContent = \n                await licenseAcquision.AcquireLicense(new Uri(Url), httpContent);\n\n            if (responseHttpContent != null)\n            {\n                Exception exResult = licenseRequest.ProcessManualEnablingResponse(\n                                         await responseHttpContent.ReadAsByteArrayAsync());\n\n                if (exResult != null)\n                {\n                    throw exResult;\n                }\n                bResult = true;\n            }\n            else\n            {\n                ExceptionMessage = licenseAcquision.GetLastErrorMessage();\n            }\n        }\n        else\n        {\n            await licenseRequest.BeginServiceRequest();\n            bResult = true;\n        }\n    }\n    catch (Exception e)\n    {\n        ExceptionMessage = e.Message;\n    }\n\n    CompletionNotifier.Complete(bResult);\n}\n```\n\n## Initializing the AdaptiveMediaSource\n\nFinally, you will need a function to initialize the [AdaptiveMediaSource](https://msdn.microsoft.com/library/windows/apps/dn946912), created from a given [Uri](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx) and [MediaElement](https://msdn.microsoft.com/library/windows/apps/br242926). The **Uri** should be the link to the media file (HLS or DASH); the **MediaElement** should be defined in your XAML.\n\n```csharp\nasync private void InitializeAdaptiveMediaSource(System.Uri uri, MediaElement m)\n{\n    AdaptiveMediaSourceCreationResult result = await AdaptiveMediaSource.CreateFromUriAsync(uri);\n    if (result.Status == AdaptiveMediaSourceCreationStatus.Success)\n    {\n        ams = result.MediaSource;\n        SetUpProtectionManager(ref m);\n        m.SetMediaStreamSource(ams);\n    }\n    else\n    {\n        // Error handling\n    }\n}\n```\n\nYou can call this function in whichever event handles the start of adaptive streamingâ€”for instance, in a button click event.\n\n \n\n \n\n\n\n\n"}