{"nodes":[{"pos":[60,74],"content":"Bluetooth GATT","needQuote":true,"nodes":[{"content":"Bluetooth GATT","pos":[0,14]}]},{"content":"This article provides an overview of Bluetooth Generic Attribute Profile (GATT) for Universal Windows Platform (UWP) apps, along with sample code for three common GATT scenarios: retrieving Bluetooth data, controlling a Bluetooth LE thermometer device, and controlling the presentation of Bluetooth LE device data.","pos":[89,403]},{"content":"Bluetooth GATT","pos":[411,425]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[427,465]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[466,561],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"** Important APIs","pos":[563,580]},{"content":"Windows.Devices.Bluetooth","pos":[589,614]},{"content":"Windows.Devices.Bluetooth.GenericAttributeProfile","pos":[683,732]},{"content":"This article provides an overview of Bluetooth Generic Attribute Profile (GATT) for Universal Windows Platform (UWP) apps, along with sample code for three common GATT scenarios: retrieving Bluetooth data, controlling a Bluetooth LE thermometer device, and controlling the presentation of Bluetooth LE device data.","pos":[795,1109]},{"content":"Overview","pos":[1114,1122]},{"content":"Developers can use the APIs in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Bluetooth.GenericAttributeProfile<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn297685)</ept> namespace to access Bluetooth LE services, descriptors, and characteristics.","pos":[1124,1349],"source":"Developers can use the APIs in the [**Windows.Devices.Bluetooth.GenericAttributeProfile**](https://msdn.microsoft.com/library/windows/apps/Dn297685) namespace to access Bluetooth LE services, descriptors, and characteristics."},{"content":"Bluetooth LE devices expose their functionality through a collection of:","pos":[1350,1422]},{"content":"Primary Services","pos":[1428,1444]},{"content":"Included Services","pos":[1449,1466]},{"content":"Characteristics","pos":[1471,1486]},{"content":"Descriptors","pos":[1491,1502]},{"content":"Primary services define the functional contract of the LE device and contain a collection of characteristics that define the service.","pos":[1504,1637]},{"content":"Those characteristics, in turn, contain descriptors that describe the characteristics.","pos":[1638,1724]},{"content":"The Bluetooth GATT APIs expose objects and functions, rather than access to the raw transport.","pos":[1726,1820]},{"content":"At the driver level primary services are enumerated as Child Device Nodes of the Bluetooth LE device using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Enumeration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225459)</ept> APIs.","pos":[1821,2029],"source":" At the driver level primary services are enumerated as Child Device Nodes of the Bluetooth LE device using the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/BR225459) APIs."},{"content":"The Bluetooth GATT APIs also enable developers to work with Bluetooth LE devices with the ability to perform the following tasks:","pos":[2031,2160]},{"content":"Perform Service / Characteristic / Descriptor discovery","pos":[2166,2221]},{"content":"Read and Write Characteristic / Descriptor values","pos":[2226,2275]},{"content":"Register a callback for the Characteristic ValueChanged event","pos":[2280,2341]},{"content":"The Bluetooth GATT APIs simplify development by dealing with common properties and providing reasonable defaults to aid in device management and configuration.","pos":[2343,2502]},{"content":"They provide a means for developers to access functionality of a Bluetooth LE device from an app.","pos":[2503,2600]},{"content":"To create a useful implementation a developer has to have prior knowledge of the GATT services and characteristics the application intends to consume, and to process the specific characteristic values such that the binary data provided by the API is transformed into useful data before being presented to the user.","pos":[2602,2916]},{"content":"The Bluetooth GATT APIs expose only the basic primitives required to communicate with a Bluetooth LE device.","pos":[2917,3025]},{"content":"To interpret the data, an application profile must be defined, either by a Bluetooth SIG standard profile, or a custom profile implemented by a device vendor.","pos":[3026,3184]},{"content":"A profile creates a binding contract between the application and the device, as to what the exchanged data represents and how to interpret it.","pos":[3185,3327]},{"pos":[3329,3460],"content":"For convenience the Bluetooth SIG maintains a <bpt id=\"p1\">[</bpt>list of public profiles<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=317977)</ept> available.","source":"For convenience the Bluetooth SIG maintains a [list of public profiles](http://go.microsoft.com/fwlink/p/?LinkID=317977) available."},{"content":"Retrieve Bluetooth data","pos":[3465,3488]},{"content":"In this example, the app consumes temperature measurements from a Bluetooth device that implements the Bluetooth LE Health Thermometer Service.","pos":[3490,3633]},{"content":"The app specifies that it wants to be notified when a new temperature measurement is available.","pos":[3634,3729]},{"content":"By registering an event handler for the \"Thermometer Characteristic Value Changed\" event, the app will receive characteristic value changed event notifications while it is running in the foreground.","pos":[3730,3928]},{"content":"Note that when the app is suspended, it must release all device resources and when it resumes, it must perform device enumeration and initialization once again.","pos":[3930,4090]},{"content":"Control a Bluetooth LE thermometer device","pos":[7961,8002]},{"content":"In this example, an UWP app acts as a controller for a fictitious Bluetooth LE Thermometer device.","pos":[8004,8102]},{"content":"The device also declares a format characteristic which allows users to retrieve the value reading in either Celsius or Fahrenheit degrees, in addition to the standard characteristics of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>HealthThermometer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn297603)</ept> profile.","pos":[8103,8383],"source":" The device also declares a format characteristic which allows users to retrieve the value reading in either Celsius or Fahrenheit degrees, in addition to the standard characteristics of the [**HealthThermometer**](https://msdn.microsoft.com/library/windows/apps/Dn297603) profile."},{"content":"The app uses reliable write transactions to make sure that the format and measurement interval are set as a single value.","pos":[8384,8505]},{"content":"Control the presentation of Bluetooth LE device data","pos":[12351,12403]},{"content":"A Bluetooth LE devices may expose a battery service that provides the current battery level to the user.","pos":[12405,12509]},{"content":"The battery service includes an optional <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PresentationFormats<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn263742)</ept> descriptor which allows some flexibility in interpretation of the battery level data.","pos":[12510,12720],"source":" The battery service includes an optional [**PresentationFormats**](https://msdn.microsoft.com/library/windows/apps/Dn263742) descriptor which allows some flexibility in interpretation of the battery level data."},{"content":"This scenario provides example of an app that works with such a device and uses the <bpt id=\"p1\">**</bpt>PresentationFormats<ept id=\"p1\">**</ept> property to format a characteristic value, before presenting it to the user.","pos":[12721,12905],"source":" This scenario provides example of an app that works with such a device and uses the **PresentationFormats** property to format a characteristic value, before presenting it to the user."}],"content":"---\nms.assetid: 28B30708-FE08-4BE9-AE11-5429F963C330\ntitle: Bluetooth GATT\ndescription: \"This article provides an overview of Bluetooth Generic Attribute Profile (GATT) for Universal Windows Platform (UWP) apps, along with sample code for three common GATT scenarios: retrieving Bluetooth data, controlling a Bluetooth LE thermometer device, and controlling the presentation of Bluetooth LE device data.\"\n---\n# Bluetooth GATT\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs\n\n-   [**Windows.Devices.Bluetooth**](https://msdn.microsoft.com/library/windows/apps/Dn263413)\n-   [**Windows.Devices.Bluetooth.GenericAttributeProfile**](https://msdn.microsoft.com/library/windows/apps/Dn297685)\n\nThis article provides an overview of Bluetooth Generic Attribute Profile (GATT) for Universal Windows Platform (UWP) apps, along with sample code for three common GATT scenarios: retrieving Bluetooth data, controlling a Bluetooth LE thermometer device, and controlling the presentation of Bluetooth LE device data.\n\n## Overview\n\nDevelopers can use the APIs in the [**Windows.Devices.Bluetooth.GenericAttributeProfile**](https://msdn.microsoft.com/library/windows/apps/Dn297685) namespace to access Bluetooth LE services, descriptors, and characteristics. Bluetooth LE devices expose their functionality through a collection of:\n\n-   Primary Services\n-   Included Services\n-   Characteristics\n-   Descriptors\n\nPrimary services define the functional contract of the LE device and contain a collection of characteristics that define the service. Those characteristics, in turn, contain descriptors that describe the characteristics.\n\nThe Bluetooth GATT APIs expose objects and functions, rather than access to the raw transport. At the driver level primary services are enumerated as Child Device Nodes of the Bluetooth LE device using the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/BR225459) APIs.\n\nThe Bluetooth GATT APIs also enable developers to work with Bluetooth LE devices with the ability to perform the following tasks:\n\n-   Perform Service / Characteristic / Descriptor discovery\n-   Read and Write Characteristic / Descriptor values\n-   Register a callback for the Characteristic ValueChanged event\n\nThe Bluetooth GATT APIs simplify development by dealing with common properties and providing reasonable defaults to aid in device management and configuration. They provide a means for developers to access functionality of a Bluetooth LE device from an app.\n\nTo create a useful implementation a developer has to have prior knowledge of the GATT services and characteristics the application intends to consume, and to process the specific characteristic values such that the binary data provided by the API is transformed into useful data before being presented to the user. The Bluetooth GATT APIs expose only the basic primitives required to communicate with a Bluetooth LE device. To interpret the data, an application profile must be defined, either by a Bluetooth SIG standard profile, or a custom profile implemented by a device vendor. A profile creates a binding contract between the application and the device, as to what the exchanged data represents and how to interpret it.\n\nFor convenience the Bluetooth SIG maintains a [list of public profiles](http://go.microsoft.com/fwlink/p/?LinkID=317977) available.\n\n## Retrieve Bluetooth data\n\nIn this example, the app consumes temperature measurements from a Bluetooth device that implements the Bluetooth LE Health Thermometer Service. The app specifies that it wants to be notified when a new temperature measurement is available. By registering an event handler for the \"Thermometer Characteristic Value Changed\" event, the app will receive characteristic value changed event notifications while it is running in the foreground.\n\nNote that when the app is suspended, it must release all device resources and when it resumes, it must perform device enumeration and initialization once again.\n\n```csharp\ndouble convertTemperatureData(byte[] temperatureData)\n{\n    // Read temperature data in IEEE 11703 floating point format\n    // temperatureData[0] contains flags about optional data - not used\n    UInt32 mantissa = ((UInt32)temperatureData[3] << 16) |\n        ((UInt32)temperatureData[2] << 8) |\n        ((UInt32)temperatureData[1]);\n\n    Int32 exponent = (Int32)temperatureData[4];\n\n    return mantissa * Math.Pow(10.0, exponent);\n}\n\nasync void Initialize()\n{\n    var themometerServices = await Windows.Devices.Enumeration\n        .DeviceInformation.FindAllAsync(GattDeviceService\n            .GetDeviceSelectorFromUuid(\n                GattServiceUuids.HealthThermometer),\n        null);\n\n    GattDeviceService firstThermometerService = await\n        GattDeviceService.FromIdAsync(themometerServices[0].Id);\n\n    serviceNameTextBlock.Text = \"Using service: \" + \n        themometerServices[0].Name;\n\n    GattCharacteristic thermometerCharacteristic =\n        firstThermometerService.GetCharacteristics(\n            GattCharacteristicUuids.TemperatureMeasurement)[0];\n\n    thermometerCharacteristic.ValueChanged += temperatureMeasurementChanged;\n\n    await thermometerCharacteristic\n        .WriteClientCharacteristicConfigurationDescriptorAsync(\n            GattClientCharacteristicConfigurationDescriptorValue.Notify);\n}\n\nvoid temperatureMeasurementChanged(\n    GattCharacteristic sender,\n    GattValueChangedEventArgs eventArgs)\n{\n    byte[] temperatureData = new byte[eventArgs.CharacteristicValue.Length];\n    Windows.Storage.Streams.DataReader.FromBuffer(\n        eventArgs.CharacteristicValue).ReadBytes(temperatureData);\n\n    var temperatureValue = convertTemperatureData(temperatureData);\n\n    temperatureTextBlock.Text = temperatureValue.ToString();\n}\n```\n\n```cpp\ndouble MainPage::ConvertTemperatureData(\n    const Array<unsigned char>^ temperatureData)\n{\n    unsigned mantissa = ((unsigned)temperatureData[3] << 16) |\n        ((unsigned)temperatureData[2] << 8) |\n        ((unsigned)temperatureData[1]);\n\n    int exponent = (int)temperatureData[4];\n\n    return mantissa * pow(10.0, (double)exponent);\n}\n\nvoid MainPage::Initialize()\n{\n    create_task(DeviceInformation::FindAllAsync(\n        GattDeviceService::GetDeviceSelectorFromUuid(\n            GattServiceUuids::HealthThermometer), \n        nullptr)).then(\n            [this] (DeviceInformationCollection^ thermometerServices) \n    {\n        create_task(GattDeviceService::FromIdAsync(\n            thermometerServices->GetAt(0)->Id))\n            .then([this] (GattDeviceService^ firstThermometerService) \n        {\n            GattCharacteristic^ thermometerCharacteristic = \n                firstThermometerService->GetCharacteristics(\n                    GattCharacteristicUuids::TemperatureMeasurement)\n                        ->GetAt(0);\n\n            thermometerCharacteristic->ValueChanged += \n                ref new TypedEventHandler<\n                    GattCharacteristic^, \n                    GattValueChangedEventArgs^>(\n                        this, &amp;MainPage::TemperatureMeasurementChanged);\n\n            create_task(thermometerCharacteristic->\n                WriteClientCharacteristicConfigurationDescriptorAsync(\n                GattClientCharacteristicConfigurationDescriptorValue\n                    ::Notify));\n        });\n    });\n}\n\n\nvoid MainPage::TemperatureMeasurementChanged(\n    GattCharacteristic^ sender,\n    GattValueChangedEventArgs^ eventArgs)\n{\n    auto temperatureData =  ref new Array<unsigned char>(\n        eventArgs->CharacteristicValue->Length);\n    DataReader::FromBuffer(eventArgs->CharacteristicValue)\n        ->ReadBytes(temperatureData);\n\n    double temperatureValue = ConvertTemperatureData(temperatureData);\n    std::wstringstream str;\n    str << temperatureValue;\n\n    temperatureTextBlock->Text = ref new String(str.str().c_str());\n}\n```\n\n## Control a Bluetooth LE thermometer device\n\nIn this example, an UWP app acts as a controller for a fictitious Bluetooth LE Thermometer device. The device also declares a format characteristic which allows users to retrieve the value reading in either Celsius or Fahrenheit degrees, in addition to the standard characteristics of the [**HealthThermometer**](https://msdn.microsoft.com/library/windows/apps/Dn297603) profile. The app uses reliable write transactions to make sure that the format and measurement interval are set as a single value.\n\n```csharp\n// Uuid of the \"Format\" Characteristic Value\nGuid formatCharacteristicUuid = \n    new Guid(\"{00000000-0000-0000-0000-000000000010}\");\n\n// Constant representing a Fahrenheit scale temperature measurement\nconst byte FahrenheitReading = 1;\nasync void Initialize()\n{\n    var themometerServices = await Windows.Devices.Enumeration\n        .DeviceInformation.FindAllAsync(GattDeviceService\n            .GetDeviceSelectorFromUuid(\n                GattServiceUuids.HealthThermometer),\n        null);\n\n    GattDeviceService thermometerService = await\n        GattDeviceService.FromIdAsync(themometerServices[0].Id);\n\n    serviceNameTextBlock.Text = \"Using service: \" + \n        themometerServices[0].Name;\n\n    GattCharacteristic intervalCharacteristic = thermometerService\n        .GetCharacteristics(GattCharacteristicUuids.MeasurementInterval)[0];\n\n    GattCharacteristic formatCharacteristic = thermometerService\n        .GetCharacteristics(formatCharacteristicUuid)[0];\n\n    GattReliableWriteTransaction gattTransaction = \n        new GattReliableWriteTransaction();\n\n    var writer = new Windows.Storage.Streams.DataWriter();\n\n    // Get a temperature reading every 60 seconds\n    writer.WriteUInt16(60);\n\n    gattTransaction.WriteValue(\n        intervalCharacteristic, \n        writer.DetachBuffer());\n\n    // Get the reading on the Fahrenheit scale\n    writer.WriteByte(FahrenheitReading);\n\n    gattTransaction.WriteValue(\n        formatCharacteristic, \n        writer.DetachBuffer());\n\n    GattCommunicationStatus status = await gattTransaction.CommitAsync();\n\n    if (GattCommunicationStatus.Unreachable == status)\n    {\n        statusTextBlock.Text = \"Writing to your device failed !\";\n    }\n}\n```\n\n```cpp\n// Uuid of the \"Format\" Characteristic Value\nGuid formatCharacteristicUuid(0x00000000, 0x0000, 0x0000, 0x00, 0x00, \n                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x10);\n\n// Constant representing a Fahrenheit scale temperature measurement\nconst unsigned char FAHRENHEIT_READING = 1;\n\nvoid MainPage::Initialize()\n{\n    create_task(DeviceInformation::FindAllAsync(\n        GattDeviceService::GetDeviceSelectorFromUuid(\n            GattServiceUuids::HealthThermometer), \n        nullptr)).then(\n            [this] (DeviceInformationCollection^ thermometerServices) \n    {\n        create_task(GattDeviceService::FromIdAsync(\n            thermometerServices->GetAt(0)->Id)).then([this] (\n                GattDeviceService^ thermometerService) \n        {\n            GattCharacteristic^ intervalCharacteristic = \n                thermometerService->GetCharacteristics(\n                    GattCharacteristicUuids::MeasurementInterval)\n                        ->GetAt(0);\n\n            GattCharacteristic^ formatCharacteristic = \n                thermometerService->GetCharacteristics(\n                    formatCharacteristicUuid)->GetAt(0);\n\n            GattReliableWriteTransaction^ gattTransaction = \n                ref new GattReliableWriteTransaction();\n\n            DataWriter^ writer = ref new DataWriter();\n\n            // Get a temperature reading every 60 seconds\n            writer->WriteUInt16(60);\n\n            gattTransaction->WriteValue(\n                intervalCharacteristic, \n                writer->DetachBuffer());\n\n            writer->WriteByte(FAHRENHEIT_READING);\n\n            gattTransaction->WriteValue(\n                formatCharacteristic, \n                writer->DetachBuffer());\n\n            create_task(gattTransaction->CommitAsync())\n                .then([this] (GattCommunicationStatus status) \n            {\n                if (GattCommunicationStatus::Unreachable == status) \n                { \n                    statusTextBlock->Text = \n                        ref new String(L\"Writing to your device failed !\");\n                }\n            });\n        });\n    });\n\n```\n\n## Control the presentation of Bluetooth LE device data\n\nA Bluetooth LE devices may expose a battery service that provides the current battery level to the user. The battery service includes an optional [**PresentationFormats**](https://msdn.microsoft.com/library/windows/apps/Dn263742) descriptor which allows some flexibility in interpretation of the battery level data. This scenario provides example of an app that works with such a device and uses the **PresentationFormats** property to format a characteristic value, before presenting it to the user.\n\n```csharp\nasync void Initialize()\n{\n    var batteryServices = await Windows.Devices.Enumeration\n        .DeviceInformation.FindAllAsync(GattDeviceService\n            .GetDeviceSelectorFromUuid(GattServiceUuids.Battery),\n        null);\n\n    if (batteryServices.Count > 0)\n    {\n        // Use the first Battery service on the system\n        GattDeviceService batteryService = await GattDeviceService\n            .FromIdAsync(batteryServices[0].Id);\n\n        // Use the first Characteristic of that Service\n        GattCharacteristic batteryLevelCharacteristic =\n            batteryService.GetCharacteristics(\n                GattCharacteristicUuids.BatteryLevel)[0];\n\n        batteryLevelCharacteristic.ValueChanged += batteryLevelChanged;\n    }\n    else\n    {\n        statusTextBlock.Text = \"No Battery services found !\";\n    }\n}\n\nvoid batteryLevelChanged(\n    GattCharacteristic sender,\n    GattValueChangedEventArgs eventArgs)\n{\n    byte levelData = Windows.Storage.Streams.DataReader\n        .FromBuffer(eventArgs.CharacteristicValue).ReadByte();\n\n    double levelValue;\n\n    if (sender.PresentationFormats.Count > 0)\n    {\n        levelValue = levelData * \n            Math.Pow(10.0, sender.PresentationFormats[0].Exponent);\n    }\n    else\n    {\n        levelValue = (double)levelData;\n    }\n\n    batteryLevelTextBlock.Text = levelValue.ToString();\n}\n```\n\n```cpp\nvoid MainPage::Initialize()\n{\n    create_task(DeviceInformation::FindAllAsync(\n        GattDeviceService::GetDeviceSelectorFromUuid(\n            GattServiceUuids::Battery), \n        nullptr)).then([this] (DeviceInformationCollection^ batteryServices) \n    {\n        create_task(GattDeviceService::FromIdAsync(\n            batteryServices->GetAt(0)->Id)).then([this] (\n                GattDeviceService^ batteryService) \n        {\n            GattCharacteristic^ batteryLevelCharacteristic = \n                batteryService->GetCharacteristics(\n                    GattCharacteristicUuids::BatteryLevel)->GetAt(0);\n\n            batteryLevelCharacteristic->ValueChanged += \n                ref new TypedEventHandler<\n                    GattCharacteristic^, \n                    GattValueChangedEventArgs^>\n                    (this, &amp;MainPage::BatteryLevelChanged);\n\n            create_task(batteryLevelCharacteristic\n                ->WriteClientCharacteristicConfigurationDescriptorAsync(\n                GattClientCharacteristicConfigurationDescriptorValue\n                    ::Notify));\n        });\n    });\n}\n\nvoid MainPage::BatteryLevelChanged(\n    GattCharacteristic^ sender,\n    GattValueChangedEventArgs^ eventArgs)\n{\n    unsigned char batteryLevelData = DataReader::FromBuffer(\n        eventArgs->CharacteristicValue)->ReadByte();\n\n    // if this characteristic has a presentation format\n    // use that information to format the value\n    double batteryLevelValue;\n    if (sender->PresentationFormats->Size > 0)\n    {\n        batteryLevelValue = batteryLevelData * \n            pow(10.0, sender->PresentationFormats->GetAt(0)->Exponent);\n    }\n    else\n    {\n        batteryLevelValue = batteryLevelData;\n    }\n\n    std::wstringstream str;\n    str << batteryLevelValue;\n    batteryLevelTextBlock->Text = \n        ref new String(str.str().c_str());\n}\n```\n\n\n\n"}