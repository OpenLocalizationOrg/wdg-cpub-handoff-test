{"nodes":[{"content":"Use the light sensor","pos":[2,22]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[24,62]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[63,158],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[163,177]},{"content":"Windows.Devices.Sensors","pos":[189,212]},{"content":"LightSensor","pos":[281,292]},{"content":"Learn how to use the ambient light sensor to detect changes in lighting.","pos":[355,427]},{"content":"An ambient light sensor is one of the several types of environmental sensors that allow apps to respond to changes in the user's environment.","pos":[429,570]},{"content":"Prerequisites","pos":[575,588]},{"content":"You should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C\\#, and events.","pos":[590,698]},{"content":"The device or emulator that you're using must support an ambient light sensor.","pos":[700,778]},{"content":"Create a simple light-sensor app","pos":[783,815]},{"content":"This section is divided into two subsections.","pos":[817,862]},{"content":"The first subsection will take you through the steps necessary to create a simple light-sensor application from scratch.","pos":[863,983]},{"content":"The following subsection explains the app you have just created.","pos":[984,1048]},{"content":"Instructions","pos":[1055,1067]},{"pos":[1073,1182],"content":"Create a new project, choosing a <bpt id=\"p1\">**</bpt>Blank App (Universal Windows)<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Visual C\\#<ept id=\"p2\">**</ept> project templates.","source":"Create a new project, choosing a **Blank App (Universal Windows)** from the **Visual C\\#** project templates."},{"content":"Open your project's BlankPage.xaml.cs file and replace the existing code with the following.","pos":[1188,1280]},{"content":"You'll need to rename the namespace in the previous snippet with the name you gave your project.","pos":[3753,3849]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>LightingCS<ept id=\"p1\">**</ept>, you'd replace <ph id=\"ph1\">`namespace App1`</ph> with <ph id=\"ph2\">`namespace LightingCS`</ph>.","pos":[3850,3969],"source":" For example, if you created a project named **LightingCS**, you'd replace `namespace App1` with `namespace LightingCS`."},{"content":"Open the file MainPage.xaml and replace the original contents with the following XML.","pos":[3975,4060]},{"content":"You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.","pos":[4883,4994]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>LightingCS<ept id=\"p1\">**</ept>, you'd replace <ph id=\"ph1\">`x:Class=\"App1.MainPage\"`</ph> with <ph id=\"ph2\">`x:Class=\"LightingCS.MainPage\"`</ph>.","pos":[4995,5132],"source":" For example, if you created a project named **LightingCS**, you'd replace `x:Class=\"App1.MainPage\"` with `x:Class=\"LightingCS.MainPage\"`."},{"content":"You should also replace <ph id=\"ph1\">`xmlns:local=\"using:App1\"`</ph> with <ph id=\"ph2\">`xmlns:local=\"using:LightingCS\"`</ph>.","pos":[5133,5222],"source":" You should also replace `xmlns:local=\"using:App1\"` with `xmlns:local=\"using:LightingCS\"`."},{"pos":[5228,5313],"content":"Press F5 or select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Start Debugging<ept id=\"p2\">**</ept> to build, deploy, and run the app.","source":"Press F5 or select **Debug** > **Start Debugging** to build, deploy, and run the app."},{"content":"Once the app is running, you can change the light sensor values by altering the light available to the sensor or using the emulator tools.","pos":[5315,5453]},{"pos":[5459,5581],"content":"Stop the app by returning to Visual Studio and pressing Shift+F5 or select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Stop Debugging<ept id=\"p2\">**</ept> to stop the app.","source":"Stop the app by returning to Visual Studio and pressing Shift+F5 or select **Debug** > **Stop Debugging** to stop the app."},{"content":"Explanation","pos":[5588,5599]},{"content":"The previous example demonstrates how little code you'll need to write in order to integrate light-sensor input in your app.","pos":[5601,5725]},{"pos":[5727,5812],"content":"The app establishes a connection with the default sensor in the <bpt id=\"p1\">**</bpt>BlankPage<ept id=\"p1\">**</ept> method.","source":"The app establishes a connection with the default sensor in the **BlankPage** method."},{"content":"The app establishes the report interval within the <bpt id=\"p1\">**</bpt>BlankPage<ept id=\"p1\">**</ept> method.","pos":[5909,5981],"source":"The app establishes the report interval within the **BlankPage** method."},{"content":"This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate).","pos":[5982,6148]},{"content":"If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum.","pos":[6149,6262]},{"content":"Otherwise, it sets the value to the requested interval.","pos":[6263,6318]},{"content":"The new light-sensor data is captured in the <bpt id=\"p1\">**</bpt>ReadingChanged<ept id=\"p1\">**</ept> method.","pos":[6512,6583],"source":"The new light-sensor data is captured in the **ReadingChanged** method."},{"content":"Each time the sensor driver receives new data from the sensor, it passes the value to your app using this event handler.","pos":[6584,6704]},{"content":"The app registers this event handler on the following line.","pos":[6705,6764]},{"content":"These new values are written to a TextBlock found in the project's XAML.","pos":[6901,6973]},{"content":"Related topics","pos":[7303,7317]},{"content":"LightSensor Sample","pos":[7322,7340]}],"content":"# Use the light sensor\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**Windows.Devices.Sensors**](https://msdn.microsoft.com/library/windows/apps/BR206408)\n-   [**LightSensor**](https://msdn.microsoft.com/library/windows/apps/BR225790)\n\nLearn how to use the ambient light sensor to detect changes in lighting.\n\nAn ambient light sensor is one of the several types of environmental sensors that allow apps to respond to changes in the user's environment.\n\n## Prerequisites\n\nYou should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C\\#, and events.\n\nThe device or emulator that you're using must support an ambient light sensor.\n\n## Create a simple light-sensor app\n\nThis section is divided into two subsections. The first subsection will take you through the steps necessary to create a simple light-sensor application from scratch. The following subsection explains the app you have just created.\n\n###  Instructions\n\n-   Create a new project, choosing a **Blank App (Universal Windows)** from the **Visual C\\#** project templates.\n\n-   Open your project's BlankPage.xaml.cs file and replace the existing code with the following.\n\n```csharp\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using Windows.Foundation;\n    using Windows.Foundation.Collections;\n    using Windows.UI.Xaml;\n    using Windows.UI.Xaml.Controls;\n    using Windows.UI.Xaml.Controls.Primitives;\n    using Windows.UI.Xaml.Data;\n    using Windows.UI.Xaml.Input;\n    using Windows.UI.Xaml.Media;\n    using Windows.UI.Xaml.Navigation;\n\n    using Windows.UI.Core; // Required to access the core dispatcher object\n    using Windows.Devices.Sensors; // Required to access the sensor platform and the ALS\n\n    // The Blank Page item template is documented at http://go.microsoft.com/fwlink/p/?linkid=234238\n\n    namespace App1\n    {\n        /// <summary>\n        /// An empty page that can be used on its own or navigated to within a Frame.\n        /// </summary>\n        public sealed partial class BlankPage : Page\n        {\n            private LightSensor _lightsensor; // Our app&#39;s lightsensor object\n           \n            // This event handler writes the current light-sensor reading to \n            // the textbox named \"txtLUX\" on the app&#39;s main page.\n\n            private void ReadingChanged(object sender, LightSensorReadingChangedEventArgs e)\n            {\n                Dispatcher.RunAsync(CoreDispatcherPriority.Normal, (s, a) =>\n                {\n                    LightSensorReading reading = (a.Context as LightSensorReadingChangedEventArgs).Reading;\n                    txtLuxValue.Text = String.Format(\"{0,5:0.00}\", reading.IlluminanceInLux);\n                });\n            }\n\n            public BlankPage()\n            {\n                InitializeComponent();\n                _lightsensor = LightSensor.GetDefault(); // Get the default light sensor object\n\n                // Assign an event handler for the ALS reading-changed event\n                if (_lightsensor != null)\n                {\n                    // Establish the report interval for all scenarios\n                    uint minReportInterval = _lightsensor.MinimumReportInterval;\n                    uint reportInterval = minReportInterval > 16 ? minReportInterval : 16;\n                    _lightsensor.ReportInterval = reportInterval;\n\n                    // Establish the even thandler\n                    _lightsensor.ReadingChanged += new TypedEventHandler<LightSensor, LightSensorReadingChangedEventArgs>(ReadingChanged);\n                }\n\n            }\n\n        }\n    }\n```\n\nYou'll need to rename the namespace in the previous snippet with the name you gave your project. For example, if you created a project named **LightingCS**, you'd replace `namespace App1` with `namespace LightingCS`.\n\n-   Open the file MainPage.xaml and replace the original contents with the following XML.\n\n```xml\n    <Page\n        x:Class=\"App1.BlankPage\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"using:App1\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        mc:Ignorable=\"d\">\n\n        <Grid x:Name=\"LayoutRoot\" Background=\"Black\">\n            <TextBlock HorizontalAlignment=\"Left\" Height=\"44\" Margin=\"52,38,0,0\" TextWrapping=\"Wrap\" Text=\"LUX Reading\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <TextBlock x:Name=\"txtLuxValue\" HorizontalAlignment=\"Left\" Height=\"44\" Margin=\"224,38,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"217\"/>\n\n\n        </Grid>\n\n    </Page>\n```\n\nYou'll need to replace the first part of the class name in the previous snippet with the namespace of your app. For example, if you created a project named **LightingCS**, you'd replace `x:Class=\"App1.MainPage\"` with `x:Class=\"LightingCS.MainPage\"`. You should also replace `xmlns:local=\"using:App1\"` with `xmlns:local=\"using:LightingCS\"`.\n\n-   Press F5 or select **Debug** > **Start Debugging** to build, deploy, and run the app.\n\nOnce the app is running, you can change the light sensor values by altering the light available to the sensor or using the emulator tools.\n\n-   Stop the app by returning to Visual Studio and pressing Shift+F5 or select **Debug** > **Stop Debugging** to stop the app.\n\n###  Explanation\n\nThe previous example demonstrates how little code you'll need to write in order to integrate light-sensor input in your app.\n\nThe app establishes a connection with the default sensor in the **BlankPage** method.\n\n```csharp\n_lightsensor = LightSensor.GetDefault(); // Get the default light sensor object\n```\n\nThe app establishes the report interval within the **BlankPage** method. This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate). If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum. Otherwise, it sets the value to the requested interval.\n\n```csharp\nuint minReportInterval = _lightsensor.MinimumReportInterval;\nuint reportInterval = minReportInterval > 16 ? minReportInterval : 16;\n_lightsensor.ReportInterval = reportInterval;\n```\nThe new light-sensor data is captured in the **ReadingChanged** method. Each time the sensor driver receives new data from the sensor, it passes the value to your app using this event handler. The app registers this event handler on the following line.\n\n```csharp\n_lightsensor.ReadingChanged += new TypedEventHandler<LightSensor, \nLightSensorReadingChangedEventArgs>(ReadingChanged);\n```\n\nThese new values are written to a TextBlock found in the project's XAML.\n\n```xml\n<TextBlock HorizontalAlignment=\"Left\" Height=\"44\" Margin=\"52,38,0,0\" TextWrapping=\"Wrap\" Text=\"LUX Reading\" VerticalAlignment=\"Top\" Width=\"150\"/>\n <TextBlock x:Name=\"txtLuxValue\" HorizontalAlignment=\"Left\" Height=\"44\" Margin=\"224,38,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"217\"/>\n```\n\n## Related topics\n\n* [LightSensor Sample](http://go.microsoft.com/fwlink/p/?linkid=241381)\n "}