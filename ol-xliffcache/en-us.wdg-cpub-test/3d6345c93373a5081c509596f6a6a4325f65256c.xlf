<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">3d6345c93373a5081c509596f6a6a4325f65256c</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\tiles-and-notifications-windows-push-notification-services--wns--overview.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">3452e1f18597e4d7f9fb54c2a015185e5ecf2e3c</mda:meta><mda:meta type="olxliffhash">daa2d8344f6ad6b938bff60e7365d1ae714c826b</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.</source>
					<target>The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.</source>
					<target>This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Windows Push Notification Services (WNS) overview</source>
					<target>Windows Push Notification Services (WNS) overview</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Windows Push Notification Services (WNS) overview</source>
					<target>Windows Push Notification Services (WNS) overview</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.</source>
					<target>The Windows Push Notification Services (WNS) enables third-party developers to send toast, tile, badge, and raw updates from their own cloud service.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.</source>
					<target>This provides a mechanism to deliver new updates to your users in a power-efficient and dependable way.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>How it works</source>
					<target>How it works</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The following diagram shows the complete data flow for sending a push notification.</source>
					<target>The following diagram shows the complete data flow for sending a push notification.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>It involves these steps:</source>
					<target>It involves these steps:</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Your app requests a push notification channel from the Universal Windows Platform.</source>
					<target>Your app requests a push notification channel from the Universal Windows Platform.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Windows asks WNS to create a notification channel.</source>
					<target>Windows asks WNS to create a notification channel.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>This channel is returned to the calling device in the form of a Uniform Resource Identifier (URI).</source>
					<target>This channel is returned to the calling device in the form of a Uniform Resource Identifier (URI).</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The notification channel URI is returned by Windows to your app.</source>
					<target>The notification channel URI is returned by Windows to your app.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Your app sends the URI to your own cloud service.</source>
					<target>Your app sends the URI to your own cloud service.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>You then store the URI on your own cloud service so that you can access the URI when you send notifications.</source>
					<target>You then store the URI on your own cloud service so that you can access the URI when you send notifications.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The URI is an interface between your own app and your own service; it's your responsibility to implement this interface with safe and secure web standards.</source>
					<target>The URI is an interface between your own app and your own service; it's your responsibility to implement this interface with safe and secure web standards.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>When your cloud service has an update to send, it notifies WNS using the channel URI.</source>
					<target>When your cloud service has an update to send, it notifies WNS using the channel URI.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>This is done by issuing an HTTP POST request, including the notification payload, over Secure Sockets Layer (SSL).</source>
					<target>This is done by issuing an HTTP POST request, including the notification payload, over Secure Sockets Layer (SSL).</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>This step requires authentication.</source>
					<target>This step requires authentication.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>WNS receives the request and routes the notification to the appropriate device.</source>
					<target>WNS receives the request and routes the notification to the appropriate device.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>wns data flow diagram for push notification</source>
					<target>wns data flow diagram for push notification</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Registering your app and receiving the credentials for your cloud service</source>
					<target>Registering your app and receiving the credentials for your cloud service</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Before you can send notifications using WNS, your app must be registered with the Store Dashboard.</source>
					<target>Before you can send notifications using WNS, your app must be registered with the Store Dashboard.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>This will provide you with credentials for your app that your cloud service will use in authenticating with WNS.</source>
					<target>This will provide you with credentials for your app that your cloud service will use in authenticating with WNS.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>These credentials consist of a Package Security Identifier (SID) and a secret key.</source>
					<target>These credentials consist of a Package Security Identifier (SID) and a secret key.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=511146)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To perform this registration, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Dev Center</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Dashboard</pc>.</source>
					<target>To perform this registration, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Dev Center</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Dashboard</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Each app has its own set of credentials for its cloud service.</source>
					<target>Each app has its own set of credentials for its cloud service.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>These credentials cannot be used to send notifications to any other app.</source>
					<target>These credentials cannot be used to send notifications to any other app.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465407)</data>
				</originalData>
				<segment state="initial">
					<source>For more details on how to register your app, please see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to authenticate with the Windows Notification Service (WNS)</pc>.</source>
					<target>For more details on how to register your app, please see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to authenticate with the Windows Notification Service (WNS)</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Requesting a notification channel</source>
					<target>Requesting a notification channel</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241285)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When an app that is capable of receiving push notifications runs, it must first request a notification channel through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreatePushNotificationChannelForApplicationAsync</pc></pc>.</source>
					<target>When an app that is capable of receiving push notifications runs, it must first request a notification channel through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreatePushNotificationChannelForApplicationAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465412)</data>
				</originalData>
				<segment state="initial">
					<source>For a full discussion and example code, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to request, create, and save a notification channel</pc>.</source>
					<target>For a full discussion and example code, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to request, create, and save a notification channel</pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>This API returns a channel URI that is uniquely linked to the calling application and its tile, and through which all notification types can be sent.</source>
					<target>This API returns a channel URI that is uniquely linked to the calling application and its tile, and through which all notification types can be sent.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>After the app has successfully created a channel URI, it sends it to its cloud service, together with any app-specific metadata that should be associated with this URI.</source>
					<target>After the app has successfully created a channel URI, it sends it to its cloud service, together with any app-specific metadata that should be associated with this URI.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Important notes</source>
					<target>Important notes</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>We do not guarantee that the notification channel URI for an app will always remain the same.</source>
					<target>We do not guarantee that the notification channel URI for an app will always remain the same.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>We advise that the app requests a new channel every time it runs and updates its service when the URI changes.</source>
					<target>We advise that the app requests a new channel every time it runs and updates its service when the URI changes.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>The developer should never modify the channel URI and should consider it as a black-box string.</source>
					<target>The developer should never modify the channel URI and should consider it as a black-box string.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>At this time, channel URIs expire after 30 days.</source>
					<target>At this time, channel URIs expire after 30 days.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=231476)</data>
				</originalData>
				<segment state="initial">
					<source>If your Windows 10 app will periodically renew its channel in the background then you can download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push and periodic notifications sample</pc> for Windows 8.1 and re-use its source code and/or the pattern it demonstrates.</source>
					<target>If your Windows 10 app will periodically renew its channel in the background then you can download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push and periodic notifications sample</pc> for Windows 8.1 and re-use its source code and/or the pattern it demonstrates.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>The interface between the cloud service and the client app is implemented by you, the developer.</source>
					<target>The interface between the cloud service and the client app is implemented by you, the developer.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>We recommend that the app go through an authentication process with its own service and transmit data over a secure protocol such as HTTPS.</source>
					<target>We recommend that the app go through an authentication process with its own service and transmit data over a secure protocol such as HTTPS.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>It is important that the cloud service always ensures that the channel URI uses the domain "notify.windows.com".</source>
					<target>It is important that the cloud service always ensures that the channel URI uses the domain "notify.windows.com".</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>The service should never push notifications to a channel on any other domain.</source>
					<target>The service should never push notifications to a channel on any other domain.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>If the callback for your app is ever compromised, a malicious attacker could submit a channel URI to spoof WNS.</source>
					<target>If the callback for your app is ever compromised, a malicious attacker could submit a channel URI to spoof WNS.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Without inspecting the domain, your cloud service could be potentially disclose information to this attacker unknowingly.</source>
					<target>Without inspecting the domain, your cloud service could be potentially disclose information to this attacker unknowingly.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#WNSResponseCodes)</data>
				</originalData>
				<segment state="initial">
					<source>If your cloud service attempts to deliver a notification to an expired channel, WNS will return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">response code 410</pc>.</source>
					<target>If your cloud service attempts to deliver a notification to an expired channel, WNS will return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">response code 410</pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>In response to that code, your service should no longer attempt to send notifications to that URI.</source>
					<target>In response to that code, your service should no longer attempt to send notifications to that URI.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Authenticating your cloud service</source>
					<target>Authenticating your cloud service</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>To send a notification, the cloud service must be authenticated through WNS.</source>
					<target>To send a notification, the cloud service must be authenticated through WNS.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>The first step in this process occurs when you register your app with the Windows Store Dashboard.</source>
					<target>The first step in this process occurs when you register your app with the Windows Store Dashboard.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>During the registration process, your app is given a Package security identifier (SID) and a secret key.</source>
					<target>During the registration process, your app is given a Package security identifier (SID) and a secret key.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>This information is used by your cloud service to authenticate with WNS.</source>
					<target>This information is used by your cloud service to authenticate with WNS.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=226787)</data>
				</originalData>
				<segment state="initial">
					<source>The WNS authentication scheme is implemented using the client credentials profile from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OAuth 2.0</pc> protocol.</source>
					<target>The WNS authentication scheme is implemented using the client credentials profile from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OAuth 2.0</pc> protocol.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>The cloud service authenticates with WNS by providing its credentials (Package SID and secret key).</source>
					<target>The cloud service authenticates with WNS by providing its credentials (Package SID and secret key).</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>In return, it receives an access token.</source>
					<target>In return, it receives an access token.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>This access token allows a cloud service to send a notification.</source>
					<target>This access token allows a cloud service to send a notification.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>The token is required with every notification request sent to the WNS.</source>
					<target>The token is required with every notification request sent to the WNS.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>At a high level, the information chain is as follows:</source>
					<target>At a high level, the information chain is as follows:</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>The cloud service sends its credentials to WNS over HTTPS following the OAuth 2.0 protocol.</source>
					<target>The cloud service sends its credentials to WNS over HTTPS following the OAuth 2.0 protocol.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>This authenticates the service with WNS.</source>
					<target>This authenticates the service with WNS.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>WNS returns an access token if the authentication was successful.</source>
					<target>WNS returns an access token if the authentication was successful.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>This access token is used in all subsequent notification requests until it expires.</source>
					<target>This access token is used in all subsequent notification requests until it expires.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>wns diagram for cloud service authentication</source>
					<target>wns diagram for cloud service authentication</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>In the authentication with WNS, the cloud service submits an HTTP request over Secure Sockets Layer (SSL).</source>
					<target>In the authentication with WNS, the cloud service submits an HTTP request over Secure Sockets Layer (SSL).</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The parameters are supplied in the "application/x-www-for-urlencoded" format.</source>
					<target>The parameters are supplied in the "application/x-www-for-urlencoded" format.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Supply your Package SID in the "client\_id" field and your secret key in the "client\_secret" field.</source>
					<target>Supply your Package SID in the "client\_id" field and your secret key in the "client\_secret" field.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#access_token_request)</data>
				</originalData>
				<segment state="initial">
					<source>For syntax details, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">access token request</pc> reference.</source>
					<target>For syntax details, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">access token request</pc> reference.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This is just an example, not cut-and-paste code that you can successfully use in your own code.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This is just an example, not cut-and-paste code that you can successfully use in your own code.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>The WNS authenticates the cloud service and, if successful, sends a response of "200 OK".</source>
					<target>The WNS authenticates the cloud service and, if successful, sends a response of "200 OK".</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>The access token is returned in the parameters included in the body of the HTTP response, using the "application/json" media type.</source>
					<target>The access token is returned in the parameters included in the body of the HTTP response, using the "application/json" media type.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>After your service has received the access token, you are ready to send notifications.</source>
					<target>After your service has received the access token, you are ready to send notifications.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>The following example shows a successful authentication response, including the access token.</source>
					<target>The following example shows a successful authentication response, including the access token.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435)</data>
				</originalData>
				<segment state="initial">
					<source>For syntax details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc>.</source>
					<target>For syntax details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc>.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Important notes</source>
					<target>Important notes</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>The OAuth 2.0 protocol supported in this procedure follows draft version V16.</source>
					<target>The OAuth 2.0 protocol supported in this procedure follows draft version V16.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The OAuth Request for Comments (RFC) uses the term "client" to refer to the cloud service.</source>
					<target>The OAuth Request for Comments (RFC) uses the term "client" to refer to the cloud service.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>There might be changes to this procedure when the OAuth draft is finalized.</source>
					<target>There might be changes to this procedure when the OAuth draft is finalized.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>The access token can be reused for multiple notification requests.</source>
					<target>The access token can be reused for multiple notification requests.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>This allows the cloud service to authenticate just once to send many notifications.</source>
					<target>This allows the cloud service to authenticate just once to send many notifications.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>However, when the access token expires, the cloud service must authenticate again to receive a new access token.</source>
					<target>However, when the access token expires, the cloud service must authenticate again to receive a new access token.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Sending a notification</source>
					<target>Sending a notification</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Using the channel URI, the cloud service can send a notification whenever it has an update for the user.</source>
					<target>Using the channel URI, the cloud service can send a notification whenever it has an update for the user.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The access token described above can be reused for multiple notification requests; the cloud server is not required to request a new access token for every notification.</source>
					<target>The access token described above can be reused for multiple notification requests; the cloud server is not required to request a new access token for every notification.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>If the access token has expired, the notification request will return an error.</source>
					<target>If the access token has expired, the notification request will return an error.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>We recommended that you do not try to re-send your notification more than once if the access token is rejected.</source>
					<target>We recommended that you do not try to re-send your notification more than once if the access token is rejected.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>If you encounter this error, you will need to request a new access token and resend the notification.</source>
					<target>If you encounter this error, you will need to request a new access token and resend the notification.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435)</data>
				</originalData>
				<segment state="initial">
					<source>For the exact error code, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification response codes</pc>.</source>
					<target>For the exact error code, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification response codes</pc>.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>The cloud service makes an HTTP POST to the channel URI.</source>
					<target>The cloud service makes an HTTP POST to the channel URI.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>This request must be made over SSL and contains the necessary headers and the notification payload.</source>
					<target>This request must be made over SSL and contains the necessary headers and the notification payload.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>The authorization header must include the acquired access token for authorization.</source>
					<target>The authorization header must include the acquired access token for authorization.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>An example request is shown here.</source>
					<target>An example request is shown here.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435)</data>
				</originalData>
				<segment state="initial">
					<source>For syntax details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification response codes</pc>.</source>
					<target>For syntax details, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification response codes</pc>.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868252)</data>
				</originalData>
				<segment state="initial">
					<source>For details on composing the notification payload, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Sending a push notification</pc>.</source>
					<target>For details on composing the notification payload, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Sending a push notification</pc>.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tiles-and-notifications-adaptive-tiles-schema.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br212853)</data>
				</originalData>
				<segment state="initial">
					<source>The payload of a tile, toast, or badge push notification is supplied as XML content that adheres to their respective defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adaptive tiles schema</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Legacy tiles schema</pc>.</source>
					<target>The payload of a tile, toast, or badge push notification is supplied as XML content that adheres to their respective defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adaptive tiles schema</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Legacy tiles schema</pc>.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>The payload of a raw notification does not have a specified structure.</source>
					<target>The payload of a raw notification does not have a specified structure.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>It is strictly app-defined.</source>
					<target>It is strictly app-defined.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>WNS responds to indicate that the notification has been received and will be delivered at the next available opportunity.</source>
					<target>WNS responds to indicate that the notification has been received and will be delivered at the next available opportunity.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>However, WNS does not provide end-to-end confirmation that your notification has been received by the device or application.</source>
					<target>However, WNS does not provide end-to-end confirmation that your notification has been received by the device or application.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>This diagram illustrates the data flow:</source>
					<target>This diagram illustrates the data flow:</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>wns diagram for sending a notification</source>
					<target>wns diagram for sending a notification</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Important notes</source>
					<target>Important notes</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>WNS does not guarantee the reliability or latency of a notification.</source>
					<target>WNS does not guarantee the reliability or latency of a notification.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Notifications should never include confidential or sensitive data.</source>
					<target>Notifications should never include confidential or sensitive data.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>To send a notification, the cloud service must first authenticate with WNS and receive an access token.</source>
					<target>To send a notification, the cloud service must first authenticate with WNS and receive an access token.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>An access token only allows a cloud service to send notifications to the single app for which the token was created.</source>
					<target>An access token only allows a cloud service to send notifications to the single app for which the token was created.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>One access token cannot be used to send notifications across multiple apps.</source>
					<target>One access token cannot be used to send notifications across multiple apps.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Therefore, if your cloud service supports multiple apps, it must provide the correct access token for the app when pushing a notification to each channel URI.</source>
					<target>Therefore, if your cloud service supports multiple apps, it must provide the correct access token for the app when pushing a notification to each channel URI.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>When the device is offline, by default WNS will store up to five tile notifications (if queuing is enabled; otherwise, one tile notification) and one badge notification for each channel URI, and no raw notifications.</source>
					<target>When the device is offline, by default WNS will store up to five tile notifications (if queuing is enabled; otherwise, one tile notification) and one badge notification for each channel URI, and no raw notifications.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_cache)</data>
				</originalData>
				<segment state="initial">
					<source>This default caching behavior can be changed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Cache-Policy header</pc>.</source>
					<target>This default caching behavior can be changed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">X-WNS-Cache-Policy header</pc>.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Note that toast notifications are never stored when the device is offline.</source>
					<target>Note that toast notifications are never stored when the device is offline.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>In scenarios where the notification content is personalized to the user, WNS recommends that the cloud service immediately send those updates when those are received.</source>
					<target>In scenarios where the notification content is personalized to the user, WNS recommends that the cloud service immediately send those updates when those are received.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Examples of this scenario include social media feed updates, instant communication invitations, new message notifications, or alerts.</source>
					<target>Examples of this scenario include social media feed updates, instant communication invitations, new message notifications, or alerts.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>As an alternative, you can have scenarios in which the same generic update is frequently delivered to a large subset of your users; for example, weather, stock, and news updates.</source>
					<target>As an alternative, you can have scenarios in which the same generic update is frequently delivered to a large subset of your users; for example, weather, stock, and news updates.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>WNS guidelines specify that the frequency of these updates should be at most one every 30 minutes.</source>
					<target>WNS guidelines specify that the frequency of these updates should be at most one every 30 minutes.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>The end user or WNS may determine more frequent routine updates to be abusive.</source>
					<target>The end user or WNS may determine more frequent routine updates to be abusive.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>Expiration of tile and badge notifications</source>
					<target>Expiration of tile and badge notifications</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>By default, tile and badge notifications expire three days after being downloaded.</source>
					<target>By default, tile and badge notifications expire three days after being downloaded.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>When a notification expires, the content is removed from the tile or queue and is no longer shown to the user.</source>
					<target>When a notification expires, the content is removed from the tile or queue and is no longer shown to the user.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>It's a best practice to set an expiration (using a time that makes sense for your app) on all tile and badge notifications so that your tile's content doesn't persist longer than it is relevant.</source>
					<target>It's a best practice to set an expiration (using a time that makes sense for your app) on all tile and badge notifications so that your tile's content doesn't persist longer than it is relevant.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>An explicit expiration time is essential for content with a defined lifespan.</source>
					<target>An explicit expiration time is essential for content with a defined lifespan.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>This also assures the removal of stale content if your cloud service stops sending notifications, or if the user disconnects from the network for an extended period.</source>
					<target>This also assures the removal of stale content if your cloud service stops sending notifications, or if the user disconnects from the network for an extended period.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>Your cloud service can set an expiration for each notification by setting the X-WNS-Expires HTTP header to specify the time (in seconds) that your notification will remain valid after it is sent.</source>
					<target>Your cloud service can set an expiration for each notification by setting the X-WNS-Expires HTTP header to specify the time (in seconds) that your notification will remain valid after it is sent.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh465435.aspx#pncodes_x_wns_ttl)</data>
				</originalData>
				<segment state="initial">
					<source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc>.</source>
					<target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Push notification service request and response headers</pc>.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>For example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your sending interval (such as one hour after receipt if you are sending notifications every half-hour).</source>
					<target>For example, during a stock market's active trading day, you can set the expiration for a stock price update to twice that of your sending interval (such as one hour after receipt if you are sending notifications every half-hour).</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.</source>
					<target>As another example, a news app might determine that one day is an appropriate expiration time for a daily news tile update.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Push notifications and battery saver</source>
					<target>Push notifications and battery saver</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Battery saver extends battery life by limiting background activity on the device.</source>
					<target>Battery saver extends battery life by limiting background activity on the device.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>Windows 10 lets the user set battery saver to turn on automatically when the battery drops below a specified threshold.</source>
					<target>Windows 10 lets the user set battery saver to turn on automatically when the battery drops below a specified threshold.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>When battery saver is on, the receipt of push notifications is disabled to save energy.</source>
					<target>When battery saver is on, the receipt of push notifications is disabled to save energy.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>But there are a couple exceptions to this.</source>
					<target>But there are a couple exceptions to this.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The following Windows 10 battery saver settings (found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> app) allow your app to receive push notifications even when battery saver is on.</source>
					<target>The following Windows 10 battery saver settings (found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> app) allow your app to receive push notifications even when battery saver is on.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow push notifications from any app while in battery saver</pc>: This setting lets all apps receive push notifications while battery saver is on.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow push notifications from any app while in battery saver</pc>: This setting lets all apps receive push notifications while battery saver is on.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>Note that this setting applies only to Windows 10 for desktop editions (Home, Pro, Enterprise, and Education).</source>
					<target>Note that this setting applies only to Windows 10 for desktop editions (Home, Pro, Enterprise, and Education).</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Always allowed</pc>: This setting lets specific apps run in the background while battery saver is on - including receiving push notifications.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Always allowed</pc>: This setting lets specific apps run in the background while battery saver is on - including receiving push notifications.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>This list is maintained manually by the user.</source>
					<target>This list is maintained manually by the user.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>There is no way to check the state of these two settings, but you can check the state of battery saver.</source>
					<target>There is no way to check the state of these two settings, but you can check the state of battery saver.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn966190)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In Windows 10, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnergySaverStatus</pc></pc> property to check battery saver state.</source>
					<target>In Windows 10, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnergySaverStatus</pc></pc> property to check battery saver state.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn966191)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnergySaverStatusChanged</pc></pc> event to listen for changes to battery saver.</source>
					<target>Your app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EnergySaverStatusChanged</pc></pc> event to listen for changes to battery saver.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If your app depends heavily on push notifications, we recommend notifying users that they may not receive notifications while battery saver is on and to make it easy for them to adjust <pc dataRefEnd="id2" dataRefStart="id1" id="p1">battery saver settings</pc>.</source>
					<target>If your app depends heavily on push notifications, we recommend notifying users that they may not receive notifications while battery saver is on and to make it easy for them to adjust <pc dataRefEnd="id2" dataRefStart="id1" id="p1">battery saver settings</pc>.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<originalData>
					<data id="id1">`ms-settings:batterysaver-settings`</data>
				</originalData>
				<segment state="initial">
					<source>Using the battery saver settings URI scheme in Windows 10, <ph dataRef="id1" id="ph1" />, you can provide a convenient link to the Settings app.</source>
					<target>Using the battery saver settings URI scheme in Windows 10, <ph dataRef="id1" id="ph1" />, you can provide a convenient link to the Settings app.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   When notifying the user about battery saver settings, we recommend providing a way to suppress the message in the future.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   When notifying the user about battery saver settings, we recommend providing a way to suppress the message in the future.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">`dontAskMeAgainBox`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br241622)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, the <ph dataRef="id1" id="ph1" /> checkbox in the following example persists the user's preference in <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">LocalSettings</pc></pc>.</source>
					<target>For example, the <ph dataRef="id1" id="ph1" /> checkbox in the following example persists the user's preference in <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">LocalSettings</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>Here's an example of how to check if battery saver is turned on in Windows 10.</source>
					<target>Here's an example of how to check if battery saver is turned on in Windows 10.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This example notifies the user and launches the Settings app to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">battery saver settings</pc>.</source>
					<target>This example notifies the user and launches the Settings app to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">battery saver settings</pc>.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">`dontAskAgainSetting`</data>
				</originalData>
				<segment state="initial">
					<source>The <ph dataRef="id1" id="ph1" /> lets the user suppress the message if they don't want to be notified again.</source>
					<target>The <ph dataRef="id1" id="ph1" /> lets the user suppress the message if they don't want to be notified again.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn633972)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This is the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentDialog</pc></pc> featured in this example.</source>
					<target>This is the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContentDialog</pc></pc> featured in this example.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
					<target>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
					<target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>Send a local tile notification</source>
					<target>Send a local tile notification</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>Quickstart: Sending a push notification</source>
					<target>Quickstart: Sending a push notification</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>How to update a badge through push notifications</source>
					<target>How to update a badge through push notifications</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>How to request, create, and save a notification channel</source>
					<target>How to request, create, and save a notification channel</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>How to intercept notifications for running applications</source>
					<target>How to intercept notifications for running applications</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>How to authenticate with the Windows Push Notification Service (WNS)</source>
					<target>How to authenticate with the Windows Push Notification Service (WNS)</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>Push notification service request and response headers</source>
					<target>Push notification service request and response headers</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>Guidelines and checklist for push notifications</source>
					<target>Guidelines and checklist for push notifications</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>Raw notifications</source>
					<target>Raw notifications</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>