{"nodes":[{"content":"Text block","pos":[98,108]},{"content":"Text block is the primary control for displaying read-only text in apps.","pos":[110,182]},{"content":"You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.","pos":[183,318]},{"pos":[377,391],"content":"Important APIs"},{"content":"TextBlock class","pos":[407,422]},{"content":"Text property","pos":[527,540]},{"content":"Inlines property","pos":[650,666]},{"content":"Is this the right control?","pos":[776,802]},{"content":"A text block is typically easier to use and provides better text rendering performance than a rich text block, so it's preferred for most app UI text.","pos":[804,954]},{"content":"You can easily access and use text from a text block in your app by getting the value of the <bpt id=\"p1\">[</bpt>Text<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</ept> property.","pos":[955,1163],"source":" You can easily access and use text from a text block in your app by getting the value of the [Text](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx) property."},{"content":"It also provides many of the same formatting options for customizing how your text is rendered.","pos":[1164,1259]},{"content":"Although you can put line breaks in the text, text block is designed to display a single paragraph and doesn’t support text indentation.","pos":[1262,1398]},{"content":"Use a <bpt id=\"p1\">**</bpt>RichTextBlock<ept id=\"p1\">**</ept> when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.","pos":[1399,1553],"source":" Use a **RichTextBlock** when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images."},{"pos":[1555,1658],"content":"For more info about choosing the right text control, see the <bpt id=\"p1\">[</bpt>Text controls<ept id=\"p1\">](text-controls.md)</ept> article.","source":"For more info about choosing the right text control, see the [Text controls](text-controls.md) article."},{"content":"Examples","pos":[1663,1671]},{"content":"Create a text block","pos":[1677,1696]},{"content":"Here's how to define a simple TextBlock control and set its Text property to a string.","pos":[1698,1784]},{"content":"Content model","pos":[2052,2065]},{"pos":[2067,2357],"content":"There are two properties you can use to add content to a TextBlock: <bpt id=\"p1\">[</bpt>Text<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</ept> and <bpt id=\"p2\">[</bpt>Inlines<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.inlines.aspx)</ept>.","source":"There are two properties you can use to add content to a TextBlock: [Text](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx) and [Inlines](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.inlines.aspx)."},{"content":"The most common way to display text is to set the Text property to a string value, as shown in the previous example.","pos":[2359,2475]},{"content":"You can also add content by placing inline flow content elements in the TextBox.Inlines property, like this.","pos":[2477,2585]},{"content":"Elements derived from the Inline class, such as Bold, Italic, Run, Span, and LineBreak, enable different formatting for different parts of the text.","pos":[2728,2876]},{"content":"For more info, see the <bpt id=\"p1\">[</bpt>Formatting text<ept id=\"p1\">]()</ept> section.","pos":[2877,2928],"source":" For more info, see the [Formatting text]() section."},{"content":"The inline Hyperlink element lets you add a hyperlink to your text.","pos":[2929,2996]},{"content":"However, using Inlines also disables fast path text rendering, which is discussed in the next section.","pos":[2997,3099]},{"content":"Performance considerations","pos":[3105,3131]},{"content":"Whenever possible, XAML uses a more efficient code path to layout text.","pos":[3133,3204]},{"content":"This fast path both decreases overall memory use and greatly reduces the CPU time to do text measuring and arranging.","pos":[3205,3322]},{"content":"This fast path applies only to TextBlock, so it should be preferred when possible over RichTextBlock.","pos":[3323,3424]},{"content":"Certain conditions require TextBlock to fall back to a more feature-rich and CPU intensive code path for text rendering.","pos":[3426,3546]},{"content":"To keep text rendering on the fast path, be sure to follow these guidelines when setting the properties listed here.","pos":[3547,3663]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Text<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)</ept>: The most important condition is that the fast path is used only when you set text by explicitly setting the Text property, either in XAML or in code (as shown in the previous examples).","pos":[3666,3962],"source":"[**Text**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx): The most important condition is that the fast path is used only when you set text by explicitly setting the Text property, either in XAML or in code (as shown in the previous examples)."},{"content":"Setting the text via TextBlock’s Inlines collection (such as <ph id=\"ph1\">`&lt;TextBlock&gt;Inline text&lt;/TextBlock&gt;`</ph>) will disable the fast path, due to the potential complexity of multiple formats.","pos":[3963,4142],"source":" Setting the text via TextBlock’s Inlines collection (such as `<TextBlock>Inline text</TextBlock>`) will disable the fast path, due to the potential complexity of multiple formats."},{"pos":[4145,4321],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CharacterSpacing<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.characterspacing.aspx)</ept>: Only the default value of 0 is fast path.","source":"[**CharacterSpacing**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.characterspacing.aspx): Only the default value of 0 is fast path."},{"pos":[4324,4514],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Typography<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx)</ept>: Only the default values for the various Typography properties are fast path.","source":"[**Typography**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx): Only the default values for the various Typography properties are fast path."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextTrimming<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.texttrimming.aspx)</ept>: Only the <bpt id=\"p3\">**</bpt>None<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>CharacterEllipsis<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>WordEllipsis<ept id=\"p5\">**</ept> values are fast path.","pos":[4517,4728],"source":"[**TextTrimming**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.texttrimming.aspx): Only the **None**, **CharacterEllipsis**, and **WordEllipsis** values are fast path."},{"content":"The <bpt id=\"p1\">**</bpt>Clip<ept id=\"p1\">**</ept> value disables the fast path.","pos":[4729,4771],"source":" The **Clip** value disables the fast path."},{"pos":[4774,5122],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LineStackingStrategy<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.linestackingstrategy.aspx)</ept>: If <bpt id=\"p3\">[</bpt>LineHeight<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.lineheight.aspx)</ept> is not 0, the <bpt id=\"p4\">**</bpt>BaselineToBaseline<ept id=\"p4\">**</ept> and <bpt id=\"p5\">**</bpt>MaxHeight<ept id=\"p5\">**</ept> values disable the fast path.","source":"[**LineStackingStrategy**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.linestackingstrategy.aspx): If [LineHeight](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.lineheight.aspx) is not 0, the **BaselineToBaseline** and **MaxHeight** values disable the fast path."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IsTextSelectionEnabled<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.istextselectionenabled.aspx)</ept>: Only <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> is fast path.","pos":[5125,5300],"source":"[**IsTextSelectionEnabled**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.istextselectionenabled.aspx): Only **false** is fast path."},{"content":"Setting this property to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> disables the fast path.","pos":[5301,5358],"source":" Setting this property to **true** disables the fast path."},{"content":"You can set the <bpt id=\"p1\">[</bpt>DebugSettings.IsTextPerformanceVisualizationEnabled<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.debugsettings.istextperformancevisualizationenabled.aspx)</ept> property to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept> during debugging to determine whether text is using fast path rendering.","pos":[5360,5650],"source":"You can set the [DebugSettings.IsTextPerformanceVisualizationEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.debugsettings.istextperformancevisualizationenabled.aspx) property to **true** during debugging to determine whether text is using fast path rendering."},{"content":"When this property is set to true, the text that is on the fast path displays in a bright green color.","pos":[5651,5753]},{"pos":[5757,5991],"content":"<bpt id=\"p1\">**</bpt>Tip<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>This feature is explained in depth in this session from Build 2015- <bpt id=\"p2\">[</bpt>XAML Performance: Techniques for Maximizing Universal Windows App Experiences Built with XAML<ept id=\"p2\">](https://channel9.msdn.com/Events/Build/2015/3-698)</ept>.","source":"**Tip**&nbsp;&nbsp;This feature is explained in depth in this session from Build 2015- [XAML Performance: Techniques for Maximizing Universal Windows App Experiences Built with XAML](https://channel9.msdn.com/Events/Build/2015/3-698)."},{"pos":[5996,6211],"content":"You typically set debug settings in the <bpt id=\"p1\">[</bpt>OnLaunched<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.application.onlaunched.aspx)</ept> method override in the code-behind page for App.xaml, like this.","source":"You typically set debug settings in the [OnLaunched](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.application.onlaunched.aspx) method override in the code-behind page for App.xaml, like this."},{"content":"In this example, the first TextBlock is rendered using the fast path, while the second is not.","pos":[6453,6547]},{"content":"When you run this XAML in debug mode with IsTextPerformanceVisualizationEnabled set to true, the result looks like this.","pos":[6705,6825]},{"content":"Text rendered in debug mode","pos":[6829,6856]},{"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>The color of text that is not on the fast path is not changed.","pos":[6905,6990],"source":"**Caution**&nbsp;&nbsp;The color of text that is not on the fast path is not changed."},{"content":"If you have text in your app with its color specified as bright green, it is still displayed in bright green when it's on the slower rendering path.","pos":[6991,7139]},{"content":"Be careful to not confuse text that is set to green in the app with text that is on the fast path and green because of the debug settings.","pos":[7140,7278]},{"content":"Formatting text","pos":[7283,7298]},{"content":"Although the Text property stores plain text, you can apply various formatting options to the TextBlock control to customize how the text is rendered in your app.","pos":[7300,7462]},{"content":"You can set standard control properties like FontFamily, FontSize, FontStyle, Foreground, and CharacterSpacing to change the look of the text.","pos":[7463,7605]},{"content":"You can also use inline text elements and Typography attached properties to format your text.","pos":[7606,7699]},{"content":"These options affect only how the TextBlock displays the text locally, so if you copy and paste the text into a rich text control, for example, no formatting is applied.","pos":[7700,7869]},{"pos":[7872,8025],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>Remember, as noted in the previous section, inline text elements and non-default typography values are not rendered on the fast path.","source":"**Note**&nbsp;&nbsp;Remember, as noted in the previous section, inline text elements and non-default typography values are not rendered on the fast path."},{"content":"Inline elements","pos":[8033,8048]},{"pos":[8050,8305],"content":"The <bpt id=\"p1\">[</bpt>Windows.UI.Xaml.Documents<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.aspx)</ept> namespace provides a variety of inline text elements that you can use to format your text, such as Bold, Italic, Run, Span, and LineBreak.","source":"The [Windows.UI.Xaml.Documents](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.aspx) namespace provides a variety of inline text elements that you can use to format your text, such as Bold, Italic, Run, Span, and LineBreak."},{"content":"You can display a series of strings in a TextBlock, where each string has different formatting.","pos":[8308,8403]},{"content":"You can do this by using a Run element to display each string with its formatting and by separating each Run element with a LineBreak element.","pos":[8404,8546]},{"content":"Here's how to define several differently formatted text strings in a TextBlock by using Run objects separated with a LineBreak.","pos":[8548,8675]},{"content":"Here's the result.","pos":[9194,9212]},{"content":"Text formatted with run elements","pos":[9216,9248]},{"content":"Typography","pos":[9291,9301]},{"content":"The attached properties of the <bpt id=\"p1\">[</bpt>Typography<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx)</ept> class provide access to a set of Microsoft OpenType typography properties.","pos":[9303,9517],"source":"The attached properties of the [Typography](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx) class provide access to a set of Microsoft OpenType typography properties."},{"content":"You can set these attached properties either on the TextBlock, or on individual inline text elements.","pos":[9518,9619]},{"content":"These examples show both.","pos":[9620,9645]},{"content":"Recommendations","pos":[10122,10137]},{"content":"\\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.","pos":[10141,10250]},{"content":"For Windows 8.1 guidance, please download the <bpt id=\"p1\">[</bpt>Windows 8.1 guidelines PDF<ept id=\"p1\">](https://go.microsoft.com/fwlink/p/?linkid=258743)</ept>.\\]","pos":[10251,10378],"source":" For Windows 8.1 guidance, please download the [Windows 8.1 guidelines PDF](https://go.microsoft.com/fwlink/p/?linkid=258743).\\]"},{"content":"Related articles","pos":[10383,10399]},{"content":"Text controls","pos":[10402,10415]},{"content":"For designers","pos":[10438,10451]},{"content":"Guidelines for spell checking","pos":[10457,10486]},{"content":"Adding search","pos":[10525,10538]},{"content":"Guidelines for text input","pos":[10601,10626]},{"content":"For developers (XAML)","pos":[10649,10670]},{"content":"TextBox class","pos":[10678,10691]},{"content":"Windows.UI.Xaml.Controls PasswordBox class","pos":[10758,10800]},{"content":"For developers (other)","pos":[10866,10888]},{"content":"String.Length property","pos":[10894,10916]}],"content":"---\nms.assetid: DA562509-D893-425A-AAE6-B2AE9E9F8A19\nlabel: Text block\ntemplate: detail.hbs\n---\n# Text block\n Text block is the primary control for displaying read-only text in apps. You can use it to display single-line or multi-line text, inline hyperlinks, and text with formatting like bold, italic, or underlined.\n\n<span class=\"sidebar_heading\" style=\"font-weight: bold;\">Important APIs</span>\n\n-   [**TextBlock class**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.aspx)\n-   [**Text property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx)\n-   [**Inlines property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.inlines.aspx)\n\n## Is this the right control?\n\nA text block is typically easier to use and provides better text rendering performance than a rich text block, so it's preferred for most app UI text. You can easily access and use text from a text block in your app by getting the value of the [Text](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx) property. It also provides many of the same formatting options for customizing how your text is rendered. \n\nAlthough you can put line breaks in the text, text block is designed to display a single paragraph and doesn’t support text indentation. Use a **RichTextBlock** when you need support for multiple paragraphs, multi-column text or other complex text layouts, or inline UI elements like images.\n\nFor more info about choosing the right text control, see the [Text controls](text-controls.md) article.\n\n## Examples\n\n\n## Create a text block\n\nHere's how to define a simple TextBlock control and set its Text property to a string.\n\n```xaml\n<TextBlock Text=\"Hello, world!\" />\n```\n\n```csharp\nTextBlock textBlock1 = new TextBlock();\ntextBlock1.Text = \"Hello, world!\";\n```\n\n    <TextBlock Text=\"Hello, world!\" />\n\n    TextBlock textBlock1 = new TextBlock();\n    textBlock1.Text = \"Hello, world!\";\n\n### Content model\n\nThere are two properties you can use to add content to a TextBlock: [Text](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx) and [Inlines](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.inlines.aspx).\n\nThe most common way to display text is to set the Text property to a string value, as shown in the previous example.\n\nYou can also add content by placing inline flow content elements in the TextBox.Inlines property, like this.\n```xaml\n<TextBlock><Run>Text can be <Bold>bold</Bold>, <Italic>italic</Italic>, or <Bold><Italic>both</Italic></Bold>.</Run></TextBlock>\n```\n\nElements derived from the Inline class, such as Bold, Italic, Run, Span, and LineBreak, enable different formatting for different parts of the text. For more info, see the [Formatting text]() section. The inline Hyperlink element lets you add a hyperlink to your text. However, using Inlines also disables fast path text rendering, which is discussed in the next section.\n\n\n## Performance considerations\n\nWhenever possible, XAML uses a more efficient code path to layout text. This fast path both decreases overall memory use and greatly reduces the CPU time to do text measuring and arranging. This fast path applies only to TextBlock, so it should be preferred when possible over RichTextBlock.\n\nCertain conditions require TextBlock to fall back to a more feature-rich and CPU intensive code path for text rendering. To keep text rendering on the fast path, be sure to follow these guidelines when setting the properties listed here.\n- [**Text**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.text.aspx): The most important condition is that the fast path is used only when you set text by explicitly setting the Text property, either in XAML or in code (as shown in the previous examples). Setting the text via TextBlock’s Inlines collection (such as `<TextBlock>Inline text</TextBlock>`) will disable the fast path, due to the potential complexity of multiple formats.\n- [**CharacterSpacing**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.characterspacing.aspx): Only the default value of 0 is fast path.\n- [**Typography**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx): Only the default values for the various Typography properties are fast path.\n- [**TextTrimming**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.texttrimming.aspx): Only the **None**, **CharacterEllipsis**, and **WordEllipsis** values are fast path. The **Clip** value disables the fast path.\n- [**LineStackingStrategy**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.linestackingstrategy.aspx): If [LineHeight](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.lineheight.aspx) is not 0, the **BaselineToBaseline** and **MaxHeight** values disable the fast path.\n- [**IsTextSelectionEnabled**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.istextselectionenabled.aspx): Only **false** is fast path. Setting this property to **true** disables the fast path.\n\nYou can set the [DebugSettings.IsTextPerformanceVisualizationEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.debugsettings.istextperformancevisualizationenabled.aspx) property to **true** during debugging to determine whether text is using fast path rendering. When this property is set to true, the text that is on the fast path displays in a bright green color. \n\n>**Tip**&nbsp;&nbsp;This feature is explained in depth in this session from Build 2015- [XAML Performance: Techniques for Maximizing Universal Windows App Experiences Built with XAML](https://channel9.msdn.com/Events/Build/2015/3-698).\n\n \n\nYou typically set debug settings in the [OnLaunched](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.application.onlaunched.aspx) method override in the code-behind page for App.xaml, like this.\n```csharp\nprotected override void OnLaunched(LaunchActivatedEventArgs e)\n{\n#if DEBUG\n    if (System.Diagnostics.Debugger.IsAttached)\n    {\n        this.DebugSettings.IsTextPerformanceVisualizationEnabled = true;\n    }\n#endif\n\n// ...\n\n}\n```\n\nIn this example, the first TextBlock is rendered using the fast path, while the second is not.\n```xaml\n<StackPanel>\n    <TextBlock Text=\"This text is on the fast path.\"/>\n    <TextBlock>This text is NOT on the fast path.</TextBlock>\n<StackPanel/>\n```\n\nWhen you run this XAML in debug mode with IsTextPerformanceVisualizationEnabled set to true, the result looks like this.\n\n![Text rendered in debug mode](images/text-block-rendering-performance.png)\n\n>**Caution**&nbsp;&nbsp;The color of text that is not on the fast path is not changed. If you have text in your app with its color specified as bright green, it is still displayed in bright green when it's on the slower rendering path. Be careful to not confuse text that is set to green in the app with text that is on the fast path and green because of the debug settings.\n\n## Formatting text\n\nAlthough the Text property stores plain text, you can apply various formatting options to the TextBlock control to customize how the text is rendered in your app. You can set standard control properties like FontFamily, FontSize, FontStyle, Foreground, and CharacterSpacing to change the look of the text. You can also use inline text elements and Typography attached properties to format your text. These options affect only how the TextBlock displays the text locally, so if you copy and paste the text into a rich text control, for example, no formatting is applied.\n\n>**Note**&nbsp;&nbsp;Remember, as noted in the previous section, inline text elements and non-default typography values are not rendered on the fast path.\n \n\n### Inline elements\n\nThe [Windows.UI.Xaml.Documents](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.aspx) namespace provides a variety of inline text elements that you can use to format your text, such as Bold, Italic, Run, Span, and LineBreak. \n\nYou can display a series of strings in a TextBlock, where each string has different formatting. You can do this by using a Run element to display each string with its formatting and by separating each Run element with a LineBreak element.\n\nHere's how to define several differently formatted text strings in a TextBlock by using Run objects separated with a LineBreak.\n```xaml\n<TextBlock FontFamily=\"Arial\" Width=\"400\" Text=\"Sample text formatting runs\">\n    <LineBreak/>\n    <Run Foreground=\"Gray\" FontFamily=\"Courier New\" FontSize=\"24\"> \n        Courier New 24 \n    </Run>\n    <LineBreak/>\n    <Run Foreground=\"Teal\" FontFamily=\"Times New Roman\" FontSize=\"18\" FontStyle=\"Italic\"> \n        Times New Roman Italic 18 \n    </Run>\n    <LineBreak/>\n    <Run Foreground=\"SteelBlue\" FontFamily=\"Verdana\" FontSize=\"14\" FontWeight=\"Bold\"> \n        Verdana Bold 14 \n    </Run>\n</TextBlock>\n```\n\nHere's the result.\n\n![Text formatted with run elements](images/text-block-run-examples.png)\n\n### Typography\n\nThe attached properties of the [Typography](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.documents.typography.aspx) class provide access to a set of Microsoft OpenType typography properties. You can set these attached properties either on the TextBlock, or on individual inline text elements. These examples show both.\n```xaml\n<TextBlock Text=\"Hello, world!\"\n           Typography.Capitals=\"SmallCaps\"\n           Typography.StylisticSet4=\"True\"/>\n```\n\n```csharp\nTextBlock textBlock1 = new TextBlock();\ntextBlock1.Text = \"Hello, world!\";\nWindows.UI.Xaml.Documents.Typography.SetCapitals(textBlock1, FontCapitals.SmallCaps);\nWindows.UI.Xaml.Documents.Typography.SetStylisticSet4(textBlock1, true);\n```\n\n```xaml\n<TextBlock>12 x <Run Typography.Fraction=\"Slashed\">1/3</Run> = 4.</TextBlock>\n```\n\n## Recommendations\n\n\n\n\\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10. For Windows 8.1 guidance, please download the [Windows 8.1 guidelines PDF](https://go.microsoft.com/fwlink/p/?linkid=258743).\\]\n\n## Related articles\n\n[Text controls](text-controls.md)\n\n**For designers**\n- [Guidelines for spell checking](spell-checking-and-prediction.md)\n- [Adding search](https://msdn.microsoft.com/library/windows/apps/hh465231)\n- [Guidelines for text input](text-controls.md)\n\n**For developers (XAML)**\n- [**TextBox class**](https://msdn.microsoft.com/library/windows/apps/br209683)\n- [**Windows.UI.Xaml.Controls PasswordBox class**](https://msdn.microsoft.com/library/windows/apps/br227519)\n\n\n**For developers (other)**\n- [String.Length property](https://msdn.microsoft.com/library/system.string.length(v=vs.110).aspx)\n"}