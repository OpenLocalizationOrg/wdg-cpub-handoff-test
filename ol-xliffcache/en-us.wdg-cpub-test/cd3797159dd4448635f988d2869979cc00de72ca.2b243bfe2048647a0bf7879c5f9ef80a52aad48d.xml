{"nodes":[{"pos":[11,28],"content":"Credential locker","needQuote":true,"needEscape":true,"nodes":[{"content":"Credential locker","pos":[0,17]}]},{"pos":[42,250],"content":"This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.","pos":[0,208]}]},{"content":"Credential locker","pos":[307,324]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[327,365]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[366,461],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.","pos":[464,672]},{"content":"For example, you have an app that connects to a service to access protected resources such as media files, or social networking.","pos":[674,802]},{"content":"Your service requires login information for each user.","pos":[803,857]},{"content":"You’ve built UI into your app that gets the username and password for the user, which is then used to log the user into the service.","pos":[858,990]},{"content":"Using the Credential Locker API, you can store the username and password for your user and easily retrieve them and log the user in automatically the next time they open your app, regardless of what device they're on.","pos":[991,1208]},{"content":"Credential locker works a little differently for domain accounts.","pos":[1210,1275]},{"content":"If there are credentials stored with your Microsoft account, and you associate that account with a domain account (such as the account that you use at work), your credentials will roam to that domain account.","pos":[1276,1484]},{"content":"However, any new credentials added when signed on with the domain account won’t roam.","pos":[1485,1570]},{"content":"This ensures that private credentials for the domain aren’t exposed outside of the domain.","pos":[1571,1661]},{"content":"Storing user credentials","pos":[1666,1690]},{"pos":[1697,1948],"content":"Obtain a reference to the Credential Locker using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227081)</ept> object from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Windows.Security.Credentials<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227089)</ept> namespace.","source":"Obtain a reference to the Credential Locker using the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object from the [**Windows.Security.Credentials**](https://msdn.microsoft.com/library/windows/apps/br227089) namespace."},{"pos":[1953,2271],"content":"Create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordCredential<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227061)</ept> object that contains an identifier for your app, the username and the password, and pass that to the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PasswordVault.Add<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh701231)</ept> method to add the credential to the locker.","source":"Create a [**PasswordCredential**](https://msdn.microsoft.com/library/windows/apps/br227061) object that contains an identifier for your app, the username and the password, and pass that to the [**PasswordVault.Add**](https://msdn.microsoft.com/library/windows/apps/hh701231) method to add the credential to the locker."},{"content":"Retrieving user credentials","pos":[2448,2475]},{"pos":[2478,2681],"content":"You have several options for retrieving user credentials from the Credential Locker after you have a reference to the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227081)</ept> object.","source":"You have several options for retrieving user credentials from the Credential Locker after you have a reference to the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object."},{"pos":[2687,2879],"content":"You can retrieve all the credentials the user has supplied for your app in the locker with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault.RetrieveAll<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227088)</ept> method.","source":"You can retrieve all the credentials the user has supplied for your app in the locker with the [**PasswordVault.RetrieveAll**](https://msdn.microsoft.com/library/windows/apps/br227088) method."},{"pos":[2885,3105],"content":"If you know the username for the stored credentials, you can retrieve all the credentials for that username with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault.FindAllByUserName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227084)</ept> method.","source":"If you know the username for the stored credentials, you can retrieve all the credentials for that username with the [**PasswordVault.FindAllByUserName**](https://msdn.microsoft.com/library/windows/apps/br227084) method."},{"pos":[3111,3341],"content":"If you know the resource name for the stored credentials, you can retrieve all the credentials for that resource name with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault.FindAllByResource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227083)</ept> method.","source":"If you know the resource name for the stored credentials, you can retrieve all the credentials for that resource name with the [**PasswordVault.FindAllByResource**](https://msdn.microsoft.com/library/windows/apps/br227083) method."},{"pos":[3347,3567],"content":"Finally, if you know both the username and the resource name for a credential, you can retrieve just that credential with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault.Retrieve<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227087)</ept> method.","source":"Finally, if you know both the username and the resource name for a credential, you can retrieve just that credential with the [**PasswordVault.Retrieve**](https://msdn.microsoft.com/library/windows/apps/br227087) method."},{"content":"Let’s look at an example where we have stored the resource name globally in an app and we log the user on automatically if we find a credential for them.","pos":[3569,3722]},{"content":"If we find multiple credentials for the same user, we ask the user to select a default credential to use when logging on.","pos":[3723,3844]},{"content":"Deleting user credentials","pos":[5348,5373]},{"content":"Deleting user credentials in the Credential Locker is also a quick, two-step process.","pos":[5376,5461]},{"pos":[5467,5718],"content":"Obtain a reference to the Credential Locker using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227081)</ept> object from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Windows.Security.Credentials<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227089)</ept> namespace.","source":"Obtain a reference to the Credential Locker using the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object from the [**Windows.Security.Credentials**](https://msdn.microsoft.com/library/windows/apps/br227089) namespace."},{"pos":[5724,5862],"content":"Pass the credential you want to delete to the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PasswordVault.Remove<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701242)</ept> method.","source":"Pass the credential you want to delete to the [**PasswordVault.Remove**](https://msdn.microsoft.com/library/windows/apps/hh701242) method."},{"content":"Best practices","pos":[6042,6056]},{"content":"Only use the credential locker for passwords and not for larger data blobs.","pos":[6059,6134]},{"content":"Save passwords in the credential locker only if the following criteria are met:","pos":[6136,6215]},{"content":"The user has successfully signed in.","pos":[6221,6257]},{"content":"The user has opted to save passwords.","pos":[6262,6299]},{"content":"Never store credentials in plain-text using app data or roaming settings.","pos":[6301,6374]}],"content":"---\ntitle: Credential locker\ndescription: This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.\nms.assetid: 7BCC443D-9E8A-417C-B275-3105F5DED863\n---\n\n# Credential locker\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThis article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.\n\nFor example, you have an app that connects to a service to access protected resources such as media files, or social networking. Your service requires login information for each user. You’ve built UI into your app that gets the username and password for the user, which is then used to log the user into the service. Using the Credential Locker API, you can store the username and password for your user and easily retrieve them and log the user in automatically the next time they open your app, regardless of what device they're on.\n\nCredential locker works a little differently for domain accounts. If there are credentials stored with your Microsoft account, and you associate that account with a domain account (such as the account that you use at work), your credentials will roam to that domain account. However, any new credentials added when signed on with the domain account won’t roam. This ensures that private credentials for the domain aren’t exposed outside of the domain.\n\n## Storing user credentials\n\n\n1.  Obtain a reference to the Credential Locker using the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object from the [**Windows.Security.Credentials**](https://msdn.microsoft.com/library/windows/apps/br227089) namespace.\n2.  Create a [**PasswordCredential**](https://msdn.microsoft.com/library/windows/apps/br227061) object that contains an identifier for your app, the username and the password, and pass that to the [**PasswordVault.Add**](https://msdn.microsoft.com/library/windows/apps/hh701231) method to add the credential to the locker.\n\n```cs\nvar vault = new Windows.Security.Credentials.PasswordVault();\nvault.Add(new Windows.Security.Credentials.PasswordCredential(\n    \"My App\", username, password));\n```\n\n## Retrieving user credentials\n\n\nYou have several options for retrieving user credentials from the Credential Locker after you have a reference to the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object.\n\n-   You can retrieve all the credentials the user has supplied for your app in the locker with the [**PasswordVault.RetrieveAll**](https://msdn.microsoft.com/library/windows/apps/br227088) method.\n\n-   If you know the username for the stored credentials, you can retrieve all the credentials for that username with the [**PasswordVault.FindAllByUserName**](https://msdn.microsoft.com/library/windows/apps/br227084) method.\n\n-   If you know the resource name for the stored credentials, you can retrieve all the credentials for that resource name with the [**PasswordVault.FindAllByResource**](https://msdn.microsoft.com/library/windows/apps/br227083) method.\n\n-   Finally, if you know both the username and the resource name for a credential, you can retrieve just that credential with the [**PasswordVault.Retrieve**](https://msdn.microsoft.com/library/windows/apps/br227087) method.\n\nLet’s look at an example where we have stored the resource name globally in an app and we log the user on automatically if we find a credential for them. If we find multiple credentials for the same user, we ask the user to select a default credential to use when logging on.\n\n```cs\nprivate string resourceName = \"My App\";\nprivate string defaultUserName;\n\nprivate void Login()\n{\n    var loginCredential = GetCredentialFromLocker();\n\n    if (loginCredential != null)\n    {\n        // There is a credential stored in the locker.\n        // Populate the Password property of the credential\n        // for automatic login.\n        loginCredential.RetrievePassword();\n    }\n    else\n    {\n        // There is no credential stored in the locker.\n        // Display UI to get user credentials.\n        loginCredential = GetLoginCredentialUI();\n    }\n\n    // Log the user in.\n    ServerLogin(loginCredential.UserName, loginCredential.Password);\n}\n\n\nprivate Windows.Security.Credentials.PasswordCredential GetCredentialFromLocker()\n{\n    Windows.Security.Credentials.PasswordCredential credential = null;\n\n    var vault = new Windows.Security.Credentials.PasswordVault();\n    var credentialList = vault.FindAllByResource(resourceName);\n    if (credentialList.Count > 0)\n    {\n        if (credentialList.Count == 1)\n        {\n            credential = credentialList[0];\n        }\n        else\n        {\n            // When there are multiple usernames,\n            // retrieve the default username. If one doesn’t\n            // exist, then display UI to have the user select\n            // a default username.\n\n            defaultUserName = GetDefaultUserNameUI();\n\n            credential = vault.Retrieve(resourceName, defaultUserName);\n        }\n    }\n\n    return credential;\n}\n```\n\n## Deleting user credentials\n\n\nDeleting user credentials in the Credential Locker is also a quick, two-step process.\n\n1.  Obtain a reference to the Credential Locker using the [**PasswordVault**](https://msdn.microsoft.com/library/windows/apps/br227081) object from the [**Windows.Security.Credentials**](https://msdn.microsoft.com/library/windows/apps/br227089) namespace.\n\n2.  Pass the credential you want to delete to the [**PasswordVault.Remove**](https://msdn.microsoft.com/library/windows/apps/hh701242) method.\n\n```cs\nvar vault = new Windows.Security.Credentials.PasswordVault();\nvault.Remove(new Windows.Security.Credentials.PasswordCredential(\n    \"My App\", username, password));\n```\n\n## Best practices\n\n\nOnly use the credential locker for passwords and not for larger data blobs.\n\nSave passwords in the credential locker only if the following criteria are met:\n\n-   The user has successfully signed in.\n-   The user has opted to save passwords.\n\nNever store credentials in plain-text using app data or roaming settings.\n\n \n\n \n\n\n\n\n"}