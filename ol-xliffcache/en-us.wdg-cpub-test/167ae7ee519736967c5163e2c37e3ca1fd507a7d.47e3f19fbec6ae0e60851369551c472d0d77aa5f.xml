{"nodes":[{"pos":[17,124],"content":"Uniquely identifies object elements for access to the instantiated object from code-behind or general code.","needQuote":true,"needEscape":true,"nodes":[{"content":"Uniquely identifies object elements for access to the instantiated object from code-behind or general code.","pos":[0,107]}]},{"pos":[132,149],"content":"x:Name attribute'","needQuote":true,"needEscape":true,"nodes":[{"content":"x:Name attribute'","pos":[0,17]}]},{"content":"x:Name attribute","pos":[206,222]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[224,262]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[263,358],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Uniquely identifies object elements for access to the instantiated object from code-behind or general code.","pos":[360,467]},{"content":"Once applied to a backing programming model, <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> can be considered equivalent to the variable holding an object reference, as returned by a constructor.","pos":[468,627],"source":" Once applied to a backing programming model, **x:Name** can be considered equivalent to the variable holding an object reference, as returned by a constructor."},{"content":"XAML attribute usage","pos":[632,652]},{"content":"XAML values","pos":[709,720]},{"content":"Term","pos":[724,728]},{"content":"Description","pos":[731,742]},{"content":"XAMLNameValue","pos":[770,783]},{"content":"A string that conforms to the restrictions of the XamlName grammar.","pos":[786,853]},{"content":"XamlName grammar","pos":[861,877]},{"content":"The following is the normative grammar for a string that is used as a key in this XAML implementation:","pos":[879,981]},{"content":"Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\\_) character.","pos":[1218,1385]},{"content":"The Unicode character range is not supported.","pos":[1390,1435]},{"content":"A name cannot begin with a digit.","pos":[1440,1473]},{"content":"Some tool implementations prepend an underscore (\\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> values based on other values that contain digits.","pos":[1474,1680],"source":" Some tool implementations prepend an underscore (\\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates **x:Name** values based on other values that contain digits."},{"content":"Remarks","pos":[1685,1692]},{"content":"The specified <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.","pos":[1694,1857],"source":"The specified **x:Name** becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object."},{"content":"The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind.","pos":[1858,2030]},{"content":"This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> in its programming and application models.","pos":[2031,2252],"source":" This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use **x:Name** in its programming and application models."},{"content":"Each defined <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> must be unique within a XAML namescope.","pos":[2254,2317],"source":"Each defined **x:Name** must be unique within a XAML namescope."},{"content":"Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page.","pos":[2318,2467]},{"content":"Additional XAML namescopes are defined by any control template or data template that is defined on that page.","pos":[2468,2577]},{"content":"At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>XamlReader.Load<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br228048)</ept>.","pos":[2578,2835],"source":" At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to [**XamlReader.Load**](https://msdn.microsoft.com/library/windows/apps/br228048)."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>XAML namescopes<ept id=\"p1\">](xaml-namescopes.md)</ept>.","pos":[2836,2893],"source":" For more info, see [XAML namescopes](xaml-namescopes.md)."},{"content":"Design tools often autogenerate <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> values for elements when they are introduced to the design surface.","pos":[2895,3005],"source":"Design tools often autogenerate **x:Name** values for elements when they are introduced to the design surface."},{"content":"The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer.","pos":[3006,3216]},{"content":"For example, if you introduce the first <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> element to the designer, you might see that in the XAML this element has the <bpt id=\"p3\">**</bpt>x:Name<ept id=\"p3\">**</ept> attribute value of \"Button1\".","pos":[3217,3445],"source":" For example, if you introduce the first [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) element to the designer, you might see that in the XAML this element has the **x:Name** attribute value of \"Button1\"."},{"content":"<bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> cannot be set in XAML property element syntax, or in code using <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SetValue<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept>.","pos":[3447,3595],"source":"**x:Name** cannot be set in XAML property element syntax, or in code using [**SetValue**](https://msdn.microsoft.com/library/windows/apps/br242361)."},{"content":"<bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> can only be set using XAML attribute syntax on elements.","pos":[3596,3663],"source":"**x:Name** can only be set using XAML attribute syntax on elements."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Specifically for C++/CX apps, a backing field for an <bpt id=\"p2\">**</bpt>x:Name<ept id=\"p2\">**</ept> reference is not created for the root element of a XAML file or page.","pos":[3665,3808],"source":"**Note**  Specifically for C++/CX apps, a backing field for an **x:Name** reference is not created for the root element of a XAML file or page."},{"content":"If you need to reference the root object from C++ code-behind, use other APIs or tree traversal.","pos":[3809,3905]},{"content":"For example you can call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FindName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208715)</ept> for a known named child element and then call <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Parent<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208739)</ept>.","pos":[3906,4121],"source":" For example you can call [**FindName**](https://msdn.microsoft.com/library/windows/apps/br208715) for a known named child element and then call [**Parent**](https://msdn.microsoft.com/library/windows/apps/br208739)."},{"content":"x:Name and other Name properties","pos":[4127,4159]},{"content":"Some types used in UWP XAML also have a property named <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept>.","pos":[4161,4225],"source":"Some types used in UWP XAML also have a property named **Name**."},{"content":"For example, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement.Name<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208735)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>TextElement.Name<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh702125)</ept>.","pos":[4226,4410],"source":" For example, [**FrameworkElement.Name**](https://msdn.microsoft.com/library/windows/apps/br208735) and [**TextElement.Name**](https://msdn.microsoft.com/library/windows/apps/hh702125)."},{"content":"If <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> is available as a settable property on an element, <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>x:Name<ept id=\"p3\">**</ept> can be used interchangeably in XAML, but an error results if both attributes are specified on the same element.","pos":[4412,4610],"source":"If **Name** is available as a settable property on an element, **Name** and **x:Name** can be used interchangeably in XAML, but an error results if both attributes are specified on the same element."},{"content":"There are also cases where there's a <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> property but it's read-only (like <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>VisualState.Name<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209031)</ept>).","pos":[4611,4773],"source":" There are also cases where there's a **Name** property but it's read-only (like [**VisualState.Name**](https://msdn.microsoft.com/library/windows/apps/br209031))."},{"content":"If that's the case you always use <bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> to name that element in the XAML and the read-only <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> exists for some less-common code scenario.","pos":[4774,4921],"source":" If that's the case you always use **x:Name** to name that element in the XAML and the read-only **Name** exists for some less-common code scenario."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>FrameworkElement.Name<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208735)</ept> generally should not be used as a way to change values originally set by <bpt id=\"p4\">**</bpt>x:Name<ept id=\"p4\">**</ept>, although there are some scenarios that are exceptions to that general rule.","pos":[4923,5179],"source":"**Note**  [**FrameworkElement.Name**](https://msdn.microsoft.com/library/windows/apps/br208735) generally should not be used as a way to change values originally set by **x:Name**, although there are some scenarios that are exceptions to that general rule."},{"content":"In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation.","pos":[5180,5279]},{"content":"Modifying <bpt id=\"p1\">**</bpt>FrameworkElement.Name<ept id=\"p1\">**</ept> at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.","pos":[5280,5458],"source":" Modifying **FrameworkElement.Name** at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind."},{"content":"x:Name and x:Key","pos":[5464,5480]},{"content":"<bpt id=\"p1\">**</bpt>x:Name<ept id=\"p1\">**</ept> can be applied as an attribute to elements within a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ResourceDictionary<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208794)</ept> to act as a substitute for the <bpt id=\"p4\">[</bpt>x:Key attribute<ept id=\"p4\">](x-key-attribute.md)</ept>.","pos":[5482,5697],"source":"**x:Name** can be applied as an attribute to elements within a [**ResourceDictionary**](https://msdn.microsoft.com/library/windows/apps/br208794) to act as a substitute for the [x:Key attribute](x-key-attribute.md)."},{"content":"(Normally it's a rule that all elements in a <bpt id=\"p1\">**</bpt>ResourceDictionary<ept id=\"p1\">**</ept> must have an x:Key attribute.) This is common for <bpt id=\"p2\">[</bpt>Storyboarded animations<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/mt187354)</ept>.","pos":[5698,5900],"source":" (Normally it's a rule that all elements in a **ResourceDictionary** must have an x:Key attribute.) This is common for [Storyboarded animations](https://msdn.microsoft.com/library/windows/apps/mt187354)."},{"content":"For more info, see section of <bpt id=\"p1\">[</bpt>ResourceDictionary and XAML resource references<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187273)</ept>.","pos":[5901,6039],"source":" For more info, see section of [ResourceDictionary and XAML resource references](https://msdn.microsoft.com/library/windows/apps/mt187273)."}],"content":"---\ndescription: Uniquely identifies object elements for access to the instantiated object from code-behind or general code.\ntitle: x:Name attribute'\nms.assetid: 4FF1F3ED-903A-4305-B2BD-DCD29E0C9E6D\n---\n\n# x:Name attribute\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nUniquely identifies object elements for access to the instantiated object from code-behind or general code. Once applied to a backing programming model, **x:Name** can be considered equivalent to the variable holding an object reference, as returned by a constructor.\n\n## XAML attribute usage\n\n``` syntax\n<object x:Name=\"XAMLNameValue\".../>\n```\n\n## XAML values\n\n| Term | Description |\n|------|-------------|\n| XAMLNameValue | A string that conforms to the restrictions of the XamlName grammar. |\n\n##  XamlName grammar\n\nThe following is the normative grammar for a string that is used as a key in this XAML implementation:\n\n``` syntax\nXamlName ::= NameStartChar (NameChar)*\nNameStartChar ::= LetterCharacter | '_'\nNameChar ::= NameStartChar | DecimalDigit\nLetterCharacter ::= ('a'-'z') | ('A'–'Z')\nDecimalDigit ::= '0'-'9'\nCombiningCharacter::= none\n```\n\n-   Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\\_) character.\n-   The Unicode character range is not supported.\n-   A name cannot begin with a digit. Some tool implementations prepend an underscore (\\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates **x:Name** values based on other values that contain digits.\n\n## Remarks\n\nThe specified **x:Name** becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object. The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind. This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use **x:Name** in its programming and application models.\n\nEach defined **x:Name** must be unique within a XAML namescope. Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page. Additional XAML namescopes are defined by any control template or data template that is defined on that page. At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to [**XamlReader.Load**](https://msdn.microsoft.com/library/windows/apps/br228048). For more info, see [XAML namescopes](xaml-namescopes.md).\n\nDesign tools often autogenerate **x:Name** values for elements when they are introduced to the design surface. The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer. For example, if you introduce the first [**Button**](https://msdn.microsoft.com/library/windows/apps/br209265) element to the designer, you might see that in the XAML this element has the **x:Name** attribute value of \"Button1\".\n\n**x:Name** cannot be set in XAML property element syntax, or in code using [**SetValue**](https://msdn.microsoft.com/library/windows/apps/br242361). **x:Name** can only be set using XAML attribute syntax on elements.\n\n**Note**  Specifically for C++/CX apps, a backing field for an **x:Name** reference is not created for the root element of a XAML file or page. If you need to reference the root object from C++ code-behind, use other APIs or tree traversal. For example you can call [**FindName**](https://msdn.microsoft.com/library/windows/apps/br208715) for a known named child element and then call [**Parent**](https://msdn.microsoft.com/library/windows/apps/br208739).\n\n### x:Name and other Name properties\n\nSome types used in UWP XAML also have a property named **Name**. For example, [**FrameworkElement.Name**](https://msdn.microsoft.com/library/windows/apps/br208735) and [**TextElement.Name**](https://msdn.microsoft.com/library/windows/apps/hh702125).\n\nIf **Name** is available as a settable property on an element, **Name** and **x:Name** can be used interchangeably in XAML, but an error results if both attributes are specified on the same element. There are also cases where there's a **Name** property but it's read-only (like [**VisualState.Name**](https://msdn.microsoft.com/library/windows/apps/br209031)). If that's the case you always use **x:Name** to name that element in the XAML and the read-only **Name** exists for some less-common code scenario.\n\n**Note**  [**FrameworkElement.Name**](https://msdn.microsoft.com/library/windows/apps/br208735) generally should not be used as a way to change values originally set by **x:Name**, although there are some scenarios that are exceptions to that general rule. In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation. Modifying **FrameworkElement.Name** at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.\n\n### x:Name and x:Key\n\n**x:Name** can be applied as an attribute to elements within a [**ResourceDictionary**](https://msdn.microsoft.com/library/windows/apps/br208794) to act as a substitute for the [x:Key attribute](x-key-attribute.md). (Normally it's a rule that all elements in a **ResourceDictionary** must have an x:Key attribute.) This is common for [Storyboarded animations](https://msdn.microsoft.com/library/windows/apps/mt187354). For more info, see section of [ResourceDictionary and XAML resource references](https://msdn.microsoft.com/library/windows/apps/mt187273).\n\n"}