<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-c5d768e</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">dbb5b7c4ba80579c8322a0f7662c51a86d2cbc86</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\compare-opengl-es-2-0-api-design-to-directx.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a04d6b5320e037593b38ccd0a0416de199fa0154</mda:meta><mda:meta type="olxliffhash">a9963adbd21287e1c38e0ed2a8cea902db63ed73</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Plan your port from OpenGL ES 2.0 to Direct3D</source>
					<target>Plan your port from OpenGL ES 2.0 to Direct3D</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</source>
					<target>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Plan your port from OpenGL ES 2.0 to Direct3D</source>
					<target>Plan your port from OpenGL ES 2.0 to Direct3D</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Direct3D 11</source>
					<target>Direct3D 11</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Visual C++</source>
					<target>Visual C++</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</source>
					<target>If you are porting a game from the iOS or Android platforms, you have probably made a significant investment in OpenGL ES 2.0.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</source>
					<target>When preparing to move your graphics pipeline codebase to Direct3D 11 and the Windows Runtime, there are a few things you should consider before you start.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Most porting efforts usually involving initially walking the codebase and mapping common APIs and patterns between the two models.</source>
					<target>Most porting efforts usually involving initially walking the codebase and mapping common APIs and patterns between the two models.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You'll find this process a bit easier if you take some time to read and review this topic.</source>
					<target>You'll find this process a bit easier if you take some time to read and review this topic.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Here are some things to be aware of when porting graphics from OpenGL ES 2.0 to Direct3D 11.</source>
					<target>Here are some things to be aware of when porting graphics from OpenGL ES 2.0 to Direct3D 11.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Notes on specific OpenGL ES 2.0 providers</source>
					<target>Notes on specific OpenGL ES 2.0 providers</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The porting topics in this section reference the Windows implementation of the OpenGL ES 2.0 specification created by the Khronos Group.</source>
					<target>The porting topics in this section reference the Windows implementation of the OpenGL ES 2.0 specification created by the Khronos Group.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>All OpenGL ES 2.0 code samples were developed using Visual Studio 2012 and basic Windows C syntax.</source>
					<target>All OpenGL ES 2.0 code samples were developed using Visual Studio 2012 and basic Windows C syntax.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>If you are coming from an Objective-C (iOS) or Java (Android) codebase, be aware that the provided OpenGL ES 2.0 code samples may not use similar API calling syntax or parameters.</source>
					<target>If you are coming from an Objective-C (iOS) or Java (Android) codebase, be aware that the provided OpenGL ES 2.0 code samples may not use similar API calling syntax or parameters.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This guidance tries to stay as platform agnostic as possible.</source>
					<target>This guidance tries to stay as platform agnostic as possible.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>This documentation only uses the 2.0 specification APIs for the OpenGL ES code and reference.</source>
					<target>This documentation only uses the 2.0 specification APIs for the OpenGL ES code and reference.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>If you are porting from OpenGL ES 1.1 or 3.0, this content can still prove useful, although some of the OpenGL ES 2.0 code examples and context may be unfamiliar.</source>
					<target>If you are porting from OpenGL ES 1.1 or 3.0, this content can still prove useful, although some of the OpenGL ES 2.0 code examples and context may be unfamiliar.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The Direct3D 11 samples in these topics use Microsoft Windows C++ with Component Extensions (CX).</source>
					<target>The Direct3D 11 samples in these topics use Microsoft Windows C++ with Component Extensions (CX).</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/60k1461a.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xey702bw.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br212455.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on this version of the C++ syntax, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C++</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Component Extensions for Runtime Platforms</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Quick Reference (C++\\CX)</pc>.</source>
					<target>For more info on this version of the C++ syntax, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual C++</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Component Extensions for Runtime Platforms</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Quick Reference (C++\\CX)</pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Understand your hardware requirements and resources</source>
					<target>Understand your hardware requirements and resources</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The set of graphics processing features supported by OpenGL ES 2.0 roughly maps to the features provided in Direct3D 9.1.</source>
					<target>The set of graphics processing features supported by OpenGL ES 2.0 roughly maps to the features provided in Direct3D 9.1.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476080)</data>
					<data id="id3">[</data>
					<data id="id4">](porting-your-directx-9-game-to-windows-store.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you want to take advantage of the more advanced features provided in Direct3D 11, review the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D 11</pc> documentation when planning your port, or review the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Port from DirectX 9 to Universal Windows Platform (UWP)</pc> topics when you're done with the initial effort.</source>
					<target>If you want to take advantage of the more advanced features provided in Direct3D 11, review the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Direct3D 11</pc> documentation when planning your port, or review the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Port from DirectX 9 to Universal Windows Platform (UWP)</pc> topics when you're done with the initial effort.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>To make your initial porting effort simple, start with a Visual Studio Direct3D template.</source>
					<target>To make your initial porting effort simple, start with a Visual Studio Direct3D template.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>It provides a basic renderer already configured for you, and supports UWP app features like recreating resources on window changes and Direct3D feature levels.</source>
					<target>It provides a basic renderer already configured for you, and supports UWP app features like recreating resources on window changes and Direct3D feature levels.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Understand Direct3D feature levels</source>
					<target>Understand Direct3D feature levels</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Direct3D 11 provides support for hardware "feature levels" from 9\_1 (Direct3D 9.1) for 11\_1.</source>
					<target>Direct3D 11 provides support for hardware "feature levels" from 9\_1 (Direct3D 9.1) for 11\_1.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>These feature levels indicate the availability of certain graphics features and resources.</source>
					<target>These feature levels indicate the availability of certain graphics features and resources.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Typically, most OpenGL ES 2.0 platforms support a Direct3D 9.1 (feature level 9\_1) set of features.</source>
					<target>Typically, most OpenGL ES 2.0 platforms support a Direct3D 9.1 (feature level 9\_1) set of features.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Review DirectX graphics features and APIs</source>
					<target>Review DirectX graphics features and APIs</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>API Family</source>
					<target>API Family</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>DXGI</source>
					<target>DXGI</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>The DirectX Graphics Infrastructure (DXGI) provides an interface between the graphics hardware and Direct3D.</source>
					<target>The DirectX Graphics Infrastructure (DXGI) provides an interface between the graphics hardware and Direct3D.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174523)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/hh404543)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>It sets the device adapter and hardware configuration using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIAdapter</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IDXGIDevice1</pc></pc> COM interfaces.</source>
					<target>It sets the device adapter and hardware configuration using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIAdapter</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IDXGIDevice1</pc></pc> COM interfaces.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Use it to create and configure your buffers and other window resources.</source>
					<target>Use it to create and configure your buffers and other window resources.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Notably, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIFactory2</pc></pc> factory pattern iis used to acquire the graphics resources, including the swap chain (a set of frame buffers).</source>
					<target>Notably, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIFactory2</pc></pc> factory pattern iis used to acquire the graphics resources, including the swap chain (a set of frame buffers).</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Since DXGI owns the swap chain, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain1</pc></pc> interface is used to present frames to the screen.</source>
					<target>Since DXGI owns the swap chain, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain1</pc></pc> interface is used to present frames to the screen.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Direct3D</source>
					<target>Direct3D</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Direct3D is the set of APIs that provide a virtual representation of the graphics interface and allow you to draw graphics using it.</source>
					<target>Direct3D is the set of APIs that provide a virtual representation of the graphics interface and allow you to draw graphics using it.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Version 11, is roughly comparable, feature-wise, to OpenGL 4.3.</source>
					<target>Version 11, is roughly comparable, feature-wise, to OpenGL 4.3.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>(OpenGL ES 2.0, on the other hand, is similar to DirectX9, feature-wise, and OpenGL 2.0, but with OpenGL 3.0's unified shader pipeline.) Most of the heavy lifting is done with the ID3D11Device1 and ID3D11DeviceContext1 interfaces which provide access to individual resources and subresources, and the rendering context, respectively.</source>
					<target>(OpenGL ES 2.0, on the other hand, is similar to DirectX9, feature-wise, and OpenGL 2.0, but with OpenGL 3.0's unified shader pipeline.) Most of the heavy lifting is done with the ID3D11Device1 and ID3D11DeviceContext1 interfaces which provide access to individual resources and subresources, and the rendering context, respectively.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Direct2D</source>
					<target>Direct2D</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Direct2D provides a set of APIs for GPU-accelerated 2D rendering.</source>
					<target>Direct2D provides a set of APIs for GPU-accelerated 2D rendering.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>It can be considered similar in purpose to OpenVG.</source>
					<target>It can be considered similar in purpose to OpenVG.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>DirectWrite</source>
					<target>DirectWrite</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>DirectWrite provides a set of APIs for GPU-accelerated, high-quality font rendering.</source>
					<target>DirectWrite provides a set of APIs for GPU-accelerated, high-quality font rendering.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>DirectXMath</source>
					<target>DirectXMath</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>DirectXMath provides a set of APIs and macros for handling common linear algebra and trigonometric types, values, and functions.</source>
					<target>DirectXMath provides a set of APIs and macros for handling common linear algebra and trigonometric types, values, and functions.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>These types and functions are designed to work well with Direct3D and its shader operations.</source>
					<target>These types and functions are designed to work well with Direct3D and its shader operations.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>DirectX HLSL</source>
					<target>DirectX HLSL</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>The current HLSL syntax used by Direct3D shaders.</source>
					<target>The current HLSL syntax used by Direct3D shaders.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>It implements Direct3D Shader Model 5.0.</source>
					<target>It implements Direct3D Shader Model 5.0.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Review the Windows Runtime APIs and template library</source>
					<target>Review the Windows Runtime APIs and template library</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime APIs provide the overall infrastructure for UWP apps.</source>
					<target>The Windows Runtime APIs provide the overall infrastructure for UWP apps.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211377)</data>
				</originalData>
				<segment state="initial">
					<source>Review them <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</source>
					<target>Review them <pc dataRefEnd="id2" dataRefStart="id1" id="p1">here</pc>.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Key Windows Runtime APIs used in porting your graphics pipeline include:</source>
					<target>Key Windows Runtime APIs used in porting your graphics pipeline include:</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Windows::UI::Core::CoreWindow</source>
					<target>Windows::UI::Core::CoreWindow</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Windows::UI::Core::CoreDispatcher</source>
					<target>Windows::UI::Core::CoreDispatcher</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Windows::ApplicationModel::Core::IFrameworkView</source>
					<target>Windows::ApplicationModel::Core::IFrameworkView</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Windows::ApplicationModel::Core::CoreApplicationView</source>
					<target>Windows::ApplicationModel::Core::CoreApplicationView</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Additionally, the Windows Runtime C++ Template Library (WRL) is a template library that provides a low-level way to author and use Windows Runtime components.</source>
					<target>Additionally, the Windows Runtime C++ Template Library (WRL) is a template library that provides a low-level way to author and use Windows Runtime components.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The Direct3D 11 APIs for UWP apps are best used in conjunctions with the interfaces and types in this library, such as smart pointers (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ComPtr</pc>).</source>
					<target>The Direct3D 11 APIs for UWP apps are best used in conjunctions with the interfaces and types in this library, such as smart pointers (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ComPtr</pc>).</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/hh438466.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on the WRL, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime C++ Template Library (WRL)</pc>.</source>
					<target>For more info on the WRL, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Runtime C++ Template Library (WRL)</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Change your coordinate system</source>
					<target>Change your coordinate system</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>One difference that sometimes confuses early port efforts is the change from OpenGL's traditional right-handed coordinate system to Direct3D's default left-handed coordinate system.</source>
					<target>One difference that sometimes confuses early port efforts is the change from OpenGL's traditional right-handed coordinate system to Direct3D's default left-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>This change in coordinate modeling affects many parts of your game, from the setup and configuration of your vertex buffers to many of your matrix math functions.</source>
					<target>This change in coordinate modeling affects many parts of your game, from the setup and configuration of your vertex buffers to many of your matrix math functions.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>The two most important changes to make are:</source>
					<target>The two most important changes to make are:</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Flip the order of triangle vertices so that Direct3D traverses them clockwise from the front.</source>
					<target>Flip the order of triangle vertices so that Direct3D traverses them clockwise from the front.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>For example, if your vertices are indexed as 0, 1, and 2 in your OpenGL pipeline, pass them to Direct3D as 0, 2, 1 instead.</source>
					<target>For example, if your vertices are indexed as 0, 1, and 2 in your OpenGL pipeline, pass them to Direct3D as 0, 2, 1 instead.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Use the view matrix to scale world space by -1.0f in the z direction, effectively reversing the z-axis coordinates.</source>
					<target>Use the view matrix to scale world space by -1.0f in the z direction, effectively reversing the z-axis coordinates.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb147180)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To do this, flip the sign of the values at positions M31, M32, and M33 in your view matrix (when porting it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Matrix</pc></pc> type).</source>
					<target>To do this, flip the sign of the values at positions M31, M32, and M33 in your view matrix (when porting it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Matrix</pc></pc> type).</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>If M34 is not 0, flip its sign as well.</source>
					<target>If M34 is not 0, flip its sign as well.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>However, Direct3D can support a right-handed coordinate system.</source>
					<target>However, Direct3D can support a right-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>DirectXMath provides a number of functions that operate on and across both left-handed and right-handed coordinate systems.</source>
					<target>DirectXMath provides a number of functions that operate on and across both left-handed and right-handed coordinate systems.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>They can be used to preserve some of your original mesh data and matrix processing.</source>
					<target>They can be used to preserve some of your original mesh data and matrix processing.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>They include:</source>
					<target>They include:</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>DirectXMath matrix function</source>
					<target>DirectXMath matrix function</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>XMMatrixLookAtLH</source>
					<target>XMMatrixLookAtLH</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point.</source>
					<target>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a focal point.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>XMMatrixLookAtRH</source>
					<target>XMMatrixLookAtRH</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point.</source>
					<target>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a focal point.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>XMMatrixLookToLH</source>
					<target>XMMatrixLookToLH</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction.</source>
					<target>Builds a view matrix for a left-handed coordinate system using a camera position, an up direction, and a camera direction.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>XMMatrixLookToRH</source>
					<target>XMMatrixLookToRH</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction.</source>
					<target>Builds a view matrix for a right-handed coordinate system using a camera position, an up direction, and a camera direction.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>XMMatrixOrthographicLH</source>
					<target>XMMatrixOrthographicLH</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Builds an orthogonal projection matrix for a left-handed coordinate system.</source>
					<target>Builds an orthogonal projection matrix for a left-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>XMMatrixOrthographicOffCenterLH</source>
					<target>XMMatrixOrthographicOffCenterLH</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Builds a custom orthogonal projection matrix for a left-handed coordinate system.</source>
					<target>Builds a custom orthogonal projection matrix for a left-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>XMMatrixOrthographicOffCenterRH</source>
					<target>XMMatrixOrthographicOffCenterRH</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Builds a custom orthogonal projection matrix for a right-handed coordinate system.</source>
					<target>Builds a custom orthogonal projection matrix for a right-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>XMMatrixOrthographicRH</source>
					<target>XMMatrixOrthographicRH</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Builds an orthogonal projection matrix for a right-handed coordinate system.</source>
					<target>Builds an orthogonal projection matrix for a right-handed coordinate system.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveFovLH</source>
					<target>XMMatrixPerspectiveFovLH</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Builds a left-handed perspective projection matrix based on a field of view.</source>
					<target>Builds a left-handed perspective projection matrix based on a field of view.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveFovRH</source>
					<target>XMMatrixPerspectiveFovRH</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Builds a right-handed perspective projection matrix based on a field of view.</source>
					<target>Builds a right-handed perspective projection matrix based on a field of view.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveLH</source>
					<target>XMMatrixPerspectiveLH</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Builds a left-handed perspective projection matrix.</source>
					<target>Builds a left-handed perspective projection matrix.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveOffCenterLH</source>
					<target>XMMatrixPerspectiveOffCenterLH</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Builds a custom version of a left-handed perspective projection matrix.</source>
					<target>Builds a custom version of a left-handed perspective projection matrix.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveOffCenterRH</source>
					<target>XMMatrixPerspectiveOffCenterRH</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Builds a custom version of a right-handed perspective projection matrix.</source>
					<target>Builds a custom version of a right-handed perspective projection matrix.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>XMMatrixPerspectiveRH</source>
					<target>XMMatrixPerspectiveRH</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Builds a right-handed perspective projection matrix.</source>
					<target>Builds a right-handed perspective projection matrix.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>OpenGL ES2.0-to-Direct3D 11 porting Frequently Asked Questions</source>
					<target>OpenGL ES2.0-to-Direct3D 11 porting Frequently Asked Questions</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>Question: "In general, can I search for certain strings or patterns in my OpenGL code and replace them with the Direct3D equivalents?"</source>
					<target>Question: "In general, can I search for certain strings or patterns in my OpenGL code and replace them with the Direct3D equivalents?"</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Answer: No.</source>
					<target>Answer: No.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>OpenGL ES 2.0 and Direct3D 11 come from different generations of graphics pipeline modeling.</source>
					<target>OpenGL ES 2.0 and Direct3D 11 come from different generations of graphics pipeline modeling.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>While there are some surface similarities between concepts and APIs, such as the rendering context and the instancing of shaders, you should review this guidance as well as the Direct3D 11 reference so you can make the best choices when recreating your pipeline instead of attempting a 1-to-1 mapping.</source>
					<target>While there are some surface similarities between concepts and APIs, such as the rendering context and the instancing of shaders, you should review this guidance as well as the Direct3D 11 reference so you can make the best choices when recreating your pipeline instead of attempting a 1-to-1 mapping.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>However, if you are porting from GLSL to HLSL, creating a set of common aliases for GLSL variables, intrinsincs, and functions can not only make porting easier, it allows you to maintain only one set of shader code files.</source>
					<target>However, if you are porting from GLSL to HLSL, creating a set of common aliases for GLSL variables, intrinsincs, and functions can not only make porting easier, it allows you to maintain only one set of shader code files.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>