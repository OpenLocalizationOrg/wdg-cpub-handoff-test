{"nodes":[{"pos":[11,22],"content":"Smart cards","needQuote":true,"needEscape":true,"nodes":[{"content":"Smart cards","pos":[0,11]}]},{"pos":[36,348],"content":"This topic explains how Universal Windows Platform (UWP) apps can use smart cards to connect users to secure network services, including how to access physical smart card readers, create virtual smart cards, communicate with smart cards, authenticate users, reset user PINs, and remove or disconnect smart cards.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic explains how Universal Windows Platform (UWP) apps can use smart cards to connect users to secure network services, including how to access physical smart card readers, create virtual smart cards, communicate with smart cards, authenticate users, reset user PINs, and remove or disconnect smart cards.","pos":[0,312]}]},{"content":"Smart cards","pos":[405,416]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[419,457]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[458,553],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This topic explains how Universal Windows Platform (UWP) apps can use smart cards to connect users to secure network services, including how to access physical smart card readers, create virtual smart cards, communicate with smart cards, authenticate users, reset user PINs, and remove or disconnect smart cards.","pos":[556,868]},{"content":"Configure the app manifest","pos":[873,899]},{"pos":[902,1081],"content":"Before your app can authenticate users using smart cards or virtual smart cards, you must set the <bpt id=\"p1\">**</bpt>Shared User Certificates<ept id=\"p1\">**</ept> capability in the project Package.appxmanifest file.","source":"Before your app can authenticate users using smart cards or virtual smart cards, you must set the **Shared User Certificates** capability in the project Package.appxmanifest file."},{"content":"Access connected card readers and smart cards","pos":[1086,1131]},{"content":"You can query for readers and attached smart cards by passing the device ID (specified in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceInformation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225393)</ept>) to the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardReader.FromIdAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263890)</ept> method.","pos":[1134,1413],"source":"You can query for readers and attached smart cards by passing the device ID (specified in [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/br225393)) to the [**SmartCardReader.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn263890) method."},{"content":"To access the smart cards currently attached to the returned reader device, call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardReader.FindAllCardsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263887)</ept>.","pos":[1414,1593],"source":" To access the smart cards currently attached to the returned reader device, call [**SmartCardReader.FindAllCardsAsync**](https://msdn.microsoft.com/library/windows/apps/dn263887)."},{"pos":[2124,2318],"content":"You should also enable your app to observe for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CardAdded<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263866)</ept> events by implementing a method to handle app behavior on card insertion.","source":"You should also enable your app to observe for [**CardAdded**](https://msdn.microsoft.com/library/windows/apps/dn263866) events by implementing a method to handle app behavior on card insertion."},{"pos":[2477,2763],"content":"You can then pass each returned <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCard<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297565)</ept> object to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardProvisioning<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept> to access the methods that allow your app to access and customize its configuration.","source":"You can then pass each returned [**SmartCard**](https://msdn.microsoft.com/library/windows/apps/dn297565) object to [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) to access the methods that allow your app to access and customize its configuration."},{"content":"Create a virtual smart card","pos":[2768,2795]},{"content":"To create a virtual smart card using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardProvisioning<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept>, your app will first need to provide a friendly name, an admin key, and a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardPinPolicy<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn297642)</ept>.","pos":[2798,3078],"source":"To create a virtual smart card using [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801), your app will first need to provide a friendly name, an admin key, and a [**SmartCardPinPolicy**](https://msdn.microsoft.com/library/windows/apps/dn297642)."},{"content":"The friendly name is generally something provided to the app, but your app will still need to provide an admin key and generate an instance of the current <bpt id=\"p1\">**</bpt>SmartCardPinPolicy<ept id=\"p1\">**</ept> before passing all three values to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RequestVirtualSmartCardCreationAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn263830)</ept>.","pos":[3079,3393],"source":" The friendly name is generally something provided to the app, but your app will still need to provide an admin key and generate an instance of the current **SmartCardPinPolicy** before passing all three values to [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830)."},{"pos":[3399,3508],"content":"Create a new instance of a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardPinPolicy<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297642)</ept>","source":"Create a new instance of a [**SmartCardPinPolicy**](https://msdn.microsoft.com/library/windows/apps/dn297642)"},{"pos":[3513,3718],"content":"Generate the admin key value by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CryptographicBuffer.GenerateRandom<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241392)</ept> on the admin key value provided by the service or management tool.","source":"Generate the admin key value by calling [**CryptographicBuffer.GenerateRandom**](https://msdn.microsoft.com/library/windows/apps/br241392) on the admin key value provided by the service or management tool."},{"pos":[3723,3886],"content":"Pass these values along with the <bpt id=\"p1\">*</bpt>FriendlyNameText<ept id=\"p1\">*</ept> string to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RequestVirtualSmartCardCreationAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn263830)</ept>.","source":"Pass these values along with the *FriendlyNameText* string to [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830)."},{"pos":[4224,4508],"content":"Once <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestVirtualSmartCardCreationAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263830)</ept> has returned the associated <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardProvisioning<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept> object, the virtual smart card is provisioned and ready for use.","source":"Once [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830) has returned the associated [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object, the virtual smart card is provisioned and ready for use."},{"content":"Handle authentication challenges","pos":[4513,4545]},{"content":"To authenticate with smart cards or virtual smart cards, your app must provide the behavior to complete challenges between the admin key data stored on the card, and the admin key data maintained by the authentication server or management tool.","pos":[4548,4792]},{"content":"The following code shows how to support smart card authentication for services or modification of physical or virtual card details.","pos":[4794,4925]},{"content":"If the data generated using the admin key on the card (\"challenge\") is the same as the admin key data provided by the server or management tool (\"adminkey\"), authentication is successful.","pos":[4926,5113]},{"content":"You will see this code referenced throughout the remainder of this topic was we review how to complete an authentication action, and how to apply changes to smart card and virtual smart card information.","pos":[5752,5955]},{"content":"Verify smart card or virtual smart card authentication response","pos":[5960,6023]},{"content":"Now that we have the logic for authentication challenges defined, we can communicate with the reader to access the smart card, or alternatively, access a virtual smart card for authentication.","pos":[6026,6218]},{"content":"To begin the challenge, call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetChallengeContextAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263811)</ept> from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardProvisioning<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept> object associated with the smart card.","pos":[6224,6475],"source":"To begin the challenge, call [**GetChallengeContextAsync**](https://msdn.microsoft.com/library/windows/apps/dn263811) from the [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object associated with the smart card."},{"content":"This will generate an instance of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardChallengeContext<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297570)</ept>, which contains the card's <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Challenge<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn297578)</ept> value.","pos":[6476,6707],"source":" This will generate an instance of [**SmartCardChallengeContext**](https://msdn.microsoft.com/library/windows/apps/dn297570), which contains the card's [**Challenge**](https://msdn.microsoft.com/library/windows/apps/dn297578) value."},{"pos":[6713,6890],"content":"Next, pass the card's challenge value and the admin key provided by the service or management tool to the <bpt id=\"p1\">**</bpt>ChallengeResponseAlgorithm<ept id=\"p1\">**</ept> that we defined in the previous example.","source":"Next, pass the card's challenge value and the admin key provided by the service or management tool to the **ChallengeResponseAlgorithm** that we defined in the previous example."},{"pos":[6896,7033],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>VerifyResponseAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297627)</ept> will return <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept> if authentication is successful.","source":"[**VerifyResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn297627) will return **true** if authentication is successful."},{"content":"Change or reset a user PIN","pos":[7510,7536]},{"content":"To change the PIN associated with a smart card:","pos":[7539,7586]},{"pos":[7592,7729],"content":"Access the card and generate the associated <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardProvisioning<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept> object.","source":"Access the card and generate the associated [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object."},{"pos":[7734,7880],"content":"Call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestPinChangeAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263823)</ept> to display a UI to the user to complete this operation.","source":"Call [**RequestPinChangeAsync**](https://msdn.microsoft.com/library/windows/apps/dn263823) to display a UI to the user to complete this operation."},{"pos":[7885,7951],"content":"If the PIN was successfully changed the call will return <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept>.","source":"If the PIN was successfully changed the call will return **true**."},{"content":"To request a PIN reset:","pos":[8118,8141]},{"content":"Call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestPinResetAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263825)</ept> to initiate the operation.","pos":[8147,8263],"source":"Call [**RequestPinResetAsync**](https://msdn.microsoft.com/library/windows/apps/dn263825) to initiate the operation."},{"content":"This call includes a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardPinResetHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297701)</ept> method that represents the smart card and the pin reset request.","pos":[8264,8438],"source":" This call includes a [**SmartCardPinResetHandler**](https://msdn.microsoft.com/library/windows/apps/dn297701) method that represents the smart card and the pin reset request."},{"pos":[8443,8835],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SmartCardPinResetHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn297701)</ept> provides information that our <bpt id=\"p3\">**</bpt>ChallengeResponseAlgorithm<ept id=\"p3\">**</ept>, wrapped in a <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>SmartCardPinResetDeferral<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn297693)</ept> call, uses to compare the card's challenge value and the admin key provided by the service or management tool to authenticate the request.","source":"[**SmartCardPinResetHandler**](https://msdn.microsoft.com/library/windows/apps/dn297701) provides information that our **ChallengeResponseAlgorithm**, wrapped in a [**SmartCardPinResetDeferral**](https://msdn.microsoft.com/library/windows/apps/dn297693) call, uses to compare the card's challenge value and the admin key provided by the service or management tool to authenticate the request."},{"pos":[8841,9034],"content":"If the challenge is successful, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestPinResetAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263825)</ept> call is completed; returning <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept> if the PIN was successfully reset.","source":"If the challenge is successful, the [**RequestPinResetAsync**](https://msdn.microsoft.com/library/windows/apps/dn263825) call is completed; returning **true** if the PIN was successfully reset."},{"content":"Remove a smart card or virtual smart card","pos":[9647,9688]},{"pos":[9691,9848],"content":"When a physical smart card is removed a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CardRemoved<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263875)</ept> event will fire when the card is deleted.","source":"When a physical smart card is removed a [**CardRemoved**](https://msdn.microsoft.com/library/windows/apps/dn263875) event will fire when the card is deleted."},{"content":"Associate the firing of this event with the card reader with the method that defines your app's behavior on card or reader removal as an event handler.","pos":[9850,10001]},{"content":"This behavior can be something as simply as providing notification to the user that the card was removed.","pos":[10002,10107]},{"pos":[10183,10505],"content":"The removal of a virtual smart card is handled programmatically by first retrieving the card and then calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestVirtualSmartCardDeletionAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263850)</ept> from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SmartCardProvisioning<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263801)</ept> returned object.","source":"The removal of a virtual smart card is handled programmatically by first retrieving the card and then calling [**RequestVirtualSmartCardDeletionAsync**](https://msdn.microsoft.com/library/windows/apps/dn263850) from the [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) returned object."}],"content":"---\ntitle: Smart cards\ndescription: This topic explains how Universal Windows Platform (UWP) apps can use smart cards to connect users to secure network services, including how to access physical smart card readers, create virtual smart cards, communicate with smart cards, authenticate users, reset user PINs, and remove or disconnect smart cards.\nms.assetid: 86524267-50A0-4567-AE17-35C4B6D24745\n---\n\n# Smart cards\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThis topic explains how Universal Windows Platform (UWP) apps can use smart cards to connect users to secure network services, including how to access physical smart card readers, create virtual smart cards, communicate with smart cards, authenticate users, reset user PINs, and remove or disconnect smart cards.\n\n## Configure the app manifest\n\n\nBefore your app can authenticate users using smart cards or virtual smart cards, you must set the **Shared User Certificates** capability in the project Package.appxmanifest file.\n\n## Access connected card readers and smart cards\n\n\nYou can query for readers and attached smart cards by passing the device ID (specified in [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/br225393)) to the [**SmartCardReader.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn263890) method. To access the smart cards currently attached to the returned reader device, call [**SmartCardReader.FindAllCardsAsync**](https://msdn.microsoft.com/library/windows/apps/dn263887).\n\n```cs\nstring selector = SmartCardReader.GetDeviceSelector();\nDeviceInformationCollection devices =\n    await DeviceInformation.FindAllAsync(selector);\n\nforeach (DeviceInformation device in devices)\n{\n    SmartCardReader reader =\n        await SmartCardReader.FromIdAsync(device.Id);\n\n    // For each reader, we want to find all the cards associated\n    // with it.  Then we will create a SmartCardListItem for\n    // each (reader, card) pair.\n    IReadOnlyList<SmartCard> cards =\n        await reader.FindAllCardsAsync();\n}\n```\n\nYou should also enable your app to observe for [**CardAdded**](https://msdn.microsoft.com/library/windows/apps/dn263866) events by implementing a method to handle app behavior on card insertion.\n\n```cs\nprivate void reader_CardAdded(SmartCardReader sender, CardAddedEventArgs args)\n{\n  // A card has been inserted into the sender SmartCardReader.\n}\n```\n\nYou can then pass each returned [**SmartCard**](https://msdn.microsoft.com/library/windows/apps/dn297565) object to [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) to access the methods that allow your app to access and customize its configuration.\n\n## Create a virtual smart card\n\n\nTo create a virtual smart card using [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801), your app will first need to provide a friendly name, an admin key, and a [**SmartCardPinPolicy**](https://msdn.microsoft.com/library/windows/apps/dn297642). The friendly name is generally something provided to the app, but your app will still need to provide an admin key and generate an instance of the current **SmartCardPinPolicy** before passing all three values to [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830).\n\n1.  Create a new instance of a [**SmartCardPinPolicy**](https://msdn.microsoft.com/library/windows/apps/dn297642)\n2.  Generate the admin key value by calling [**CryptographicBuffer.GenerateRandom**](https://msdn.microsoft.com/library/windows/apps/br241392) on the admin key value provided by the service or management tool.\n3.  Pass these values along with the *FriendlyNameText* string to [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830).\n\n```cs\nSmartCardPinPolicy pinPolicy = new SmartCardPinPolicy();\npinPolicy.MinLength = 6;\n\nIBuffer adminkey = CryptographicBuffer.GenerateRandom(24);\n\nSmartCardProvisioning provisioning = await\n     SmartCardProvisioning.RequestVirtualSmartCardCreationAsync(\n          \"Card friendly name\",\n          adminkey,\n          pinPolicy);\n```\n\nOnce [**RequestVirtualSmartCardCreationAsync**](https://msdn.microsoft.com/library/windows/apps/dn263830) has returned the associated [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object, the virtual smart card is provisioned and ready for use.\n\n## Handle authentication challenges\n\n\nTo authenticate with smart cards or virtual smart cards, your app must provide the behavior to complete challenges between the admin key data stored on the card, and the admin key data maintained by the authentication server or management tool.\n\nThe following code shows how to support smart card authentication for services or modification of physical or virtual card details. If the data generated using the admin key on the card (\"challenge\") is the same as the admin key data provided by the server or management tool (\"adminkey\"), authentication is successful.\n\n```cs\nstatic class ChallengeResponseAlgorithm\n{\n    public static IBuffer CalculateResponse(IBuffer challenge, IBuffer adminkey)\n    {\n        if (challenge == null)\n            throw new ArgumentNullException(\"challenge\");\n        if (adminkey == null)\n            throw new ArgumentNullException(\"adminkey\");\n\n        SymmetricKeyAlgorithmProvider objAlg = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.TripleDesCbc);\n        var symmetricKey = objAlg.CreateSymmetricKey(adminkey);\n        var buffEncrypted = CryptographicEngine.Encrypt(symmetricKey, challenge, null);\n        return buffEncrypted;\n    }\n}\n```\n\nYou will see this code referenced throughout the remainder of this topic was we review how to complete an authentication action, and how to apply changes to smart card and virtual smart card information.\n\n## Verify smart card or virtual smart card authentication response\n\n\nNow that we have the logic for authentication challenges defined, we can communicate with the reader to access the smart card, or alternatively, access a virtual smart card for authentication.\n\n1.  To begin the challenge, call [**GetChallengeContextAsync**](https://msdn.microsoft.com/library/windows/apps/dn263811) from the [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object associated with the smart card. This will generate an instance of [**SmartCardChallengeContext**](https://msdn.microsoft.com/library/windows/apps/dn297570), which contains the card's [**Challenge**](https://msdn.microsoft.com/library/windows/apps/dn297578) value.\n\n2.  Next, pass the card's challenge value and the admin key provided by the service or management tool to the **ChallengeResponseAlgorithm** that we defined in the previous example.\n\n3.  [**VerifyResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn297627) will return **true** if authentication is successful.\n\n```cs\nbool verifyResult = false;\nSmartCard card = await rootPage.GetSmartCard();\nSmartCardProvisioning provisioning =\n    await SmartCardProvisioning.FromSmartCardAsync(card);\n\nusing (SmartCardChallengeContext context =\n       await provisioning.GetChallengeContextAsync())\n{\n    IBuffer response = ChallengeResponseAlgorithm.CalculateResponse(\n        context.Challenge,\n        rootPage.AdminKey);\n\n    verifyResult = await context.VerifyResponseAsync(response);\n}\n```\n\n## Change or reset a user PIN\n\n\nTo change the PIN associated with a smart card:\n\n1.  Access the card and generate the associated [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) object.\n2.  Call [**RequestPinChangeAsync**](https://msdn.microsoft.com/library/windows/apps/dn263823) to display a UI to the user to complete this operation.\n3.  If the PIN was successfully changed the call will return **true**.\n\n```cs\nSmartCardProvisioning provisioning =\n    await SmartCardProvisioning.FromSmartCardAsync(card);\n\nbool result = await provisioning.RequestPinChangeAsync();\n```\n\nTo request a PIN reset:\n\n1.  Call [**RequestPinResetAsync**](https://msdn.microsoft.com/library/windows/apps/dn263825) to initiate the operation. This call includes a [**SmartCardPinResetHandler**](https://msdn.microsoft.com/library/windows/apps/dn297701) method that represents the smart card and the pin reset request.\n2.  [**SmartCardPinResetHandler**](https://msdn.microsoft.com/library/windows/apps/dn297701) provides information that our **ChallengeResponseAlgorithm**, wrapped in a [**SmartCardPinResetDeferral**](https://msdn.microsoft.com/library/windows/apps/dn297693) call, uses to compare the card's challenge value and the admin key provided by the service or management tool to authenticate the request.\n\n3.  If the challenge is successful, the [**RequestPinResetAsync**](https://msdn.microsoft.com/library/windows/apps/dn263825) call is completed; returning **true** if the PIN was successfully reset.\n\n```cs\nSmartCardProvisioning provisioning =\n    await SmartCardProvisioning.FromSmartCardAsync(card);\n\nbool result = await provisioning.RequestPinResetAsync(\n    (pinResetSender, request) =>\n    {\n        SmartCardPinResetDeferral deferral =\n            request.GetDeferral();\n\n        try\n        {\n            IBuffer response =\n                ChallengeResponseAlgorithm.CalculateResponse(\n                    request.Challenge,\n                    rootPage.AdminKey);\n            request.SetResponse(response);\n        }\n        finally\n        {\n            deferral.Complete();\n        }\n    });\n}\n```\n\n## Remove a smart card or virtual smart card\n\n\nWhen a physical smart card is removed a [**CardRemoved**](https://msdn.microsoft.com/library/windows/apps/dn263875) event will fire when the card is deleted.\n\nAssociate the firing of this event with the card reader with the method that defines your app's behavior on card or reader removal as an event handler. This behavior can be something as simply as providing notification to the user that the card was removed.\n\n```cs\nreader = card.Reader;\nreader.CardRemoved += HandleCardRemoved;\n```\n\nThe removal of a virtual smart card is handled programmatically by first retrieving the card and then calling [**RequestVirtualSmartCardDeletionAsync**](https://msdn.microsoft.com/library/windows/apps/dn263850) from the [**SmartCardProvisioning**](https://msdn.microsoft.com/library/windows/apps/dn263801) returned object.\n\n```cs\nbool result = await SmartCardProvisioning\n    .RequestVirtualSmartCardDeletionAsync(card);\n```\n\n \n\n \n\n\n\n\n"}