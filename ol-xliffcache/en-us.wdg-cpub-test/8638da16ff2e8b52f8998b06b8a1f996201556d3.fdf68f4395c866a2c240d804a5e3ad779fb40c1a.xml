{"nodes":[{"pos":[11,44],"content":"Create and consume an app service","needQuote":true,"needEscape":true,"nodes":[{"content":"Create and consume an app service","pos":[0,33]}]},{"pos":[58,195],"content":"Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.","pos":[0,137]}]},{"content":"Create and consume an app service","pos":[252,285]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[288,326]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[327,422],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.","pos":[425,562]},{"content":"Create a new app service provider project","pos":[567,608]},{"content":"In this how-to, we'll create everything in one solution for simplicity.","pos":[611,682]},{"content":"In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider.","pos":[688,781]},{"content":"(In the <bpt id=\"p1\">**</bpt>New Project<ept id=\"p1\">**</ept> dialog box, select <bpt id=\"p2\">**</bpt>Templates <ph id=\"ph1\">&amp;gt;</ph> Other Languages <ph id=\"ph2\">&amp;gt;</ph> Visual C# <ph id=\"ph3\">&amp;gt;</ph> Windows <ph id=\"ph4\">&amp;gt;</ph> Windows Universal <ph id=\"ph5\">&amp;gt;</ph> Blank app (Windows Universal)<ept id=\"p2\">**</ept>).","pos":[782,947],"source":" (In the **New Project** dialog box, select **Templates &gt; Other Languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Blank app (Windows Universal)**)."},{"content":"This will be the app that provides the app service.","pos":[948,999]},{"content":"Add an app service extension to package.appxmanifest","pos":[1004,1056]},{"content":"In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>Application<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> element.","pos":[1059,1200],"source":"In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the **&lt;Application&gt;** element."},{"content":"This example advertises the <ph id=\"ph1\">`com.Microsoft.Inventory`</ph> service and is what identifies this app as an app service provider.","pos":[1201,1322],"source":" This example advertises the `com.Microsoft.Inventory` service and is what identifies this app as an app service provider."},{"content":"The actual service will be implemented as a background task.","pos":[1323,1383]},{"content":"The app service app exposes the service to other apps.","pos":[1384,1438]},{"content":"We recommend using a reverse domain name style for the service name.","pos":[1439,1507]},{"pos":[1913,1995],"content":"The <bpt id=\"p1\">**</bpt>Category<ept id=\"p1\">**</ept> attribute identifies this application as an app service provider.","source":"The **Category** attribute identifies this application as an app service provider."},{"pos":[1997,2103],"content":"The <bpt id=\"p1\">**</bpt>EntryPoint<ept id=\"p1\">**</ept> attribute identifies the class that implements the service, which we'll implement next.","source":"The **EntryPoint** attribute identifies the class that implements the service, which we'll implement next."},{"content":"Create the app service","pos":[2108,2130]},{"content":"An app service is implemented as a background task.","pos":[2137,2188]},{"content":"This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes.","pos":[2189,2310]},{"content":"Add a new Windows Runtime Component project to the solution (<bpt id=\"p1\">**</bpt>File <ph id=\"ph1\">&amp;gt;</ph> Add <ph id=\"ph2\">&amp;gt;</ph> New Project<ept id=\"p1\">**</ept>) named MyAppService.","pos":[2311,2427],"source":" Add a new Windows Runtime Component project to the solution (**File &gt; Add &gt; New Project**) named MyAppService."},{"content":"(In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> dialog box, choose <bpt id=\"p2\">**</bpt>Installed <ph id=\"ph1\">&amp;gt;</ph> Other Languages <ph id=\"ph2\">&amp;gt;</ph> Visual C# <ph id=\"ph3\">&amp;gt;</ph> Windows <ph id=\"ph4\">&amp;gt;</ph> Windows Universal <ph id=\"ph5\">&amp;gt;</ph> Windows Runtime Component (Windows Universal)<ept id=\"p2\">**</ept>","pos":[2428,2611],"source":" (In the **Add New Project** dialog box, choose **Installed &gt; Other Languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Windows Runtime Component (Windows Universal)**"},{"content":"In the AppServiceProvider project, add a reference to the MyAppService project.","pos":[2616,2695]},{"pos":[2700,2792],"content":"In the MyappService project, add the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statements to the top of Class1.cs:","source":"In the MyappService project, add the following **using** statements to the top of Class1.cs:"},{"pos":[2952,3042],"content":"Replace the stub code for <bpt id=\"p1\">**</bpt>Class1<ept id=\"p1\">**</ept> with a new background task class named <bpt id=\"p2\">**</bpt>Inventory<ept id=\"p2\">**</ept>:","source":"Replace the stub code for **Class1** with a new background task class named **Inventory**:"},{"content":"This class is where the app service will do its work.","pos":[4521,4574]},{"content":"<bpt id=\"p1\">**</bpt>Run()<ept id=\"p1\">**</ept> is called when the background task is created.","pos":[4580,4636],"source":"**Run()** is called when the background task is created."},{"content":"Because background tasks are terminated after <bpt id=\"p1\">**</bpt>Run<ept id=\"p1\">**</ept> completes, the code takes a deferral so that the background task will stay up to serve requests.","pos":[4637,4787],"source":" Because background tasks are terminated after **Run** completes, the code takes a deferral so that the background task will stay up to serve requests."},{"content":"<bpt id=\"p1\">**</bpt>OnTaskCanceled()<ept id=\"p1\">**</ept> is called when the task is canceled.","pos":[4793,4850],"source":"**OnTaskCanceled()** is called when the task is canceled."},{"content":"The task is cancelled when the client app disposes the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AppServiceConnection<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921704)</ept>, the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.","pos":[4851,5100],"source":" The task is cancelled when the client app disposes the [**AppServiceConnection**](https://msdn.microsoft.com/library/windows/apps/dn921704), the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task."},{"content":"Write the code for the app service","pos":[5105,5139]},{"content":"<bpt id=\"p1\">**</bpt>OnRequestedReceived()<ept id=\"p1\">**</ept> is where the code for the app service goes.","pos":[5142,5211],"source":"**OnRequestedReceived()** is where the code for the app service goes."},{"content":"Replace the stub <bpt id=\"p1\">**</bpt>OnRequestedReceived()<ept id=\"p1\">**</ept> in MyAppService's Class1.cs with the code from this example.","pos":[5212,5315],"source":" Replace the stub **OnRequestedReceived()** in MyAppService's Class1.cs with the code from this example."},{"content":"This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item.","pos":[5316,5488]},{"content":"Error handling code has been removed for brevity.","pos":[5489,5538]},{"pos":[7133,7324],"content":"Note that <bpt id=\"p1\">**</bpt>OnRequestedReceived()<ept id=\"p1\">**</ept> is <bpt id=\"p2\">**</bpt>async<ept id=\"p2\">**</ept> because we make an awaitable method call to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SendResponseAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> in this example.","source":"Note that **OnRequestedReceived()** is **async** because we make an awaitable method call to [**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) in this example."},{"content":"A deferral is taken so that the service can use <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> methods in the OnRequestReceived handler.","pos":[7326,7425],"source":"A deferral is taken so that the service can use **async** methods in the OnRequestReceived handler."},{"content":"It ensures that the call to OnRequestReceived does not complete until it is done processing the message.","pos":[7426,7530]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SendResponseAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> is used to send a response alongside the completion.","pos":[7531,7665],"source":"[**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) is used to send a response alongside the completion."},{"content":"<bpt id=\"p1\">**</bpt>SendResponseAsync<ept id=\"p1\">**</ept> does not signal the completion of the call.","pos":[7666,7731],"source":"**SendResponseAsync** does not signal the completion of the call."},{"content":"It is the completion of the deferral that signals to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SendMessageAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921712)</ept> that OnRequestReceived has completed.","pos":[7732,7903],"source":" It is the completion of the deferral that signals to [**SendMessageAsync**](https://msdn.microsoft.com/library/windows/apps/dn921712) that OnRequestReceived has completed."},{"content":"App services use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to exchange information.","pos":[7905,8021],"source":"App services use a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) to exchange information."},{"content":"The size of the data you may pass is only limited by system resources.","pos":[8022,8092]},{"content":"There are no predefined keys for you to use in your <bpt id=\"p1\">**</bpt>ValueSet<ept id=\"p1\">**</ept>.","pos":[8093,8158],"source":" There are no predefined keys for you to use in your **ValueSet**."},{"content":"You must determine which key values you will use to define the protocol for your app service.","pos":[8159,8252]},{"content":"The caller must be written with that protocol in mind.","pos":[8253,8307]},{"content":"In this example, we have chosen a key named \"Command\" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price.","pos":[8308,8481]},{"content":"The index of the inventory name is stored under the \"ID\" key.","pos":[8482,8543]},{"content":"The return value is stored under the \"Result\" key.","pos":[8544,8594]},{"content":"An <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AppServiceClosedStatus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921703)</ept> enum is returned to the caller to indicate whether the call to the app service succeeded or failed.","pos":[8596,8785],"source":"An [**AppServiceClosedStatus**](https://msdn.microsoft.com/library/windows/apps/dn921703) enum is returned to the caller to indicate whether the call to the app service succeeded or failed."},{"content":"An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth.","pos":[8786,8922]},{"content":"You can return additional error information via the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept>.","pos":[8923,9048],"source":" You can return additional error information via the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131)."},{"content":"In this example, we use a key named \"Status\" to return more detailed error information to the caller.","pos":[9049,9150]},{"pos":[9152,9345],"content":"The call to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SendResponseAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> returns the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ValueSet<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to the caller.","source":"The call to [**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) returns the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) to the caller."},{"content":"Deploy the service app and get the package family name","pos":[9350,9404]},{"content":"The app service provider app must be deployed before you can call it from a client.","pos":[9407,9490]},{"content":"You will also need the package family name of the app service app in order to call it.","pos":[9491,9577]},{"content":"One way to get the package family name of the app service application is to call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.ApplicationModel.Package.Current.Id.FamilyName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224670)</ept> from within the <bpt id=\"p3\">**</bpt>AppServiceProvider<ept id=\"p3\">**</ept> project (for example, from <ph id=\"ph1\">`public App()`</ph> in App.xaml.cs) and note the result.","pos":[9583,9900],"source":"One way to get the package family name of the app service application is to call [**Windows.ApplicationModel.Package.Current.Id.FamilyName**](https://msdn.microsoft.com/library/windows/apps/br224670) from within the **AppServiceProvider** project (for example, from `public App()` in App.xaml.cs) and note the result."},{"content":"To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.","pos":[9901,10037]},{"content":"Another way to get the package family name is to deploy the solution (<bpt id=\"p1\">**</bpt>Build <ph id=\"ph1\">&amp;gt;</ph> Deploy solution<ept id=\"p1\">**</ept>) and note the full package name in the output window (<bpt id=\"p2\">**</bpt>View <ph id=\"ph2\">&amp;gt;</ph> Output<ept id=\"p2\">**</ept>).","pos":[10042,10219],"source":"Another way to get the package family name is to deploy the solution (**Build &gt; Deploy solution**) and note the full package name in the output window (**View &gt; Output**)."},{"content":"You must remove the platform information from the string in the output window to derive the package name.","pos":[10220,10325]},{"content":"For example, if the full package name reported in the output window was \"9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\\_1.0.0.0\\_x86\\_\\_yd7nk54bq29ra\", you would extract \"1.0.0.0\\_x86\\_\\_\" leaving \"9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\\_yd7nk54bq29ra\" as the package family name.","pos":[10326,10595]},{"content":"Write a client to call the app service","pos":[10600,10638]},{"content":"Add a new blank Windows Universal app project to the solution (<bpt id=\"p1\">**</bpt>File <ph id=\"ph1\">&amp;gt;</ph> Add <ph id=\"ph2\">&amp;gt;</ph> New Project<ept id=\"p1\">**</ept>) named ClientApp.","pos":[10645,10760],"source":"Add a new blank Windows Universal app project to the solution (**File &gt; Add &gt; New Project**) named ClientApp."},{"content":"(In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> dialog box, choose <bpt id=\"p2\">**</bpt>Installed <ph id=\"ph1\">&amp;gt;</ph> Other languages <ph id=\"ph2\">&amp;gt;</ph> Visual C# <ph id=\"ph3\">&amp;gt;</ph> Windows <ph id=\"ph4\">&amp;gt;</ph> Windows Universal <ph id=\"ph5\">&amp;gt;</ph> Blank App (Windows Universal)<ept id=\"p2\">**</ept>).","pos":[10761,10930],"source":" (In the **Add New Project** dialog box, choose **Installed &gt; Other languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Blank App (Windows Universal)**)."},{"pos":[10935,11030],"content":"In the ClientApp project, add the following <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement to the top of MainPage.xaml.cs:","source":"In the ClientApp project, add the following **using** statement to the top of MainPage.xaml.cs:"},{"content":"Add a text box and a button to MainPage.xaml.","pos":[11102,11147]},{"pos":[11152,11258],"content":"Add a button click handler for the button and add the keyword <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> to the button handler's signature.","source":"Add a button click handler for the button and add the keyword **async** to the button handler's signature."},{"content":"Replace the stub of your button click handler with the following code.","pos":[11263,11333]},{"content":"Be sure to include the <ph id=\"ph1\">`inventoryService`</ph> field declaration.","pos":[11334,11394],"source":" Be sure to include the `inventoryService` field declaration."},{"pos":[13516,13799],"content":"Replace the package family name in the line <ph id=\"ph1\">`this.inventoryService.PackageFamilyName = \"replace with the package family name\";`</ph> with the package family name of the <bpt id=\"p1\">**</bpt>AppServiceProvider<ept id=\"p1\">**</ept> project that you obtained in \\[Step 5: Deploy the service app and get the package family name\\].","source":"Replace the package family name in the line `this.inventoryService.PackageFamilyName = \"replace with the package family name\";` with the package family name of the **AppServiceProvider** project that you obtained in \\[Step 5: Deploy the service app and get the package family name\\]."},{"content":"The code first establishes a connection with the app service.","pos":[13805,13866]},{"content":"The connection will remain open until you dispose <bpt id=\"p1\">**</bpt>this.inventoryService<ept id=\"p1\">**</ept>.","pos":[13867,13943],"source":" The connection will remain open until you dispose **this.inventoryService**."},{"content":"The app service name must match the <bpt id=\"p1\">**</bpt>AppService Name<ept id=\"p1\">**</ept> attribute that you added to the AppServiceProvider project's Package.appxmanifest file.","pos":[13944,14087],"source":" The app service name must match the **AppService Name** attribute that you added to the AppServiceProvider project's Package.appxmanifest file."},{"content":"In this example, it is <ph id=\"ph1\">`&lt;uap:AppService Name=\"com.microsoft.inventory\"/&gt;`</ph>.","pos":[14088,14162],"source":" In this example, it is `<uap:AppService Name=\"com.microsoft.inventory\"/>`."},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ValueSet<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> named <bpt id=\"p3\">**</bpt>message<ept id=\"p3\">**</ept> is created to specify the command that we want to send to the app service.","pos":[14168,14335],"source":"A [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) named **message** is created to specify the command that we want to send to the app service."},{"content":"The example app service expects a command to indicate which of two actions to take.","pos":[14336,14419]},{"content":"We get the index from the textbox in the ClientApp, and then call the service with the \"Item\" command to get the description of the item.","pos":[14420,14557]},{"content":"Then, we make the call with the \"Price\" command to get the item's price.","pos":[14558,14630]},{"content":"The button text is set to the result.","pos":[14631,14668]},{"pos":[14674,15052],"content":"Because <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AppServiceResponseStatus<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921724)</ept> only indicates whether the operating system was able to connect the call to the app service, we check the \"Status\" key in the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ValueSet<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> we receive from the app service to ensure that it was able to fulfill the request.","source":"Because [**AppServiceResponseStatus**](https://msdn.microsoft.com/library/windows/apps/dn921724) only indicates whether the operating system was able to connect the call to the app service, we check the \"Status\" key in the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) we receive from the app service to ensure that it was able to fulfill the request."},{"content":"In Visual Studio, set the ClientApp project to be the startup project in the Solution Explorer window and run the solution.","pos":[15058,15181]},{"content":"Enter the number 1 into the text box and click the button.","pos":[15182,15240]},{"content":"You should get \"Chair : Price = 88.99\" back from the service.","pos":[15241,15302]},{"content":"sample app displaying chair price=88.99","pos":[15310,15349]},{"content":"If the app service call fails, check the following in the ClientApp:","pos":[15384,15452]},{"content":"Verify that the package family name assigned to the inventory service connection matches the package family name of the AppServiceProvider app.","pos":[15458,15601]},{"content":"See: <bpt id=\"p1\">**</bpt>button\\_Click()<ept id=\"p1\">**</ept><ph id=\"ph1\">`this.inventoryService.PackageFamilyName = \"...\";`</ph>).","pos":[15602,15678],"source":" See: **button\\_Click()**`this.inventoryService.PackageFamilyName = \"...\";`)."},{"content":"In <bpt id=\"p1\">**</bpt>button\\_Click()<ept id=\"p1\">**</ept>, verify that the app service name that is assigned to the inventory service connection matches the app service name in the AppServiceProvider's Package.appxmanifest file.","pos":[15683,15876],"source":"In **button\\_Click()**, verify that the app service name that is assigned to the inventory service connection matches the app service name in the AppServiceProvider's Package.appxmanifest file."},{"content":"See: <ph id=\"ph1\">`this.inventoryService.AppServiceName = \"com.microsoft.inventory\";`</ph>.","pos":[15877,15950],"source":" See: `this.inventoryService.AppServiceName = \"com.microsoft.inventory\";`."},{"pos":[15955,16087],"content":"Ensure that the AppServiceProvider app has been deployed (In the Solution Explorer, right-click the solution and choose <bpt id=\"p1\">**</bpt>Deploy<ept id=\"p1\">**</ept>).","source":"Ensure that the AppServiceProvider app has been deployed (In the Solution Explorer, right-click the solution and choose **Deploy**)."},{"content":"Debug the app service","pos":[16092,16113]},{"content":"Ensure that the entire solution is deployed before debugging because the app service provider app must be deployed before the service can be called.","pos":[16120,16268]},{"content":"(In Visual Studio, <bpt id=\"p1\">**</bpt>Build <ph id=\"ph1\">&amp;gt;</ph> Deploy Solution<ept id=\"p1\">**</ept>).","pos":[16269,16320],"source":" (In Visual Studio, **Build &gt; Deploy Solution**)."},{"content":"In the Solution Explorer, right-click the AppServiceProvider project and choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","pos":[16325,16420],"source":"In the Solution Explorer, right-click the AppServiceProvider project and choose **Properties**."},{"content":"From the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> tab, change the <bpt id=\"p2\">**</bpt>Start action<ept id=\"p2\">**</ept> to <bpt id=\"p3\">**</bpt>Do not launch, but debug my code when it starts<ept id=\"p3\">**</ept>.","pos":[16421,16528],"source":" From the **Debug** tab, change the **Start action** to **Do not launch, but debug my code when it starts**."},{"content":"In the MyAppService project, in the Class1.cs file, set a breakpoint in OnRequestReceived().","pos":[16533,16625]},{"content":"Set the AppServiceProvider project to be the startup project and press F5.","pos":[16630,16704]},{"content":"Start ClientApp from the Start menu (not from Visual Studio).","pos":[16709,16770]},{"content":"Enter the number 1 into the text box and press the button.","pos":[16775,16833]},{"content":"The debugger will stop in the app service call on the breakpoint in your app service.","pos":[16834,16919]},{"content":"Debug the client","pos":[16924,16940]},{"content":"Follow the instructions in the preceding step to debug the app service.","pos":[16947,17018]},{"content":"Launch ClientApp from the Start menu.","pos":[17023,17060]},{"content":"Attach the debugger to the ClientApp.exe process (not the ApplicationFrameHost.exe process).","pos":[17065,17157]},{"content":"(In Visual Studio, choose <bpt id=\"p1\">**</bpt>Debug <ph id=\"ph1\">&amp;gt;</ph> Attach to Process...<ept id=\"p1\">**</ept>.)","pos":[17158,17221],"source":" (In Visual Studio, choose **Debug &gt; Attach to Process...**.)"},{"pos":[17226,17292],"content":"In the ClientApp project, set a breakpoint in <bpt id=\"p1\">**</bpt>button\\_Click()<ept id=\"p1\">**</ept>.","source":"In the ClientApp project, set a breakpoint in **button\\_Click()**."},{"content":"The breakpoints in both the client and the app service will now be hit when you enter the number 1 into the text box of the ClientApp and click the button.","pos":[17297,17452]},{"content":"Remarks","pos":[17457,17464]},{"content":"This example provides a simple introduction to creating an app service and calling it from another app.","pos":[17467,17570]},{"content":"The key things to note are the creation of a background task to host the app service, the addition of the windows.appservice extension to the app service provider app's Package.appxmanifest file, obtaining the package family name of the app service provider app so that we can connect to it from the client app, and using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.ApplicationModel.AppService.AppServiceConnection<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn921704)</ept> to call the service.","pos":[17571,18034],"source":" The key things to note are the creation of a background task to host the app service, the addition of the windows.appservice extension to the app service provider app's Package.appxmanifest file, obtaining the package family name of the app service provider app so that we can connect to it from the client app, and using [**Windows.ApplicationModel.AppService.AppServiceConnection**](https://msdn.microsoft.com/library/windows/apps/dn921704) to call the service."},{"content":"Full code for MyAppService","pos":[18039,18065]},{"content":"Related topics","pos":[21533,21547]},{"content":"Support your app with background tasks","pos":[21553,21591]}],"content":"---\ntitle: Create and consume an app service\ndescription: Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.\nms.assetid: 6E48B8B6-D3BF-4AE2-85FB-D463C448C9D3\n---\n\n# Create and consume an app service\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nLearn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.\n\n## Create a new app service provider project\n\n\nIn this how-to, we'll create everything in one solution for simplicity.\n\n-   In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider. (In the **New Project** dialog box, select **Templates &gt; Other Languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Blank app (Windows Universal)**). This will be the app that provides the app service.\n\n## Add an app service extension to package.appxmanifest\n\n\nIn the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the **&lt;Application&gt;** element. This example advertises the `com.Microsoft.Inventory` service and is what identifies this app as an app service provider. The actual service will be implemented as a background task. The app service app exposes the service to other apps. We recommend using a reverse domain name style for the service name.\n\n``` syntax\n... \n<Applications>\n    <Application Id=\"App\"\n      Executable=\"$targetnametoken$.exe\"\n      EntryPoint=\"AppServiceProvider.App\">\n      <Extensions>\n        <uap:Extension Category=\"windows.appService\" EntryPoint=\"MyAppService.Inventory\">\n          <uap:AppService Name=\"com.microsoft.inventory\"/>\n        </uap:Extension>\n      </Extensions>\n      ...\n    </Application>\n</Applications>\n```\n\nThe **Category** attribute identifies this application as an app service provider.\n\nThe **EntryPoint** attribute identifies the class that implements the service, which we'll implement next.\n\n## Create the app service\n\n\n1.  An app service is implemented as a background task. This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes. Add a new Windows Runtime Component project to the solution (**File &gt; Add &gt; New Project**) named MyAppService. (In the **Add New Project** dialog box, choose **Installed &gt; Other Languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Windows Runtime Component (Windows Universal)**\n2.  In the AppServiceProvider project, add a reference to the MyAppService project.\n3.  In the MyappService project, add the following **using** statements to the top of Class1.cs:\n    ```cs\n    using Windows.ApplicationModel.AppService;\n    using Windows.ApplicationModel.Background;\n    using Windows.Foundation.Collections;\n    ```\n\n4.  Replace the stub code for **Class1** with a new background task class named **Inventory**:\n\n    ```cs\n    public sealed class Inventory : IBackgroundTask\n    {\n        private BackgroundTaskDeferral backgroundTaskDeferral;\n        private AppServiceConnection appServiceconnection;\n        private String[] inventoryItems = new string[] { \"Robot vacuum\", \"Chair\" };\n        private double[] inventoryPrices = new double[] { 129.99, 88.99 };\n\n        public void Run(IBackgroundTaskInstance taskInstance)\n        {\n            this.backgroundTaskDeferral = taskInstance.GetDeferral(); // Get a deferral so that the service isn&#39;t terminated.\n            taskInstance.Canceled += OnTaskCanceled; // Associate a cancellation handler with the background task.\n\n            // Retrieve the app service connection and set up a listener for incoming app service requests.\n            var details = taskInstance.TriggerDetails as AppServiceTriggerDetails;\n            appServiceconnection = details.AppServiceConnection;\n            appServiceconnection.RequestReceived += OnRequestReceived;\n        }\n\n        private async void OnRequestReceived(AppServiceConnection sender, AppServiceRequestReceivedEventArgs args)\n        {\n        }\n\n        private void OnTaskCanceled(IBackgroundTaskInstance sender, BackgroundTaskCancellationReason reason)\n        {\n            if (this.backgroundTaskDeferral != null)\n            {\n                // Complete the service deferral.\n                this.backgroundTaskDeferral.Complete();\n            }\n        }\n    }\n    ```\n\n    This class is where the app service will do its work.\n\n    **Run()** is called when the background task is created. Because background tasks are terminated after **Run** completes, the code takes a deferral so that the background task will stay up to serve requests.\n\n    **OnTaskCanceled()** is called when the task is canceled. The task is cancelled when the client app disposes the [**AppServiceConnection**](https://msdn.microsoft.com/library/windows/apps/dn921704), the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.\n\n## Write the code for the app service\n\n\n**OnRequestedReceived()** is where the code for the app service goes. Replace the stub **OnRequestedReceived()** in MyAppService's Class1.cs with the code from this example. This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item. Error handling code has been removed for brevity.\n\n```cs\nprivate async void OnRequestReceived(AppServiceConnection sender, AppServiceRequestReceivedEventArgs args)\n{\n    // Get a deferral because we use an awaitable API below to respond to the message\n    // and we don&#39;t want this call to get cancelled while we are waiting.\n    var messageDeferral = args.GetDeferral();\n\n    ValueSet message = args.Request.Message;\n    ValueSet returnData = new ValueSet();\n\n    string command = message[\"Command\"] as string;\n    int? inventoryIndex = message[\"ID\"] as int?;\n\n    if ( inventoryIndex.HasValue &amp;&amp;\n         inventoryIndex.Value >= 0 &amp;&amp;\n         inventoryIndex.Value < inventoryItems.GetLength(0))\n    {\n        switch (command)\n        {\n            case \"Price\":\n            {\n                returnData.Add(\"Result\", inventoryPrices[inventoryIndex.Value]);\n                returnData.Add(\"Status\", \"OK\");\n                break;\n            }\n\n            case \"Item\":\n            {\n                returnData.Add(\"Result\", inventoryItems[inventoryIndex.Value]);\n                returnData.Add(\"Status\", \"OK\");\n                break;\n            }\n\n            default:\n            {\n                returnData.Add(\"Status\", \"Fail: unknown command\");\n                break;\n            }\n        }\n    }\n    else\n    {\n        returnData.Add(\"Status\", \"Fail: Index out of range\");\n    }\n\n    await args.Request.SendResponseAsync(returnData); // Return the data to the caller.\n    messageDeferral.Complete(); // Complete the deferral so that the platform knows that we&#39;re done responding to the app service call.\n}\n```\n\nNote that **OnRequestedReceived()** is **async** because we make an awaitable method call to [**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) in this example.\n\nA deferral is taken so that the service can use **async** methods in the OnRequestReceived handler. It ensures that the call to OnRequestReceived does not complete until it is done processing the message. [**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) is used to send a response alongside the completion. **SendResponseAsync** does not signal the completion of the call. It is the completion of the deferral that signals to [**SendMessageAsync**](https://msdn.microsoft.com/library/windows/apps/dn921712) that OnRequestReceived has completed.\n\nApp services use a [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) to exchange information. The size of the data you may pass is only limited by system resources. There are no predefined keys for you to use in your **ValueSet**. You must determine which key values you will use to define the protocol for your app service. The caller must be written with that protocol in mind. In this example, we have chosen a key named \"Command\" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price. The index of the inventory name is stored under the \"ID\" key. The return value is stored under the \"Result\" key.\n\nAn [**AppServiceClosedStatus**](https://msdn.microsoft.com/library/windows/apps/dn921703) enum is returned to the caller to indicate whether the call to the app service succeeded or failed. An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth. You can return additional error information via the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131). In this example, we use a key named \"Status\" to return more detailed error information to the caller.\n\nThe call to [**SendResponseAsync**](https://msdn.microsoft.com/library/windows/apps/dn921722) returns the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) to the caller.\n\n## Deploy the service app and get the package family name\n\n\nThe app service provider app must be deployed before you can call it from a client. You will also need the package family name of the app service app in order to call it.\n\n-   One way to get the package family name of the app service application is to call [**Windows.ApplicationModel.Package.Current.Id.FamilyName**](https://msdn.microsoft.com/library/windows/apps/br224670) from within the **AppServiceProvider** project (for example, from `public App()` in App.xaml.cs) and note the result. To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.\n-   Another way to get the package family name is to deploy the solution (**Build &gt; Deploy solution**) and note the full package name in the output window (**View &gt; Output**). You must remove the platform information from the string in the output window to derive the package name. For example, if the full package name reported in the output window was \"9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\\_1.0.0.0\\_x86\\_\\_yd7nk54bq29ra\", you would extract \"1.0.0.0\\_x86\\_\\_\" leaving \"9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\\_yd7nk54bq29ra\" as the package family name.\n\n## Write a client to call the app service\n\n\n1.  Add a new blank Windows Universal app project to the solution (**File &gt; Add &gt; New Project**) named ClientApp. (In the **Add New Project** dialog box, choose **Installed &gt; Other languages &gt; Visual C# &gt; Windows &gt; Windows Universal &gt; Blank App (Windows Universal)**).\n2.  In the ClientApp project, add the following **using** statement to the top of MainPage.xaml.cs:\n    ```cs\n    >using Windows.ApplicationModel.AppService;\n    ```\n\n3.  Add a text box and a button to MainPage.xaml.\n4.  Add a button click handler for the button and add the keyword **async** to the button handler's signature.\n5.  Replace the stub of your button click handler with the following code. Be sure to include the `inventoryService` field declaration.\n\n   ```cs\n   private AppServiceConnection inventoryService;\n    private async void button_Click(object sender, RoutedEventArgs e)\n    {\n        // Add the connection.\n        if (this.inventoryService == null)\n        {\n            this.inventoryService = new AppServiceConnection();\n\n            // Here, we use the app service name defined in the app service provider&#39;s Package.appxmanifest file in the &lt;Extension&gt; section. \n            this.inventoryService.AppServiceName = \"com.microsoft.inventory\";\n\n            // Use Windows.ApplicationModel.Package.Current.Id.FamilyName within the app service provider to get this value.\n            this.inventoryService.PackageFamilyName = \"replace with the package family name\";\n\n            var status = await this.inventoryService.OpenAsync();\n            if (status != AppServiceConnectionStatus.Success)\n            {\n                button.Content = \"Failed to connect\";\n                return;\n            }\n        }\n\n        // Call the service.\n        int idx = int.Parse(textBox.Text);\n        var message = new ValueSet();\n        message.Add(\"Command\", \"Item\");\n        message.Add(\"ID\", idx);\n        AppServiceResponse response = await this.inventoryService.SendMessageAsync(message);\n        string result = \"\";\n\n        if (response.Status == AppServiceResponseStatus.Success)\n        {\n            // Get the data  that the service sent  to us.\n            if (response.Message[\"Status\"] as string == \"OK\")\n            {\n                result = response.Message[\"Result\"] as string;\n            }\n        }\n\n        message.Clear();\n        message.Add(\"Command\", \"Price\");\n        message.Add(\"ID\", idx);\n        response = await this.inventoryService.SendMessageAsync(message);\n\n        if (response.Status == AppServiceResponseStatus.Success)\n        {\n            // Get the data that the service sent to us.\n            if (response.Message[\"Status\"] as string == \"OK\")\n            {\n                result += \" : Price = \" + response.Message[\"Result\"] as string;\n            }\n        }\n\n        button.Content = result;\n    }\n    ```\n\n    Replace the package family name in the line `this.inventoryService.PackageFamilyName = \"replace with the package family name\";` with the package family name of the **AppServiceProvider** project that you obtained in \\[Step 5: Deploy the service app and get the package family name\\].\n\n    The code first establishes a connection with the app service. The connection will remain open until you dispose **this.inventoryService**. The app service name must match the **AppService Name** attribute that you added to the AppServiceProvider project's Package.appxmanifest file. In this example, it is `<uap:AppService Name=\"com.microsoft.inventory\"/>`.\n\n    A [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) named **message** is created to specify the command that we want to send to the app service. The example app service expects a command to indicate which of two actions to take. We get the index from the textbox in the ClientApp, and then call the service with the \"Item\" command to get the description of the item. Then, we make the call with the \"Price\" command to get the item's price. The button text is set to the result.\n\n    Because [**AppServiceResponseStatus**](https://msdn.microsoft.com/library/windows/apps/dn921724) only indicates whether the operating system was able to connect the call to the app service, we check the \"Status\" key in the [**ValueSet**](https://msdn.microsoft.com/library/windows/apps/dn636131) we receive from the app service to ensure that it was able to fulfill the request.\n\n6.  In Visual Studio, set the ClientApp project to be the startup project in the Solution Explorer window and run the solution. Enter the number 1 into the text box and click the button. You should get \"Chair : Price = 88.99\" back from the service.\n\n    ![sample app displaying chair price=88.99](images/appserviceclientapp.png)\n\nIf the app service call fails, check the following in the ClientApp:\n\n1.  Verify that the package family name assigned to the inventory service connection matches the package family name of the AppServiceProvider app. See: **button\\_Click()**`this.inventoryService.PackageFamilyName = \"...\";`).\n2.  In **button\\_Click()**, verify that the app service name that is assigned to the inventory service connection matches the app service name in the AppServiceProvider's Package.appxmanifest file. See: `this.inventoryService.AppServiceName = \"com.microsoft.inventory\";`.\n3.  Ensure that the AppServiceProvider app has been deployed (In the Solution Explorer, right-click the solution and choose **Deploy**).\n\n## Debug the app service\n\n\n1.  Ensure that the entire solution is deployed before debugging because the app service provider app must be deployed before the service can be called. (In Visual Studio, **Build &gt; Deploy Solution**).\n2.  In the Solution Explorer, right-click the AppServiceProvider project and choose **Properties**. From the **Debug** tab, change the **Start action** to **Do not launch, but debug my code when it starts**.\n3.  In the MyAppService project, in the Class1.cs file, set a breakpoint in OnRequestReceived().\n4.  Set the AppServiceProvider project to be the startup project and press F5.\n5.  Start ClientApp from the Start menu (not from Visual Studio).\n6.  Enter the number 1 into the text box and press the button. The debugger will stop in the app service call on the breakpoint in your app service.\n\n## Debug the client\n\n\n1.  Follow the instructions in the preceding step to debug the app service.\n2.  Launch ClientApp from the Start menu.\n3.  Attach the debugger to the ClientApp.exe process (not the ApplicationFrameHost.exe process). (In Visual Studio, choose **Debug &gt; Attach to Process...**.)\n4.  In the ClientApp project, set a breakpoint in **button\\_Click()**.\n5.  The breakpoints in both the client and the app service will now be hit when you enter the number 1 into the text box of the ClientApp and click the button.\n\n## Remarks\n\n\nThis example provides a simple introduction to creating an app service and calling it from another app. The key things to note are the creation of a background task to host the app service, the addition of the windows.appservice extension to the app service provider app's Package.appxmanifest file, obtaining the package family name of the app service provider app so that we can connect to it from the client app, and using [**Windows.ApplicationModel.AppService.AppServiceConnection**](https://msdn.microsoft.com/library/windows/apps/dn921704) to call the service.\n\n## Full code for MyAppService\n\n\n```cs\nusing System;\nusing Windows.ApplicationModel.AppService;\nusing Windows.ApplicationModel.Background;\nusing Windows.Foundation.Collections;\n\nnamespace MyAppService\n{\n    public sealed class Inventory : IBackgroundTask\n    {\n        private BackgroundTaskDeferral backgroundTaskDeferral;\n        private AppServiceConnection appServiceconnection;\n        private String[] inventoryItems = new string[] { \"Robot vacuum\", \"Chair\" };\n        private double[] inventoryPrices = new double[] { 129.99, 88.99 };\n\n        public void Run(IBackgroundTaskInstance taskInstance)\n        {\n            this.backgroundTaskDeferral = taskInstance.GetDeferral(); // Get a deferral so that the service isn&#39;t terminated.\n            taskInstance.Canceled += OnTaskCanceled; // Associate a cancellation handler with the background task.\n\n            // Retrieve the app service connection and set up a listener for incoming app service requests.\n            var details = taskInstance.TriggerDetails as AppServiceTriggerDetails;\n            appServiceconnection = details.AppServiceConnection;\n            appServiceconnection.RequestReceived += OnRequestReceived;\n        }\n\n        private async void OnRequestReceived(AppServiceConnection sender, AppServiceRequestReceivedEventArgs args)\n        {\n            // Get a deferral because we use an awaitable API below to respond to the message\n            // and we don&#39;t want this call to get cancelled while we are waiting.\n            var messageDeferral = args.GetDeferral();\n\n            ValueSet message = args.Request.Message;\n            ValueSet returnData = new ValueSet();\n\n            string command = message[\"Command\"] as string;\n            int? inventoryIndex = message[\"ID\"] as int?;\n\n            if (inventoryIndex.HasValue &amp;&amp;\n                 inventoryIndex.Value >= 0 &amp;&amp;\n                 inventoryIndex.Value < inventoryItems.GetLength(0))\n            {\n                switch (command)\n                {\n                    case \"Price\":\n                        {\n                            returnData.Add(\"Result\", inventoryPrices[inventoryIndex.Value]);\n                            returnData.Add(\"Status\", \"OK\");\n                            break;\n                        }\n\n                    case \"Item\":\n                        {\n                            returnData.Add(\"Result\", inventoryItems[inventoryIndex.Value]);\n                            returnData.Add(\"Status\", \"OK\");\n                            break;\n                        }\n\n                    default:\n                        {\n                            returnData.Add(\"Status\", \"Fail: unknown command\");\n                            break;\n                        }\n                }\n            }\n            else\n            {\n                returnData.Add(\"Status\", \"Fail: Index out of range\");\n            }\n\n            await args.Request.SendResponseAsync(returnData); // Return the data to the caller.\n            messageDeferral.Complete(); // Complete the deferral so that the platform knows that we&#39;re done responding to the app service call.\n        }\n\n\n        private void OnTaskCanceled(IBackgroundTaskInstance sender, BackgroundTaskCancellationReason reason)\n        {\n            if (this.backgroundTaskDeferral != null)\n            {\n                // Complete the service deferral.\n                this.backgroundTaskDeferral.Complete();\n            }\n        }\n    }\n}\n```\n\n## Related topics\n\n\n* [Support your app with background tasks](support-your-app-with-background-tasks.md)\n\n \n\n \n\n\n\n"}