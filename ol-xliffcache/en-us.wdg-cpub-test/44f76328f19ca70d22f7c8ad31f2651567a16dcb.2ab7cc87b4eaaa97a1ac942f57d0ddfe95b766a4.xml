{"nodes":[{"pos":[17,122],"content":"Through the Windows.ApplicationModel.Contacts namespace, you have several options for selecting contacts.","needQuote":true,"nodes":[{"content":"Through the Windows.ApplicationModel.Contacts namespace, you have several options for selecting contacts.","pos":[0,105]}]},{"pos":[130,145],"content":"Select contacts","needQuote":true,"nodes":[{"content":"Select contacts","pos":[0,15]}]},{"content":"contact, selecting specific fields","pos":[433,467]},{"content":"Select contacts","pos":[476,491]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[493,531]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[532,627],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Through the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.ApplicationModel.Contacts<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225002)</ept> namespace, you have several options for selecting contacts.","pos":[630,799],"source":"Through the [**Windows.ApplicationModel.Contacts**](https://msdn.microsoft.com/library/windows/apps/BR225002) namespace, you have several options for selecting contacts."},{"content":"Here, we'll show you how to select a single contact or multiple contacts, and we'll show you how to configure the contact picker to retrieve only the contact information that your app needs.","pos":[800,990]},{"content":"Set up the contact picker","pos":[995,1020]},{"pos":[1022,1184],"content":"Create an instance of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.ApplicationModel.Contacts.ContactPicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR224913)</ept> and assign it to a variable.","source":"Create an instance of [**Windows.ApplicationModel.Contacts.ContactPicker**](https://msdn.microsoft.com/library/windows/apps/BR224913) and assign it to a variable."},{"content":"Set the selection mode (optional)","pos":[1275,1308]},{"content":"By default, the contact picker retrieves all of the available data for the contacts that the user selects.","pos":[1310,1416]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectionMode<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode)</ept> property lets you configure the contact picker to retrieve only the data fields that your app needs.","pos":[1417,1613],"source":" The [**SelectionMode**](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode) property lets you configure the contact picker to retrieve only the data fields that your app needs."},{"content":"This is a more efficient way to use the contact picker if you only need a subset of the available contact data.","pos":[1614,1725]},{"pos":[1727,1857],"content":"First, set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectionMode<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode)</ept> property to <bpt id=\"p3\">**</bpt>Fields<ept id=\"p3\">**</ept>:","source":"First, set the [**SelectionMode**](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode) property to **Fields**:"},{"content":"Then, use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>desiredFieldsWithContactFieldType<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR224913-desiredfieldswithcontactfieldtype)</ept> property to specify the fields that you want the contact picker to retrieve.","pos":[1963,2185],"source":"Then, use the [**desiredFieldsWithContactFieldType**](https://msdn.microsoft.com/library/windows/apps/BR224913-desiredfieldswithcontactfieldtype) property to specify the fields that you want the contact picker to retrieve."},{"content":"This example configures the contact picker to retrieve email addresses:","pos":[2186,2257]},{"content":"Launch the picker","pos":[2385,2402]},{"pos":[2473,2629],"content":"Use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>pickContactsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR224913-pickcontactsasync)</ept> if you want the user to select one or more contacts.","source":"Use [**pickContactsAsync**](https://msdn.microsoft.com/library/windows/apps/BR224913-pickcontactsasync) if you want the user to select one or more contacts."},{"content":"Process the contacts","pos":[2735,2755]},{"content":"When the picker returns, check whether the user has selected any contacts.","pos":[2757,2831]},{"content":"If so, process the contact information.","pos":[2832,2871]},{"content":"This example shows how to processes a single contact.","pos":[2873,2926]},{"content":"Here we retrieve the contact's name and copy it into a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209652)</ept> control called <bpt id=\"p3\">*</bpt>OutputName<ept id=\"p3\">*</ept>.","pos":[2927,3084],"source":" Here we retrieve the contact's name and copy it into a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) control called *OutputName*."},{"content":"This example shows how to process multiple contacts.","pos":[3262,3314]},{"content":"Complete example (single contact)","pos":[3497,3530]},{"content":"This example uses the contact picker to retrieve a single contact's name along with an email address, location or phone number.","pos":[3532,3659]},{"content":"Complete example (multiple contacts)","pos":[6303,6339]},{"pos":[6341,6545],"content":"This example uses the contact picker to retrieve multiple contacts and then adds the contacts to a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> control called <ph id=\"ph1\">`OutputContacts`</ph>.","source":"This example uses the contact picker to retrieve multiple contacts and then adds the contacts to a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) control called `OutputContacts`."},{"content":"Summary and next steps","pos":[8359,8381]},{"content":"Now you have a basic understanding of how to use the contact picker to retrieve contact information.","pos":[8383,8483]},{"content":"Download the <bpt id=\"p1\">[</bpt>Universal Windows app samples<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619979)</ept> from GitHub to see more examples of how to use contacts and the contact picker.","pos":[8484,8657],"source":" Download the [Universal Windows app samples](http://go.microsoft.com/fwlink/p/?linkid=619979) from GitHub to see more examples of how to use contacts and the contact picker."}],"content":"---\ndescription: Through the Windows.ApplicationModel.Contacts namespace, you have several options for selecting contacts.\ntitle: Select contacts\nms.assetid: 35FEDEE6-2B0E-4391-84BA-5E9191D4E442\nkeywords: 'contacts, selecting'\nkeywords: 'select single contact'\nkeywords: 'select multiple contacts'\nkeywords: 'contacts, select multiple'\nkeywords: 'select specific contact data'\nkeywords: 'contact, selecting specific data'\nkeywords: 'contact, selecting specific fields'\n---\n\n# Select contacts\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThrough the [**Windows.ApplicationModel.Contacts**](https://msdn.microsoft.com/library/windows/apps/BR225002) namespace, you have several options for selecting contacts. Here, we'll show you how to select a single contact or multiple contacts, and we'll show you how to configure the contact picker to retrieve only the contact information that your app needs.\n\n## Set up the contact picker\n\nCreate an instance of [**Windows.ApplicationModel.Contacts.ContactPicker**](https://msdn.microsoft.com/library/windows/apps/BR224913) and assign it to a variable.\n\n```cs\nvar contactPicker = new Windows.ApplicationModel.Contacts.ContactPicker();\n```\n\n## Set the selection mode (optional)\n\nBy default, the contact picker retrieves all of the available data for the contacts that the user selects. The [**SelectionMode**](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode) property lets you configure the contact picker to retrieve only the data fields that your app needs. This is a more efficient way to use the contact picker if you only need a subset of the available contact data.\n\nFirst, set the [**SelectionMode**](https://msdn.microsoft.com/library/windows/apps/BR224913-selectionmode) property to **Fields**:\n\n```cs\ncontactPicker.SelectionMode = Windows.ApplicationModel.Contacts.ContactSelectionMode.Fields;\n```\n\nThen, use the [**desiredFieldsWithContactFieldType**](https://msdn.microsoft.com/library/windows/apps/BR224913-desiredfieldswithcontactfieldtype) property to specify the fields that you want the contact picker to retrieve. This example configures the contact picker to retrieve email addresses:\n\n``` cs\ncontactPicker.DesiredFieldsWithContactFieldType.Add(Windows.ApplicationModel.Contacts.ContactFieldType.Email);\n```\n\n## Launch the picker\n\n```cs\nContact contact = await contactPicker.PickContactAsync();\n```\n\nUse [**pickContactsAsync**](https://msdn.microsoft.com/library/windows/apps/BR224913-pickcontactsasync) if you want the user to select one or more contacts.\n\n```cs\npublic IList&lt;Contact&gt; contacts;\ncontacts = await contactPicker.PickContactsAsync();\n```\n\n## Process the contacts\n\nWhen the picker returns, check whether the user has selected any contacts. If so, process the contact information.\n\nThis example shows how to processes a single contact. Here we retrieve the contact's name and copy it into a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/BR209652) control called *OutputName*.\n\n```cs\nif (contact != null)\n{\n    OutputName.Text = contact.DisplayName;\n}\nelse\n{\n    rootPage.NotifyUser(&quot;No contact was selected.&quot;, NotifyType.ErrorMessage);\n}\n```\n\nThis example shows how to process multiple contacts.\n\n```cs\nif (contacts != null &amp;&amp; contacts.Count &gt; 0)\n{\n    foreach (Contact contact in contacts)\n    {\n        // Do something with the contact information.\n    }\n}\n```\n\n## Complete example (single contact)\n\nThis example uses the contact picker to retrieve a single contact's name along with an email address, location or phone number.\n\n```cs\n// ...\nusing Windows.ApplicationModel.Contacts;\n// ...\n\nprivate async void PickAContactButton-Click(object sender, RoutedEventArgs e)\n{\n    ContactPicker contactPicker = new ContactPicker();\n\n    contactPicker.DesiredFieldsWithContactFieldType.Add(ContactFieldType.Email);\n    contactPicker.DesiredFieldsWithContactFieldType.Add(ContactFieldType.Address);\n    contactPicker.DesiredFieldsWithContactFieldType.Add(ContactFieldType.PhoneNumber);\n\n    Contact contact = await contactPicker.PickContactAsync();\n\n    if (contact != null)\n    {\n        OutputFields.Visibility = Visibility.Visible;\n        OutputEmpty.Visibility = Visibility.Collapsed;\n\n        OutputName.Text = contact.DisplayName;\n\n        AppendContactFieldValues(OutputEmails, contact.Emails);\n        AppendContactFieldValues(OutputPhoneNumbers, contact.Phones);\n        AppendContactFieldValues(OutputAddresses, contact.Addresses);\n    }\n    else\n    {\n        OutputEmpty.Visibility = Visibility.Visible;\n        OutputFields.Visibility = Visibility.Collapsed;\n    }\n}\n\nprivate void AppendContactFieldValues&lt;T&gt;(TextBlock content, IList&lt;T&gt; fields)\n{\n    if (fields.Count &gt; 0)\n    {\n        StringBuilder output = new StringBuilder();\n\n        if (fields[0].GetType() == typeof(ContactEmail))\n        {\n            foreach (ContactEmail email in fields as IList&lt;ContactEmail&gt;)\n            {\n                output.AppendFormat(&quot;Email: {0} ({1})\\n&quot;, email.Address, email.Kind);\n            }\n        }\n        else if (fields[0].GetType() == typeof(ContactPhone))\n        {\n            foreach (ContactPhone phone in fields as IList&lt;ContactPhone&gt;)\n            {\n                output.AppendFormat(&quot;Phone: {0} ({1})\\n&quot;, phone.Number, phone.Kind);\n            }\n        }\n        else if (fields[0].GetType() == typeof(ContactAddress))\n        {\n            List&lt;String&gt; addressParts = null;\n            string unstructuredAddress = &quot;&quot;;\n\n            foreach (ContactAddress address in fields as IList&lt;ContactAddress&gt;)\n            {\n                addressParts = (new List&lt;string&gt; { address.StreetAddress, address.Locality, address.Region, address.PostalCode });\n                unstructuredAddress = string.Join(&quot;, &quot;, addressParts.FindAll(s =&gt; !string.IsNullOrEmpty(s)));\n                output.AppendFormat(&quot;Address: {0} ({1})\\n&quot;, unstructuredAddress, address.Kind);\n            }\n        }\n\n        content.Visibility = Visibility.Visible;\n        content.Text = output.ToString();\n    }\n    else\n    {\n        content.Visibility = Visibility.Collapsed;\n    }\n}\n```\n\n## Complete example (multiple contacts)\n\nThis example uses the contact picker to retrieve multiple contacts and then adds the contacts to a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) control called `OutputContacts`.\n\n```cs\nMainPage rootPage = MainPage.Current;\npublic IList&lt;Contact&gt; contacts;\n\nprivate async void PickContactsButton-Click(object sender, RoutedEventArgs e)\n{\n    var contactPicker = new Windows.ApplicationModel.Contacts.ContactPicker();\n    contactPicker.CommitButtonText = &quot;Select&quot;;\n    contacts = await contactPicker.PickContactsAsync();\n\n    // Clear the ListView.\n    OutputContacts.Items.Clear();\n\n    if (contacts.Count &gt; 0)\n    {\n        OutputContacts.Visibility = Windows.UI.Xaml.Visibility.Visible;\n        OutputEmpty.Visibility = Visibility.Collapsed;\n\n        foreach (Contact contact in contacts)\n        {\n            // Add the contacts to the ListView.\n            OutputContacts.Items.Add(new ContactItemAdapter(contact));\n        }\n    }\n    else\n    {\n        OutputEmpty.Visibility = Visibility.Visible;\n    }         \n}\n```\n\n``` cs\npublic class ContactItemAdapter\n{\n    public string Name { get; private set; }\n    public string SecondaryText { get; private set; }\n\n    public ContactItemAdapter(Contact contact)\n    {\n        Name = contact.DisplayName;\n        if (contact.Emails.Count &gt; 0)\n        {\n            SecondaryText = contact.Emails[0].Address;\n        }\n        else if (contact.Phones.Count &gt; 0)\n        {\n            SecondaryText = contact.Phones[0].Number;\n        }\n        else if (contact.Addresses.Count &gt; 0)\n        {\n            List&lt;string&gt; addressParts = (new List&lt;string&gt; { contact.Addresses[0].StreetAddress, \n              contact.Addresses[0].Locality, contact.Addresses[0].Region, contact.Addresses[0].PostalCode });\n              string unstructuredAddress = string.Join(&quot;, &quot;, addressParts.FindAll(s =&gt; !string.IsNullOrEmpty(s)));\n            SecondaryText = unstructuredAddress;\n        }\n    }\n}\n```\n\n## Summary and next steps\n\nNow you have a basic understanding of how to use the contact picker to retrieve contact information. Download the [Universal Windows app samples](http://go.microsoft.com/fwlink/p/?linkid=619979) from GitHub to see more examples of how to use contacts and the contact picker.\n\n"}