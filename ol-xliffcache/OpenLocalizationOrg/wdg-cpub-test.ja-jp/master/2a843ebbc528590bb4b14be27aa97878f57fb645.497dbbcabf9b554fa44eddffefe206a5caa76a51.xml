{"nodes":[{"pos":[60,81],"content":"Data binding overview","needQuote":true,"needEscape":true,"nodes":[{"content":"Data binding overview","pos":[0,21]}]},{"pos":[95,269],"content":"This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.","pos":[0,174]}]},{"content":"Data binding overview","pos":[274,295]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[319,357]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[358,453],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.","pos":[456,630]},{"content":"In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display.","pos":[631,767]},{"content":"For more detailed info, see <bpt id=\"p1\">[</bpt>Data binding in depth<ept id=\"p1\">](data-binding-in-depth.md)</ept>.","pos":[768,846],"source":" For more detailed info, see [Data binding in depth](data-binding-in-depth.md)."},{"content":"Prerequisites","pos":[848,861]},{"content":"This topic assumes that you know how to create a basic UWP app.","pos":[973,1036]},{"content":"For instructions on creating your first UWP app, see <bpt id=\"p1\">[</bpt>Create your first UWP app using C# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</ept>.","pos":[1037,1201],"source":" For instructions on creating your first UWP app, see [Create your first UWP app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581)."},{"content":"Create the project","pos":[1203,1221]},{"content":"Create a new <bpt id=\"p1\">**</bpt>Blank Application (Windows Universal)<ept id=\"p1\">**</ept> project.","pos":[1353,1416],"source":"Create a new **Blank Application (Windows Universal)** project."},{"content":"Name it \"Quickstart\".","pos":[1417,1438]},{"content":"Binding to a single item","pos":[1440,1464]},{"content":"Every binding consists of a binding target and a binding source.","pos":[1620,1684]},{"content":"Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model).","pos":[1685,1836]},{"content":"This example shows how to bind a control to a single item.","pos":[1837,1895]},{"content":"The target is the <bpt id=\"p1\">**</bpt>Text<ept id=\"p1\">**</ept> property of a <bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept>.","pos":[1896,1951],"source":" The target is the **Text** property of a **TextBlock**."},{"content":"The source is an instance of a simple class named <bpt id=\"p1\">**</bpt>Recording<ept id=\"p1\">**</ept> that represents an audio recording.","pos":[1952,2051],"source":" The source is an instance of a simple class named **Recording** that represents an audio recording."},{"content":"Let's look at the class first.","pos":[2052,2082]},{"content":"Add a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.","pos":[2084,2184]},{"content":"Next, expose the binding source class from the class that represents your page of markup.","pos":[5431,5520]},{"content":"We do that by adding a property of type <bpt id=\"p1\">**</bpt>RecordingViewModel<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>MainPage<ept id=\"p2\">**</ept>.","pos":[5521,5600],"source":" We do that by adding a property of type **RecordingViewModel** to **MainPage**."},{"pos":[6325,6423],"content":"The last piece is to bind a <bpt id=\"p1\">**</bpt>TextBlock<ept id=\"p1\">**</ept> to the <bpt id=\"p2\">**</bpt>ViewModel.DefaultRecording.OneLiner<ept id=\"p2\">**</ept> property.","source":"The last piece is to bind a **TextBlock** to the **ViewModel.DefaultRecording.OneLiner** property."},{"content":"Here's the result.","pos":[6727,6745]},{"content":"Binding a textblock","pos":[6749,6768]},{"content":"Binding to a collection of items","pos":[6801,6833]},{"content":"A common scenario is to bind to a collection of business objects.","pos":[6950,7015]},{"content":"In C# and Visual Basic, the generic <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObservableCollection<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> class is a good collection choice for data binding, because it implements the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>INotifyPropertyChanged<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.ComponentModel.INotifyPropertyChanged)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>INotifyCollectionChanged<ept id=\"p6\">**</ept><ept id=\"p5\">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept> interfaces.","pos":[7016,7407],"source":" In C# and Visual Basic, the generic [**ObservableCollection&lt;T&gt;**](T:System.Collections.ObjectModel.ObservableCollection%601) class is a good collection choice for data binding, because it implements the [**INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged) interfaces."},{"content":"These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes.","pos":[7408,7538]},{"content":"If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement <bpt id=\"p1\">**</bpt>INotifyPropertyChanged<ept id=\"p1\">**</ept>.","pos":[7539,7707],"source":" If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement **INotifyPropertyChanged**."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Data binding in depth<ept id=\"p1\">](data-binding-in-depth.md)</ept>.","pos":[7708,7777],"source":" For more info, see [Data binding in depth](data-binding-in-depth.md)."},{"content":"This next example binds a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of <ph id=\"ph1\">`Recording`</ph> objects.","pos":[7779,7917],"source":"This next example binds a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) to a collection of `Recording` objects."},{"content":"Let's start by adding the collection to our view model.","pos":[7918,7973]},{"content":"Just add these new members to the <bpt id=\"p1\">**</bpt>RecordingViewModel<ept id=\"p1\">**</ept> class.","pos":[7974,8037],"source":" Just add these new members to the **RecordingViewModel** class."},{"content":"We haven't yet provided a data template for the <bpt id=\"p1\">**</bpt>Recording<ept id=\"p1\">**</ept> class, so the best the UI framework can do is to call <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ToString<ept id=\"p3\">**</ept><ept id=\"p2\">](M:System.Object.ToString)</ept> for each item in the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>ListView<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept>.","pos":[11079,11330],"source":"We haven't yet provided a data template for the **Recording** class, so the best the UI framework can do is to call [**ToString**](M:System.Object.ToString) for each item in the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878)."},{"content":"The default implementation of <bpt id=\"p1\">**</bpt>ToString<ept id=\"p1\">**</ept> is to return the type name.","pos":[11331,11401],"source":" The default implementation of **ToString** is to return the type name."},{"content":"Binding a list view","pos":[11405,11424]},{"content":"To remedy this we can either override <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ToString<ept id=\"p2\">**</ept><ept id=\"p1\">](M:System.Object.ToString)</ept> to return the value of <bpt id=\"p3\">**</bpt>OneLineSummary<ept id=\"p3\">**</ept>, or we can provide a data template.","pos":[11457,11613],"source":"To remedy this we can either override [**ToString**](M:System.Object.ToString) to return the value of **OneLineSummary**, or we can provide a data template."},{"content":"The data template option is more common and arguably more flexible.","pos":[11614,11681]},{"content":"You specify a data template by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ContentTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209369)</ept> property of a content control or the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ItemTemplate<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR242830)</ept> property of an items control.","pos":[11682,11946],"source":" You specify a data template by using the [**ContentTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209369) property of a content control or the [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242830) property of an items control."},{"content":"Here are two ways we could design a data template for <bpt id=\"p1\">**</bpt>Recording<ept id=\"p1\">**</ept> together with an illustration of the result.","pos":[11947,12059],"source":" Here are two ways we could design a data template for **Recording** together with an illustration of the result."},{"content":"Binding a list view","pos":[13159,13178]},{"content":"For more information about XAML syntax, see <bpt id=\"p1\">[</bpt>Create a UI with XAML<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt228349)</ept>.","pos":[13211,13337],"source":"For more information about XAML syntax, see [Create a UI with XAML](https://msdn.microsoft.com/library/windows/apps/Mt228349)."},{"content":"For more information about control layout, see <bpt id=\"p1\">[</bpt>Define layouts with XAML<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt228350)</ept>.","pos":[13338,13470],"source":" For more information about control layout, see [Define layouts with XAML](https://msdn.microsoft.com/library/windows/apps/Mt228350)."},{"content":"Adding a details view","pos":[13472,13493]},{"content":"You can choose to display all the details of <bpt id=\"p1\">**</bpt>Recording<ept id=\"p1\">**</ept> objects in <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ListView<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> items.","pos":[13597,13746],"source":"You can choose to display all the details of **Recording** objects in [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) items."},{"content":"But that takes up a lot of space.","pos":[13747,13780]},{"content":"Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view.","pos":[13781,13995]},{"content":"This arrangement is also known as a master/details view, or a list/details view.","pos":[13996,14076]},{"content":"There are two ways to go about this.","pos":[14078,14114]},{"content":"You can bind the details view to the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectedItem<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> property of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ListView<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept>.","pos":[14115,14318],"source":" You can bind the details view to the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) property of the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878)."},{"content":"Or you can use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>: bind both the <bpt id=\"p3\">**</bpt>ListView<ept id=\"p3\">**</ept> and the details view to the <bpt id=\"p4\">**</bpt>CollectionViewSource<ept id=\"p4\">**</ept> (which will take care of the currently-selected item for you).","pos":[14319,14564],"source":" Or you can use a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833): bind both the **ListView** and the details view to the **CollectionViewSource** (which will take care of the currently-selected item for you)."},{"content":"Both techniques are shown below, and they both give the same results shown in the illustration.","pos":[14565,14660]},{"pos":[14662,14979],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  So far in this topic we've only used the <bpt id=\"p2\">[</bpt>{x:Bind} markup extension<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>, but both of the techniques we'll show below require the more flexible (but less performant) <bpt id=\"p3\">[</bpt>{Binding} markup extension<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.","source":"**Note**  So far in this topic we've only used the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783), but both of the techniques we'll show below require the more flexible (but less performant) [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782)."},{"content":"First, here's the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectedItem<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> technique.","pos":[14981,15086],"source":"First, here's the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) technique."},{"content":"If you're using Visual C++ component extensions (C++/CX) then, because we'll be using <bpt id=\"p1\">[</bpt>{Binding}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, you'll need to add the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>BindableAttribute<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to the <bpt id=\"p4\">**</bpt>Recording<ept id=\"p4\">**</ept> class.","pos":[15087,15386],"source":" If you're using Visual C++ component extensions (C++/CX) then, because we'll be using [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782), you'll need to add the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) attribute to the **Recording** class."},{"content":"The only other change necessary is to the markup.","pos":[15504,15553]},{"pos":[16782,16942],"content":"For the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> technique, first add a <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept> as a page resource.","source":"For the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) technique, first add a **CollectionViewSource** as a page resource."},{"content":"And then adjust the bindings on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> (which no longer needs to be named) and on the details view to use the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CollectionViewSource<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>.","pos":[17101,17366],"source":"And then adjust the bindings on the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) (which no longer needs to be named) and on the details view to use the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833)."},{"content":"Note that by binding the details view directly to the <bpt id=\"p1\">**</bpt>CollectionViewSource<ept id=\"p1\">**</ept>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.","pos":[17367,17573],"source":" Note that by binding the details view directly to the **CollectionViewSource**, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself."},{"content":"There's no need to specify the <bpt id=\"p1\">**</bpt>CurrentItem<ept id=\"p1\">**</ept> property as the path for the binding, although you can do that if there's any ambiguity).","pos":[17574,17710],"source":" There's no need to specify the **CurrentItem** property as the path for the binding, although you can do that if there's any ambiguity)."},{"content":"And here's the identical result in each case.","pos":[17926,17971]},{"content":"Binding a list view","pos":[17975,17994]},{"content":"Formatting or converting data values for display","pos":[18027,18075]},{"content":"There is one small issue with the rendering above.","pos":[18218,18268]},{"content":"The <bpt id=\"p1\">**</bpt>ReleaseDateTime<ept id=\"p1\">**</ept> property is not just a date, it's a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DateTime<ept id=\"p3\">**</ept><ept id=\"p2\">](T:System.DateTime)</ept>, so it's being displayed with more precision than we need.","pos":[18269,18421],"source":" The **ReleaseDateTime** property is not just a date, it's a [**DateTime**](T:System.DateTime), so it's being displayed with more precision than we need."},{"content":"One solution is to add a string property to the <bpt id=\"p1\">**</bpt>Recording<ept id=\"p1\">**</ept> class that returns <ph id=\"ph1\">`this.ReleaseDateTime.ToString(\"d\")`</ph>.","pos":[18422,18540],"source":" One solution is to add a string property to the **Recording** class that returns `this.ReleaseDateTime.ToString(\"d\")`."},{"content":"Naming that property <bpt id=\"p1\">**</bpt>ReleaseDate<ept id=\"p1\">**</ept> would indicate that it returns a date, not a date-and-time.","pos":[18541,18637],"source":" Naming that property **ReleaseDate** would indicate that it returns a date, not a date-and-time."},{"content":"Naming it <bpt id=\"p1\">**</bpt>ReleaseDateAsString<ept id=\"p1\">**</ept> would further indicate that it returns a string.","pos":[18638,18720],"source":" Naming it **ReleaseDateAsString** would further indicate that it returns a string."},{"content":"A more flexible solution is to use something known as a value converter.","pos":[18722,18794]},{"content":"Here's an example of how to author your own value converter.","pos":[18795,18855]},{"content":"Add this code to your Recording.cs source code file.","pos":[18856,18908]},{"content":"Now we can add an instance of <bpt id=\"p1\">**</bpt>StringFormatter<ept id=\"p1\">**</ept> as a page resource and use it in our binding.","pos":[19824,19919],"source":"Now we can add an instance of **StringFormatter** as a page resource and use it in our binding."},{"content":"We pass the format string into the converter from markup for ultimate formatting flexibility.","pos":[19920,20013]},{"content":"Here's the result.","pos":[20321,20339]},{"content":"displaying a date with custom formatting","pos":[20343,20383]}],"content":"---\nms.assetid: A9D54DEC-CD1B-4043-ADE4-32CD4977D1BF\ntitle: Data binding overview\ndescription: This topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app.\n---\nData binding overview\n=====================\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThis topic shows you how to bind a control (or other UI element) to a single item or bind an items control to a collection of items in a Universal Windows Platform (UWP) app. In addition, we show how to control the rendering of items, implement a details view based on a selection, and convert data for display. For more detailed info, see [Data binding in depth](data-binding-in-depth.md).\n\nPrerequisites\n-------------------------------------------------------------------------------------------------------------\n\nThis topic assumes that you know how to create a basic UWP app. For instructions on creating your first UWP app, see [Create your first UWP app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581).\n\nCreate the project\n---------------------------------------------------------------------------------------------------------------------------------\n\nCreate a new **Blank Application (Windows Universal)** project. Name it \"Quickstart\".\n\nBinding to a single item\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nEvery binding consists of a binding target and a binding source. Typically, the target is a property of a control or other UI element, and the source is a property of a class instance (a data model, or a view model). This example shows how to bind a control to a single item. The target is the **Text** property of a **TextBlock**. The source is an instance of a simple class named **Recording** that represents an audio recording. Let's look at the class first.\n\nAdd a new class to your project, name it Recording.cs (if you're using C#), and add this code to it.\n\n``` csharp\nnamespace Quickstart\n{\n    public class Recording\n    {\n        public string ArtistName { get; set; }\n        public string CompositionName { get; set; }\n        public DateTime ReleaseDateTime { get; set; }\n\n        public Recording()\n        {\n            this.ArtistName = \"Wolfgang Amadeus Mozart\";\n            this.CompositionName = \"Andante in C for Piano\";\n            this.ReleaseDateTime = new DateTime(1761, 1, 1);\n        }\n\n        public string OneLineSummary\n        {\n            get\n            {\n                return $\"{this.CompositionName} by {this.ArtistName}, released: \"\n                    + this.ReleaseDateTime.ToString(\"d\");\n            }\n        }\n    }\n\n    public class RecordingViewModel\n    {\n        private Recording defaultRecording = new Recording();\n        public Recording DefaultRecording { get { return this.defaultRecording; } }\n    }\n}\n```\n\n``` cpp\n#include <sstream>\n\nnamespace Quickstart\n{\n    public ref class Recording sealed\n    {\n    private:\n        Platform::String^ artistName;\n        Platform::String^ compositionName;\n        Windows::Globalization::Calendar^ releaseDateTime;\n\n    public:\n        Recording(Platform::String^ artistName, Platform::String^ compositionName,\n            Windows::Globalization::Calendar^ releaseDateTime) :\n            artistName{ artistName },\n            compositionName{ compositionName },\n            releaseDateTime{ releaseDateTime } {}\n\n        property Platform::String^ ArtistName\n        {\n            Platform::String^ get() { return this->artistName; }\n        }\n\n        property Platform::String^ CompositionName\n        {\n            Platform::String^ get() { return this->compositionName; }\n        }\n\n        property Windows::Globalization::Calendar^ ReleaseDateTime\n        {\n            Windows::Globalization::Calendar^ get() { return this->releaseDateTime; }\n        }\n\n        property Platform::String^ OneLineSummary\n        {\n            Platform::String^ get()\n            {\n                std::wstringstream wstringstream;\n                wstringstream << this->CompositionName->Data();\n                wstringstream << L\" by \" << this->ArtistName->Data();\n                wstringstream << L\", released: \" << this->ReleaseDateTime->MonthAsNumericString()->Data();\n                wstringstream << L\"/\" << this->ReleaseDateTime->DayAsString()->Data();\n                wstringstream << L\"/\" << this->ReleaseDateTime->YearAsString()->Data();\n                return ref new Platform::String(wstringstream.str().c-str());\n            }\n        }\n    };\n\n    public ref class RecordingViewModel sealed\n    {\n    private:\n        Recording^ defaultRecording;\n\n    public:\n        RecordingViewModel()\n        {\n            Windows::Globalization::Calendar^ releaseDateTime = ref new Windows::Globalization::Calendar();\n            releaseDateTime->Month = 1;\n            releaseDateTime->Day = 1;\n            releaseDateTime->Year = 1761;\n            this->defaultRecording = ref new Recording{ L\"Wolfgang Amadeus Mozart\", L\"Andante in C for Piano\", releaseDateTime };\n        }\n\n        property Recording^ DefaultRecording\n        {\n            Recording^ get() { return this->defaultRecording; };\n        }\n    };\n}\n```\n\nNext, expose the binding source class from the class that represents your page of markup. We do that by adding a property of type **RecordingViewModel** to **MainPage**.\n\n``` csharp\nnamespace Quickstart\n{\n    public sealed partial class MainPage : Page\n    {\n        public MainPage()\n        {\n            this.InitializeComponent();\n            this.ViewModel = new RecordingViewModel();\n        }\n\n        public RecordingViewModel ViewModel { get; set; }\n    }\n}\n```\n\n``` cpp\nnamespace Quickstart\n{\n    public ref class MainPage sealed\n    {\n    private:\n        RecordingViewModel^ viewModel;\n\n    public:\n        MainPage()\n        {\n            InitializeComponent();\n            this->viewModel = ref new RecordingViewModel();\n        }\n\n        property RecordingViewModel^ ViewModel\n        {\n            RecordingViewModel^ get() { return this->viewModel; };\n        }\n    };\n}\n```\n\nThe last piece is to bind a **TextBlock** to the **ViewModel.DefaultRecording.OneLiner** property.\n\n``` xml\n<Page x:Class=\"Quickstart.MainPage\" ... >\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"{x:Bind ViewModel.DefaultRecording.OneLineSummary}\"\n        HorizontalAlignment=\"Center\"\n        VerticalAlignment=\"Center\"/>\n    </Grid>\n</Page>\n```\n\nHere's the result.\n\n![Binding a textblock](images/xaml-databinding0.png)\n\nBinding to a collection of items\n------------------------------------------------------------------------------------------------------------------\n\nA common scenario is to bind to a collection of business objects. In C# and Visual Basic, the generic [**ObservableCollection&lt;T&gt;**](T:System.Collections.ObjectModel.ObservableCollection%601) class is a good collection choice for data binding, because it implements the [**INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged) interfaces. These interfaces provide change notification to bindings when items are added or removed or a property of the list itself changes. If you want your bound controls to update with changes to properties of objects in the collection, the business object should also implement **INotifyPropertyChanged**. For more info, see [Data binding in depth](data-binding-in-depth.md).\n\nThis next example binds a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) to a collection of `Recording` objects. Let's start by adding the collection to our view model. Just add these new members to the **RecordingViewModel** class.\n\n``` csharp\n    public class RecordingViewModel\n    {\n        ...\n        \n        private ObservableCollection<Recording> recordings = new ObservableCollection<Recording>();\n        public ObservableCollection<Recording> Recordings { get { return this.recordings; } }\n\n        public RecordingViewModel()\n        {\n            this.recordings.Add(new Recording() { ArtistName = \"Johann Sebastian Bach\",\n            CompositionName = \"Mass in B minor\", ReleaseDateTime = new DateTime(1748, 7, 8) });\n            this.recordings.Add(new Recording() { ArtistName = \"Ludwig van Beethoven\",\n            CompositionName = \"Third Symphony\", ReleaseDateTime = new DateTime(1805, 2, 11) });\n            this.recordings.Add(new Recording() { ArtistName = \"George Frideric Handel\",\n            CompositionName = \"Serse\", ReleaseDateTime = new DateTime(1737, 12, 3) });\n        }\n    }\n```\n\n``` cpp\n    public ref class RecordingViewModel sealed\n    {\n    private:\n        ...\n        Windows::Foundation::Collections::IVector<Recording^>^ recordings;\n\n    public:\n        RecordingViewModel()\n        {\n            ...\n\n            releaseDateTime = ref new Windows::Globalization::Calendar();\n            releaseDateTime->Month = 7;\n            releaseDateTime->Day = 8;\n            releaseDateTime->Year = 1748;\n            Recording^ recording = ref new Recording{ L\"Johann Sebastian Bach\", L\"Mass in B minor\", releaseDateTime };\n            this->Recordings->Append(recording);\n\n            releaseDateTime = ref new Windows::Globalization::Calendar();\n            releaseDateTime->Month = 2;\n            releaseDateTime->Day = 11;\n            releaseDateTime->Year = 1805;\n            recording = ref new Recording{ L\"Ludwig van Beethoven\", L\"Third Symphony\", releaseDateTime };\n            this->Recordings->Append(recording);\n\n            releaseDateTime = ref new Windows::Globalization::Calendar();\n            releaseDateTime->Month = 12;\n            releaseDateTime->Day = 3;\n            releaseDateTime->Year = 1737;\n            recording = ref new Recording{ L\"George Frideric Handel\", L\"Serse\", releaseDateTime };\n            this->Recordings->Append(recording);\n        }\n\n        ...\n\n        property Windows::Foundation::Collections::IVector<Recording^>^ Recordings\n        {\n            Windows::Foundation::Collections::IVector<Recording^>^ get()\n            {\n                if (this->recordings == nullptr)\n                {\n                    this->recordings = ref new Platform::Collections::Vector<Recording^>();\n                }\n                return this->recordings;\n            };\n        }\n    };\n    ```\n\nAnd then bind a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) to the **ViewModel.Recordings** property.\n\n``` xml\n<Page x:Class=\"Quickstart.MainPage\" ... >\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <ListView ItemsSource=\"{x:Bind ViewModel.Recordings}\"\n        HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\n    </Grid>\n</Page>\n```\n\nWe haven't yet provided a data template for the **Recording** class, so the best the UI framework can do is to call [**ToString**](M:System.Object.ToString) for each item in the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878). The default implementation of **ToString** is to return the type name.\n\n![Binding a list view](images/xaml-databinding1.png)\n\nTo remedy this we can either override [**ToString**](M:System.Object.ToString) to return the value of **OneLineSummary**, or we can provide a data template. The data template option is more common and arguably more flexible. You specify a data template by using the [**ContentTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209369) property of a content control or the [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242830) property of an items control. Here are two ways we could design a data template for **Recording** together with an illustration of the result.\n\n``` xml\n    <ListView ItemsSource=\"{x:Bind ViewModel.Recordings}\"\n        HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n        <ListView.ItemTemplate>\n            <DataTemplate x:DataType=\"local:Recording\">\n                <TextBlock Text=\"{x:Bind OneLineSummary}\"/>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n    ```\n\n![Binding a list view](images/xaml-databinding2.png)\n\n``` xml\n    <ListView ItemsSource=\"{x:Bind ViewModel.Recordings}\"\n    HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n        <ListView.ItemTemplate>\n            <DataTemplate x:DataType=\"local:Recording\">\n                <StackPanel Orientation=\"Horizontal\" Margin=\"6\">\n                    <SymbolIcon Symbol=\"Audio\" Margin=\"0,0,12,0\"/>\n                    <StackPanel>\n                        <TextBlock Text=\"{x:Bind ArtistName}\" FontWeight=\"Bold\"/>\n                        <TextBlock Text=\"{x:Bind CompositionName}\"/>\n                    </StackPanel>\n                </StackPanel>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n```\n\n![Binding a list view](images/xaml-databinding3.png)\n\nFor more information about XAML syntax, see [Create a UI with XAML](https://msdn.microsoft.com/library/windows/apps/Mt228349). For more information about control layout, see [Define layouts with XAML](https://msdn.microsoft.com/library/windows/apps/Mt228350).\n\nAdding a details view\n-----------------------------------------------------------------------------------------------------\n\nYou can choose to display all the details of **Recording** objects in [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) items. But that takes up a lot of space. Instead, you can show just enough data in the item to identify it and then, when the user makes a selection, you can display all the details of the selected item in a separate piece of UI known as the details view. This arrangement is also known as a master/details view, or a list/details view.\n\nThere are two ways to go about this. You can bind the details view to the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) property of the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878). Or you can use a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833): bind both the **ListView** and the details view to the **CollectionViewSource** (which will take care of the currently-selected item for you). Both techniques are shown below, and they both give the same results shown in the illustration.\n\n**Note**  So far in this topic we've only used the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783), but both of the techniques we'll show below require the more flexible (but less performant) [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782).\n\nFirst, here's the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) technique. If you're using Visual C++ component extensions (C++/CX) then, because we'll be using [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782), you'll need to add the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) attribute to the **Recording** class.\n\n``` cpp\n    [Windows::UI::Xaml::Data::Bindable]\n    public ref class Recording sealed\n    {\n        ...\n    };\n```\n\nThe only other change necessary is to the markup.\n\n``` xml\n<Page x:Class=\"Quickstart.MainPage\" ... >\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n            <ListView x:Name=\"recordingsListView\" ItemsSource=\"{x:Bind ViewModel.Recordings}\">\n                <ListView.ItemTemplate>\n                    <DataTemplate x:DataType=\"local:Recording\">\n                        <StackPanel Orientation=\"Horizontal\" Margin=\"6\">\n                            <SymbolIcon Symbol=\"Audio\" Margin=\"0,0,12,0\"/>\n                            <StackPanel>\n                                <TextBlock Text=\"{x:Bind CompositionName}\"/>\n                            </StackPanel>\n                        </StackPanel>\n                    </DataTemplate>\n                </ListView.ItemTemplate>\n            </ListView>\n            <StackPanel DataContext=\"{Binding SelectedItem, ElementName=recordingsListView}\"\n            Margin=\"0,24,0,0\">\n                <TextBlock Text=\"{Binding ArtistName}\"/>\n                <TextBlock Text=\"{Binding CompositionName}\"/>\n                <TextBlock Text=\"{Binding ReleaseDateTime}\"/>\n            </StackPanel>\n        </StackPanel>\n    </Grid>\n</Page>\n```\n\nFor the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) technique, first add a **CollectionViewSource** as a page resource.\n\n``` xml\n    <Page.Resources>\n        <CollectionViewSource x:Name=\"RecordingsCollection\" Source=\"{x:Bind ViewModel.Recordings}\"/>\n    </Page.Resources>\n```\n\nAnd then adjust the bindings on the [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) (which no longer needs to be named) and on the details view to use the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833). Note that by binding the details view directly to the **CollectionViewSource**, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself. There's no need to specify the **CurrentItem** property as the path for the binding, although you can do that if there's any ambiguity).\n\n``` xml\n    ...\n\n    <ListView ItemsSource=\"{Binding Source={StaticResource RecordingsCollection}}\">\n\n    ...\n\n    <StackPanel DataContext=\"{Binding Source={StaticResource RecordingsCollection}}\" ...>\n    ...\n```\n\nAnd here's the identical result in each case.\n\n![Binding a list view](images/xaml-databinding4.png)\n\nFormatting or converting data values for display\n--------------------------------------------------------------------------------------------------------------------------------------------\n\nThere is one small issue with the rendering above. The **ReleaseDateTime** property is not just a date, it's a [**DateTime**](T:System.DateTime), so it's being displayed with more precision than we need. One solution is to add a string property to the **Recording** class that returns `this.ReleaseDateTime.ToString(\"d\")`. Naming that property **ReleaseDate** would indicate that it returns a date, not a date-and-time. Naming it **ReleaseDateAsString** would further indicate that it returns a string.\n\nA more flexible solution is to use something known as a value converter. Here's an example of how to author your own value converter. Add this code to your Recording.cs source code file.\n\n``` csharp\npublic class StringFormatter : Windows.UI.Xaml.Data.IValueConverter\n{\n    // This converts the value object to the string to display.\n    // This will work with most simple types.\n    public object Convert(object value, Type targetType,\n        object parameter, string language)\n    {\n        // Retrieve the format string and use it to format the value.\n        string formatString = parameter as string;\n        if (!string.IsNullOrEmpty(formatString))\n        {\n            return string.Format(formatString, value);\n        }\n\n        // If the format string is null or empty, simply\n        // call ToString() on the value.\n        return value.ToString();\n    }\n\n    // No need to implement converting back on a one-way binding\n    public object ConvertBack(object value, Type targetType,\n        object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\nNow we can add an instance of **StringFormatter** as a page resource and use it in our binding. We pass the format string into the converter from markup for ultimate formatting flexibility.\n\n``` xml\n    <Page.Resources>\n        <local:StringFormatter x:Key=\"StringFormatterValueConverter\"/>\n    </Page.Resources>\n    ...\n\n    <TextBlock Text=\"{Binding ReleaseDateTime,\n        Converter={StaticResource StringFormatterValueConverter}\n        ConverterParameter=Released: \\{0:d\\}}\"/>\n\n    ...\n```\n\nHere's the result.\n\n![displaying a date with custom formatting](images/xaml-databinding5.png)\n\n\n"}