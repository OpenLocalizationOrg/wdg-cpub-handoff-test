<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">986e99cae036ff2a87de055aed0a261e4977b2ec</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\simple-port-from-direct3d-9-to-11-1-part-3--viewport-and-game-loop.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">690b94b49f9561a5f73e95eefc7b67531b35f791</mda:meta><mda:meta type="olxliffhash">224df7f830a3e4cf001643f43fc6ec78d5d61f65</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Port the game loop</source>
					<target>Port the game loop</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an IFrameworkView to control a full-screen CoreWindow.</source>
					<target>Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an IFrameworkView to control a full-screen CoreWindow.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Port the game loop</source>
					<target>Port the game loop</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Summary</source>
					<target>Summary</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Part 1: Initialize Direct3D 11</source>
					<target>Part 1: Initialize Direct3D 11</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Part 2: Convert the rendering framework</source>
					<target>Part 2: Convert the rendering framework</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Part 3: Port the game loop</source>
					<target>Part 3: Port the game loop</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> to control a full-screen <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc></pc>.</source>
					<target>Shows how to implement a window for a Universal Windows Platform (UWP) game and how to bring over the game loop, including how to build an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> to control a full-screen <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CoreWindow</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](walkthrough--simple-port-from-direct3d-9-to-11-1.md)</data>
				</originalData>
				<segment state="initial">
					<source>Part 3 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port a simple Direct3D 9 app to DirectX 11 and UWP</pc> walkthrough.</source>
					<target>Part 3 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Port a simple Direct3D 9 app to DirectX 11 and UWP</pc> walkthrough.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Create a window</source>
					<target>Create a window</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>To set up a desktop window with a Direct3D 9 viewport, we had to implement the traditional windowing framework for desktop apps.</source>
					<target>To set up a desktop window with a Direct3D 9 viewport, we had to implement the traditional windowing framework for desktop apps.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>We had to create an HWND, set the window size, provide a window processing callback, make it visible, and so on.</source>
					<target>We had to create an HWND, set the window size, provide a window processing callback, make it visible, and so on.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The UWP environment has a much simpler system.</source>
					<target>The UWP environment has a much simpler system.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Instead of setting up a traditional window, a Windows Store game using DirectX implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc>.</source>
					<target>Instead of setting up a traditional window, a Windows Store game using DirectX implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This interface exists for DirectX apps and games to run directly in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> inside the app container.</source>
					<target>This interface exists for DirectX apps and games to run directly in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreWindow</pc></pc> inside the app container.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208225)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Windows supplies managed pointers to resources such as the source application object and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Windows supplies managed pointers to resources such as the source application object and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreWindow</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>See [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Handle to Object Operator (^)</pc>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx.</source>
					<target>See [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Handle to Object Operator (^)</pc>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh700495)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/hh700509)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/hh700501)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
					<data id="id19">[</data>
					<data id="id20">](https://msdn.microsoft.com/library/windows/apps/hh700505)</data>
					<data id="id21">**</data>
					<data id="id22">**</data>
					<data id="id23">[</data>
					<data id="id24">](https://msdn.microsoft.com/library/windows/apps/hh700523)</data>
					<data id="id25">**</data>
					<data id="id26">**</data>
				</originalData>
				<segment state="initial">
					<source>Your "main" class needs to inherit from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> and implement the five <pc dataRefEnd="id6" dataRefStart="id5" id="p3">IFrameworkView</pc> methods: <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Initialize</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">SetWindow</pc></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Load</pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p10"><pc dataRefEnd="id22" dataRefStart="id21" id="p11">Run</pc></pc>, and <pc dataRefEnd="id24" dataRefStart="id23" id="p12"><pc dataRefEnd="id26" dataRefStart="id25" id="p13">Uninitialize</pc></pc>.</source>
					<target>Your "main" class needs to inherit from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc></pc> and implement the five <pc dataRefEnd="id6" dataRefStart="id5" id="p3">IFrameworkView</pc> methods: <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Initialize</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">SetWindow</pc></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Load</pc></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p10"><pc dataRefEnd="id22" dataRefStart="id21" id="p11">Run</pc></pc>, and <pc dataRefEnd="id24" dataRefStart="id23" id="p12"><pc dataRefEnd="id26" dataRefStart="id25" id="p13">Uninitialize</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In addition to creating the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IFrameworkView</pc>, which is (essentially) where your game will reside, you need to implement a factory class that creates an instance of your <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc>.</source>
					<target>In addition to creating the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IFrameworkView</pc>, which is (essentially) where your game will reside, you need to implement a factory class that creates an instance of your <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc>.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your game still has an executable with a method called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">main()</pc>, but all main can do is use the factory to create the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc> instance.</source>
					<target>Your game still has an executable with a method called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">main()</pc>, but all main can do is use the factory to create the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView</pc> instance.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Main function</source>
					<target>Main function</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>IFrameworkView factory</source>
					<target>IFrameworkView factory</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Port the game loop</source>
					<target>Port the game loop</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Let's look at the game loop from our Direct3D 9 implementation.</source>
					<target>Let's look at the game loop from our Direct3D 9 implementation.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>This code exists in the app's main function.</source>
					<target>This code exists in the app's main function.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Each iteration of this loop processes a window message or renders a frame.</source>
					<target>Each iteration of this loop processes a window message or renders a frame.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Game loop in Direct3D 9 desktop game</source>
					<target>Game loop in Direct3D 9 desktop game</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>The game loop is similar - but easier - in the UWP version of our game:</source>
					<target>The game loop is similar - but easier - in the UWP version of our game:</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700505)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh700478)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The game loop goes in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> method (instead of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">main()</pc>) because our game functions within the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">IFrameworkView</pc></pc> class.</source>
					<target>The game loop goes in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IFrameworkView::Run</pc></pc> method (instead of <pc dataRefEnd="id6" dataRefStart="id5" id="p3">main()</pc>) because our game functions within the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">IFrameworkView</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ms644943)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208215)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208211)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Instead of implementing a message handling framework and calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PeekMessage</pc></pc>, we can call the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProcessEvents</pc></pc> method built in to our app window's <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">CoreDispatcher</pc></pc>.</source>
					<target>Instead of implementing a message handling framework and calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PeekMessage</pc></pc>, we can call the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProcessEvents</pc></pc> method built in to our app window's <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">CoreDispatcher</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>There's no need for the game loop to branch and handle messages - just call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProcessEvents</pc> and proceed.</source>
					<target>There's no need for the game loop to branch and handle messages - just call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProcessEvents</pc> and proceed.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Game loop in Direct3D 11 Windows Store game</source>
					<target>Game loop in Direct3D 11 Windows Store game</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Now we have a UWP app that sets up the same basic graphics infrastructure, and renders the same colorful cube, as our DirectX 9 example.</source>
					<target>Now we have a UWP app that sets up the same basic graphics infrastructure, and renders the same colorful cube, as our DirectX 9 example.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Where do I go from here?</source>
					<target>Where do I go from here?</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](directx-porting-faq.md)</data>
				</originalData>
				<segment state="initial">
					<source>Bookmark the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectX 11 porting FAQ</pc>.</source>
					<target>Bookmark the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectX 11 porting FAQ</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>The DirectX UWP templates include a robust Direct3D device infrastructure that's ready for use with your game.</source>
					<target>The DirectX UWP templates include a robust Direct3D device infrastructure that's ready for use with your game.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](user-interface.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a DirectX game project from a template</pc> for guidance on picking the right template.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a DirectX game project from a template</pc> for guidance on picking the right template.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Visit the following in-depth Windows Store game game development articles:</source>
					<target>Visit the following in-depth Windows Store game game development articles:</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Walkthrough: a simple UWP game with DirectX</source>
					<target>Walkthrough: a simple UWP game with DirectX</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Audio for games</source>
					<target>Audio for games</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Move-look controls for games</source>
					<target>Move-look controls for games</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>