<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">d3728b491d6010ffa642b3fbe9ca9033225ba616</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\debug-test-perf\optimize-suspend-resume.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">4686f2ac96f070980520e3ead9264b68a8148e12</mda:meta><mda:meta type="olxliffhash">152c81ef36dae60e2993c1f7d675f8faa68a7c59</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Optimize suspend/resume</source>
					<target>Optimize suspend/resume</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</source>
					<target>Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Optimize suspend/resume</source>
					<target>Optimize suspend/resume</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</source>
					<target>Create Universal Windows Platform (UWP) apps that streamline their use of the process lifetime system to resume efficiently after suspension or termination.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Launch</source>
					<target>Launch</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>When reactivating an app following suspend/terminate, check to see if a long time has elapsed.</source>
					<target>When reactivating an app following suspend/terminate, check to see if a long time has elapsed.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>If so, consider returning to the main landing page of the app instead of showing the user stale data.</source>
					<target>If so, consider returning to the main landing page of the app instead of showing the user stale data.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This will also result in faster startup.</source>
					<target>This will also result in faster startup.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>During activation, always check the PreviousExecutionState of the event args parameter (for example, for launched activations check LaunchActivatedEventArgs.PreviousExecutionState).</source>
					<target>During activation, always check the PreviousExecutionState of the event args parameter (for example, for launched activations check LaunchActivatedEventArgs.PreviousExecutionState).</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>If the value is ClosedByUser or NotRunning, don’t waste time restoring previously saved state.</source>
					<target>If the value is ClosedByUser or NotRunning, don’t waste time restoring previously saved state.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>In this case, the right thing is to provide a fresh experience – and it will result in faster startup.</source>
					<target>In this case, the right thing is to provide a fresh experience – and it will result in faster startup.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Instead of eagerly restoring previously saved state, consider keep track of that state, and only restoring it on demand.</source>
					<target>Instead of eagerly restoring previously saved state, consider keep track of that state, and only restoring it on demand.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>For example, consider a situation where your app was previously suspended, saved state for 3 pages, and was then terminated.</source>
					<target>For example, consider a situation where your app was previously suspended, saved state for 3 pages, and was then terminated.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Upon relaunch, if you decide to return the user to the 3rd page, do not eagerly restore the state for the first 2 pages.</source>
					<target>Upon relaunch, if you decide to return the user to the 3rd page, do not eagerly restore the state for the first 2 pages.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Instead, hold on to this state and only use it once you know you need it.</source>
					<target>Instead, hold on to this state and only use it once you know you need it.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>While running</source>
					<target>While running</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>As a best practice, don’t wait for the suspend event and then persist a large amount of state.</source>
					<target>As a best practice, don’t wait for the suspend event and then persist a large amount of state.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Instead, your application should incrementally persist smaller amounts of state as it runs.</source>
					<target>Instead, your application should incrementally persist smaller amounts of state as it runs.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>This is especially important for large apps that are at risk of running out of time during suspend if they try to save everything at once.</source>
					<target>This is especially important for large apps that are at risk of running out of time during suspend if they try to save everything at once.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>However, you need to find a good balance between incremental saving and performance of your app while running.</source>
					<target>However, you need to find a good balance between incremental saving and performance of your app while running.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>A good tradeoff is to incrementally keep track of the data that has changed (and therefore needs to be saved) – and use the suspend event to actually save that data (which is faster than saving all data or examining the entire state of app to decide what to save).</source>
					<target>A good tradeoff is to incrementally keep track of the data that has changed (and therefore needs to be saved) – and use the suspend event to actually save that data (which is faster than saving all data or examining the entire state of app to decide what to save).</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Don’t use the window Activated or VisibilityChanged events to decide when to save state.</source>
					<target>Don’t use the window Activated or VisibilityChanged events to decide when to save state.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>When the user switches away from your app, the window is deactivated, but the system waits a short amount of time (about 10 seconds) before suspending the app.</source>
					<target>When the user switches away from your app, the window is deactivated, but the system waits a short amount of time (about 10 seconds) before suspending the app.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>This is to give a more responsive experience in case the user switches back to your app rapidly.</source>
					<target>This is to give a more responsive experience in case the user switches back to your app rapidly.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Wait for the suspend event before running suspend logic.</source>
					<target>Wait for the suspend event before running suspend logic.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Suspend</source>
					<target>Suspend</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>During suspend, reduce the footprint of your app.</source>
					<target>During suspend, reduce the footprint of your app.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>If your app uses less memory while suspended, the overall system will be more responsive and fewer suspended apps (including yours) will be terminated.</source>
					<target>If your app uses less memory while suspended, the overall system will be more responsive and fewer suspended apps (including yours) will be terminated.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>However, balance this with the need for snappy resumes: don’t reduce footprint so much that resume slows down considerably while your app reloads lots of data into memory.</source>
					<target>However, balance this with the need for snappy resumes: don’t reduce footprint so much that resume slows down considerably while your app reloads lots of data into memory.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>For managed apps, the system will run a garbage collection pass after the app’s suspend handlers complete.</source>
					<target>For managed apps, the system will run a garbage collection pass after the app’s suspend handlers complete.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Make sure to take advantage of this by releasing references to objects that will help reduce the app’s footprint while suspended.</source>
					<target>Make sure to take advantage of this by releasing references to objects that will help reduce the app’s footprint while suspended.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Ideally, your app will finish with suspend logic in less than 1 second.</source>
					<target>Ideally, your app will finish with suspend logic in less than 1 second.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>The faster you can suspend, the better – that will result in a snappier user experience for other apps and parts of the system.</source>
					<target>The faster you can suspend, the better – that will result in a snappier user experience for other apps and parts of the system.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>If you must, your suspend logic can take up to 5 seconds on desktop devices or 10 seconds on mobile devices.</source>
					<target>If you must, your suspend logic can take up to 5 seconds on desktop devices or 10 seconds on mobile devices.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>If those times are exceeded, your app will be abruptly terminated.</source>
					<target>If those times are exceeded, your app will be abruptly terminated.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>You don’t want this to happen – because if it does, when the user switches back to your app, a new process will be launched and the experience will feel much slower compared to resuming a suspended app.</source>
					<target>You don’t want this to happen – because if it does, when the user switches back to your app, a new process will be launched and the experience will feel much slower compared to resuming a suspended app.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Resume</source>
					<target>Resume</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Most apps don’t need to do anything special when resumed, so typically you won’t handle this event.</source>
					<target>Most apps don’t need to do anything special when resumed, so typically you won’t handle this event.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Some apps use resume to restore connections that were closed during suspend, or to refresh data that may be stale.</source>
					<target>Some apps use resume to restore connections that were closed during suspend, or to refresh data that may be stale.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Instead of doing this kind of work eagerly, design your app to initiate these activities on demand.</source>
					<target>Instead of doing this kind of work eagerly, design your app to initiate these activities on demand.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>This will result in a faster experience when the user switches back to a suspended app, and ensures that you’re only doing work the user really needs.</source>
					<target>This will result in a faster experience when the user switches back to a suspended app, and ensures that you’re only doing work the user really needs.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Avoid unnecessary termination</source>
					<target>Avoid unnecessary termination</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The UWP process lifetime system can suspend or terminate an app for a variety of reasons.</source>
					<target>The UWP process lifetime system can suspend or terminate an app for a variety of reasons.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>This process is designed to quickly return an app to the state it was in before it was suspended or terminated.</source>
					<target>This process is designed to quickly return an app to the state it was in before it was suspended or terminated.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>When done well, the user won’t be aware that the app ever stopped running.</source>
					<target>When done well, the user won’t be aware that the app ever stopped running.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Here are a few tricks that your UWP app can use to help the system streamline transitions in an app’s lifetime.</source>
					<target>Here are a few tricks that your UWP app can use to help the system streamline transitions in an app’s lifetime.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>An app can be suspended when the user moves it to the background or when the system enters a low power state.</source>
					<target>An app can be suspended when the user moves it to the background or when the system enters a low power state.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>When the app is being suspended, it raises the suspending event and has up to 5 seconds to save its data.</source>
					<target>When the app is being suspended, it raises the suspending event and has up to 5 seconds to save its data.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>If the app's suspending event handler doesn't complete within 5 seconds, the system assumes the app has stopped responding and terminates it.</source>
					<target>If the app's suspending event handler doesn't complete within 5 seconds, the system assumes the app has stopped responding and terminates it.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>A terminated app has to go through the long startup process again instead of being immediately loaded into memory when a user switches to it.</source>
					<target>A terminated app has to go through the long startup process again instead of being immediately loaded into memory when a user switches to it.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Serialize only when necessary</source>
					<target>Serialize only when necessary</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Many apps serialize all their data on suspension.</source>
					<target>Many apps serialize all their data on suspension.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR241622)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you only need to store a small amount of app settings data, however, you should use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LocalSettings</pc></pc> store instead of serializing the data.</source>
					<target>If you only need to store a small amount of app settings data, however, you should use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LocalSettings</pc></pc> store instead of serializing the data.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Use serialization for larger amounts of data and for non-settings data.</source>
					<target>Use serialization for larger amounts of data and for non-settings data.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>When you do serialize your data, you should avoid reserializing if it hasn't changed.</source>
					<target>When you do serialize your data, you should avoid reserializing if it hasn't changed.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>It takes extra time to serialize and save the data, plus extra time to read and deserialize it when the app is activated again.</source>
					<target>It takes extra time to serialize and save the data, plus extra time to read and deserialize it when the app is activated again.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Instead, we recommend that the app determine if its state has actually changed, and if so, serialize and deserialize only the data that changed.</source>
					<target>Instead, we recommend that the app determine if its state has actually changed, and if so, serialize and deserialize only the data that changed.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>A good way to ensure that this happens is to periodically serialize data in the background after it changes.</source>
					<target>A good way to ensure that this happens is to periodically serialize data in the background after it changes.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>When you use this technique, everything that needs to be serialized at suspension has already been saved so there is no work to do and an app suspends quickly.</source>
					<target>When you use this technique, everything that needs to be serialized at suspension has already been saved so there is no work to do and an app suspends quickly.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Serializing data in C# and Visual Basic</source>
					<target>Serializing data in C# and Visual Basic</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.xml.serialization.xmlserializer.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.runtime.serialization.datacontractserializer.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.runtime.serialization.json.datacontractjsonserializer.aspx)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The available choices of serialization technology for .NET apps are the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Xml.Serialization.XmlSerializer</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">System.Runtime.Serialization.DataContractSerializer</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">System.Runtime.Serialization.Json.DataContractJsonSerializer</pc></pc> classes.</source>
					<target>The available choices of serialization technology for .NET apps are the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.Xml.Serialization.XmlSerializer</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">System.Runtime.Serialization.DataContractSerializer</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">System.Runtime.Serialization.Json.DataContractJsonSerializer</pc></pc> classes.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.xml.serialization.xmlserializer.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>From a performance perspective, we recommend using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XmlSerializer</pc></pc> class.</source>
					<target>From a performance perspective, we recommend using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XmlSerializer</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> has the lowest serialization and deserialization times, and maintains a low memory footprint.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> has the lowest serialization and deserialization times, and maintains a low memory footprint.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> has few dependencies on the .NET framework; this means that compared with the other serialization technologies, fewer modules need to be loaded into your app to use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XmlSerializer</pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> has few dependencies on the .NET framework; this means that compared with the other serialization technologies, fewer modules need to be loaded into your app to use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XmlSerializer</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.runtime.serialization.datacontractserializer.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContractSerializer</pc></pc> makes it easier to serialize custom classes, although it has a larger performance impact than <pc dataRefEnd="id6" dataRefStart="id5" id="p3">XmlSerializer</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContractSerializer</pc></pc> makes it easier to serialize custom classes, although it has a larger performance impact than <pc dataRefEnd="id6" dataRefStart="id5" id="p3">XmlSerializer</pc>.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>If you need better performance, consider switching.</source>
					<target>If you need better performance, consider switching.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In general, you should not load more than one serializer, and you should prefer <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> unless you need the features of another serializer.</source>
					<target>In general, you should not load more than one serializer, and you should prefer <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XmlSerializer</pc> unless you need the features of another serializer.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Reduce memory footprint</source>
					<target>Reduce memory footprint</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>The system tries to keep as many suspended apps in memory as possible so that users can quickly and reliably switch between them.</source>
					<target>The system tries to keep as many suspended apps in memory as possible so that users can quickly and reliably switch between them.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>When an app is suspended and stays in the system's memory, it can quickly be brought to the foreground for the user to interact with, without having to display a splash screen or perform a lengthy load operation.</source>
					<target>When an app is suspended and stays in the system's memory, it can quickly be brought to the foreground for the user to interact with, without having to display a splash screen or perform a lengthy load operation.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>If there aren't enough resources to keep an app in memory, the app is terminated.</source>
					<target>If there aren't enough resources to keep an app in memory, the app is terminated.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>This makes memory management important for two reasons:</source>
					<target>This makes memory management important for two reasons:</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Freeing as much memory as possible at suspension minimizes the chances that your app is terminated because of lack of resources while it’s suspended.</source>
					<target>Freeing as much memory as possible at suspension minimizes the chances that your app is terminated because of lack of resources while it’s suspended.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Reducing the overall amount of memory your app uses reduces the chances that other apps are terminated while they are suspended.</source>
					<target>Reducing the overall amount of memory your app uses reduces the chances that other apps are terminated while they are suspended.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Release resources</source>
					<target>Release resources</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Certain objects, such as files and devices, occupy a large amount of memory.</source>
					<target>Certain objects, such as files and devices, occupy a large amount of memory.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>We recommend that during suspension, an app release handles to these objects and recreate them when needed.</source>
					<target>We recommend that during suspension, an app release handles to these objects and recreate them when needed.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>This is also a good time to purge any caches that won’t be valid when the app is resumed.</source>
					<target>This is also a good time to purge any caches that won’t be valid when the app is resumed.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>An additional step the XAML framework runs on your behalf for C# and Visual Basic apps is garbage collection if it is necessary.</source>
					<target>An additional step the XAML framework runs on your behalf for C# and Visual Basic apps is garbage collection if it is necessary.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>This ensures any objects no longer referenced in app code are released.</source>
					<target>This ensures any objects no longer referenced in app code are released.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Resume quickly</source>
					<target>Resume quickly</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>A suspended app can be resumed when the user moves it to the foreground or when the system comes out of a low power state.</source>
					<target>A suspended app can be resumed when the user moves it to the foreground or when the system comes out of a low power state.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>When an app is resumed from the suspended state, it continues from where it was when it was suspended.</source>
					<target>When an app is resumed from the suspended state, it continues from where it was when it was suspended.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>No app data is lost because it was stored in memory, even if the app was suspended for a long period of time.</source>
					<target>No app data is lost because it was stored in memory, even if the app was suspended for a long period of time.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR205859)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Most apps don't need to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resuming</pc></pc> event.</source>
					<target>Most apps don't need to handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resuming</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>When your app is resumed, variables and objects have the exact same state they had when the app was suspended.</source>
					<target>When your app is resumed, variables and objects have the exact same state they had when the app was suspended.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resuming</pc> event only if you need to update data or objects that might have changed between the time your app was suspended and when it was resumed such as: content (for example, update feed data), network connections that may have gone stale, or if you need to reacquire access to a device (for example, a webcam).</source>
					<target>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resuming</pc> event only if you need to update data or objects that might have changed between the time your app was suspended and when it was resumed such as: content (for example, update feed data), network connections that may have gone stale, or if you need to reacquire access to a device (for example, a webcam).</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Guidelines for app suspend and resume</source>
					<target>Guidelines for app suspend and resume</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>