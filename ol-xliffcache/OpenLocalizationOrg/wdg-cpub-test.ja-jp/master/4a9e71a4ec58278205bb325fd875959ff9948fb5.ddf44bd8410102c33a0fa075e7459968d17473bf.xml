{"nodes":[{"pos":[17,182],"content":"The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.","needQuote":true,"needEscape":true,"nodes":[{"content":"The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.","pos":[0,165]}]},{"pos":[190,242],"content":"Porting Windows Phone Silverlight XAML and UI to UWP","needQuote":true,"needEscape":true,"nodes":[{"content":"Porting Windows Phone Silverlight XAML and UI to UWP","pos":[0,52]}]},{"content":"Porting Windows Phone Silverlight XAML and UI to UWP","pos":[300,352]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[354,392]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[393,488],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"pos":[491,564],"content":"The previous topic was <bpt id=\"p1\">[</bpt>Troubleshooting<ept id=\"p1\">](wpsl-to-uwp-troubleshooting.md)</ept>.","source":"The previous topic was [Troubleshooting](wpsl-to-uwp-troubleshooting.md)."},{"content":"The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.","pos":[566,731]},{"content":"You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed \"clr-namespace\" to \"using\".","pos":[732,918]},{"content":"Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.","pos":[919,1062]},{"content":"A first look at the XAML markup","pos":[1067,1098]},{"content":"The previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project.","pos":[1100,1221]},{"content":"One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the <ph id=\"ph1\">`PhoneApplicationPage`</ph> element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project.","pos":[1222,1443],"source":" One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the `PhoneApplicationPage` element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project."},{"content":"In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project.","pos":[1444,1570]},{"content":"If you open that version of MainPage.xaml, you'll see that at the root is the type <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Page<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, which is in the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Windows.UI.Xaml.Controls<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.","pos":[1571,1839],"source":" If you open that version of MainPage.xaml, you'll see that at the root is the type [**Page**](https://msdn.microsoft.com/library/windows/apps/br227503), which is in the [**Windows.UI.Xaml.Controls**](https://msdn.microsoft.com/library/windows/apps/br227716) namespace."},{"content":"So, you can change all <ph id=\"ph1\">`&lt;phone:PhoneApplicationPage&gt;`</ph> elements to <ph id=\"ph2\">`&lt;Page&gt;`</ph> (don't forget property element syntax) and you can delete the <ph id=\"ph3\">`xmlns:phone`</ph> declaration.","pos":[1840,2003],"source":" So, you can change all `<phone:PhoneApplicationPage>` elements to `<Page>` (don't forget property element syntax) and you can delete the `xmlns:phone` declaration."},{"pos":[2005,2204],"content":"For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to <bpt id=\"p1\">[</bpt>Namespace and class mappings<ept id=\"p1\">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.","source":"For a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to [Namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md)."},{"content":"XAML namespace prefix declarations","pos":[2209,2243]},{"content":"If you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup.","pos":[2246,2422]},{"content":"The syntax of these differs between Windows Phone Silverlight and the UWP.","pos":[2423,2497]},{"content":"Here are some examples:","pos":[2498,2521]},{"content":"Change \"clr-namespace\" to \"using\" and delete any assembly token and semi-colon (the assembly will be inferred).","pos":[2694,2805]},{"content":"The result looks like this:","pos":[2806,2833]},{"content":"You may have a resource whose type is defined by the system:","pos":[2962,3022]},{"content":"In the UWP, omit the \"System\" prefix declaration and use the (already declared) \"x\" prefix instead:","pos":[3169,3268]},{"content":"Imperative code","pos":[3378,3393]},{"content":"Your view models are one place where there's imperative code that references UI types.","pos":[3396,3482]},{"content":"Another place is any code-behind files that directly manipulate UI elements.","pos":[3483,3559]},{"content":"For example, you might find that a line of code like this one doesn't compile yet:","pos":[3560,3642]},{"content":"<bpt id=\"p1\">**</bpt>BitmapImage<ept id=\"p1\">**</ept> is in the <bpt id=\"p2\">**</bpt>System.Windows.Media.Imaging<ept id=\"p2\">**</ept> namespace in Windows Phone Silverlight, and a using directive in the same file allows <bpt id=\"p3\">**</bpt>BitmapImage<ept id=\"p3\">**</ept> to be used without namespace qualification as in the snippet above.","pos":[3915,4143],"source":"**BitmapImage** is in the **System.Windows.Media.Imaging** namespace in Windows Phone Silverlight, and a using directive in the same file allows **BitmapImage** to be used without namespace qualification as in the snippet above."},{"content":"In a case like this, you can right-click the type name (<bpt id=\"p1\">**</bpt>BitmapImage<ept id=\"p1\">**</ept>) in Visual Studio and use the <bpt id=\"p2\">**</bpt>Resolve<ept id=\"p2\">**</ept> command on the context menu to add a new namespace directive to the file.","pos":[4144,4331],"source":" In a case like this, you can right-click the type name (**BitmapImage**) in Visual Studio and use the **Resolve** command on the context menu to add a new namespace directive to the file."},{"content":"In this case, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.UI.Xaml.Media.Imaging<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br243258)</ept> namespace is added, which is where the type lives in the UWP.","pos":[4332,4505],"source":" In this case, the [**Windows.UI.Xaml.Media.Imaging**](https://msdn.microsoft.com/library/windows/apps/br243258) namespace is added, which is where the type lives in the UWP."},{"content":"You can remove the <bpt id=\"p1\">**</bpt>System.Windows.Media.Imaging<ept id=\"p1\">**</ept> using directive, and that will be all it takes to port code like that in the snippet above.","pos":[4506,4649],"source":" You can remove the **System.Windows.Media.Imaging** using directive, and that will be all it takes to port code like that in the snippet above."},{"content":"When you're done, you'll have removed all Windows Phone Silverlight namespaces.","pos":[4650,4729]},{"content":"In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's <bpt id=\"p1\">**</bpt>Find and Replace<ept id=\"p1\">**</ept> command to make bulk changes to your source code.","pos":[4731,4939],"source":"In simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's **Find and Replace** command to make bulk changes to your source code."},{"content":"The <bpt id=\"p1\">**</bpt>Resolve<ept id=\"p1\">**</ept> command is a great way of discovering a type's new namespace.","pos":[4940,5017],"source":" The **Resolve** command is a great way of discovering a type's new namespace."},{"content":"As another example, you can replace all \"System.Windows\" with \"Windows.UI.Xaml\".","pos":[5018,5098]},{"content":"That will essentially port all using directives and all fully-qualified type names that refer to that namespace.","pos":[5099,5211]},{"pos":[5213,5386],"content":"Once all the old using directives are removed and the new ones added, you can use Visual Studio's <bpt id=\"p1\">**</bpt>Organize Usings<ept id=\"p1\">**</ept> command to sort your directives and remove unused ones.","source":"Once all the old using directives are removed and the new ones added, you can use Visual Studio's **Organize Usings** command to sort your directives and remove unused ones."},{"content":"Sometimes, fixing imperative code will be as minor as changing a parameter's type.","pos":[5388,5470]},{"content":"Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps.","pos":[5471,5558]},{"content":"To identify which APIs are supported, use the rest of this porting guide in combination with <bpt id=\"p1\">[</bpt>.NET for Windows Store apps overview<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx)</ept> and the <bpt id=\"p2\">[</bpt>Windows Runtime reference<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br211377)</ept>.","pos":[5559,5853],"source":" To identify which APIs are supported, use the rest of this porting guide in combination with [.NET for Windows Store apps overview](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx) and the [Windows Runtime reference](https://msdn.microsoft.com/library/windows/apps/br211377)."},{"content":"And, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code.","pos":[5855,5975]},{"content":"Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: <bpt id=\"p1\">[</bpt>Troubleshooting<ept id=\"p1\">](wpsl-to-uwp-troubleshooting.md)</ept>), until any build and runtime issues are ironed-out and your port is complete.","pos":[5976,6214],"source":" Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: [Troubleshooting](wpsl-to-uwp-troubleshooting.md)), until any build and runtime issues are ironed-out and your port is complete."},{"content":"Adaptive/responsive UI","pos":[6219,6241]},{"content":"Because your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices.","pos":[6243,6491]},{"content":"You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section <bpt id=\"p1\">[</bpt>Adaptive UI<ept id=\"p1\">](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui)</ept> in the Bookstore2 case study topic.","pos":[6492,6770],"source":" You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section [Adaptive UI](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui) in the Bookstore2 case study topic."},{"content":"Alarms and Reminders","pos":[6775,6795]},{"content":"Code using the <bpt id=\"p1\">**</bpt>Alarm<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Reminder<ept id=\"p2\">**</ept> classes should be ported to use the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BackgroundTaskBuilder<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> class to create and register a background task, and display a toast at the relevant time.","pos":[6797,7049],"source":"Code using the **Alarm** or **Reminder** classes should be ported to use the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) class to create and register a background task, and display a toast at the relevant time."},{"content":"See <bpt id=\"p1\">[</bpt>Background processing<ept id=\"p1\">](wpsl-to-uwp-business-and-data.md#background-processing)</ept> and <bpt id=\"p2\">[</bpt>Toasts<ept id=\"p2\">](#toasts)</ept>.","pos":[7050,7156],"source":" See [Background processing](wpsl-to-uwp-business-and-data.md#background-processing) and [Toasts](#toasts)."},{"content":"Animation","pos":[7161,7170]},{"content":"As a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps.","pos":[7172,7297]},{"content":"These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do.","pos":[7298,7455]},{"content":"See <bpt id=\"p1\">[</bpt>Quickstart: Animating your UI using library animations<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703)</ept>.","pos":[7456,7580],"source":" See [Quickstart: Animating your UI using library animations](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703)."},{"content":"If you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced.","pos":[7582,7786]},{"content":"See <bpt id=\"p1\">[</bpt>Optimize animations and media<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt204774)</ept>.","pos":[7787,7881],"source":" See [Optimize animations and media](https://msdn.microsoft.com/library/windows/apps/mt204774)."},{"content":"Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things.","pos":[7882,8096]},{"content":"You can either re-target them to animate different properties, such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RenderTransform<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208980)</ept>, thereby making them independent.","pos":[8097,8281],"source":" You can either re-target them to animate different properties, such as [**RenderTransform**](https://msdn.microsoft.com/library/windows/apps/br208980), thereby making them independent."},{"content":"Or you can set <ph id=\"ph1\">`EnableDependentAnimation=\"True\"`</ph> on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly.","pos":[8282,8453],"source":" Or you can set `EnableDependentAnimation=\"True\"` on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly."},{"content":"If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.","pos":[8454,8570]},{"content":"Back button handling","pos":[8575,8595]},{"content":"In a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices.","pos":[8597,8708]},{"content":"On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell.","pos":[8709,8825]},{"content":"On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode.","pos":[8826,9025]},{"content":"The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackRequested<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn893596)</ept> event.","pos":[9026,9249],"source":" The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same [**BackRequested**](https://msdn.microsoft.com/library/windows/apps/dn893596) event."},{"content":"The example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).","pos":[9251,9458]},{"content":"There's also a single approach for all device families for programmatically exiting the app.","pos":[10784,10876]},{"content":"Binding, and compiled bindings with {x:Bind}","pos":[10943,10987]},{"content":"The topic of binding includes:","pos":[10989,11019]},{"content":"Binding a UI element to \"data\" (that is, to the properties and commands of a view model)","pos":[11025,11113]},{"content":"Binding a UI element to another UI element","pos":[11118,11160]},{"content":"Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)","pos":[11165,11316]},{"content":"All of these aspects are largely still supported, but there are namespace differences.","pos":[11318,11404]},{"content":"For example, <bpt id=\"p1\">**</bpt>System.Windows.Data.Binding<ept id=\"p1\">**</ept> maps to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Windows.UI.Xaml.Data.Binding<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept>, <bpt id=\"p4\">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id=\"p4\">**</ept> maps to <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Windows.UI.Xaml.Data.INotifyPropertyChanged<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br209899)</ept>, and <bpt id=\"p7\">**</bpt>System.Collections.Specialized.INotifyPropertyChanged<ept id=\"p7\">**</ept> maps to <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>Windows.UI.Xaml.Interop.INotifyCollectionChanged<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/library/windows/apps/hh702001)</ept>.","pos":[11405,11901],"source":" For example, **System.Windows.Data.Binding** maps to [**Windows.UI.Xaml.Data.Binding**](https://msdn.microsoft.com/library/windows/apps/br209820), **System.ComponentModel.INotifyPropertyChanged** maps to [**Windows.UI.Xaml.Data.INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/br209899), and **System.Collections.Specialized.INotifyPropertyChanged** maps to [**Windows.UI.Xaml.Interop.INotifyCollectionChanged**](https://msdn.microsoft.com/library/windows/apps/hh702001)."},{"content":"Windows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app.","pos":[11903,12000]},{"content":"You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events.","pos":[12001,12149]},{"content":"If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable.","pos":[12150,12384]},{"content":"You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element.","pos":[12385,12509]},{"content":"Note that in a UWP app the type names you use are <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CommandBar<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279427)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>AppBarButton<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn279244)</ept>.","pos":[12510,12716],"source":" Note that in a UWP app the type names you use are [**CommandBar**](https://msdn.microsoft.com/library/windows/apps/dn279427) and [**AppBarButton**](https://msdn.microsoft.com/library/windows/apps/dn279244)."},{"content":"The binding-related features of UWP apps currently have the following limitations:","pos":[12718,12800]},{"pos":[12806,13018],"content":"There is no built-in support for data-entry validation and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IDataErrorInfo<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.ComponentModel.IDataErrorInfo)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>INotifyDataErrorInfo<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.ComponentModel.INotifyDataErrorInfo)</ept> interfaces.","source":"There is no built-in support for data-entry validation and the [**IDataErrorInfo**](T:System.ComponentModel.IDataErrorInfo) and [**INotifyDataErrorInfo**](T:System.ComponentModel.INotifyDataErrorInfo) interfaces."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Binding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209820)</ept> class does not include the extended formatting properties available in Windows Phone Silverlight.","pos":[13023,13196],"source":"The [**Binding**](https://msdn.microsoft.com/library/windows/apps/br209820) class does not include the extended formatting properties available in Windows Phone Silverlight."},{"content":"However, you can still implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IValueConverter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> to provide custom formatting.","pos":[13197,13339],"source":" However, you can still implement [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/br209903) to provide custom formatting."},{"pos":[13344,13545],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IValueConverter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209903)</ept> methods take language strings as parameters instead of <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CultureInfo<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.Globalization.CultureInfo)</ept> objects.","source":"The [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/br209903) methods take language strings as parameters instead of [**CultureInfo**](T:System.Globalization.CultureInfo) objects."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept> class does not provide built-in support for sorting and filtering, and grouping works differently.","pos":[13550,13737],"source":"The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/br209833) class does not provide built-in support for sorting and filtering, and grouping works differently."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Data binding in depth<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt210946)</ept> and the <bpt id=\"p2\">[</bpt>Data binding sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=226854)</ept>.","pos":[13738,13918],"source":" For more info, see [Data binding in depth](https://msdn.microsoft.com/library/windows/apps/mt210946) and the [Data binding sample](http://go.microsoft.com/fwlink/p/?linkid=226854)."},{"content":"Although the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension.","pos":[13920,14126]},{"content":"See <bpt id=\"p1\">[</bpt>Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding<ept id=\"p1\">](http://channel9.msdn.com/Events/Build/2015/3-635)</ept>, and the <bpt id=\"p2\">[</bpt>x:Bind Sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.","pos":[14127,14346],"source":" See [Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding](http://channel9.msdn.com/Events/Build/2015/3-635), and the [x:Bind Sample](http://go.microsoft.com/fwlink/p/?linkid=619989)."},{"content":"Binding an Image to a view model","pos":[14351,14383]},{"content":"You can bind the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image.Source<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242760)</ept> property to any property of a view model that's of type <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ImageSource<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br210107)</ept>.","pos":[14385,14611],"source":"You can bind the [**Image.Source**](https://msdn.microsoft.com/library/windows/apps/br242760) property to any property of a view model that's of type [**ImageSource**](https://msdn.microsoft.com/library/windows/apps/br210107)."},{"content":"Here's a typical implementation of such a property in a Windows Phone Silverlight app:","pos":[14612,14698]},{"content":"In a UWP app, you use the ms-appx <bpt id=\"p1\">[</bpt>URI scheme<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/jj655406)</ept>.","pos":[15018,15123],"source":"In a UWP app, you use the ms-appx [URI scheme](https://msdn.microsoft.com/library/windows/apps/jj655406)."},{"content":"So that you can keep the rest of your code the same, you can use a different overload of the <bpt id=\"p1\">**</bpt>System.Uri<ept id=\"p1\">**</ept> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.","pos":[15124,15330],"source":" So that you can keep the rest of your code the same, you can use a different overload of the **System.Uri** constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that."},{"content":"Like this:","pos":[15331,15341]},{"content":"That way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.","pos":[15529,15678]},{"content":"Controls, and control styles/templates","pos":[15683,15721]},{"content":"Windows Phone Silverlight apps use controls defined in the <bpt id=\"p1\">**</bpt>Microsoft.Phone.Controls<ept id=\"p1\">**</ept> namespace and the <bpt id=\"p2\">**</bpt>System.Windows.Controls<ept id=\"p2\">**</ept> namespace.","pos":[15723,15867],"source":"Windows Phone Silverlight apps use controls defined in the **Microsoft.Phone.Controls** namespace and the **System.Windows.Controls** namespace."},{"content":"XAML UWP apps use controls defined in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.UI.Xaml.Controls<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept> namespace.","pos":[15868,16009],"source":" XAML UWP apps use controls defined in the [**Windows.UI.Xaml.Controls**](https://msdn.microsoft.com/library/windows/apps/br227716) namespace."},{"content":"The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls.","pos":[16010,16126]},{"content":"But, some changes have been made to improve the set of available controls and to unify them with Windows apps.","pos":[16127,16237]},{"content":"Here are specific examples.","pos":[16238,16265]},{"content":"Control name","pos":[16269,16281]},{"content":"Change","pos":[16284,16290]},{"content":"ApplicationBar","pos":[16321,16335]},{"pos":[16338,16426],"content":"The <bpt id=\"p1\">[</bpt>Page.TopAppBar<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh702575)</ept> property.","source":"The [Page.TopAppBar](https://msdn.microsoft.com/library/windows/apps/hh702575) property."},{"content":"ApplicationBarIconButton","pos":[16431,16455]},{"content":"The UWP equivalent is the <bpt id=\"p1\">[</bpt>Glyph<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279538)</ept> property.","pos":[16458,16559],"source":"The UWP equivalent is the [Glyph](https://msdn.microsoft.com/library/windows/apps/dn279538) property."},{"content":"PrimaryCommands is the content property of CommandBar.","pos":[16560,16614]},{"content":"The XAML parser interprets an element's inner xml as the value of its content property.","pos":[16615,16702]},{"content":"ApplicationBarMenuItem","pos":[16707,16729]},{"pos":[16732,16863],"content":"The UWP equivalent is the <bpt id=\"p1\">[</bpt>AppBarButton.Label<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279261)</ept> set to the menu item text.","source":"The UWP equivalent is the [AppBarButton.Label](https://msdn.microsoft.com/library/windows/apps/dn279261) set to the menu item text."},{"content":"ContextMenu (in the Windows Phone Toolkit)","pos":[16868,16910]},{"pos":[16913,17016],"content":"For a single selection fly-out, use <bpt id=\"p1\">[</bpt>Flyout<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279496)</ept>.","source":"For a single selection fly-out, use [Flyout](https://msdn.microsoft.com/library/windows/apps/dn279496)."},{"content":"ControlTiltEffect.TiltEffect class","pos":[17021,17055]},{"content":"Animations from the UWP animation library are built into the default Styles of the common controls.","pos":[17058,17157]},{"content":"See the <bpt id=\"p1\">[</bpt>Animating pointer actions<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432)</ept>.","pos":[17158,17257],"source":" See the [Animating pointer actions](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432)."},{"content":"LongListSelector with grouped data","pos":[17262,17296]},{"content":"The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert.","pos":[17299,17398]},{"content":"First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter.","pos":[17399,17514]},{"content":"Second, it is able to \"zoom\" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters).","pos":[17515,17696]},{"content":"With the UWP, you can display grouped data with the <bpt id=\"p1\">[</bpt>Guidelines for list and grid view controls<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt186889)</ept>.","pos":[17697,17852],"source":" With the UWP, you can display grouped data with the [Guidelines for list and grid view controls](https://msdn.microsoft.com/library/windows/apps/mt186889)."},{"content":"LongListSelector with flat data","pos":[17857,17888]},{"content":"For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data.","pos":[17891,18060]},{"content":"In a UWP app, <bpt id=\"p1\">[</bpt>GridView<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept> are preferred for long lists of items whether or not the data are amenable to grouping.","pos":[18061,18231],"source":" In a UWP app, [GridView](https://msdn.microsoft.com/library/windows/apps/br242705) are preferred for long lists of items whether or not the data are amenable to grouping."},{"content":"Panorama","pos":[18236,18244]},{"content":"The Windows Phone Silverlight Panorama control maps to the <bpt id=\"p1\">[</bpt>Guidelines for hub controls in Windows Store apps<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn449149)</ept> and Guidelines for the hub control.","pos":[18247,18451],"source":"The Windows Phone Silverlight Panorama control maps to the [Guidelines for hub controls in Windows Store apps](https://msdn.microsoft.com/library/windows/apps/dn449149) and Guidelines for the hub control."},{"content":"Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections.","pos":[18458,18604]},{"content":"<bpt id=\"p1\">[</bpt>Hub<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn251843)</ept> sections do not wrap around, and parallax is not used.","pos":[18605,18723],"source":"[Hub](https://msdn.microsoft.com/library/windows/apps/dn251843) sections do not wrap around, and parallax is not used."},{"content":"Pivot","pos":[18728,18733]},{"content":"The UWP equivalent of the Windows Phone Silverlight Pivot control is <bpt id=\"p1\">[</bpt>Windows.UI.Xaml.Controls.Pivot<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn608241)</ept>.","pos":[18736,18896],"source":"The UWP equivalent of the Windows Phone Silverlight Pivot control is [Windows.UI.Xaml.Controls.Pivot](https://msdn.microsoft.com/library/windows/apps/dn608241)."},{"content":"It is available for all device families.","pos":[18897,18937]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps.","pos":[18941,19082],"source":"**Note**   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps."},{"content":"There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates.","pos":[19083,19359]},{"content":"We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.","pos":[19360,19511]},{"pos":[19513,19793],"content":"For more info on UWP controls, see <bpt id=\"p1\">[</bpt>Controls by function<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt185405)</ept>, <bpt id=\"p2\">[</bpt>Controls list<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/mt185406)</ept>, and <bpt id=\"p3\">[</bpt>Guidelines for controls<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn611856)</ept>.","source":"For more info on UWP controls, see [Controls by function](https://msdn.microsoft.com/library/windows/apps/mt185405), [Controls list](https://msdn.microsoft.com/library/windows/apps/mt185406), and [Guidelines for controls](https://msdn.microsoft.com/library/windows/apps/dn611856)."},{"content":"Design language in Windows 10","pos":[19799,19828]},{"content":"There are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps.","pos":[19830,19935]},{"content":"For all the details, see <bpt id=\"p1\">[</bpt>Design<ept id=\"p1\">](http://dev.windows.com/design)</ept>.","pos":[19936,20001],"source":" For all the details, see [Design](http://dev.windows.com/design)."},{"content":"Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.","pos":[20002,20382]},{"content":"Localization and globalization","pos":[20387,20417]},{"content":"For localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project.","pos":[20419,20540]},{"content":"Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default.","pos":[20541,20669]},{"content":"Set <bpt id=\"p1\">**</bpt>Build Action<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>PRIResource<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Copy to Output Directory<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>Do not copy<ept id=\"p4\">**</ept>.","pos":[20670,20762],"source":" Set **Build Action** to **PRIResource** and **Copy to Output Directory** to **Do not copy**."},{"content":"You can then use the strings in markup by specifying the <bpt id=\"p1\">**</bpt>x:Uid<ept id=\"p1\">**</ept> attribute on your XAML elements.","pos":[20763,20862],"source":" You can then use the strings in markup by specifying the **x:Uid** attribute on your XAML elements."},{"content":"See <bpt id=\"p1\">[</bpt>Quickstart: Using string resources<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.","pos":[20863,20967],"source":" See [Quickstart: Using string resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)."},{"content":"Windows Phone Silverlight apps use the <bpt id=\"p1\">**</bpt>CultureInfo<ept id=\"p1\">**</ept> class to help globalize an app.","pos":[20969,21055],"source":"Windows Phone Silverlight apps use the **CultureInfo** class to help globalize an app."},{"content":"UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface.","pos":[21056,21243]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Guidelines for files, data, and globalization<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn611859)</ept>.","pos":[21244,21376],"source":" For more information, see [Guidelines for files, data, and globalization](https://msdn.microsoft.com/library/windows/apps/dn611859)."},{"pos":[21378,21592],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ResourceContext.QualifierValues<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br206071)</ept> topic describes how to load device family-specific resources based on the device family resource selection factor.","source":"The [**ResourceContext.QualifierValues**](https://msdn.microsoft.com/library/windows/apps/br206071) topic describes how to load device family-specific resources based on the device family resource selection factor."},{"content":"Media and graphics","pos":[21597,21615]},{"content":"As you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter.","pos":[21617,21804]},{"content":"Windows design is typified by clean and clear visuals, typography, and motion.","pos":[21805,21883]},{"content":"If your app follows the same principles, then it will seem more like the built-in apps.","pos":[21884,21971]},{"content":"Windows Phone Silverlight has a <bpt id=\"p1\">**</bpt>RadialGradientBrush<ept id=\"p1\">**</ept> type which is not present in the UWP, although other <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Brush<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br228076)</ept> types are.","pos":[21973,22162],"source":"Windows Phone Silverlight has a **RadialGradientBrush** type which is not present in the UWP, although other [**Brush**](https://msdn.microsoft.com/library/windows/apps/br228076) types are."},{"content":"In some cases, you will be able to get a similar effect with a bitmap.","pos":[22163,22233]},{"content":"Note that you can <bpt id=\"p1\">[</bpt>create a radial gradient brush<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/dd756679)</ept> with Direct2D in a <bpt id=\"p2\">[</bpt>Microsoft DirectX<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP.","pos":[22234,22463],"source":" Note that you can [create a radial gradient brush](https://msdn.microsoft.com/library/windows/desktop/dd756679) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP."},{"content":"Windows Phone Silverlight has the <bpt id=\"p1\">**</bpt>System.Windows.UIElement.OpacityMask<ept id=\"p1\">**</ept> property, but that property is not a member of the UWP<bpt id=\"p2\"> [</bpt><bpt id=\"p3\">**</bpt>UIElement<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> type.","pos":[22465,22674],"source":"Windows Phone Silverlight has the **System.Windows.UIElement.OpacityMask** property, but that property is not a member of the UWP [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) type."},{"content":"In some cases, you will be able to get a similar effect with a bitmap.","pos":[22675,22745]},{"content":"And you can <bpt id=\"p1\">[</bpt>create an opacity mask<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/ee329947)</ept> with Direct2D in a <bpt id=\"p2\">[</bpt>Microsoft DirectX<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.","pos":[22746,22965],"source":" And you can [create an opacity mask](https://msdn.microsoft.com/library/windows/desktop/ee329947) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP app."},{"content":"But, a common use case for <bpt id=\"p1\">**</bpt>OpacityMask<ept id=\"p1\">**</ept> is to use a single bitmap that adapts to both light and dark themes.","pos":[22966,23077],"source":" But, a common use case for **OpacityMask** is to use a single bitmap that adapts to both light and dark themes."},{"content":"For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below).","pos":[23078,23181]},{"content":"But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.","pos":[23182,23291]},{"content":"a theme-aware bitmap","pos":[23295,23315]},{"pos":[23386,23562],"content":"In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the <bpt id=\"p1\">**</bpt>OpacityMask<ept id=\"p1\">**</ept> for a <bpt id=\"p2\">**</bpt>Rectangle<ept id=\"p2\">**</ept> filled with the foreground brush:","source":"In a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the **OpacityMask** for a **Rectangle** filled with the foreground brush:"},{"pos":[23806,23959],"content":"The most straightforward way to port this to a UWP app is to use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BitmapIcon<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn279306)</ept>, like this:","source":"The most straightforward way to port this to a UWP app is to use a [**BitmapIcon**](https://msdn.microsoft.com/library/windows/apps/dn279306), like this:"},{"content":"Here, winrt\\_check.png is an alpha mask in the form of a bitmap just as wpsl\\_check.png is, and it could very well be the same file.","pos":[24092,24224]},{"content":"However, you may want to provide several different sizes of winrt\\_check.png to be used for different scaling factors.","pos":[24225,24343]},{"content":"For more info on that, and for an explanation of the changes to the <bpt id=\"p1\">**</bpt>Width<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Height<ept id=\"p2\">**</ept> values, see <bpt id=\"p3\">[</bpt>View/effective pixels, viewing distance, and scale factors<ept id=\"p3\">](#view-effective-pixels-viewing-distance-and-scale-factors)</ept> in this topic.","pos":[24344,24583],"source":" For more info on that, and for an explanation of the changes to the **Width** and **Height** values, see [View/effective pixels, viewing distance, and scale factors](#view-effective-pixels-viewing-distance-and-scale-factors) in this topic."},{"content":"A more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme).","pos":[24585,24828]},{"content":"For further details about how to name this set of bitmap assets, see <bpt id=\"p1\">[</bpt>How to name resources using qualifiers<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</ept>.","pos":[24829,25002],"source":" For further details about how to name this set of bitmap assets, see [How to name resources using qualifiers](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)."},{"content":"Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:","pos":[25003,25122]},{"content":"In Windows Phone Silverlight, the <bpt id=\"p1\">**</bpt>UIElement.Clip<ept id=\"p1\">**</ept> property can be any shape that you can express with a <bpt id=\"p2\">**</bpt>Geometry<ept id=\"p2\">**</ept> and is typically serialized in XAML markup in the <bpt id=\"p3\">**</bpt>StreamGeometry<ept id=\"p3\">**</ept> mini-language.","pos":[25378,25581],"source":"In Windows Phone Silverlight, the **UIElement.Clip** property can be any shape that you can express with a **Geometry** and is typically serialized in XAML markup in the **StreamGeometry** mini-language."},{"content":"In the UWP, the type of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Clip<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208919)</ept> property is <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RectangleGeometry<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br210259)</ept>, so you can only clip a rectangular region.","pos":[25582,25816],"source":" In the UWP, the type of the [**Clip**](https://msdn.microsoft.com/library/windows/apps/br208919) property is [**RectangleGeometry**](https://msdn.microsoft.com/library/windows/apps/br210259), so you can only clip a rectangular region."},{"content":"Allowing a rectangle to be defined using mini-language would be too permissive.","pos":[25817,25896]},{"content":"So, to port a clipping region in markup, replace the <bpt id=\"p1\">**</bpt>Clip<ept id=\"p1\">**</ept> attribute syntax and make it into property element syntax similar to the following:","pos":[25897,26042],"source":" So, to port a clipping region in markup, replace the **Clip** attribute syntax and make it into property element syntax similar to the following:"},{"pos":[26148,26394],"content":"Note that you can <bpt id=\"p1\">[</bpt>use arbitrary geometry as a mask in a layer<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/dd756654)</ept> with Direct2D in a <bpt id=\"p2\">[</bpt>Microsoft DirectX<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> and XAML C++ UWP app.","source":"Note that you can [use arbitrary geometry as a mask in a layer](https://msdn.microsoft.com/library/windows/desktop/dd756654) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP app."},{"content":"Navigation","pos":[26399,26409]},{"content":"When you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:","pos":[26411,26537]},{"pos":[26673,26910],"content":"In a UWP app, you call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Frame.Navigate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method and specify the type of the destination page (as defined by the <bpt id=\"p3\">**</bpt>x:Class<ept id=\"p3\">**</ept> attribute of the page's XAML markup definition):","source":"In a UWP app, you call the [**Frame.Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) method and specify the type of the destination page (as defined by the **x:Class** attribute of the page's XAML markup definition):"},{"content":"You define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:","pos":[27229,27314]},{"content":"In a UWP app, you use imperative code to define the startup page.","pos":[27395,27460]},{"content":"Here's some code from App.xaml.cs that illustrates how:","pos":[27461,27516]},{"content":"URI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs.","pos":[27611,27755]},{"content":"URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path.","pos":[27756,27996]},{"content":"UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves.","pos":[27997,28133]},{"content":"The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed.","pos":[28134,28333]},{"content":"The same goal can be achieved by passing a navigation parameter when you call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Navigate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> method.","pos":[28334,28496],"source":" The same goal can be achieved by passing a navigation parameter when you call the [**Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) method."},{"pos":[28498,28588],"content":"For more info, see <bpt id=\"p1\">[</bpt>Navigation<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187344)</ept>.","source":"For more info, see [Navigation](https://msdn.microsoft.com/library/windows/apps/mt187344)."},{"content":"Resource key reference","pos":[28593,28615]},{"content":"The design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed.","pos":[28617,28776]},{"content":"The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved.","pos":[28777,28879]},{"content":"For example, the XAML markup editor will underline a reference to the style key <ph id=\"ph1\">`PhoneTextNormalStyle`</ph> with a red squiggle.","pos":[28880,29003],"source":" For example, the XAML markup editor will underline a reference to the style key `PhoneTextNormalStyle` with a red squiggle."},{"content":"If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device.","pos":[29004,29121]},{"content":"So, it's important to attend to XAML markup correctness.","pos":[29122,29178]},{"content":"And you will find Visual Studio to be a great tool for catching such issues.","pos":[29179,29255]},{"pos":[29257,29288],"content":"Also, see <bpt id=\"p1\">[</bpt>Text<ept id=\"p1\">](#text)</ept>, below.","source":"Also, see [Text](#text), below."},{"content":"Status bar (system tray)","pos":[29293,29317]},{"content":"The system tray (set in XAML markup with <ph id=\"ph1\">`shell:SystemTray.IsVisible`</ph>) is now called the status bar, and it is shown by default.","pos":[29319,29447],"source":"The system tray (set in XAML markup with `shell:SystemTray.IsVisible`) is now called the status bar, and it is shown by default."},{"content":"You can control its visibility in imperative code by calling the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.UI.ViewManagement.StatusBar.ShowAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn610343)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>HideAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn610339)</ept> methods.","pos":[29448,29709],"source":" You can control its visibility in imperative code by calling the [**Windows.UI.ViewManagement.StatusBar.ShowAsync**](https://msdn.microsoft.com/library/windows/apps/dn610343) and [**HideAsync**](https://msdn.microsoft.com/library/windows/apps/dn610339) methods."},{"content":"Text","pos":[29714,29718]},{"content":"Text (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language.","pos":[29720,29911]},{"content":"Use these illustrations to find the UWP<bpt id=\"p1\"> **</bpt>TextBlock<ept id=\"p1\">**</ept> system styles that are available.","pos":[29912,29999],"source":" Use these illustrations to find the UWP **TextBlock** system styles that are available."},{"content":"Find the ones that correspond to the Windows Phone Silverlight styles you used.","pos":[30000,30079]},{"content":"Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.","pos":[30080,30220]},{"pos":[30224,30348],"content":"system textblock styles for windows 10 apps<ph id=\"ph1\">](images/label-uwp10stylegallery.png)</ph> System TextBlock styles for Windows 10 apps","source":"system textblock styles for windows 10 apps](images/label-uwp10stylegallery.png)\nSystem TextBlock styles for Windows 10 apps"},{"content":"In a Windows Phone Silverlight app, the default font family is Segoe WP.","pos":[30350,30422]},{"content":"In a Windows 10 app, the default font family is Segoe UI.","pos":[30423,30480]},{"content":"As a result, font metrics in your app may look different.","pos":[30481,30538]},{"content":"If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LineHeight<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209671)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>LineStackingStrategy<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br244362)</ept>.","pos":[30539,30831],"source":" If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as [**LineHeight**](https://msdn.microsoft.com/library/windows/apps/br209671) and [**LineStackingStrategy**](https://msdn.microsoft.com/library/windows/apps/br244362)."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Guidelines for fonts<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx)</ept> and <bpt id=\"p2\">[</bpt>Design UWP apps<ept id=\"p2\">](http://dev.windows.com/design)</ept>.","pos":[30832,30990],"source":" For more info, see [Guidelines for fonts](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx) and [Design UWP apps](http://dev.windows.com/design)."},{"content":"Theme changes","pos":[30995,31008]},{"content":"For a Windows Phone Silverlight app, the default theme is dark by default.","pos":[31010,31084]},{"content":"For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml.","pos":[31085,31218]},{"content":"For example, to use a dark theme on all devices, add <ph id=\"ph1\">`RequestedTheme=\"Dark\"`</ph> to the root Application element.","pos":[31219,31328],"source":" For example, to use a dark theme on all devices, add `RequestedTheme=\"Dark\"` to the root Application element."},{"content":"Tiles","pos":[31333,31338]},{"content":"Tiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences.","pos":[31340,31468]},{"content":"For example, code that calls the <bpt id=\"p1\">**</bpt>Microsoft.Phone.Shell.ShellTile.Create<ept id=\"p1\">**</ept> method to create secondary tiles should be ported to call <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SecondaryTile.RequestCreateAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br230606)</ept>.","pos":[31469,31700],"source":" For example, code that calls the **Microsoft.Phone.Shell.ShellTile.Create** method to create secondary tiles should be ported to call [**SecondaryTile.RequestCreateAsync**](https://msdn.microsoft.com/library/windows/apps/br230606)."},{"content":"Here is a before-and-after example, first the Windows Phone Silverlight version:","pos":[31701,31781]},{"content":"And the UWP equivalent:","pos":[32165,32188]},{"pos":[32483,33001],"content":"Code that updates a tile with the <bpt id=\"p1\">**</bpt>Microsoft.Phone.Shell.ShellTile.Update<ept id=\"p1\">**</ept> method, or the <bpt id=\"p2\">**</bpt>Microsoft.Phone.Shell.ShellTileSchedule<ept id=\"p2\">**</ept> class, should be ported to use the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>TileUpdateManager<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208622)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>TileUpdater<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br208628)</ept>, <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>TileNotification<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br208616)</ept>, and/or <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>ScheduledTileNotification<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/hh701637)</ept> classes.","source":"Code that updates a tile with the **Microsoft.Phone.Shell.ShellTile.Update** method, or the **Microsoft.Phone.Shell.ShellTileSchedule** class, should be ported to use the [**TileUpdateManager**](https://msdn.microsoft.com/library/windows/apps/br208622), [**TileUpdater**](https://msdn.microsoft.com/library/windows/apps/br208628), [**TileNotification**](https://msdn.microsoft.com/library/windows/apps/br208616), and/or [**ScheduledTileNotification**](https://msdn.microsoft.com/library/windows/apps/hh701637) classes."},{"content":"For more info on tiles, toasts, badges, banners, and notifications, see <bpt id=\"p1\">[</bpt>Creating tiles<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260)</ept> and <bpt id=\"p2\">[</bpt>Working with tiles, badges, and toast notifications<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.","pos":[33003,33276],"source":"For more info on tiles, toasts, badges, banners, and notifications, see [Creating tiles](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260) and [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)."},{"content":"For specifics about sizes of visual assets used for UWP Tiles, see <bpt id=\"p1\">[</bpt>Tile and toast visual assets<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh781198)</ept>.","pos":[33277,33433],"source":" For specifics about sizes of visual assets used for UWP Tiles, see [Tile and toast visual assets](https://msdn.microsoft.com/library/windows/apps/hh781198)."},{"content":"Toasts","pos":[33438,33444]},{"content":"Code that displays a toast with the <bpt id=\"p1\">**</bpt>Microsoft.Phone.Shell.ShellToast<ept id=\"p1\">**</ept> class should be ported to use the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ToastNotificationManager<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208642)</ept>, <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>ToastNotifier<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br208653)</ept>, <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>ToastNotification<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/br208641)</ept>, and/or <bpt id=\"p8\">[</bpt><bpt id=\"p9\">**</bpt>ScheduledToastNotification<ept id=\"p9\">**</ept><ept id=\"p8\">](https://msdn.microsoft.com/library/windows/apps/br208607)</ept> classes.","pos":[33446,33911],"source":"Code that displays a toast with the **Microsoft.Phone.Shell.ShellToast** class should be ported to use the [**ToastNotificationManager**](https://msdn.microsoft.com/library/windows/apps/br208642), [**ToastNotifier**](https://msdn.microsoft.com/library/windows/apps/br208653), [**ToastNotification**](https://msdn.microsoft.com/library/windows/apps/br208641), and/or [**ScheduledToastNotification**](https://msdn.microsoft.com/library/windows/apps/br208607) classes."},{"content":"Note that on mobile devices, the consumer-facing term for \"toast\" is \"banner\".","pos":[33912,33990]},{"pos":[33992,34113],"content":"See <bpt id=\"p1\">[</bpt>Working with tiles, badges, and toast notifications<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.","source":"See [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)."},{"content":"View/effective pixels, viewing distance, and scale factors","pos":[34118,34176]},{"content":"Windows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices.","pos":[34178,34357]},{"content":"A Windows Phone Silverlight app uses view pixels to do this.","pos":[34358,34418]},{"content":"With Windows 10, the concept of view pixels has been refined into that of effective pixels.","pos":[34419,34510]},{"content":"Here's an explanation of that term, what it means, and the extra value it offers.","pos":[34511,34592]},{"content":"The term \"resolution\" refers to a measure of pixel density and not, as is commonly thought, pixel count.","pos":[34594,34698]},{"content":"\"Effective resolution\" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size).","pos":[34699,34943]},{"content":"Effective resolution is a good metric to build an experience around because it is user-centric.","pos":[34944,35039]},{"content":"By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.","pos":[35040,35161]},{"content":"To a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is.","pos":[35163,35368]},{"content":"This means that an <bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> element with <ph id=\"ph1\">`Width=\"48\"`</ph> will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.","pos":[35369,35537],"source":" This means that an **Image** element with `Width=\"48\"` will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app."},{"content":"To a Windows 10 app, it is <bpt id=\"p1\">*</bpt>not<ept id=\"p1\">*</ept> the case that all devices are some fixed number of effective pixels wide.","pos":[35539,35645],"source":"To a Windows 10 app, it is *not* the case that all devices are some fixed number of effective pixels wide."},{"content":"That's probably obvious, given the wide range of devices that a UWP app can run on.","pos":[35646,35729]},{"content":"Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths.","pos":[35730,35921]},{"content":"All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have.","pos":[35922,36025]},{"content":"There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup.","pos":[36026,36139]},{"content":"A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user.","pos":[36140,36270]},{"content":"And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes.","pos":[36271,36459]},{"content":"And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.","pos":[36460,36654]},{"content":"Because 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.","pos":[36656,36908]},{"content":"So that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor.","pos":[36910,37084]},{"content":"Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.","pos":[37085,37253]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets.","pos":[37255,37368],"source":"**Note**  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets."},{"content":"In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale.","pos":[37369,37534]},{"content":"When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.","pos":[37535,37671]},{"content":"If you have intricate artwork, then you may want to provide your assets in even more sizes.","pos":[37673,37764]},{"content":"If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.","pos":[37765,37879]},{"content":"We don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%.","pos":[37881,38053]},{"content":"If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded.","pos":[38054,38180]},{"content":"The Store selects the assets to download based on the DPI of the device.","pos":[38181,38253]},{"pos":[38255,38369],"content":"For more info, see <bpt id=\"p1\">[</bpt>Responsive design 101 for UWP apps<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn958435)</ept>.","source":"For more info, see [Responsive design 101 for UWP apps](https://msdn.microsoft.com/library/windows/apps/dn958435)."},{"content":"Window size","pos":[38374,38385]},{"content":"In your UWP app, you can specify a minimum size (both width and height) with imperative code.","pos":[38387,38480]},{"content":"The default minimum size is 500x320epx, and that's also the smallest minimum size accepted.","pos":[38481,38572]},{"content":"The largest minimum size accepted is 500x500epx.","pos":[38573,38621]},{"pos":[38773,38866],"content":"The next topic is <bpt id=\"p1\">[</bpt>Porting for I/O, device, and app model<ept id=\"p1\">](wpsl-to-uwp-input-and-sensors.md)</ept>.","source":"The next topic is [Porting for I/O, device, and app model](wpsl-to-uwp-input-and-sensors.md)."},{"content":"Related topics","pos":[38871,38885]},{"content":"Namespace and class mappings","pos":[38890,38918]}],"content":"---\ndescription: The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps.\ntitle: Porting Windows Phone Silverlight XAML and UI to UWP\nms.assetid: 49aade74-5dc6-46a5-89ef-316dbeabbebe\n---\n\n#  Porting Windows Phone Silverlight XAML and UI to UWP\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThe previous topic was [Troubleshooting](wpsl-to-uwp-troubleshooting.md).\n\nThe practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to Universal Windows Platform (UWP) apps. You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed \"clr-namespace\" to \"using\". Much of the imperative code in your presentation layer—view models, and code that manipulates UI elements—will also be straightforward to port.\n\n## A first look at the XAML markup\n\nThe previous topic showed you how to copy your XAML and code-behind files into your new Windows 10 Visual Studio project. One of the first issues you might notice highlighted in the Visual Studio XAML designer is that the `PhoneApplicationPage` element at the root of your XAML file is not valid for a Universal Windows Platform (UWP) project. In the previous topic, you saved a copy of the XAML files that Visual Studio generated when it created the Windows 10 project. If you open that version of MainPage.xaml, you'll see that at the root is the type [**Page**](https://msdn.microsoft.com/library/windows/apps/br227503), which is in the [**Windows.UI.Xaml.Controls**](https://msdn.microsoft.com/library/windows/apps/br227716) namespace. So, you can change all `<phone:PhoneApplicationPage>` elements to `<Page>` (don't forget property element syntax) and you can delete the `xmlns:phone` declaration.\n\nFor a more general approach to finding the UWP type that corresponds to a Windows Phone Silverlight type, you can refer to [Namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md).\n\n## XAML namespace prefix declarations\n\n\nIf you use instances of custom types in your views—perhaps a view model instance or a value converter—then you will have XAML namespace prefix declarations in your XAML markup. The syntax of these differs between Windows Phone Silverlight and the UWP. Here are some examples:\n\n```xaml\n    xmlns:ContosoTradingCore=\"clr-namespace:ContosoTradingCore;assembly=ContosoTradingCore\"\n    xmlns:ContosoTradingLocal=\"clr-namespace:ContosoTradingLocal\"\n```\n\nChange \"clr-namespace\" to \"using\" and delete any assembly token and semi-colon (the assembly will be inferred). The result looks like this:\n\n```xaml\n    xmlns:ContosoTradingCore=\"using:ContosoTradingCore\"\n    xmlns:ContosoTradingLocal=\"using:ContosoTradingLocal\"\n```\n\nYou may have a resource whose type is defined by the system:\n\n```xaml\n    xmlns:System=\"clr-namespace:System;assembly=mscorlib\"\n    /* ... */\n    <System:Double x:Key=\"FontSizeLarge\">40</System:Double>\n```\n\nIn the UWP, omit the \"System\" prefix declaration and use the (already declared) \"x\" prefix instead:\n\n```xaml\n    <x:Double x:Key=\"FontSizeLarge\">40</x:Double></code></pre></td>\n</tr>\n</tbody>\n</table>\n```\n\n## Imperative code\n\n\nYour view models are one place where there's imperative code that references UI types. Another place is any code-behind files that directly manipulate UI elements. For example, you might find that a line of code like this one doesn't compile yet:\n\n\n```csharp\n<colgroup>\n<col width=\"100%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">C#</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n    return new BitmapImage(new Uri(this.CoverImagePath, UriKind.Relative));</code></pre></td>\n</tr>\n</tbody>\n</table>\n```\n\n**BitmapImage** is in the **System.Windows.Media.Imaging** namespace in Windows Phone Silverlight, and a using directive in the same file allows **BitmapImage** to be used without namespace qualification as in the snippet above. In a case like this, you can right-click the type name (**BitmapImage**) in Visual Studio and use the **Resolve** command on the context menu to add a new namespace directive to the file. In this case, the [**Windows.UI.Xaml.Media.Imaging**](https://msdn.microsoft.com/library/windows/apps/br243258) namespace is added, which is where the type lives in the UWP. You can remove the **System.Windows.Media.Imaging** using directive, and that will be all it takes to port code like that in the snippet above. When you're done, you'll have removed all Windows Phone Silverlight namespaces.\n\nIn simple cases like this, where you're mapping the types in an old namespace to the same types in a new one, you can use Visual Studio's **Find and Replace** command to make bulk changes to your source code. The **Resolve** command is a great way of discovering a type's new namespace. As another example, you can replace all \"System.Windows\" with \"Windows.UI.Xaml\". That will essentially port all using directives and all fully-qualified type names that refer to that namespace.\n\nOnce all the old using directives are removed and the new ones added, you can use Visual Studio's **Organize Usings** command to sort your directives and remove unused ones.\n\nSometimes, fixing imperative code will be as minor as changing a parameter's type. Other times, you will need to use UWP APIs instead of .NET APIs for Windows Store apps. To identify which APIs are supported, use the rest of this porting guide in combination with [.NET for Windows Store apps overview](https://msdn.microsoft.com/library/windows/apps/xaml/br230302.aspx) and the [Windows Runtime reference](https://msdn.microsoft.com/library/windows/apps/br211377).\n\nAnd, if you just want to get to the stage where your project builds, you can comment or stub out any non-essential code. Then iterate, one issue at a time, and refer to the following topics in this section (and the previous topic: [Troubleshooting](wpsl-to-uwp-troubleshooting.md)), until any build and runtime issues are ironed-out and your port is complete.\n\n## Adaptive/responsive UI\n\nBecause your Windows 10 app can run on a potentially wide range of devices—each with its own screen size and resolution—you'll want to go beyond the minimal steps to port your app and you'll want to tailor your UI to look its best on those devices. You can use the adaptive Visual State Manager feature to dynamically detect window size and to change layout in response, and an example of how to do that is shown in the section [Adaptive UI](wpsl-to-uwp-case-study-bookstore2.md#adaptive-ui) in the Bookstore2 case study topic.\n\n## Alarms and Reminders\n\nCode using the **Alarm** or **Reminder** classes should be ported to use the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) class to create and register a background task, and display a toast at the relevant time. See [Background processing](wpsl-to-uwp-business-and-data.md#background-processing) and [Toasts](#toasts).\n\n## Animation\n\nAs a preferred alternative to keyframe animations and from/to animations, the UWP animation library is available to UWP apps. These animations have been designed and tuned to run smoothly, to look great, and to make your app appear as integrated with Windows as the built-in apps do. See [Quickstart: Animating your UI using library animations](https://msdn.microsoft.com/library/windows/apps/xaml/hh452703).\n\nIf you do use keyframe animations or from/to animations in your UWP apps, then you may want to understand the distinction between independent and dependent animations that the new platform has introduced. See [Optimize animations and media](https://msdn.microsoft.com/library/windows/apps/mt204774). Animations that run on the UI thread (ones that animate layout properties, for example) are known as dependent animations, and when run on the new platform, they will have no effect unless you do one of two things. You can either re-target them to animate different properties, such as [**RenderTransform**](https://msdn.microsoft.com/library/windows/apps/br208980), thereby making them independent. Or you can set `EnableDependentAnimation=\"True\"` on the animation element in order to confirm your intention to run an animation that cannot be guaranteed to run smoothly. If you use Blend for Visual Studio to author new animations, then that property will be set for you where necessary.\n\n## Back button handling\n\nIn a Windows 10 app, you can use a single approach to handling the back button and it will work on all devices. On mobile devices, the button is provided for you as a capacitive button on the device, or as a button in the shell. On a desktop device, you add a button to your app's chrome whenever back-navigation is possible within the app, and this appears in the title bar for windowed apps or in the task bar for Tablet mode. The back button event is a universal concept across all device families, and buttons implemented in hardware or in software raise the same [**BackRequested**](https://msdn.microsoft.com/library/windows/apps/dn893596) event.\n\nThe example below works for all device families and it is good for cases where the same processing applies to all pages, and where you needn't confirm navigation (for example, to warn about unsaved changes).\n\n```csharp\n   // app.xaml.cs\n\n    protected override void OnLaunched(LaunchActivatedEventArgs e)\n    {\n        [...]\n\n        Windows.UI.Core.SystemNavigationManager.GetForCurrentView().BackRequested += App_BackRequested;\n        rootFrame.Navigated += RootFrame_Navigated;\n    }\n\n    private void RootFrame_Navigated(object sender, NavigationEventArgs e)\n    {\n        Frame rootFrame = Window.Current.Content as Frame;\n\n        // Note: On device families that have no title bar, setting AppViewBackButtonVisibility can safely execute \n        // but it will have no effect. Such device families provide a back button UI for you.\n        if (rootFrame.CanGoBack)\n        {\n            Windows.UI.Core.SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility = \n                Windows.UI.Core.AppViewBackButtonVisibility.Visible;\n        }\n        else\n        {\n            Windows.UI.Core.SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility = \n                Windows.UI.Core.AppViewBackButtonVisibility.Collapsed;\n        }\n    }\n\n    private void App_BackRequested(object sender, Windows.UI.Core.BackRequestedEventArgs e)\n    {\n        Frame rootFrame = Window.Current.Content as Frame;\n\n        if (rootFrame.CanGoBack)\n        {\n            rootFrame.GoBack();\n        }\n    }\n```\n\nThere's also a single approach for all device families for programmatically exiting the app.\n\n```csharp\n   Windows.UI.Xaml.Application.Current.Exit();\n```\n\n## Binding, and compiled bindings with {x:Bind}\n\nThe topic of binding includes:\n\n-   Binding a UI element to \"data\" (that is, to the properties and commands of a view model)\n-   Binding a UI element to another UI element\n-   Writing a view model that is observable (that is, it raises notifications when a property value changes and when the availability of a command changes)\n\nAll of these aspects are largely still supported, but there are namespace differences. For example, **System.Windows.Data.Binding** maps to [**Windows.UI.Xaml.Data.Binding**](https://msdn.microsoft.com/library/windows/apps/br209820), **System.ComponentModel.INotifyPropertyChanged** maps to [**Windows.UI.Xaml.Data.INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/br209899), and **System.Collections.Specialized.INotifyPropertyChanged** maps to [**Windows.UI.Xaml.Interop.INotifyCollectionChanged**](https://msdn.microsoft.com/library/windows/apps/hh702001).\n\nWindows Phone Silverlight app bars and app bar buttons can't be bound like they can in a UWP app. You may have imperative code that constructs your app bar and its buttons, binds them to properties and localized strings, and handles their events. If so, you now have the option to port that imperative code by replacing it with declarative markup bound to properties and commands, and with static resource references, thus making your app incrementally safer and more maintainable. You can use Visual Studio or Blend for Visual Studio to bind and style UWP app bar buttons just like any other XAML element. Note that in a UWP app the type names you use are [**CommandBar**](https://msdn.microsoft.com/library/windows/apps/dn279427) and [**AppBarButton**](https://msdn.microsoft.com/library/windows/apps/dn279244).\n\nThe binding-related features of UWP apps currently have the following limitations:\n\n-   There is no built-in support for data-entry validation and the [**IDataErrorInfo**](T:System.ComponentModel.IDataErrorInfo) and [**INotifyDataErrorInfo**](T:System.ComponentModel.INotifyDataErrorInfo) interfaces.\n-   The [**Binding**](https://msdn.microsoft.com/library/windows/apps/br209820) class does not include the extended formatting properties available in Windows Phone Silverlight. However, you can still implement [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/br209903) to provide custom formatting.\n-   The [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/br209903) methods take language strings as parameters instead of [**CultureInfo**](T:System.Globalization.CultureInfo) objects.\n-   The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/br209833) class does not provide built-in support for sorting and filtering, and grouping works differently. For more info, see [Data binding in depth](https://msdn.microsoft.com/library/windows/apps/mt210946) and the [Data binding sample](http://go.microsoft.com/fwlink/p/?linkid=226854).\n\nAlthough the same binding features are still largely supported, Windows 10 offers the option of a new and more performant binding mechanism called compiled bindings, which use the {x:Bind} markup extension. See [Data Binding: Boost Your Apps' Performance Through New Enhancements to XAML Data Binding](http://channel9.msdn.com/Events/Build/2015/3-635), and the [x:Bind Sample](http://go.microsoft.com/fwlink/p/?linkid=619989).\n\n## Binding an Image to a view model\n\nYou can bind the [**Image.Source**](https://msdn.microsoft.com/library/windows/apps/br242760) property to any property of a view model that's of type [**ImageSource**](https://msdn.microsoft.com/library/windows/apps/br210107). Here's a typical implementation of such a property in a Windows Phone Silverlight app:\n\n```csharp\n<colgroup>\n<col width=\"100%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">C#</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n    // this.BookCoverImagePath contains a path of the form \"/Assets/CoverImages/one.png\".\n    return new BitmapImage(new Uri(this.CoverImagePath, UriKind.Relative));\n```\n\nIn a UWP app, you use the ms-appx [URI scheme](https://msdn.microsoft.com/library/windows/apps/jj655406). So that you can keep the rest of your code the same, you can use a different overload of the **System.Uri** constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that. Like this:\n\n```csharp\n    // this.BookCoverImagePath contains a path of the form \"/Assets/CoverImages/one.png\".\n    return new BitmapImage(new Uri(new Uri(\"ms-appx://\"), this.CoverImagePath));\n```\n\nThat way, the rest of the view model, the path values in the image path property, and the bindings in the XAML markup, can all stay exactly the same.\n\n## Controls, and control styles/templates\n\nWindows Phone Silverlight apps use controls defined in the **Microsoft.Phone.Controls** namespace and the **System.Windows.Controls** namespace. XAML UWP apps use controls defined in the [**Windows.UI.Xaml.Controls**](https://msdn.microsoft.com/library/windows/apps/br227716) namespace. The architecture and design of XAML controls in the UWP is virtually the same as Windows Phone Silverlight controls. But, some changes have been made to improve the set of available controls and to unify them with Windows apps. Here are specific examples.\n\n| Control name | Change |\n|--------------|--------|\n| ApplicationBar | The [Page.TopAppBar](https://msdn.microsoft.com/library/windows/apps/hh702575) property. |\n| ApplicationBarIconButton | The UWP equivalent is the [Glyph](https://msdn.microsoft.com/library/windows/apps/dn279538) property. PrimaryCommands is the content property of CommandBar. The XAML parser interprets an element's inner xml as the value of its content property. |\n| ApplicationBarMenuItem | The UWP equivalent is the [AppBarButton.Label](https://msdn.microsoft.com/library/windows/apps/dn279261) set to the menu item text. |\n| ContextMenu (in the Windows Phone Toolkit) | For a single selection fly-out, use [Flyout](https://msdn.microsoft.com/library/windows/apps/dn279496). |\n| ControlTiltEffect.TiltEffect class | Animations from the UWP animation library are built into the default Styles of the common controls. See the [Animating pointer actions](https://msdn.microsoft.com/library/windows/apps/xaml/jj649432). |\n| LongListSelector with grouped data | The Windows Phone Silverlight LongListSelector functions in two ways, which can be used in concert. First, it is able to display data that is grouped by a key, for example, a list of names grouped by initial letter. Second, it is able to \"zoom\" between two semantic views: the grouped list of items (for example, names), and a list of just the group keys themselves (for example, initial letters). With the UWP, you can display grouped data with the [Guidelines for list and grid view controls](https://msdn.microsoft.com/library/windows/apps/mt186889). |\n| LongListSelector with flat data | For performance reasons, in the case of very long lists, we recommended LongListSelector instead of a Windows Phone Silverlight list box even for flat, non-grouped data. In a UWP app, [GridView](https://msdn.microsoft.com/library/windows/apps/br242705) are preferred for long lists of items whether or not the data are amenable to grouping. |\n| Panorama | The Windows Phone Silverlight Panorama control maps to the [Guidelines for hub controls in Windows Store apps](https://msdn.microsoft.com/library/windows/apps/dn449149) and Guidelines for the hub control. <br/> Note that a Panorama control wraps around from the last section to the first, and its background image moves in parallax relative to the sections. [Hub](https://msdn.microsoft.com/library/windows/apps/dn251843) sections do not wrap around, and parallax is not used. |\n| Pivot | The UWP equivalent of the Windows Phone Silverlight Pivot control is [Windows.UI.Xaml.Controls.Pivot](https://msdn.microsoft.com/library/windows/apps/dn608241). It is available for all device families. |\n\n**Note**   The PointerOver visual state is relevant in custom styles/templates in Windows 10 apps, but not in Windows Phone Silverlight apps. There are other reasons why your existing custom styles/templates may not be appropriate for Windows 10 apps, including system resource keys you are using, changes to the sets of visual states used, and performance improvements made to the Windows 10 default styles/templates. We recommend that you edit a fresh copy of a control's default template for Windows 10 and then re-apply your style and template customization to that.\n\nFor more info on UWP controls, see [Controls by function](https://msdn.microsoft.com/library/windows/apps/mt185405), [Controls list](https://msdn.microsoft.com/library/windows/apps/mt185406), and [Guidelines for controls](https://msdn.microsoft.com/library/windows/apps/dn611856).\n\n##  Design language in Windows 10\n\nThere are some differences in design language between Windows Phone Silverlight apps and Windows 10 apps. For all the details, see [Design](http://dev.windows.com/design). Despite the design language changes, our design principles remain consistent: be attentive to detail but always strive for simplicity through focusing on content not chrome, fiercely reducing visual elements, and remaining authentic to the digital domain; use visual hierarchy especially with typography; design on a grid; and bring your experiences to life with fluid animations.\n\n## Localization and globalization\n\nFor localized strings, you can re-use the .resx file from your Windows Phone Silverlight project in your UWP app project. Copy the file over, add it to the project, and rename it to Resources.resw so that the lookup mechanism will find it by default. Set **Build Action** to **PRIResource** and **Copy to Output Directory** to **Do not copy**. You can then use the strings in markup by specifying the **x:Uid** attribute on your XAML elements. See [Quickstart: Using string resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329).\n\nWindows Phone Silverlight apps use the **CultureInfo** class to help globalize an app. UWP apps use MRT (Modern Resource Technology), which enables the dynamic loading of app resources (localization, scale, and theme) both at runtime and in the Visual Studio design surface. For more information, see [Guidelines for files, data, and globalization](https://msdn.microsoft.com/library/windows/apps/dn611859).\n\nThe [**ResourceContext.QualifierValues**](https://msdn.microsoft.com/library/windows/apps/br206071) topic describes how to load device family-specific resources based on the device family resource selection factor.\n\n## Media and graphics\n\nAs you read about UWP media and graphics, bear in mind that the Windows design principles encourage a fierce reduction of anything superfluous, including graphical complexity and clutter. Windows design is typified by clean and clear visuals, typography, and motion. If your app follows the same principles, then it will seem more like the built-in apps.\n\nWindows Phone Silverlight has a **RadialGradientBrush** type which is not present in the UWP, although other [**Brush**](https://msdn.microsoft.com/library/windows/apps/br228076) types are. In some cases, you will be able to get a similar effect with a bitmap. Note that you can [create a radial gradient brush](https://msdn.microsoft.com/library/windows/desktop/dd756679) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP.\n\nWindows Phone Silverlight has the **System.Windows.UIElement.OpacityMask** property, but that property is not a member of the UWP [**UIElement**](https://msdn.microsoft.com/library/windows/apps/br208911) type. In some cases, you will be able to get a similar effect with a bitmap. And you can [create an opacity mask](https://msdn.microsoft.com/library/windows/desktop/ee329947) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP app. But, a common use case for **OpacityMask** is to use a single bitmap that adapts to both light and dark themes. For vector graphics, you can use theme-aware system brushes (such as the pie charts illustrated below). But, to make a theme-aware bitmap (such as the check marks illustrated below), requires a different approach.\n\n![a theme-aware bitmap](images/wpsl-to-uwp-case-studies/wpsl-to-uwp-theme-aware-bitmap.png)\n\nIn a Windows Phone Silverlight app, the technique is to use an alpha mask (in the form of a bitmap) as the **OpacityMask** for a **Rectangle** filled with the foreground brush:\n\n```xaml\n    <Rectangle Fill=\"{StaticResource PhoneForegroundBrush}\" Width=\"26\" Height=\"26\">\n        <Rectangle.OpacityMask>\n            <ImageBrush ImageSource=\"/Assets/wpsl_check.png\"/>\n        </Rectangle.OpacityMask>\n    </Rectangle>\n```\n\nThe most straightforward way to port this to a UWP app is to use a [**BitmapIcon**](https://msdn.microsoft.com/library/windows/apps/dn279306), like this:\n\n```xaml\n    <BitmapIcon UriSource=\"Assets/winrt_check.png\" Width=\"21\" Height=\"21\"/></code></pre></td>\n</tr>\n</tbody>\n</table>\n```\n\nHere, winrt\\_check.png is an alpha mask in the form of a bitmap just as wpsl\\_check.png is, and it could very well be the same file. However, you may want to provide several different sizes of winrt\\_check.png to be used for different scaling factors. For more info on that, and for an explanation of the changes to the **Width** and **Height** values, see [View/effective pixels, viewing distance, and scale factors](#view-effective-pixels-viewing-distance-and-scale-factors) in this topic.\n\nA more general approach, which is appropriate if there are differences between the light and dark theme form of a bitmap, is to use two image assets—one with a dark foreground (for light theme) and one with a light foreground (for dark theme). For further details about how to name this set of bitmap assets, see [How to name resources using qualifiers](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324). Once a set of image files are correctly named, you can refer to them in the abstract, using their root name, like this:\n\n```xaml\n<colgroup>\n<col width=\"100%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">XAML</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n    <Image Source=\"Assets/winrt_check.png\" Stretch=\"None\"/></code></pre></td>\n</tr>\n</tbody>\n</table>\n```\n\nIn Windows Phone Silverlight, the **UIElement.Clip** property can be any shape that you can express with a **Geometry** and is typically serialized in XAML markup in the **StreamGeometry** mini-language. In the UWP, the type of the [**Clip**](https://msdn.microsoft.com/library/windows/apps/br208919) property is [**RectangleGeometry**](https://msdn.microsoft.com/library/windows/apps/br210259), so you can only clip a rectangular region. Allowing a rectangle to be defined using mini-language would be too permissive. So, to port a clipping region in markup, replace the **Clip** attribute syntax and make it into property element syntax similar to the following:\n\n```xaml\n    <UIElement.Clip>\n        <RectangleGeometry Rect=\"10 10 50 50\"/>\n    </UIElement.Clip>\n```\n\nNote that you can [use arbitrary geometry as a mask in a layer](https://msdn.microsoft.com/library/windows/desktop/dd756654) with Direct2D in a [Microsoft DirectX](https://msdn.microsoft.com/library/windows/desktop/ee663274) and XAML C++ UWP app.\n\n## Navigation\n\nWhen you navigate to a page in a Windows Phone Silverlight app, you use a Uniform Resource Identifier (URI) addressing scheme:\n\n```csharp\n    NavigationService.Navigate(new Uri(\"/AnotherPage.xaml\", UriKind.Relative)/*, navigationState*/);</code></pre></td>\n```\n\nIn a UWP app, you call the [**Frame.Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) method and specify the type of the destination page (as defined by the **x:Class** attribute of the page's XAML markup definition):\n\n\n```csharp\n    // In a page:\n    this.Frame.Navigate(typeof(AnotherPage)/*, parameter*/);\n\n    // In a view model, perhaps inside an ICommand implementation:\n    var rootFrame = Windows.UI.Xaml.Window.Current.Content as Windows.UI.Xaml.Controls.Frame;\n    rootFrame.Navigate(typeof(AnotherPage)/*, parameter*/);\n```\n\nYou define the startup page for a Windows Phone Silverlight app in WMAppManifest.xml:\n\n```xml\n    <DefaultTask Name=\"_default\" NavigationPage=\"MainPage.xaml\" />\n```\n\nIn a UWP app, you use imperative code to define the startup page. Here's some code from App.xaml.cs that illustrates how:\n\n```csharp\n    if (!rootFrame.Navigate(typeof(MainPage), e.Arguments))</code></pre></td>\n```\n\nURI mapping and fragment navigation are URI navigation techniques, and so they are not applicable to UWP navigation, which is not based on URIs. URI mapping exists in response to the weakly-typed nature of identifying a target page with a URI string, which leads to fragility and maintainability issues should the page move to a different folder and hence to a different relative path. UWP apps use type-based navigation, which is strongly-typed and compiler-checked, and does not have the problem that URI mapping solves. The use case for fragment navigation is to pass along some context to the target page so that the page can cause a particular fragment of its content to be scrolled into view, or otherwise displayed. The same goal can be achieved by passing a navigation parameter when you call the [**Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) method.\n\nFor more info, see [Navigation](https://msdn.microsoft.com/library/windows/apps/mt187344).\n\n## Resource key reference\n\nThe design language has evolved for Windows 10 and consequently certain system styles have changed, and many system resource keys have been removed or renamed. The XAML markup editor in Visual Studio highlights references to resource keys that can't be resolved. For example, the XAML markup editor will underline a reference to the style key `PhoneTextNormalStyle` with a red squiggle. If that isn't corrected, then the app will immediately terminate when you try to deploy it to the emulator or device. So, it's important to attend to XAML markup correctness. And you will find Visual Studio to be a great tool for catching such issues.\n\nAlso, see [Text](#text), below.\n\n## Status bar (system tray)\n\nThe system tray (set in XAML markup with `shell:SystemTray.IsVisible`) is now called the status bar, and it is shown by default. You can control its visibility in imperative code by calling the [**Windows.UI.ViewManagement.StatusBar.ShowAsync**](https://msdn.microsoft.com/library/windows/apps/dn610343) and [**HideAsync**](https://msdn.microsoft.com/library/windows/apps/dn610339) methods.\n\n## Text\n\nText (or typography) is an important aspect of a UWP app and, while porting, you may want to revisit the visual designs of your views so that they are in harmony with the new design language. Use these illustrations to find the UWP **TextBlock** system styles that are available. Find the ones that correspond to the Windows Phone Silverlight styles you used. Alternatively, you can create your own universal styles and copy the properties from the Windows Phone Silverlight system styles into those.\n\n![system textblock styles for windows 10 apps](images/label-uwp10stylegallery.png)\nSystem TextBlock styles for Windows 10 apps\n\nIn a Windows Phone Silverlight app, the default font family is Segoe WP. In a Windows 10 app, the default font family is Segoe UI. As a result, font metrics in your app may look different. If you want to reproduce the look of your Windows Phone Silverlight text, you can set your own metrics using properties such as [**LineHeight**](https://msdn.microsoft.com/library/windows/apps/br209671) and [**LineStackingStrategy**](https://msdn.microsoft.com/library/windows/apps/br244362). For more info, see [Guidelines for fonts](https://msdn.microsoft.com/library/windows/apps/hh700394.aspx) and [Design UWP apps](http://dev.windows.com/design).\n\n## Theme changes\n\nFor a Windows Phone Silverlight app, the default theme is dark by default. For Windows 10 devices, the default theme has changed, but you can control the theme used by declaring a requested theme in App.xaml. For example, to use a dark theme on all devices, add `RequestedTheme=\"Dark\"` to the root Application element.\n\n## Tiles\n\nTiles for UWP apps have behaviors similar to Live Tiles for Windows Phone Silverlight apps, although there are some differences. For example, code that calls the **Microsoft.Phone.Shell.ShellTile.Create** method to create secondary tiles should be ported to call [**SecondaryTile.RequestCreateAsync**](https://msdn.microsoft.com/library/windows/apps/br230606). Here is a before-and-after example, first the Windows Phone Silverlight version:\n\n\n```csharp\n    var tileData = new IconicTileData()\n    {\n        Title = this.selectedBookSku.Title,\n        WideContent1 = this.selectedBookSku.Title,\n        WideContent2 = this.selectedBookSku.Author,\n        SmallIconImage = this.SmallIconImageAsUri,\n        IconImage = this.IconImageAsUri\n    };\n\n    ShellTile.Create(this.selectedBookSku.NavigationUri, tileData, true);\n```\n\nAnd the UWP equivalent:\n\n```csharp\n    var tile = new SecondaryTile(\n        this.selectedBookSku.Title.Replace(\" \", string.Empty),\n        this.selectedBookSku.Title,\n        this.selectedBookSku.ArgumentString,\n        this.IconImageAsUri,\n        TileSize.Square150x150);\n\n    await tile.RequestCreateAsync();\n```\n\nCode that updates a tile with the **Microsoft.Phone.Shell.ShellTile.Update** method, or the **Microsoft.Phone.Shell.ShellTileSchedule** class, should be ported to use the [**TileUpdateManager**](https://msdn.microsoft.com/library/windows/apps/br208622), [**TileUpdater**](https://msdn.microsoft.com/library/windows/apps/br208628), [**TileNotification**](https://msdn.microsoft.com/library/windows/apps/br208616), and/or [**ScheduledTileNotification**](https://msdn.microsoft.com/library/windows/apps/hh701637) classes.\n\nFor more info on tiles, toasts, badges, banners, and notifications, see [Creating tiles](https://msdn.microsoft.com/library/windows/apps/xaml/hh868260) and [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259). For specifics about sizes of visual assets used for UWP Tiles, see [Tile and toast visual assets](https://msdn.microsoft.com/library/windows/apps/hh781198).\n\n## Toasts\n\nCode that displays a toast with the **Microsoft.Phone.Shell.ShellToast** class should be ported to use the [**ToastNotificationManager**](https://msdn.microsoft.com/library/windows/apps/br208642), [**ToastNotifier**](https://msdn.microsoft.com/library/windows/apps/br208653), [**ToastNotification**](https://msdn.microsoft.com/library/windows/apps/br208641), and/or [**ScheduledToastNotification**](https://msdn.microsoft.com/library/windows/apps/br208607) classes. Note that on mobile devices, the consumer-facing term for \"toast\" is \"banner\".\n\nSee [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259).\n\n## View/effective pixels, viewing distance, and scale factors\n\nWindows Phone Silverlight apps and Windows 10 apps differ in the way they abstract the size and layout of UI elements away from the actual physical size and resolution of devices. A Windows Phone Silverlight app uses view pixels to do this. With Windows 10, the concept of view pixels has been refined into that of effective pixels. Here's an explanation of that term, what it means, and the extra value it offers.\n\nThe term \"resolution\" refers to a measure of pixel density and not, as is commonly thought, pixel count. \"Effective resolution\" is the way the physical pixels that compose an image or glyph resolve to the eye given differences in viewing distance and the physical pixel size of the device (pixel density being the reciprocal of physical pixel size). Effective resolution is a good metric to build an experience around because it is user-centric. By understanding all the factors, and controlling the size of UI elements, you can make the user's experience a good one.\n\nTo a Windows Phone Silverlight app, all phone screens are exactly 480 view pixels wide, without exception, no matter how many physical pixels the screen has, nor what its pixel density or physical size is. This means that an **Image** element with `Width=\"48\"` will be exactly one tenth of the width of the screen of any phone that can run the Windows Phone Silverlight app.\n\nTo a Windows 10 app, it is *not* the case that all devices are some fixed number of effective pixels wide. That's probably obvious, given the wide range of devices that a UWP app can run on. Different devices are a different number of effective pixels wide, ranging from 320 epx for the smallest devices, to 1024 epx for a modest-sized monitor, and far beyond to much higher widths. All you have to do is continue to use auto-sized elements and dynamic layout panels as you always have. There will also be some cases where you'll set the properties of your UI elements to a fixed size in XAML markup. A scale factor is automatically applied to your app depending on what device it runs on and the display settings made by the user. And that scale factor serves to keep any UI element with a fixed size presenting a more-or-less constant-sized touch (and reading) target to the user across a wide variety of screen sizes. And together with dynamic layout your UI won't merely optically scale on different devices, it will instead do what's necessary to fit the appropriate amount of content into the available space.\n\nBecause 480 was formerly the fixed width in view pixels for a phone-sized screen, and that value is now typically smaller in effective pixels, a rule of thumb is to multiply any dimension in your Windows Phone Silverlight app markup by a factor of 0.8.\n\nSo that your app has the best experience across all displays, we recommend that you create each bitmap asset in a range of sizes, each suitable for a particular scale factor. Providing assets at 100%-scale, 200%-scale, and 400%-scale (in that priority order) will give you excellent results in most cases at all the intermediate scale factors.\n\n**Note**  If, for whatever reason, you cannot create assets in more than one size, then create 100%-scale assets. In Microsoft Visual Studio, the default project template for UWP apps provides branding assets (tile images and logos) in only one size, but they are not 100%-scale. When authoring assets for your own app, follow the guidance in this section and provide 100%, 200%, and 400% sizes, and use asset packs.\n\nIf you have intricate artwork, then you may want to provide your assets in even more sizes. If you're starting with vector art, then it's relatively easy to generate high-quality assets at any scale factor.\n\nWe don't recommend that you try to support all of the scale factors, but the full list of scale factors for Windows 10 apps is 100%, 125%, 150%, 200%, 250%, 300%, and 400%. If you provide them, the Store will pick the correct-sized asset(s) for each device, and only those assets will be downloaded. The Store selects the assets to download based on the DPI of the device.\n\nFor more info, see [Responsive design 101 for UWP apps](https://msdn.microsoft.com/library/windows/apps/dn958435).\n\n## Window size\n\nIn your UWP app, you can specify a minimum size (both width and height) with imperative code. The default minimum size is 500x320epx, and that's also the smallest minimum size accepted. The largest minimum size accepted is 500x500epx.\n\n```csharp\n   Windows.UI.ViewManagement.ApplicationView.GetForCurrentView().SetPreferredMinSize\n        (new Size { Width = 500, Height = 500 });\n```\n\nThe next topic is [Porting for I/O, device, and app model](wpsl-to-uwp-input-and-sensors.md).\n\n## Related topics\n\n* [Namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md)\n\n"}