{"nodes":[{"pos":[17,114],"content":"Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.","needQuote":true,"needEscape":true,"nodes":[{"content":"Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.","pos":[0,97]}]},{"pos":[122,148],"content":"Guidelines for scroll bars","needQuote":true,"needEscape":true,"nodes":[{"content":"Guidelines for scroll bars","pos":[0,26]}]},{"content":"Scroll bars","pos":[244,255]},{"pos":[314,328],"content":"Important APIs"},{"content":"ScrollViewer class","pos":[344,362]},{"content":"ZoomMode property","pos":[431,448]},{"content":"Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.","pos":[559,656]},{"content":"A scroll viewer control is composed of as much content as will fit in the viewport, and either one or two scroll bars.","pos":[658,776]},{"content":"Touch gestures can be used to pan and zoom (the scroll bars fade in only during manipulation), and the pointer can be used to scroll.","pos":[777,910]},{"content":"The flick gesture pans with inertia.","pos":[911,947]},{"pos":[949,1158],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Windows: There are two panning display modes based on the input device detected: panning indicators for touch; and scroll bars for other input devices including mouse, touchpad, keyboard, and stylus.","source":"**Note**  Windows: There are two panning display modes based on the input device detected: panning indicators for touch; and scroll bars for other input devices including mouse, touchpad, keyboard, and stylus."},{"content":"A sample of what standard scroll bar and panning indicator controls look like","pos":[1162,1239]},{"content":"Examples","pos":[1267,1275]},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ScrollViewer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.aspx)</ept> enables content to be displayed in a smaller area than its actual size.","pos":[1277,1466],"source":"A [**ScrollViewer**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.aspx) enables content to be displayed in a smaller area than its actual size."},{"content":"When the content of the scroll viewer is not entirely visible, the scroll viewer displays scrollbars that the user can use to move the content area that is visible.","pos":[1467,1631]},{"content":"The area that includes all of the content of the scroll viewer is the <bpt id=\"p1\">*</bpt>extent<ept id=\"p1\">*</ept>.","pos":[1632,1711],"source":" The area that includes all of the content of the scroll viewer is the *extent*."},{"content":"The visible area of the content is the <bpt id=\"p1\">*</bpt>viewport<ept id=\"p1\">*</ept>.","pos":[1712,1762],"source":" The visible area of the content is the *viewport*."},{"content":"A screenshot that illustrates the standard scrollbar control","pos":[1766,1826]},{"content":"Create a scroll viewer","pos":[1863,1885]},{"content":"This XAML shows how to place an image in a scroll viewer and enable zooming.","pos":[1887,1963]},{"content":"ScrollViewer in a control template","pos":[2238,2272]},{"content":"It's typical for a ScrollViewer control to exist as a composite part of other controls.","pos":[2274,2361]},{"content":"A ScrollViewer part, along with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ScrollContentPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollcontentpresenter.aspx)</ept> class for support, will display a viewport along with scrollbars only when the host control's layout space is being constrained smaller than the expanded content size.","pos":[2362,2701],"source":" A ScrollViewer part, along with the [**ScrollContentPresenter**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollcontentpresenter.aspx) class for support, will display a viewport along with scrollbars only when the host control's layout space is being constrained smaller than the expanded content size."},{"content":"This is often the case for lists, so <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.listview.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>GridView<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.gridview.aspx)</ept> templates always include a ScrollViewer.","pos":[2702,2999],"source":" This is often the case for lists, so [**ListView**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.listview.aspx) and [**GridView**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.gridview.aspx) templates always include a ScrollViewer."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RichEditBox<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx)</ept> also include a ScrollViewer in their templates.","pos":[3000,3271],"source":"[**TextBox**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx) and [**RichEditBox**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx) also include a ScrollViewer in their templates."},{"content":"When a <bpt id=\"p1\">**</bpt>ScrollViewer<ept id=\"p1\">**</ept> part exists in a control, the host control often has built-in event handling for certain input events and manipulations that enable the content to scroll.","pos":[3273,3451],"source":"When a **ScrollViewer** part exists in a control, the host control often has built-in event handling for certain input events and manipulations that enable the content to scroll."},{"content":"For example, a GridView interprets a swipe gesture and this causes the content to scroll horizontally.","pos":[3452,3554]},{"content":"The input events and raw manipulations that the host control receives are considered handled by the control, and lower-level events such as <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PointerPressed<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.pointerpressed.aspx)</ept> won't be raised and won't bubble to any parent containers either.","pos":[3555,3881],"source":" The input events and raw manipulations that the host control receives are considered handled by the control, and lower-level events such as [**PointerPressed**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.pointerpressed.aspx) won't be raised and won't bubble to any parent containers either."},{"content":"You can change some of the built-in control handling by overriding a control class and the <bpt id=\"p1\">**</bpt>On<ept id=\"p1\">**</ept>* virtual methods for events, or by retemplating the control.","pos":[3882,4040],"source":" You can change some of the built-in control handling by overriding a control class and the **On*** virtual methods for events, or by retemplating the control."},{"content":"But in either case it's not trivial to reproduce the original default behavior, which is typically there so that the control reacts in expected ways to events and to a user's input actions and gestures.","pos":[4041,4243]},{"content":"So you should consider whether you really need that input event to fire.","pos":[4244,4316]},{"content":"You might want to investigate whether there are other input events or gestures that are not being handled by the control, and use those in your app or control interaction design.","pos":[4317,4495]},{"content":"To make it possible for controls that include a ScrollViewer to influence some of the behavior and properties that are from within the ScrollViewer part, ScrollViewer defines a number of XAML attached properties that can be set in styles and used in template bindings.","pos":[4497,4765]},{"content":"For more info about attached properties, see <bpt id=\"p1\">[</bpt>Attached properties overview<ept id=\"p1\">](../xaml-platform/attached-properties-overview.md)</ept>.","pos":[4766,4892],"source":" For more info about attached properties, see [Attached properties overview](../xaml-platform/attached-properties-overview.md)."},{"content":"ScrollViewer XAML attached properties","pos":[4896,4933]},{"content":"ScrollViewer defines the following XAML attached properties:","pos":[4937,4997]},{"content":"ScrollViewer.BringIntoViewOnFocusChange","pos":[5001,5040]},{"content":"ScrollViewer.HorizontalScrollBarVisibility","pos":[5170,5212]},{"content":"ScrollViewer.HorizontalScrollMode","pos":[5345,5378]},{"content":"ScrollViewer.IsDeferredScrollingEnabled","pos":[5501,5540]},{"content":"ScrollViewer.IsHorizontalRailEnabled","pos":[5670,5706]},{"content":"ScrollViewer.IsHorizontalScrollChainingEnabled","pos":[5832,5878]},{"content":"ScrollViewer.IsScrollInertiaEnabled","pos":[6015,6050]},{"content":"ScrollViewer.IsVerticalRailEnabled","pos":[6175,6209]},{"content":"ScrollViewer.IsVerticalScrollChainingEnabled","pos":[6333,6377]},{"content":"ScrollViewer.IsZoomChainingEnabled","pos":[6512,6546]},{"content":"ScrollViewer.IsZoomInertiaEnabled","pos":[6669,6702]},{"content":"ScrollViewer.VerticalScrollBarVisibility","pos":[6825,6865]},{"content":"ScrollViewer.VerticalScrollMode","pos":[7004,7035]},{"content":"ScrollViewer.ZoomMode","pos":[7156,7177]},{"content":"These XAML attached properties are intended for cases where the ScrollViewer is implicit, such as when the ScrollViewer exists in the default template for a ListView or GridView, and you want to be able to influence the scrolling behavior of the control without accessing template parts.","pos":[7286,7573]},{"content":"For example, here's how to make the vertical scroll bars always visible for a ListView's built in scroll viewer.","pos":[7575,7687]},{"content":"For cases where a ScrollViewer is explicit in your XAML, as is shown in the example code, you don't need to use attached property syntax.","pos":[7765,7902]},{"content":"Just use attribute syntax, for example <ph id=\"ph1\">`&lt;ScrollViewer VerticalScrollBarVisibility=\"Visible\"/&gt;`</ph>.","pos":[7903,7998],"source":" Just use attribute syntax, for example `<ScrollViewer VerticalScrollBarVisibility=\"Visible\"/>`."},{"content":"Recommendations","pos":[8004,8019]},{"content":"Use one-axis panning for content regions that extend beyond one viewport boundary (vertical or horizontal).","pos":[8025,8132]},{"content":"Use two-axis panning for content regions that extend beyond both viewport boundaries (vertical and horizontal).","pos":[8133,8244]},{"content":"Use the built-in scroll functionality in the list box, drop-down list, text input box, grid view, list view, and hub controls.","pos":[8249,8375]},{"content":"With those controls, if there are too many items to show all at once, the user is able to scroll either horizontally or vertically over the list of items.","pos":[8376,8530]},{"content":"If you want the user to pan in both directions around a larger area, and possibly to zoom, too, for example, if you want to allow the user to pan and zoom over a full-sized image (rather than an image sized to fit the screen) then place the image inside a scroll viewer.","pos":[8535,8805]},{"content":"If the user will scroll through a long passage of text, configure the scroll viewer to scroll vertically only.","pos":[8810,8920]},{"content":"Use a scroll viewer to contain one object only.","pos":[8925,8972]},{"content":"Note that the one object can be a layout panel, in turn containing any number of objects of its own.","pos":[8973,9073]},{"content":"Related topics","pos":[9078,9092]},{"content":"For developers (XAML)","pos":[9096,9117]},{"content":"ScrollViewer class","pos":[9125,9143]}],"content":"---\nDescription: Panning and scrolling allows users to reach content that extends beyond the bounds of the screen.\ntitle: Guidelines for scroll bars\nms.assetid: 1BFF0E81-BF9C-43F7-95F6-EFC6BDD5EC31\nlabel: Scroll bars\ntemplate: detail.hbs\n---\n# Scroll bars\n\n<span class=\"sidebar_heading\" style=\"font-weight: bold;\">Important APIs</span>\n\n-   [**ScrollViewer class**](https://msdn.microsoft.com/library/windows/apps/br209527)\n-   [**ZoomMode property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.zoommode.aspx)\n\nPanning and scrolling allows users to reach content that extends beyond the bounds of the screen.\n\nA scroll viewer control is composed of as much content as will fit in the viewport, and either one or two scroll bars. Touch gestures can be used to pan and zoom (the scroll bars fade in only during manipulation), and the pointer can be used to scroll. The flick gesture pans with inertia.\n\n**Note**  Windows: There are two panning display modes based on the input device detected: panning indicators for touch; and scroll bars for other input devices including mouse, touchpad, keyboard, and stylus.\n\n![A sample of what standard scroll bar and panning indicator controls look like](images/SCROLLBAR.png)\n\n## Examples\n\nA [**ScrollViewer**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.aspx) enables content to be displayed in a smaller area than its actual size. When the content of the scroll viewer is not entirely visible, the scroll viewer displays scrollbars that the user can use to move the content area that is visible. The area that includes all of the content of the scroll viewer is the *extent*. The visible area of the content is the *viewport*.\n\n![A screenshot that illustrates the standard scrollbar control](images/ScrollBar_Standard.jpg)\n\n## Create a scroll viewer\n\nThis XAML shows how to place an image in a scroll viewer and enable zooming.\n\n```xaml\n<ScrollViewer ZoomMode=\"Enabled\" MaxZoomFactor=\"10\" \n              HorizontalScrollMode=\"Enabled\" HorizontalScrollBarVisibility=\"Visible\"\n              Height=\"200\" Width=\"200\">\n    <Image Source=\"Assets/Logo.png\" Height=\"400\" Width=\"400\"/>\n</ScrollViewer>\n```\n\n## ScrollViewer in a control template\n\nIt's typical for a ScrollViewer control to exist as a composite part of other controls. A ScrollViewer part, along with the [**ScrollContentPresenter**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollcontentpresenter.aspx) class for support, will display a viewport along with scrollbars only when the host control's layout space is being constrained smaller than the expanded content size. This is often the case for lists, so [**ListView**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.listview.aspx) and [**GridView**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.gridview.aspx) templates always include a ScrollViewer. [**TextBox**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx) and [**RichEditBox**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richeditbox.aspx) also include a ScrollViewer in their templates.\n\nWhen a **ScrollViewer** part exists in a control, the host control often has built-in event handling for certain input events and manipulations that enable the content to scroll. For example, a GridView interprets a swipe gesture and this causes the content to scroll horizontally. The input events and raw manipulations that the host control receives are considered handled by the control, and lower-level events such as [**PointerPressed**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.pointerpressed.aspx) won't be raised and won't bubble to any parent containers either. You can change some of the built-in control handling by overriding a control class and the **On*** virtual methods for events, or by retemplating the control. But in either case it's not trivial to reproduce the original default behavior, which is typically there so that the control reacts in expected ways to events and to a user's input actions and gestures. So you should consider whether you really need that input event to fire. You might want to investigate whether there are other input events or gestures that are not being handled by the control, and use those in your app or control interaction design.\n\nTo make it possible for controls that include a ScrollViewer to influence some of the behavior and properties that are from within the ScrollViewer part, ScrollViewer defines a number of XAML attached properties that can be set in styles and used in template bindings. For more info about attached properties, see [Attached properties overview](../xaml-platform/attached-properties-overview.md).\n\n**ScrollViewer XAML attached properties**\n\nScrollViewer defines the following XAML attached properties:\n- [ScrollViewer.BringIntoViewOnFocusChange](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.bringintoviewonfocuschange.aspx) \n- [ScrollViewer.HorizontalScrollBarVisibility](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.horizontalscrollbarvisibility.aspx) \n- [ScrollViewer.HorizontalScrollMode](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.horizontalscrollmode.aspx)\n- [ScrollViewer.IsDeferredScrollingEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.isdeferredscrollingenabled.aspx) \n- [ScrollViewer.IsHorizontalRailEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.ishorizontalrailenabled.aspx)\n- [ScrollViewer.IsHorizontalScrollChainingEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.ishorizontalscrollchainingenabled.aspx) \n- [ScrollViewer.IsScrollInertiaEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.isscrollinertiaenabled.aspx)\n- [ScrollViewer.IsVerticalRailEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.isverticalrailenabled.aspx)\n- [ScrollViewer.IsVerticalScrollChainingEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.isverticalscrollchainingenabled.aspx) \n- [ScrollViewer.IsZoomChainingEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.iszoominertiaenabled.aspx)\n- [ScrollViewer.IsZoomInertiaEnabled](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.iszoominertiaenabled.aspx)\n- [ScrollViewer.VerticalScrollBarVisibility](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.verticalscrollbarvisibilityproperty.aspx) \n- [ScrollViewer.VerticalScrollMode](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.verticalscrollmode.aspx)\n- [ScrollViewer.ZoomMode](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.zoommode.aspx)\n\nThese XAML attached properties are intended for cases where the ScrollViewer is implicit, such as when the ScrollViewer exists in the default template for a ListView or GridView, and you want to be able to influence the scrolling behavior of the control without accessing template parts.\n\nFor example, here's how to make the vertical scroll bars always visible for a ListView's built in scroll viewer.\n```xaml\n<ListView ScrollViewer.VerticalScrollBarVisibility=\"Visible\"/> \n```\n\nFor cases where a ScrollViewer is explicit in your XAML, as is shown in the example code, you don't need to use attached property syntax. Just use attribute syntax, for example `<ScrollViewer VerticalScrollBarVisibility=\"Visible\"/>`.\n\n\n## Recommendations\n\n-   Use one-axis panning for content regions that extend beyond one viewport boundary (vertical or horizontal). Use two-axis panning for content regions that extend beyond both viewport boundaries (vertical and horizontal).\n-   Use the built-in scroll functionality in the list box, drop-down list, text input box, grid view, list view, and hub controls. With those controls, if there are too many items to show all at once, the user is able to scroll either horizontally or vertically over the list of items.\n-   If you want the user to pan in both directions around a larger area, and possibly to zoom, too, for example, if you want to allow the user to pan and zoom over a full-sized image (rather than an image sized to fit the screen) then place the image inside a scroll viewer.\n-   If the user will scroll through a long passage of text, configure the scroll viewer to scroll vertically only.\n-   Use a scroll viewer to contain one object only. Note that the one object can be a layout panel, in turn containing any number of objects of its own.\n\n## Related topics\n\n**For developers (XAML)**\n* [**ScrollViewer class**](https://msdn.microsoft.com/library/windows/apps/br209527)\n"}