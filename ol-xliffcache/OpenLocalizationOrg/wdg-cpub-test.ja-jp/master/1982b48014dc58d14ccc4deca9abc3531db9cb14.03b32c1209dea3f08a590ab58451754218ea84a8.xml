{"nodes":[{"pos":[17,143],"content":"Learn how to integrate images into your app, including how to use the APIs of the two main XAML classes, Image and ImageBrush.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to integrate images into your app, including how to use the APIs of the two main XAML classes, Image and ImageBrush.","pos":[0,126]}]},{"pos":[151,175],"content":"Images and image brushes","needQuote":true,"needEscape":true,"nodes":[{"content":"Images and image brushes","pos":[0,24]}]},{"content":"Images and image brushes","pos":[284,308]},{"content":"To display an image, you can use either the <bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> object or the <bpt id=\"p2\">**</bpt>ImageBrush<ept id=\"p2\">**</ept> object.","pos":[310,400],"source":"To display an image, you can use either the **Image** object or the **ImageBrush** object."},{"content":"An Image object renders an image, and an ImageBrush object paints another object with an image.","pos":[401,496]},{"pos":[556,570],"content":"Important APIs"},{"content":"Image class","pos":[586,597]},{"content":"Source property","pos":[698,713]},{"content":"ImageBrush class","pos":[821,837]},{"content":"ImageSource property","pos":[940,960]},{"content":"Are these the right elements?","pos":[1072,1101]},{"pos":[1102,1170],"content":"Use an <bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> element to display a stand-alone image in your app.","source":"Use an **Image** element to display a stand-alone image in your app."},{"content":"Use an <bpt id=\"p1\">**</bpt>ImageBrush<ept id=\"p1\">**</ept> to apply an image to another object.","pos":[1172,1230],"source":"Use an **ImageBrush** to apply an image to another object."},{"content":"Uses for an ImageBrush include decorative effects for text, or tiled backgrounds for controls or layout containers.","pos":[1231,1346]},{"content":"You can control how the image is stretched, aligned, and tiled, enabling you to produce patterns and other effects.","pos":[1347,1462]},{"content":"Examples","pos":[1468,1476]},{"content":"Create an image","pos":[1483,1498]},{"content":"Image","pos":[1504,1509]},{"pos":[1510,1674],"content":"This example shows how to create an image by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx)</ept> object.","source":"This example shows how to create an image by using the [**Image**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx) object."},{"content":"Here's the rendered Image object.","pos":[1734,1767]},{"content":"Example of an image element","pos":[1771,1798]},{"content":"In this example, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Source<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx)</ept> property specifies the location of the image that you want to display.","pos":[1828,2029],"source":"In this example, the [**Source**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx) property specifies the location of the image that you want to display."},{"content":"You can set the Source by specifying an absolute URL (for example, http://contoso.com/myPicture.jpg) or by specifying a URL that is relative to your app packaging structure.","pos":[2030,2203]},{"content":"For our example, we put the \"licorice.jpg\" image file in the root folder of our project and declare project settings that include the image file as content.","pos":[2204,2360]},{"content":"ImageBrush","pos":[2366,2376]},{"content":"With the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ImageBrush<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.aspx)</ept> object, you can use an image to paint an area that takes a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Brush<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.brush.aspx)</ept> object.","pos":[2378,2661],"source":"With the [**ImageBrush**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.aspx) object, you can use an image to paint an area that takes a [**Brush**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.brush.aspx) object."},{"content":"For example, you can use an ImageBrush for the value of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Fill<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.shape.fill.aspx)</ept> property of an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Ellipse<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.ellipse.aspx)</ept> or the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Background<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.background.aspx)</ept> property of a <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Canvas<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</ept>.","pos":[2662,3190],"source":" For example, you can use an ImageBrush for the value of the [**Fill**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.shape.fill.aspx) property of an [**Ellipse**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.ellipse.aspx) or the [**Background**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.background.aspx) property of a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)."},{"content":"The next example shows how to use an ImageBrush to paint an Ellipse.","pos":[3192,3260]},{"content":"Here's the Ellipse painted by the ImageBrush.","pos":[3405,3450]},{"content":"An Ellipse painted by an ImageBrush.","pos":[3454,3490]},{"content":"Stretch an image","pos":[3534,3550]},{"content":"If you don't set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Width<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Height<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx)</ept> values of an <bpt id=\"p5\">**</bpt>Image<ept id=\"p5\">**</ept>, it is displayed with the dimensions of the image specified by the <bpt id=\"p6\">**</bpt>Source<ept id=\"p6\">**</ept>.","pos":[3552,3899],"source":"If you don't set the [**Width**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx) or [**Height**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx) values of an **Image**, it is displayed with the dimensions of the image specified by the **Source**."},{"content":"Setting the <bpt id=\"p1\">**</bpt>Width<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Height<ept id=\"p2\">**</ept> creates a containing rectangular area in which the image is displayed.","pos":[3900,4007],"source":" Setting the **Width** and **Height** creates a containing rectangular area in which the image is displayed."},{"content":"You can specify how the image fills this containing area by using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Stretch<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.stretch.aspx)</ept> property.","pos":[4008,4199],"source":" You can specify how the image fills this containing area by using the [**Stretch**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.stretch.aspx) property."},{"content":"The Stretch property accepts these values, which the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Stretch<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.stretch.aspx)</ept> enumeration defines:","pos":[4200,4376],"source":" The Stretch property accepts these values, which the [**Stretch**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.stretch.aspx) enumeration defines:"},{"content":"<bpt id=\"p1\">**</bpt>None<ept id=\"p1\">**</ept>: The image doesn't stretch to fill the output dimensions.","pos":[4382,4448],"source":"**None**: The image doesn't stretch to fill the output dimensions."},{"content":"Be careful with this Stretch setting: if the source image is larger than the containing area, your image will be clipped, and this usually isn't desirable because you don't have any control over the viewport like you do with a deliberate <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Clip<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx)</ept>.","pos":[4449,4788],"source":" Be careful with this Stretch setting: if the source image is larger than the containing area, your image will be clipped, and this usually isn't desirable because you don't have any control over the viewport like you do with a deliberate [**Clip**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx)."},{"content":"<bpt id=\"p1\">**</bpt>Uniform<ept id=\"p1\">**</ept>: The image is scaled to fit the output dimensions.","pos":[4793,4855],"source":"**Uniform**: The image is scaled to fit the output dimensions."},{"content":"But the aspect ratio of the content is preserved.","pos":[4856,4905]},{"content":"This is the default value.","pos":[4906,4932]},{"pos":[4937,5060],"content":"<bpt id=\"p1\">**</bpt>UniformToFill<ept id=\"p1\">**</ept>: The image is scaled so that it completely fills the output area but preserves its original aspect ratio.","source":"**UniformToFill**: The image is scaled so that it completely fills the output area but preserves its original aspect ratio."},{"content":"<bpt id=\"p1\">**</bpt>Fill<ept id=\"p1\">**</ept>: The image is scaled to fit the output dimensions.","pos":[5065,5124],"source":"**Fill**: The image is scaled to fit the output dimensions."},{"content":"Because the content's height and width are scaled independently, the original aspect ratio of the image might not be preserved.","pos":[5125,5252]},{"content":"That is, the image might be distorted to completely fill the output area.","pos":[5253,5326]},{"content":"An example of stretch settings.","pos":[5330,5361]},{"content":"Crop an image","pos":[5394,5407]},{"content":"You can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Clip<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx)</ept> property to clip an area from the image output.","pos":[5409,5573],"source":"You can use the [**Clip**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx) property to clip an area from the image output."},{"content":"You set the Clip property to a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Geometry<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.geometry.aspx)</ept>.","pos":[5574,5710],"source":" You set the Clip property to a [**Geometry**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.geometry.aspx)."},{"content":"Currently, non-rectangular clipping is not supported.","pos":[5711,5764]},{"content":"The next example shows how to use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RectangleGeometry<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.aspx)</ept> as the clip region for an image.","pos":[5766,5957],"source":"The next example shows how to use a [**RectangleGeometry**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.aspx) as the clip region for an image."},{"content":"In this example, we define an <bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> object with a height of 200.","pos":[5958,6026],"source":" In this example, we define an **Image** object with a height of 200."},{"content":"A <bpt id=\"p1\">**</bpt>RectangleGeometry<ept id=\"p1\">**</ept> defines a rectangle for the area of the image that will be displayed.","pos":[6027,6120],"source":" A **RectangleGeometry** defines a rectangle for the area of the image that will be displayed."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Rect<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.rect.aspx)</ept> property is set to \"25,25,100,150\", which defines a rectangle starting at position \"25,25\" with a width of 100 and a height of 150.","pos":[6121,6371],"source":" The [**Rect**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.rect.aspx) property is set to \"25,25,100,150\", which defines a rectangle starting at position \"25,25\" with a width of 100 and a height of 150."},{"content":"Only the part of the image that is within the area of the rectangle is displayed.","pos":[6372,6453]},{"content":"Here's the clipped image on a black background.","pos":[6606,6653]},{"content":"An Image object cropped by a RectangleGeometry.","pos":[6657,6704]},{"content":"Apply an opacity","pos":[6737,6753]},{"content":"You can apply an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Opacity<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.opacity.aspx)</ept> to an image so that the image is rendered semi-translucent.","pos":[6755,6938],"source":"You can apply an [**Opacity**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.opacity.aspx) to an image so that the image is rendered semi-translucent."},{"content":"The opacity values are from 0.0 to 1.0 where 1.0 is fully opaque and 0.0 is fully transparent.","pos":[6939,7033]},{"content":"This example shows how to apply an opacity of 0.5 to an Image.","pos":[7034,7096]},{"content":"Here's the rendered image with an opacity of 0.5 and a black background showing through the partial opacity.","pos":[7170,7278]},{"content":"An Image object with an opacity of .5.","pos":[7282,7320]},{"content":"Image file formats","pos":[7353,7371]},{"pos":[7373,7439],"content":"<bpt id=\"p1\">**</bpt>Image<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ImageBrush<ept id=\"p2\">**</ept> can display these image file formats:","source":"**Image** and **ImageBrush** can display these image file formats:"},{"content":"Joint Photographic Experts Group (JPEG)","pos":[7445,7484]},{"content":"Portable Network Graphics (PNG)","pos":[7489,7520]},{"content":"bitmap (BMP)","pos":[7525,7537]},{"content":"Graphics Interchange Format (GIF)","pos":[7542,7575]},{"content":"Tagged Image File Format (TIFF)","pos":[7580,7611]},{"content":"JPEG XR","pos":[7616,7623]},{"content":"icons (ICO)","pos":[7628,7639]},{"content":"The APIs for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BitmapImage<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>BitmapSource<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx)</ept> don't include any dedicated methods for encoding and decoding of media formats.","pos":[7641,8080],"source":"The APIs for [**Image**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx), [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx) and [**BitmapSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx) don't include any dedicated methods for encoding and decoding of media formats."},{"content":"All of the encode and decode operations are built-in, and at most will surface aspects of encode or decode as part of event data for load events.","pos":[8081,8226]},{"content":"If you want to do any special work with image encode or decode, which you might use if your app is doing image conversions or manipulation, you should use the APIs that are available in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Graphics.Imaging<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.graphics.imaging.aspx)</ept> namespace.","pos":[8227,8542],"source":" If you want to do any special work with image encode or decode, which you might use if your app is doing image conversions or manipulation, you should use the APIs that are available in the [**Windows.Graphics.Imaging**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.graphics.imaging.aspx) namespace."},{"content":"These APIs are also supported by the Windows Imaging Component (WIC) in Windows.","pos":[8543,8623]},{"pos":[8625,8795],"content":"For more info about app resources and how to package image sources in an app, see <bpt id=\"p1\">[</bpt>Defining app resources<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965321)</ept>.","source":"For more info about app resources and how to package image sources in an app, see [Defining app resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965321)."},{"content":"WriteableBitmap","pos":[8801,8816]},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>WriteableBitmap<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx)</ept> provides a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BitmapSource<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx)</ept> that can be modified and that doesn't use the basic file-based decoding from the WIC.","pos":[8818,9164],"source":"A [**WriteableBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx) provides a [**BitmapSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx) that can be modified and that doesn't use the basic file-based decoding from the WIC."},{"content":"You can alter images dynamically and re-render the updated image.","pos":[9165,9230]},{"content":"To define the buffer content of a <bpt id=\"p1\">**</bpt>WriteableBitmap<ept id=\"p1\">**</ept>, use the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>PixelBuffer<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.pixelbuffer.aspx)</ept> property to access the buffer and use a stream or language-specific buffer type to fill it.","pos":[9231,9520],"source":" To define the buffer content of a **WriteableBitmap**, use the [**PixelBuffer**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.pixelbuffer.aspx) property to access the buffer and use a stream or language-specific buffer type to fill it."},{"content":"For example code, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>WriteableBitmap<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx)</ept>.","pos":[9521,9670],"source":" For example code, see [**WriteableBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx)."},{"content":"RenderTargetBitmap","pos":[9676,9694]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RenderTargetBitmap<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx)</ept> class can capture the XAML UI tree from a running app, and then represents a bitmap image source.","pos":[9696,9930],"source":"The [**RenderTargetBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx) class can capture the XAML UI tree from a running app, and then represents a bitmap image source."},{"content":"After capture, that image source can be applied to other parts of the app, saved as a resource or app data by the user, or used for other scenarios.","pos":[9931,10079]},{"content":"One particularly useful scenario is creating a runtime thumbnail of a XAML page for a navigation scheme, such as providing an image link from a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Hub<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.hub.aspx)</ept> control.","pos":[10080,10330],"source":" One particularly useful scenario is creating a runtime thumbnail of a XAML page for a navigation scheme, such as providing an image link from a [**Hub**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.hub.aspx) control."},{"content":"<bpt id=\"p1\">**</bpt>RenderTargetBitmap<ept id=\"p1\">**</ept> does have some limitations on the content that will appear in the captured image.","pos":[10331,10435],"source":"**RenderTargetBitmap** does have some limitations on the content that will appear in the captured image."},{"content":"For more info, see the API reference topic for <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RenderTargetBitmap<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx)</ept>.","pos":[10436,10616],"source":" For more info, see the API reference topic for [**RenderTargetBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx)."},{"content":"Image sources and scaling","pos":[10622,10647]},{"content":"You should create your image sources at several recommended sizes, to ensure that your app looks great when Windows scales it.","pos":[10649,10775]},{"content":"When specifying a <bpt id=\"p1\">**</bpt>Source<ept id=\"p1\">**</ept> for an <bpt id=\"p2\">**</bpt>Image<ept id=\"p2\">**</ept>, you can use a naming convention that will automatically reference the correct resource for the current scaling.","pos":[10776,10934],"source":" When specifying a **Source** for an **Image**, you can use a naming convention that will automatically reference the correct resource for the current scaling."},{"content":"For specifics of the naming convention and more info, see <bpt id=\"p1\">[</bpt>Quickstart: Using file or image resources<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965325)</ept>.","pos":[10935,11100],"source":" For specifics of the naming convention and more info, see [Quickstart: Using file or image resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965325)."},{"pos":[11102,11250],"content":"For more info about how to design for scaling, see <bpt id=\"p1\">[</bpt>UX guidelines for layout and scaling<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn611863)</ept>.","source":"For more info about how to design for scaling, see [UX guidelines for layout and scaling](https://msdn.microsoft.com/library/windows/apps/dn611863)."},{"content":"Image and ImageBrush in code","pos":[11256,11284]},{"content":"It's typical to specify Image and ImageBrush elements using XAML rather than code.","pos":[11286,11368]},{"content":"This is because these elements are often the output of design tools as part of a XAML UI definition.","pos":[11369,11469]},{"content":"If you define an Image or ImageBrush using code, use the default constructors, then set the relevant source property (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image.Source<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ImageBrush.ImageSource<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.imagesource.aspx)</ept>).","pos":[11471,11842],"source":"If you define an Image or ImageBrush using code, use the default constructors, then set the relevant source property ([**Image.Source**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx) or [**ImageBrush.ImageSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.imagesource.aspx))."},{"content":"The source properties require a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BitmapImage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx)</ept> (not a URI) when you set them using code.","pos":[11843,12035],"source":" The source properties require a [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx) (not a URI) when you set them using code."},{"content":"If your source is a stream, use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SetSourceAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.setsourceasync.aspx)</ept> method to initialize the value.","pos":[12036,12241],"source":" If your source is a stream, use the [**SetSourceAsync**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.setsourceasync.aspx) method to initialize the value."},{"content":"If your source is a URI, which includes content in your app that uses the <bpt id=\"p1\">**</bpt>ms-appx<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ms-resource<ept id=\"p2\">**</ept> schemes, use the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BitmapImage<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/xaml/br243238.aspx)</ept> constructor that takes a URI.","pos":[12242,12479],"source":" If your source is a URI, which includes content in your app that uses the **ms-appx** or **ms-resource** schemes, use the [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/br243238.aspx) constructor that takes a URI."},{"content":"You might also consider handling the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ImageOpened<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.imaging.bitmapimage.imageopened.aspx)</ept> event if there are any timing issues with retrieving or decoding the image source, where you might need alternate content to display until the image source is available.","pos":[12480,12812],"source":" You might also consider handling the [**ImageOpened**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.imaging.bitmapimage.imageopened.aspx) event if there are any timing issues with retrieving or decoding the image source, where you might need alternate content to display until the image source is available."},{"content":"For example code, see <bpt id=\"p1\">[</bpt>XAML images sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=238575)</ept>.","pos":[12813,12905],"source":" For example code, see [XAML images sample](http://go.microsoft.com/fwlink/p/?linkid=238575)."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept><ph id=\"ph1\">&amp;nbsp;&amp;nbsp;</ph>If you establish images using code, you can use automatic handling for accessing unqualified resources with current scale and culture qualifiers, or you can use <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>ResourceManager<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemanager.aspx)</ept> and <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>ResourceMap<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemap.aspx)</ept> with qualifiers for culture and scale to obtain the resources directly.","pos":[12909,13431],"source":"**Note**&nbsp;&nbsp;If you establish images using code, you can use automatic handling for accessing unqualified resources with current scale and culture qualifiers, or you can use [**ResourceManager**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemanager.aspx) and [**ResourceMap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemap.aspx) with qualifiers for culture and scale to obtain the resources directly."},{"content":"For more info see <bpt id=\"p1\">[</bpt>Resource management system<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/jj552947.aspx)</ept>.","pos":[13432,13547],"source":" For more info see [Resource management system](https://msdn.microsoft.com/library/windows/apps/xaml/jj552947.aspx)."},{"content":"Recommendations","pos":[13552,13567]},{"content":"\\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.","pos":[13570,13679]},{"content":"For Windows 8.1 guidance, please download the <bpt id=\"p1\">[</bpt>Windows 8.1 guidelines PDF<ept id=\"p1\">](https://go.microsoft.com/fwlink/p/?linkid=258743)</ept>.\\]","pos":[13680,13807],"source":" For Windows 8.1 guidance, please download the [Windows 8.1 guidelines PDF](https://go.microsoft.com/fwlink/p/?linkid=258743).\\]"},{"content":"Related articles","pos":[13812,13828]},{"content":"For designers","pos":[13832,13845]},{"content":"For developers (XAML)","pos":[13851,13872]}],"content":"---\nDescription: Learn how to integrate images into your app, including how to use the APIs of the two main XAML classes, Image and ImageBrush.\ntitle: Images and image brushes\nms.assetid: CEA8780C-71A3-4168-A6E8-6361CDFB2FAF\nlabel: Images and image brushes\ntemplate: detail.hbs\n---\n# Images and image brushes\n\nTo display an image, you can use either the **Image** object or the **ImageBrush** object. An Image object renders an image, and an ImageBrush object paints another object with an image. \n\n<span class=\"sidebar_heading\" style=\"font-weight: bold;\">Important APIs</span>\n\n-   [**Image class**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx)\n-   [**Source property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx)\n-   [**ImageBrush class**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.aspx)\n-   [**ImageSource property**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.imagesource.aspx)\n\n## Are these the right elements?\nUse an **Image** element to display a stand-alone image in your app.\n\nUse an **ImageBrush** to apply an image to another object. Uses for an ImageBrush include decorative effects for text, or tiled backgrounds for controls or layout containers. You can control how the image is stretched, aligned, and tiled, enabling you to produce patterns and other effects. \n\n## Examples\n\n\n\n## Create an image\n\n### Image\nThis example shows how to create an image by using the [**Image**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx) object.\n\n\n```XAML\n<Image Width=\"200\" Source=\"licorice.jpg\" />\n```\n\nHere's the rendered Image object.\n\n![Example of an image element](images/Image_Licorice.jpg)\n\nIn this example, the [**Source**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx) property specifies the location of the image that you want to display. You can set the Source by specifying an absolute URL (for example, http://contoso.com/myPicture.jpg) or by specifying a URL that is relative to your app packaging structure. For our example, we put the \"licorice.jpg\" image file in the root folder of our project and declare project settings that include the image file as content.\n\n### ImageBrush\n\nWith the [**ImageBrush**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.aspx) object, you can use an image to paint an area that takes a [**Brush**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.brush.aspx) object. For example, you can use an ImageBrush for the value of the [**Fill**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.shape.fill.aspx) property of an [**Ellipse**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.shapes.ellipse.aspx) or the [**Background**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.background.aspx) property of a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx).\n\nThe next example shows how to use an ImageBrush to paint an Ellipse.\n\n```XAML\n<Ellipse Height=\"200\" Width=\"300\">\n   <Ellipse.Fill>\n     <ImageBrush ImageSource=\"licorice.jpg\" />\n   </Ellipse.Fill>\n</Ellipse>\n```\n\nHere's the Ellipse painted by the ImageBrush.\n\n![An Ellipse painted by an ImageBrush.](images/Image_ImageBrush_Ellipse.jpg)\n\n### Stretch an image\n\nIf you don't set the [**Width**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx) or [**Height**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx) values of an **Image**, it is displayed with the dimensions of the image specified by the **Source**. Setting the **Width** and **Height** creates a containing rectangular area in which the image is displayed. You can specify how the image fills this containing area by using the [**Stretch**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.stretch.aspx) property. The Stretch property accepts these values, which the [**Stretch**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.stretch.aspx) enumeration defines:\n\n-   **None**: The image doesn't stretch to fill the output dimensions. Be careful with this Stretch setting: if the source image is larger than the containing area, your image will be clipped, and this usually isn't desirable because you don't have any control over the viewport like you do with a deliberate [**Clip**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx).\n-   **Uniform**: The image is scaled to fit the output dimensions. But the aspect ratio of the content is preserved. This is the default value.\n-   **UniformToFill**: The image is scaled so that it completely fills the output area but preserves its original aspect ratio.\n-   **Fill**: The image is scaled to fit the output dimensions. Because the content's height and width are scaled independently, the original aspect ratio of the image might not be preserved. That is, the image might be distorted to completely fill the output area.\n\n![An example of stretch settings.](images/Image_Stretch.jpg)\n\n### Crop an image\n\nYou can use the [**Clip**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.clip.aspx) property to clip an area from the image output. You set the Clip property to a [**Geometry**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.geometry.aspx). Currently, non-rectangular clipping is not supported.\n\nThe next example shows how to use a [**RectangleGeometry**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.aspx) as the clip region for an image. In this example, we define an **Image** object with a height of 200. A **RectangleGeometry** defines a rectangle for the area of the image that will be displayed. The [**Rect**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.rectanglegeometry.rect.aspx) property is set to \"25,25,100,150\", which defines a rectangle starting at position \"25,25\" with a width of 100 and a height of 150. Only the part of the image that is within the area of the rectangle is displayed.\n\n```xaml\n<Image Source=\"licorice.jpg\" Height=\"200\">\n    <Image.Clip>\n        <RectangleGeometry Rect=\"25,25,100,150\" />\n    </Image.Clip>\n</Image>\n```\n\nHere's the clipped image on a black background.\n\n![An Image object cropped by a RectangleGeometry.](images/Image_Cropped.jpg)\n\n### Apply an opacity\n\nYou can apply an [**Opacity**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.opacity.aspx) to an image so that the image is rendered semi-translucent. The opacity values are from 0.0 to 1.0 where 1.0 is fully opaque and 0.0 is fully transparent. This example shows how to apply an opacity of 0.5 to an Image.\n\n```xaml\n<Image Height=\"200\" Source=\"licorice.jpg\" Opacity=\"0.5\" />\n```\n\nHere's the rendered image with an opacity of 0.5 and a black background showing through the partial opacity.\n\n![An Image object with an opacity of .5.](images/Image_Opacity.jpg)\n\n### Image file formats\n\n**Image** and **ImageBrush** can display these image file formats:\n\n-   Joint Photographic Experts Group (JPEG)\n-   Portable Network Graphics (PNG)\n-   bitmap (BMP)\n-   Graphics Interchange Format (GIF)\n-   Tagged Image File Format (TIFF)\n-   JPEG XR\n-   icons (ICO)\n\nThe APIs for [**Image**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.aspx), [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx) and [**BitmapSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx) don't include any dedicated methods for encoding and decoding of media formats. All of the encode and decode operations are built-in, and at most will surface aspects of encode or decode as part of event data for load events. If you want to do any special work with image encode or decode, which you might use if your app is doing image conversions or manipulation, you should use the APIs that are available in the [**Windows.Graphics.Imaging**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.graphics.imaging.aspx) namespace. These APIs are also supported by the Windows Imaging Component (WIC) in Windows.\n\nFor more info about app resources and how to package image sources in an app, see [Defining app resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965321).\n\n### WriteableBitmap\n\nA [**WriteableBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx) provides a [**BitmapSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.aspx) that can be modified and that doesn't use the basic file-based decoding from the WIC. You can alter images dynamically and re-render the updated image. To define the buffer content of a **WriteableBitmap**, use the [**PixelBuffer**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.pixelbuffer.aspx) property to access the buffer and use a stream or language-specific buffer type to fill it. For example code, see [**WriteableBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.writeablebitmap.aspx).\n\n### RenderTargetBitmap\n\nThe [**RenderTargetBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx) class can capture the XAML UI tree from a running app, and then represents a bitmap image source. After capture, that image source can be applied to other parts of the app, saved as a resource or app data by the user, or used for other scenarios. One particularly useful scenario is creating a runtime thumbnail of a XAML page for a navigation scheme, such as providing an image link from a [**Hub**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.hub.aspx) control. **RenderTargetBitmap** does have some limitations on the content that will appear in the captured image. For more info, see the API reference topic for [**RenderTargetBitmap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.rendertargetbitmap.aspx).\n\n### Image sources and scaling\n\nYou should create your image sources at several recommended sizes, to ensure that your app looks great when Windows scales it. When specifying a **Source** for an **Image**, you can use a naming convention that will automatically reference the correct resource for the current scaling. For specifics of the naming convention and more info, see [Quickstart: Using file or image resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965325).\n\nFor more info about how to design for scaling, see [UX guidelines for layout and scaling](https://msdn.microsoft.com/library/windows/apps/dn611863).\n\n### Image and ImageBrush in code\n\nIt's typical to specify Image and ImageBrush elements using XAML rather than code. This is because these elements are often the output of design tools as part of a XAML UI definition.\n\nIf you define an Image or ImageBrush using code, use the default constructors, then set the relevant source property ([**Image.Source**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.image.source.aspx) or [**ImageBrush.ImageSource**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imagebrush.imagesource.aspx)). The source properties require a [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapimage.aspx) (not a URI) when you set them using code. If your source is a stream, use the [**SetSourceAsync**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.imaging.bitmapsource.setsourceasync.aspx) method to initialize the value. If your source is a URI, which includes content in your app that uses the **ms-appx** or **ms-resource** schemes, use the [**BitmapImage**](https://msdn.microsoft.com/library/windows/apps/xaml/br243238.aspx) constructor that takes a URI. You might also consider handling the [**ImageOpened**](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.imaging.bitmapimage.imageopened.aspx) event if there are any timing issues with retrieving or decoding the image source, where you might need alternate content to display until the image source is available. For example code, see [XAML images sample](http://go.microsoft.com/fwlink/p/?linkid=238575).\n\n> **Note**&nbsp;&nbsp;If you establish images using code, you can use automatic handling for accessing unqualified resources with current scale and culture qualifiers, or you can use [**ResourceManager**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemanager.aspx) and [**ResourceMap**](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcemap.aspx) with qualifiers for culture and scale to obtain the resources directly. For more info see [Resource management system](https://msdn.microsoft.com/library/windows/apps/xaml/jj552947.aspx).\n\n## Recommendations\n\n\n\\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10. For Windows 8.1 guidance, please download the [Windows 8.1 guidelines PDF](https://go.microsoft.com/fwlink/p/?linkid=258743).\\]\n\n## Related articles\n\n**For designers**\n\n**For developers (XAML)**\n"}