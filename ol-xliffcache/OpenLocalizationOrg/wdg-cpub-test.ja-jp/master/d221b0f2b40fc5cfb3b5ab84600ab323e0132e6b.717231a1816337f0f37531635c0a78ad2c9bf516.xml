{"nodes":[{"pos":[11,26],"content":"Data protection","needQuote":true,"needEscape":true,"nodes":[{"content":"Data protection","pos":[0,15]}]},{"pos":[40,217],"content":"This article explains how to use the DataProtectionProvider class in the Windows.Security.Cryptography.DataProtection namespace to encrypt and decrypt digital data in a UWP app.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article explains how to use the DataProtectionProvider class in the Windows.Security.Cryptography.DataProtection namespace to encrypt and decrypt digital data in a UWP app.","pos":[0,177]}]},{"content":"Data protection","pos":[274,289]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[292,330]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[331,426],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"pos":[428,733],"content":"This article explains how to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataProtectionProvider<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241559)</ept> class in the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Windows.Security.Cryptography.DataProtection<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241585)</ept> namespace to encrypt and decrypt digital data in a UWP app.","source":"This article explains how to use the [**DataProtectionProvider**](https://msdn.microsoft.com/library/windows/apps/br241559) class in the [**Windows.Security.Cryptography.DataProtection**](https://msdn.microsoft.com/library/windows/apps/br241585) namespace to encrypt and decrypt digital data in a UWP app."},{"content":"You can use the data protection APIs in multiple ways:","pos":[735,789]},{"content":"To protect data to an Active Directory (AD) security principal like an AD group.","pos":[795,875]},{"content":"Any member of the group can decrypt the data.","pos":[876,921]},{"content":"To protect data to the public key contained in an X.509 certificate.","pos":[926,994]},{"content":"The owner of the private key can decrypt the data.","pos":[995,1045]},{"content":"To protect data by using a symmetric key.","pos":[1050,1091]},{"content":"This works, for example, to protect data to a non-AD principal such as Live ID.","pos":[1092,1171]},{"content":"To protect data to the credentials (password) used during logon to a website.","pos":[1176,1253]},{"content":"To protect data, when you create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataProtectionProvider<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241559)</ept> object you must specify a protection descriptor before calling <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ProtectAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241563)</ept> or <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>ProtectStreamAsync<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br241564)</ept>.","pos":[1255,1603],"source":"To protect data, when you create a [**DataProtectionProvider**](https://msdn.microsoft.com/library/windows/apps/br241559) object you must specify a protection descriptor before calling [**ProtectAsync**](https://msdn.microsoft.com/library/windows/apps/br241563) or [**ProtectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241564)."},{"content":"The following example shows possible sample protection descriptors.","pos":[1604,1671]},{"content":"Protecting static data","pos":[1676,1698]},{"pos":[1701,1976],"content":"The following example shows how to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProtectAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241563)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>UnprotectAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241565)</ept> methods to asynchronously protect static data to the current user's SID.","source":"The following example shows how to use the [**ProtectAsync**](https://msdn.microsoft.com/library/windows/apps/br241563) and [**UnprotectAsync**](https://msdn.microsoft.com/library/windows/apps/br241565) methods to asynchronously protect static data to the current user's SID."},{"content":"Protecting stream data","pos":[4838,4860]},{"pos":[4863,5150],"content":"The following example shows how to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProtectStreamAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241564)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>UnprotectStreamAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241566)</ept> methods to asynchronously protect stream data to the current user's SID.","source":"The following example shows how to use the [**ProtectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241564) and [**UnprotectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241566) methods to asynchronously protect stream data to the current user's SID."}],"content":"---\ntitle: Data protection\ndescription: This article explains how to use the DataProtectionProvider class in the Windows.Security.Cryptography.DataProtection namespace to encrypt and decrypt digital data in a UWP app.\nms.assetid: 9EE3CC45-5C44-4196-BD8B-1D64EFC5C509\n---\n\n# Data protection\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nThis article explains how to use the [**DataProtectionProvider**](https://msdn.microsoft.com/library/windows/apps/br241559) class in the [**Windows.Security.Cryptography.DataProtection**](https://msdn.microsoft.com/library/windows/apps/br241585) namespace to encrypt and decrypt digital data in a UWP app.\n\nYou can use the data protection APIs in multiple ways:\n\n-   To protect data to an Active Directory (AD) security principal like an AD group. Any member of the group can decrypt the data.\n-   To protect data to the public key contained in an X.509 certificate. The owner of the private key can decrypt the data.\n-   To protect data by using a symmetric key. This works, for example, to protect data to a non-AD principal such as Live ID.\n-   To protect data to the credentials (password) used during logon to a website.\n\nTo protect data, when you create a [**DataProtectionProvider**](https://msdn.microsoft.com/library/windows/apps/br241559) object you must specify a protection descriptor before calling [**ProtectAsync**](https://msdn.microsoft.com/library/windows/apps/br241563) or [**ProtectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241564). The following example shows possible sample protection descriptors.\n\n## Protecting static data\n\n\nThe following example shows how to use the [**ProtectAsync**](https://msdn.microsoft.com/library/windows/apps/br241563) and [**UnprotectAsync**](https://msdn.microsoft.com/library/windows/apps/br241565) methods to asynchronously protect static data to the current user's SID.\n\n```cs\nusing Windows.Security.Cryptography;\nusing Windows.Security.Cryptography.DataProtection;\nusing Windows.Storage.Streams;\nusing System.Threading.Tasks;\n\nnamespace SampleProtectAsync\n{\n    sealed partial class StaticDataProtectionApp : Application\n    {\n        public StaticDataProtectionApp()\n        {\n            // Initialize the application.\n            this.InitializeComponent();\n\n            // Protect data asynchronously.\n            this.Protect();\n        }\n\n        public async void Protect()\n        {\n            // Initialize function arguments.\n            String strMsg = \"This is a message to be protected.\";\n            String strDescriptor = \"LOCAL=user\";\n            BinaryStringEncoding encoding = BinaryStringEncoding.Utf8;\n\n            // Protect a message to the local user.\n            IBuffer buffProtected = await this.SampleProtectAsync(\n                strMsg,\n                strDescriptor,\n                encoding);\n\n            // Decrypt the previously protected message.\n            String strDecrypted = await this.SampleUnprotectData(\n                buffProtected,\n                encoding);\n        }\n\n        public async Task<IBuffer> SampleProtectAsync(\n            String strMsg,\n            String strDescriptor,\n            BinaryStringEncoding encoding)\n        {\n            // Create a DataProtectionProvider object for the specified descriptor.\n            DataProtectionProvider Provider = new DataProtectionProvider(strDescriptor);\n\n            // Encode the plaintext input message to a buffer.\n            encoding = BinaryStringEncoding.Utf8;\n            IBuffer buffMsg = CryptographicBuffer.ConvertStringToBinary(strMsg, encoding);\n\n            // Encrypt the message.\n            IBuffer buffProtected = await Provider.ProtectAsync(buffMsg);\n\n            // Execution of the SampleProtectAsync function resumes here\n            // after the awaited task (Provider.ProtectAsync) completes.\n            return buffProtected;\n        }\n\n        public async Task<String> SampleUnprotectData(\n            IBuffer buffProtected,\n            BinaryStringEncoding encoding)\n        {\n            // Create a DataProtectionProvider object.\n            DataProtectionProvider Provider = new DataProtectionProvider();\n\n            // Decrypt the protected message specified on input.\n            IBuffer buffUnprotected = await Provider.UnprotectAsync(buffProtected);\n\n            // Execution of the SampleUnprotectData method resumes here\n            // after the awaited task (Provider.UnprotectAsync) completes\n            // Convert the unprotected message from an IBuffer object to a string.\n            String strClearText = CryptographicBuffer.ConvertBinaryToString(encoding, buffUnprotected);\n\n            // Return the plaintext string.\n            return strClearText;\n        }\n    }\n}\n```\n\n## Protecting stream data\n\n\nThe following example shows how to use the [**ProtectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241564) and [**UnprotectStreamAsync**](https://msdn.microsoft.com/library/windows/apps/br241566) methods to asynchronously protect stream data to the current user's SID.\n\n```cs\nusing Windows.Security.Cryptography;\nusing Windows.Security.Cryptography.DataProtection;\nusing Windows.Storage.Streams;\nusing System.Threading.Tasks;\n\nnamespace SampleProtectStreamAsync\n{\n\n    sealed partial class StreamDataProtectionApp : Application\n    {\n        public StreamDataProtectionApp()\n        {\n            // Initialize the application.\n            this.InitializeComponent();\n\n            // Protect a stream synchronously\n            this.ProtectData();\n         }\n\n        public async void ProtectData()\n        {\n            // Initialize function arguments.\n            String strDescriptor = \"LOCAL=user\";\n            String strLoremIpsum = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse elementum \"\n                + \"ullamcorper eros, vitae gravida nunc consequat sollicitudin. Vivamus lacinia, \"\n                + \"diam a molestie porttitor, sapien neque volutpat est, non suscipit leo dolor \"\n                + \"sit amet nisl. Praesent tincidunt tincidunt quam ut pharetra. Sed tincidunt \"\n                + \"sit amet nisl. Praesent tincidunt tincidunt quam ut pharetra. Sed tincidunt \"\n                + \"porttitor massa, at convallis dolor dictum suscipit. Nullam vitae lectus in \"\n                + \"lorem scelerisque convallis sed scelerisque orci. Praesent sed ligula vel erat \"\n                + \"eleifend tempus. Nullam dignissim aliquet mauris a aliquet. Nulla augue justo, \"\n                + \"posuere a consectetur ut, suscipit et sem. Proin eu libero ut felis tincidunt \"\n                + \"interdum. Curabitur vulputate eros nec sapien elementum ut dapibus eros \"\n                + \"dapibus. Suspendisse quis dui dolor, non imperdiet leo. In consequat, odio nec \"\n                + \"aliquam tincidunt, magna enim ultrices massa, ac pharetra est urna at arcu. \"\n                + \"Nunc suscipit, velit non interdum suscipit, lectus lectus auctor tortor, quis \"\n                + \"ultrices orci felis in dolor. Etiam congue pretium libero eu vestibulum. \"\n                + \"Mauris bibendum erat eleifend nibh consequat eu pharetra metus convallis. \"\n                + \"Morbi sem eros, venenatis vel vestibulum consequat, hendrerit rhoncus purus.\";\n            BinaryStringEncoding encoding = BinaryStringEncoding.Utf16BE;\n\n            // Encrypt the data as a stream.\n            IBuffer buffProtected = await this.SampleDataProtectionStream(\n                strDescriptor,\n                strLoremIpsum,\n                encoding);\n\n            // Decrypt a data stream.\n            String strUnprotected = await this.SampleDataUnprotectStream(\n                buffProtected,\n                encoding);\n        }\n\n        public async Task<IBuffer> SampleDataProtectionStream(\n            String descriptor,\n            String strMsg,\n            BinaryStringEncoding encoding)\n        {\n            // Create a DataProtectionProvider object for the specified descriptor.\n            DataProtectionProvider Provider = new DataProtectionProvider(descriptor);\n\n            // Convert the input string to a buffer.\n            IBuffer buffMsg = CryptographicBuffer.ConvertStringToBinary(strMsg, encoding);\n\n            // Create a random access stream to contain the plaintext message.\n            InMemoryRandomAccessStream inputData = new InMemoryRandomAccessStream();\n\n            // Create a random access stream to contain the encrypted message.\n            InMemoryRandomAccessStream protectedData = new InMemoryRandomAccessStream();\n\n            // Retrieve an IOutputStream object and fill it with the input (plaintext) data.\n            IOutputStream outputStream = inputData.GetOutputStreamAt(0);\n            DataWriter writer = new DataWriter(outputStream);\n            writer.WriteBuffer(buffMsg);\n            await writer.StoreAsync();\n            await outputStream.FlushAsync();\n\n            // Retrieve an IInputStream object from which you can read the input data.\n            IInputStream source = inputData.GetInputStreamAt(0);\n\n            // Retrieve an IOutputStream object and fill it with encrypted data.\n            IOutputStream dest = protectedData.GetOutputStreamAt(0);\n            await Provider.ProtectStreamAsync(source, dest);\n            await dest.FlushAsync();\n\n            //Verify that the protected data does not match the original\n            DataReader reader1 = new DataReader(inputData.GetInputStreamAt(0));\n            DataReader reader2 = new DataReader(protectedData.GetInputStreamAt(0));\n            await reader1.LoadAsync((uint)inputData.Size);\n            await reader2.LoadAsync((uint)protectedData.Size);\n            IBuffer buffOriginalData = reader1.ReadBuffer((uint)inputData.Size);\n            IBuffer buffProtectedData = reader2.ReadBuffer((uint)protectedData.Size);\n\n            if (CryptographicBuffer.Compare(buffOriginalData, buffProtectedData))\n            {\n                throw new Exception(\"ProtectStreamAsync returned unprotected data\");\n            }\n\n            // Return the encrypted data.\n            return buffProtectedData;\n        }\n\n        public async Task<String> SampleDataUnprotectStream(\n            IBuffer buffProtected,\n            BinaryStringEncoding encoding)\n        {\n            // Create a DataProtectionProvider object.\n            DataProtectionProvider Provider = new DataProtectionProvider();\n\n            // Create a random access stream to contain the encrypted message.\n            InMemoryRandomAccessStream inputData = new InMemoryRandomAccessStream();\n\n            // Create a random access stream to contain the decrypted data.\n            InMemoryRandomAccessStream unprotectedData = new InMemoryRandomAccessStream();\n\n            // Retrieve an IOutputStream object and fill it with the input (encrypted) data.\n            IOutputStream outputStream = inputData.GetOutputStreamAt(0);\n            DataWriter writer = new DataWriter(outputStream);\n            writer.WriteBuffer(buffProtected);\n            await writer.StoreAsync();\n            await outputStream.FlushAsync();\n\n            // Retrieve an IInputStream object from which you can read the input (encrypted) data.\n            IInputStream source = inputData.GetInputStreamAt(0);\n\n            // Retrieve an IOutputStream object and fill it with decrypted data.\n            IOutputStream dest = unprotectedData.GetOutputStreamAt(0);\n            await Provider.UnprotectStreamAsync(source, dest);\n            await dest.FlushAsync();\n\n            // Write the decrypted data to an IBuffer object.\n            DataReader reader2 = new DataReader(unprotectedData.GetInputStreamAt(0));\n            await reader2.LoadAsync((uint)unprotectedData.Size);\n            IBuffer buffUnprotectedData = reader2.ReadBuffer((uint)unprotectedData.Size);\n\n            // Convert the IBuffer object to a string using the same encoding that was\n            // used previously to conver the plaintext string (before encryption) to an\n            // IBuffer object.\n            String strUnprotected = CryptographicBuffer.ConvertBinaryToString(encoding, buffUnprotectedData);\n\n            // Return the decrypted data.\n            return strUnprotected;\n        }\n    }\n}\n```\n\n \n\n \n\n\n\n\n"}