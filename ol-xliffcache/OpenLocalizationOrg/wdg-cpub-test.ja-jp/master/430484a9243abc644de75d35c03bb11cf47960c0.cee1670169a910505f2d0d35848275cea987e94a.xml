{"nodes":[{"pos":[32,170],"content":"This article is an overview of the concepts and technologies related to accessibility scenarios for Universal Windows Platform (UWP) apps.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article is an overview of the concepts and technologies related to accessibility scenarios for Universal Windows Platform (UWP) apps.","pos":[0,138]}]},{"pos":[227,249],"content":"Accessibility overview","needQuote":true,"needEscape":true,"nodes":[{"content":"Accessibility overview","pos":[0,22]}]},{"content":"Accessibility overview","pos":[308,330]},{"content":"This article is an overview of the concepts and technologies related to accessibility scenarios for Universal Windows Platform (UWP) apps.","pos":[337,475]},{"content":"Accessibility and your app","pos":[600,626]},{"content":"There are many possible disabilities or impairments, including limitations in mobility, vision, color perception, hearing, speech, cognition, and literacy.","pos":[629,784]},{"content":"However, you can address most requirements by following the guidelines offered here.","pos":[785,869]},{"content":"This means providing:","pos":[870,891]},{"content":"Support for keyboard interactions and screen readers.","pos":[895,948]},{"content":"Support for user customization, such as font, zoom setting (magnification), color, and high-contrast settings.","pos":[951,1061]},{"content":"Alternatives or supplements for parts of your UI.","pos":[1064,1113]},{"content":"Controls for XAML provide built-in keyboard support and support for assistive technologies such as screen readers, which take advantage of accessibility frameworks that already support UWP apps, HTML, and other UI technologies.","pos":[1115,1342]},{"content":"This built-in support enables a basic level of accessibility that you can customize with very little work, by setting just a handful of properties.","pos":[1343,1490]},{"content":"If you are creating your own custom XAML components and controls, you can also add similar support to those controls by using the concept of an <bpt id=\"p1\">*</bpt>automation peer<ept id=\"p1\">*</ept>.","pos":[1491,1653],"source":" If you are creating your own custom XAML components and controls, you can also add similar support to those controls by using the concept of an *automation peer*."},{"content":"In addition, data binding, style, and template features make it easy to implement support for dynamic changes to display settings and text for alternative UIs.","pos":[1655,1814]},{"content":"UI Automation","pos":[1900,1913]},{"content":"Accessibility support comes primarily from the integrated support for the Microsoft UI Automation framework.","pos":[1916,2024]},{"content":"That support is provided through base classes and the built-in behavior of the class implementation for control types, and an interface representation of the UI Automation provider API.","pos":[2025,2210]},{"content":"Each control class uses the UI Automation concepts of automation peers and automation patterns that report the control's role and content to UI Automation clients.","pos":[2211,2374]},{"content":"The app is treated as a top-level window by UI Automation, and through the UI Automation framework all the accessibility-relevant content within that app window is available to a UI Automation client.","pos":[2375,2575]},{"content":"For more info about UI Automation, see <bpt id=\"p1\">[</bpt>UI Automation Overview<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/Ee684076)</ept>.","pos":[2576,2701],"source":" For more info about UI Automation, see [UI Automation Overview](https://msdn.microsoft.com/library/windows/desktop/Ee684076)."},{"content":"Assistive technology","pos":[2808,2828]},{"content":"Many user accessibility needs are met by assistive technology products installed by the user or by tools and settings provided by the operating system.","pos":[2831,2982]},{"content":"This includes functionality such as screen readers, screen magnification, and high-contrast settings.","pos":[2983,3084]},{"content":"Assistive technology products include a wide variety of software and hardware.","pos":[3086,3164]},{"content":"These products work through the standard keyboard interface and accessibility frameworks that report information about the content and structure of a UI to screen readers and other assistive technologies.","pos":[3165,3369]},{"content":"Examples of assistive technology products include:","pos":[3370,3420]},{"content":"The On-Screen Keyboard, which enables people to use a pointer in place of a keyboard to type text.","pos":[3424,3522]},{"content":"Voice-recognition software, which converts spoken words into typed text.","pos":[3525,3597]},{"content":"Screen readers, which convert text into spoken words or other forms such as Braille.","pos":[3600,3684]},{"content":"The Narrator screen reader, which is specifically part of Windows.","pos":[3687,3753]},{"content":"Narrator has a touch mode, which can perform screen reading tasks by processing touch gestures, for when there is no keyboard available.","pos":[3754,3890]},{"content":"Programs or settings that adjust the display or areas of it, for example high contrast themes, dots per inch (dpi) settings of the display, or the Magnifier tool.","pos":[3893,4055]},{"content":"Apps that have good keyboard and screen reader support usually work well with various assistive technology products.","pos":[4057,4173]},{"content":"In many cases, a UWP app works with these products without additional modification of information or structure.","pos":[4174,4285]},{"content":"However, you may want to modify some settings for optimal accessibility experience or to implement additional support.","pos":[4286,4404]},{"pos":[4406,4577],"content":"Some of the options that you can use for testing basic accessibility scenarios with assistive technologies are listed in <bpt id=\"p1\">[</bpt>Accessibility testing<ept id=\"p1\">](accessibility-testing.md)</ept>.","source":"Some of the options that you can use for testing basic accessibility scenarios with assistive technologies are listed in [Accessibility testing](accessibility-testing.md)."},{"content":"Screen reader support and basic accessibility information","pos":[4795,4852]},{"content":"Screen readers provide access to the text in an app by rendering it in some other format, such as spoken language or Braille output.","pos":[4855,4987]},{"content":"The exact behavior of a screen reader depends on the software and on the user's configuration of it.","pos":[4988,5088]},{"content":"For example, some screen readers read the entire app UI when the user starts or switches to the app being viewed, which enables the user to receive all of the available informational content before attempting to navigate it.","pos":[5090,5314]},{"content":"Some screen readers also read the text associated with an individual control when it receives focus during tab navigation.","pos":[5315,5437]},{"content":"This enables users to orient themselves as they navigate among the input controls of an application.","pos":[5438,5538]},{"content":"Narrator is an example of a screen reader that provides both behaviors, depending on user choice.","pos":[5539,5636]},{"content":"The most important information that a screen reader or any other assistive technology needs in order to help users understand or navigate an app is an <bpt id=\"p1\">*</bpt>accessible name<ept id=\"p1\">*</ept> for the element parts of the app.","pos":[5638,5840],"source":"The most important information that a screen reader or any other assistive technology needs in order to help users understand or navigate an app is an *accessible name* for the element parts of the app."},{"content":"In many cases, a control or element already has an accessible name that is calculated from other property values that you have otherwise provided.","pos":[5841,5987]},{"content":"The most common case in which you can use an already-calculated name is with an element that supports and displays inner text.","pos":[5988,6114]},{"content":"For other elements, you sometimes need to account for other ways to provide an accessible name by following best practices for element structure.","pos":[6115,6260]},{"content":"And sometimes you need to provide a name that is explicitly intended as the accessible name for app accessibility.","pos":[6261,6375]},{"content":"For a listing of how many of these calculated values work in common UI elements, and for more info about accessible names in general, see <bpt id=\"p1\">[</bpt>Basic accessibility information<ept id=\"p1\">](basic-accessibility-information.md)</ept>.","pos":[6376,6584],"source":" For a listing of how many of these calculated values work in common UI elements, and for more info about accessible names in general, see [Basic accessibility information](basic-accessibility-information.md)."},{"content":"There are several other automation properties available (including the keyboard properties described in the next section).","pos":[6586,6708]},{"content":"However, not all screen readers support all automation properties.","pos":[6709,6775]},{"content":"In general, you should set all appropriate automation properties and test to provide the widest possible support for screen readers.","pos":[6776,6908]},{"content":"Keyboard support","pos":[7003,7019]},{"content":"To provide good keyboard support, you must ensure that every part of your application can be used with a keyboard.","pos":[7022,7136]},{"content":"If your app uses mostly the standard controls and doesn't use any custom controls, you are most of the way there already.","pos":[7137,7258]},{"content":"The basic XAML control model provides built-in keyboard support including tab navigation, text input, and control-specific support.","pos":[7259,7390]},{"content":"The elements that serve as layout containers (such as panels) use the layout order to establish a default tab order.","pos":[7391,7507]},{"content":"That order is often the correct tab order to use for an accessible representation of the UI.","pos":[7508,7600]},{"content":"If you use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242868)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>GridView<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> controls to display data, they provide built-in arrow-key navigation.","pos":[7601,7830],"source":" If you use [**ListBox**](https://msdn.microsoft.com/library/windows/apps/BR242868) and [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705) controls to display data, they provide built-in arrow-key navigation."},{"content":"Or if you use a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209265)</ept> control, it already handles the Spacebar or Enter keys for button activation.","pos":[7831,7995],"source":" Or if you use a [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) control, it already handles the Spacebar or Enter keys for button activation."},{"pos":[7997,8170],"content":"For more info about all the aspects of keyboard support, including tab order and key-based activation or navigation, see <bpt id=\"p1\">[</bpt>Keyboard accessibility<ept id=\"p1\">](keyboard-accessibility.md)</ept>.","source":"For more info about all the aspects of keyboard support, including tab order and key-based activation or navigation, see [Keyboard accessibility](keyboard-accessibility.md)."},{"content":"Media and captioning","pos":[8277,8297]},{"content":"You typically display audiovisual media through a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MediaElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242926)</ept> object.","pos":[8300,8434],"source":"You typically display audiovisual media through a [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/BR242926) object."},{"content":"You can use <bpt id=\"p1\">**</bpt>MediaElement<ept id=\"p1\">**</ept> APIs to control the media playback.","pos":[8435,8499],"source":" You can use **MediaElement** APIs to control the media playback."},{"content":"For accessibility purposes, provide controls that enable users to play, pause, and stop the media as needed.","pos":[8500,8608]},{"content":"Sometimes, media includes additional components that are intended for accessibility, such as captioning or alternative audio tracks that include narrative descriptions.","pos":[8609,8777]},{"content":"Accessible text","pos":[8869,8884]},{"content":"Three main aspects of text are relevant to accessibility:","pos":[8887,8944]},{"content":"Tools must determine whether the text is to be read as part of a tab-sequence traversal or only as part of an overall document representation.","pos":[8948,9090]},{"content":"You can help control this determination by choosing the appropriate element for displaying the text or by adjusting properties of those text elements.","pos":[9091,9241]},{"content":"Each text element has a specific purpose, and that purpose often has a corresponding UI Automation role.","pos":[9242,9346]},{"content":"Using the wrong element can result in reporting the wrong role to UI Automation and creating a confusing experience for an assistive technology user.","pos":[9347,9496]},{"content":"Many users have sight limitations that make it difficult for them to read text unless it has adequate contrast against the background.","pos":[9499,9633]},{"content":"How this impacts the user is not intuitive for app designers who do not have that sight limitation.","pos":[9634,9733]},{"content":"For example, for color-blind users, poor color choices in the design can prevent some users from being able to read the text.","pos":[9734,9859]},{"content":"Accessibility recommendations that were originally made for web content define standards for contrast that can avoid these problems in apps as well.","pos":[9860,10008]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Accessible text requirements<ept id=\"p1\">](accessible-text-requirements.md)</ept>.","pos":[10009,10092],"source":" For more info, see [Accessible text requirements](accessible-text-requirements.md)."},{"content":"Many users have difficulty reading text that is simply too small.","pos":[10095,10160]},{"content":"You can prevent this issue by making the text in your app's UI reasonably large in the first place.","pos":[10161,10260]},{"content":"However, that's challenging for apps that display large quantities of text, or text interspersed with other visual elements.","pos":[10261,10385]},{"content":"In such cases, make sure that the app correctly interacts with the system features that can scale up the display, so that any text in apps scales up along with it.","pos":[10386,10549]},{"content":"(Some users change dpi values as an accessibility option.","pos":[10550,10607]},{"content":"That option is available from <bpt id=\"p1\">**</bpt>Make things on the screen larger<ept id=\"p1\">**</ept> in <bpt id=\"p2\">**</bpt>Ease of Access<ept id=\"p2\">**</ept>, which redirects to a <bpt id=\"p3\">**</bpt>Control Panel<ept id=\"p3\">**</ept> UI for <bpt id=\"p4\">**</bpt>Appearance and Personalization<ept id=\"p4\">**</ept><ph id=\"ph1\"> / </ph><bpt id=\"p5\">**</bpt>Display<ept id=\"p5\">**</ept>.)","pos":[10608,10794],"source":" That option is available from **Make things on the screen larger** in **Ease of Access**, which redirects to a **Control Panel** UI for **Appearance and Personalization** / **Display**.)"},{"content":"Supporting high-contrast themes","pos":[10934,10965]},{"content":"UI controls use a visual representation that is defined as part of a XAML resource dictionary of themes.","pos":[10968,11072]},{"content":"One or more of these themes is specifically used when the system is set for high contrast.","pos":[11073,11163]},{"content":"When the user switches to high contrast, by looking up the appropriate theme from a resource dictionary dynamically, all your UI controls will use an appropriate high-contrast theme too.","pos":[11164,11350]},{"content":"Just make sure that you haven't disabled the themes by specifying an explicit style or using another styling technique that prevents the high-contrast themes from loading and overriding your style changes.","pos":[11351,11556]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>High-contrast themes<ept id=\"p1\">](high-contrast-themes.md)</ept>.","pos":[11557,11624],"source":" For more info, see [High-contrast themes](high-contrast-themes.md)."},{"content":"Design for alternative UI","pos":[11746,11771]},{"content":"When you design your apps, consider how they may be used by people with limited mobility, vision, and hearing.","pos":[11774,11884]},{"content":"Because assistive technology products make extensive use of standard UI, it is particularly important to provide good keyboard and screen-reader support even if you make no other adjustments for accessibility.","pos":[11885,12094]},{"content":"In many cases, you can convey essential information by using multiple techniques to widen your audience.","pos":[12096,12200]},{"content":"For example, you can highlight information using both icon and color information to help users who are color blind, and you can display visual alerts along with sound effects to help users who are hearing impaired.","pos":[12201,12415]},{"content":"If necessary, you can provide alternative, accessible user interface elements that completely remove nonessential elements and animations, and provide other simplifications to streamline the user experience.","pos":[12417,12624]},{"content":"The following code example demonstrates how to display one <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>UserControl<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR227647)</ept> instance in place of another depending on a user setting.","pos":[12625,12817],"source":" The following code example demonstrates how to display one [**UserControl**](https://msdn.microsoft.com/library/windows/apps/BR227647) instance in place of another depending on a user setting."},{"content":"XAML","pos":[12819,12823]},{"content":"Visual Basic","pos":[13108,13120]},{"content":"C","pos":[13423,13424]},{"content":"Verification and publishing","pos":[13838,13865]},{"pos":[13868,14004],"content":"For more info about accessibility declarations and publishing your app, see <bpt id=\"p1\">[</bpt>Accessibility in the Store<ept id=\"p1\">](accessibility-in-the-store.md)</ept>.","source":"For more info about accessibility declarations and publishing your app, see [Accessibility in the Store](accessibility-in-the-store.md)."},{"pos":[14008,14088],"content":"[!NOTE]\nDeclaring the app as accessible is only relevant to the Windows Store.","leadings":["","> "],"nodes":[{"content":"Declaring the app as accessible is only relevant to the Windows Store.","pos":[8,78]}]},{"content":"Assistive technology support in custom controls","pos":[14276,14323]},{"content":"When you create a custom control, we recommend that you also implement or extend one or more <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>AutomationPeer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209185)</ept> subclasses to provide accessibility support.","pos":[14326,14542],"source":"When you create a custom control, we recommend that you also implement or extend one or more [**AutomationPeer**](https://msdn.microsoft.com/library/windows/apps/BR209185) subclasses to provide accessibility support."},{"content":"In some cases, so long as you use the same peer class as was used by the base control class, the automation support for your derived class is adequate at a basic level.","pos":[14543,14711]},{"content":"However, you should test this, and implementing a peer is still recommended as a best practice so that the peer can correctly report the class name of your new control class.","pos":[14712,14886]},{"content":"Implementing a custom automation peer has a few steps involved.","pos":[14887,14950]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Custom automation peers<ept id=\"p1\">](custom-automation-peers.md)</ept>.","pos":[14951,15024],"source":" For more info, see [Custom automation peers](custom-automation-peers.md)."},{"content":"Assistive technology support in apps that support XAML / Microsoft DirectX interop","pos":[15317,15399]},{"content":"Microsoft DirectX content that's hosted in a XAML UI (using <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SwapChainPanel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn252834)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SurfaceImageSource<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh702041)</ept>) is not accessible by default.","pos":[15402,15657],"source":"Microsoft DirectX content that's hosted in a XAML UI (using [**SwapChainPanel**](https://msdn.microsoft.com/library/windows/apps/Dn252834) or [**SurfaceImageSource**](https://msdn.microsoft.com/library/windows/apps/Hh702041)) is not accessible by default."},{"content":"The <bpt id=\"p1\">[</bpt>XAML SwapChainPanel DirectX interop sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=309155)</ept> shows how to create UI Automation peers for the hosted DirectX content.","pos":[15658,15827],"source":" The [XAML SwapChainPanel DirectX interop sample](http://go.microsoft.com/fwlink/p/?LinkID=309155) shows how to create UI Automation peers for the hosted DirectX content."},{"content":"This technique makes the hosted content accessible through UI Automation.","pos":[15828,15901]},{"content":"Related topics","pos":[15934,15948]},{"content":"Windows.UI.Xaml.Automation","pos":[15956,15982]},{"content":"Design for accessibility","pos":[16047,16071]},{"content":"XAML accessibility sample","pos":[16134,16159]}],"content":"---\nauthor: Xansky\nDescription: This article is an overview of the concepts and technologies related to accessibility scenarios for Universal Windows Platform (UWP) apps.\nms.assetid: AA053196-F331-4CBE-B032-4E9CBEAC699C\ntitle: Accessibility overview\nlabel: Accessibility overview\ntemplate: detail.hbs\n---\n\n# Accessibility overview  \n\n\n\n\nThis article is an overview of the concepts and technologies related to accessibility scenarios for Universal Windows Platform (UWP) apps.\n\n<span id=\"Accessibility_and_your_app\"/>\n<span id=\"accessibility_and_your_app\"/>\n<span id=\"ACCESSIBILITY_AND_YOUR_APP\"/>\n## Accessibility and your app  \nThere are many possible disabilities or impairments, including limitations in mobility, vision, color perception, hearing, speech, cognition, and literacy. However, you can address most requirements by following the guidelines offered here. This means providing:\n\n* Support for keyboard interactions and screen readers.\n* Support for user customization, such as font, zoom setting (magnification), color, and high-contrast settings.\n* Alternatives or supplements for parts of your UI.\n\nControls for XAML provide built-in keyboard support and support for assistive technologies such as screen readers, which take advantage of accessibility frameworks that already support UWP apps, HTML, and other UI technologies. This built-in support enables a basic level of accessibility that you can customize with very little work, by setting just a handful of properties. If you are creating your own custom XAML components and controls, you can also add similar support to those controls by using the concept of an *automation peer*.\n\nIn addition, data binding, style, and template features make it easy to implement support for dynamic changes to display settings and text for alternative UIs.\n\n<span id=\"UI_Automation\"/>\n<span id=\"ui_automation\"/>\n<span id=\"UI_AUTOMATION\"/>\n## UI Automation  \nAccessibility support comes primarily from the integrated support for the Microsoft UI Automation framework. That support is provided through base classes and the built-in behavior of the class implementation for control types, and an interface representation of the UI Automation provider API. Each control class uses the UI Automation concepts of automation peers and automation patterns that report the control's role and content to UI Automation clients. The app is treated as a top-level window by UI Automation, and through the UI Automation framework all the accessibility-relevant content within that app window is available to a UI Automation client. For more info about UI Automation, see [UI Automation Overview](https://msdn.microsoft.com/library/windows/desktop/Ee684076).\n\n<span id=\"Assistive_technology\"/>\n<span id=\"assistive_technology\"/>\n<span id=\"ASSISTIVE_TECHNOLOGY\"/>\n## Assistive technology  \nMany user accessibility needs are met by assistive technology products installed by the user or by tools and settings provided by the operating system. This includes functionality such as screen readers, screen magnification, and high-contrast settings.\n\nAssistive technology products include a wide variety of software and hardware. These products work through the standard keyboard interface and accessibility frameworks that report information about the content and structure of a UI to screen readers and other assistive technologies. Examples of assistive technology products include:\n\n* The On-Screen Keyboard, which enables people to use a pointer in place of a keyboard to type text.\n* Voice-recognition software, which converts spoken words into typed text.\n* Screen readers, which convert text into spoken words or other forms such as Braille.\n* The Narrator screen reader, which is specifically part of Windows. Narrator has a touch mode, which can perform screen reading tasks by processing touch gestures, for when there is no keyboard available.\n* Programs or settings that adjust the display or areas of it, for example high contrast themes, dots per inch (dpi) settings of the display, or the Magnifier tool.\n\nApps that have good keyboard and screen reader support usually work well with various assistive technology products. In many cases, a UWP app works with these products without additional modification of information or structure. However, you may want to modify some settings for optimal accessibility experience or to implement additional support.\n\nSome of the options that you can use for testing basic accessibility scenarios with assistive technologies are listed in [Accessibility testing](accessibility-testing.md).\n\n<span id=\"Screen_reader_support_and_basic_accessibility_information\"/>\n<span id=\"screen_reader_support_and_basic_accessibility_information\"/>\n<span id=\"SCREEN_READER_SUPPORT_AND_BASIC_ACCESSIBILITY_INFORMATION\"/>\n## Screen reader support and basic accessibility information  \nScreen readers provide access to the text in an app by rendering it in some other format, such as spoken language or Braille output. The exact behavior of a screen reader depends on the software and on the user's configuration of it.\n\nFor example, some screen readers read the entire app UI when the user starts or switches to the app being viewed, which enables the user to receive all of the available informational content before attempting to navigate it. Some screen readers also read the text associated with an individual control when it receives focus during tab navigation. This enables users to orient themselves as they navigate among the input controls of an application. Narrator is an example of a screen reader that provides both behaviors, depending on user choice.\n\nThe most important information that a screen reader or any other assistive technology needs in order to help users understand or navigate an app is an *accessible name* for the element parts of the app. In many cases, a control or element already has an accessible name that is calculated from other property values that you have otherwise provided. The most common case in which you can use an already-calculated name is with an element that supports and displays inner text. For other elements, you sometimes need to account for other ways to provide an accessible name by following best practices for element structure. And sometimes you need to provide a name that is explicitly intended as the accessible name for app accessibility. For a listing of how many of these calculated values work in common UI elements, and for more info about accessible names in general, see [Basic accessibility information](basic-accessibility-information.md).\n\nThere are several other automation properties available (including the keyboard properties described in the next section). However, not all screen readers support all automation properties. In general, you should set all appropriate automation properties and test to provide the widest possible support for screen readers.\n\n<span id=\"Keyboard_support\"/>\n<span id=\"keyboard_support\"/>\n<span id=\"KEYBOARD_SUPPORT\"/>\n## Keyboard support  \nTo provide good keyboard support, you must ensure that every part of your application can be used with a keyboard. If your app uses mostly the standard controls and doesn't use any custom controls, you are most of the way there already. The basic XAML control model provides built-in keyboard support including tab navigation, text input, and control-specific support. The elements that serve as layout containers (such as panels) use the layout order to establish a default tab order. That order is often the correct tab order to use for an accessible representation of the UI. If you use [**ListBox**](https://msdn.microsoft.com/library/windows/apps/BR242868) and [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705) controls to display data, they provide built-in arrow-key navigation. Or if you use a [**Button**](https://msdn.microsoft.com/library/windows/apps/BR209265) control, it already handles the Spacebar or Enter keys for button activation.\n\nFor more info about all the aspects of keyboard support, including tab order and key-based activation or navigation, see [Keyboard accessibility](keyboard-accessibility.md).\n\n<span id=\"Media_and_captioning\"/>\n<span id=\"media_and_captioning\"/>\n<span id=\"MEDIA_AND_CAPTIONING\"/>\n## Media and captioning  \nYou typically display audiovisual media through a [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/BR242926) object. You can use **MediaElement** APIs to control the media playback. For accessibility purposes, provide controls that enable users to play, pause, and stop the media as needed. Sometimes, media includes additional components that are intended for accessibility, such as captioning or alternative audio tracks that include narrative descriptions.\n\n<span id=\"Accessible_text\"/>\n<span id=\"accessible_text\"/>\n<span id=\"ACCESSIBLE_TEXT\"/>\n## Accessible text  \nThree main aspects of text are relevant to accessibility:\n\n* Tools must determine whether the text is to be read as part of a tab-sequence traversal or only as part of an overall document representation. You can help control this determination by choosing the appropriate element for displaying the text or by adjusting properties of those text elements. Each text element has a specific purpose, and that purpose often has a corresponding UI Automation role. Using the wrong element can result in reporting the wrong role to UI Automation and creating a confusing experience for an assistive technology user.\n* Many users have sight limitations that make it difficult for them to read text unless it has adequate contrast against the background. How this impacts the user is not intuitive for app designers who do not have that sight limitation. For example, for color-blind users, poor color choices in the design can prevent some users from being able to read the text. Accessibility recommendations that were originally made for web content define standards for contrast that can avoid these problems in apps as well. For more info, see [Accessible text requirements](accessible-text-requirements.md).\n* Many users have difficulty reading text that is simply too small. You can prevent this issue by making the text in your app's UI reasonably large in the first place. However, that's challenging for apps that display large quantities of text, or text interspersed with other visual elements. In such cases, make sure that the app correctly interacts with the system features that can scale up the display, so that any text in apps scales up along with it. (Some users change dpi values as an accessibility option. That option is available from **Make things on the screen larger** in **Ease of Access**, which redirects to a **Control Panel** UI for **Appearance and Personalization** / **Display**.)\n\n<span id=\"Supporting_high-contrast_themes\"/>\n<span id=\"supporting_high-contrast_themes\"/>\n<span id=\"SUPPORTING_HIGH-CONTRAST_THEMES\"/>\n## Supporting high-contrast themes  \nUI controls use a visual representation that is defined as part of a XAML resource dictionary of themes. One or more of these themes is specifically used when the system is set for high contrast. When the user switches to high contrast, by looking up the appropriate theme from a resource dictionary dynamically, all your UI controls will use an appropriate high-contrast theme too. Just make sure that you haven't disabled the themes by specifying an explicit style or using another styling technique that prevents the high-contrast themes from loading and overriding your style changes. For more info, see [High-contrast themes](high-contrast-themes.md).\n\n<span id=\"Design_for_alternative_UI\"/>\n<span id=\"design_for_alternative_ui\"/>\n<span id=\"DESIGN_FOR_ALTERNATIVE_UI\"/>\n## Design for alternative UI  \nWhen you design your apps, consider how they may be used by people with limited mobility, vision, and hearing. Because assistive technology products make extensive use of standard UI, it is particularly important to provide good keyboard and screen-reader support even if you make no other adjustments for accessibility.\n\nIn many cases, you can convey essential information by using multiple techniques to widen your audience. For example, you can highlight information using both icon and color information to help users who are color blind, and you can display visual alerts along with sound effects to help users who are hearing impaired.\n\nIf necessary, you can provide alternative, accessible user interface elements that completely remove nonessential elements and animations, and provide other simplifications to streamline the user experience. The following code example demonstrates how to display one [**UserControl**](https://msdn.microsoft.com/library/windows/apps/BR227647) instance in place of another depending on a user setting.\n\nXAML\n```xml\n<StackPanel x:Name=\"LayoutRoot\" Background=\"White\">\n\n  <CheckBox x:Name=\"ShowAccessibleUICheckBox\" Click=\"ShowAccessibleUICheckBox_Click\">\n    Show Accessible UI\n  </CheckBox>\n\n  <UserControl x:Name=\"ContentBlock\">\n    <local:ContentPage/>\n  </UserControl>\n\n</StackPanel>\n```\n\nVisual Basic\n```vb\nPrivate Sub ShowAccessibleUICheckBox_Click(ByVal sender As Object,\n    ByVal e As RoutedEventArgs)\n\n    If (ShowAccessibleUICheckBox.IsChecked.Value) Then\n        ContentBlock.Content = New AccessibleContentPage()\n    Else\n        ContentBlock.Content = New ContentPage()\n    End If\nEnd Sub\n```\n\nC#\n```csharp\nprivate void ShowAccessibleUICheckBox_Click(object sender, RoutedEventArgs e)\n{\n    if ((sender as CheckBox).IsChecked.Value)\n    {\n        ContentBlock.Content = new AccessibleContentPage();\n    }\n    else\n    {\n        ContentBlock.Content = new ContentPage();\n    }\n}\n```\n\n<span id=\"Verification_and_publishing\"/>\n<span id=\"verification_and_publishing\"/>\n<span id=\"VERIFICATION_AND_PUBLISHING\"/>\n## Verification and publishing  \nFor more info about accessibility declarations and publishing your app, see [Accessibility in the Store](accessibility-in-the-store.md).\n\n> [!NOTE]\n> Declaring the app as accessible is only relevant to the Windows Store.\n\n<span id=\"Assistive_technology_support_in_custom_controls\"/>\n<span id=\"assistive_technology_support_in_custom_controls\"/>\n<span id=\"ASSISTIVE_TECHNOLOGY_SUPPORT_IN_CUSTOM_CONTROLS\"/>\n## Assistive technology support in custom controls  \nWhen you create a custom control, we recommend that you also implement or extend one or more [**AutomationPeer**](https://msdn.microsoft.com/library/windows/apps/BR209185) subclasses to provide accessibility support. In some cases, so long as you use the same peer class as was used by the base control class, the automation support for your derived class is adequate at a basic level. However, you should test this, and implementing a peer is still recommended as a best practice so that the peer can correctly report the class name of your new control class. Implementing a custom automation peer has a few steps involved. For more info, see [Custom automation peers](custom-automation-peers.md).\n\n<span id=\"Assistive_technology_support_in_apps_that_support_XAML___Microsoft_DirectX_interop\"/>\n<span id=\"assistive_technology_support_in_apps_that_support_xaml___microsoft_directx_interop\"/>\n<span id=\"ASSISTIVE_TECHNOLOGY_SUPPORT_IN_APPS_THAT_SUPPORT_XAML___MICROSOFT_DIRECTX_INTEROP\"/>\n## Assistive technology support in apps that support XAML / Microsoft DirectX interop  \nMicrosoft DirectX content that's hosted in a XAML UI (using [**SwapChainPanel**](https://msdn.microsoft.com/library/windows/apps/Dn252834) or [**SurfaceImageSource**](https://msdn.microsoft.com/library/windows/apps/Hh702041)) is not accessible by default. The [XAML SwapChainPanel DirectX interop sample](http://go.microsoft.com/fwlink/p/?LinkID=309155) shows how to create UI Automation peers for the hosted DirectX content. This technique makes the hosted content accessible through UI Automation.\n\n<span id=\"related_topics\"/>\n## Related topics  \n* [**Windows.UI.Xaml.Automation**](https://msdn.microsoft.com/library/windows/apps/BR209179)\n* [Design for accessibility](https://msdn.microsoft.com/library/windows/apps/Hh700407)\n* [XAML accessibility sample](http://go.microsoft.com/fwlink/p/?linkid=238570)\n"}