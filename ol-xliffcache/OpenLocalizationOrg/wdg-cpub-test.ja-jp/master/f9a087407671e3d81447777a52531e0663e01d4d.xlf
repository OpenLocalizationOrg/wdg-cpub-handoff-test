<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">f9a087407671e3d81447777a52531e0663e01d4d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\data-binding\displaying-data-in-the-designer.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a27c44075677eb956e32cfc0b0be1c33fe31c872</mda:meta><mda:meta type="olxliffhash">4ad659b67ff38924a3941b8e486bc9b21083f254</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Sample data on the design surface, and for prototyping</source>
					<target>Sample data on the design surface, and for prototyping</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>It may be impossible or undesirable (perhaps for reasons of privacy or performance) for your app to display live data on the design surface in Microsoft Visual Studio or Blend for Visual Studio.</source>
					<target>It may be impossible or undesirable (perhaps for reasons of privacy or performance) for your app to display live data on the design surface in Microsoft Visual Studio or Blend for Visual Studio.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Sample data on the design surface, and for prototyping</source>
					<target>Sample data on the design surface, and for prototyping</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The degree to which you need sample data—and how much it will help you—depends on whether your bindings use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind} markup extension</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The degree to which you need sample data—and how much it will help you—depends on whether your bindings use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> or the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{x:Bind} markup extension</pc>.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The techniques described in this topic are based on the use of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc></pc>, so they're only appropriate for <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc>.</source>
					<target>The techniques described in this topic are based on the use of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc></pc>, so they're only appropriate for <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding}</pc>.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>But if you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> then your bindings at least show placeholder values on the design surface (even for items controls), so you don't have quite the same need for sample data.</source>
					<target>But if you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> then your bindings at least show placeholder values on the design surface (even for items controls), so you don't have quite the same need for sample data.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>It may be impossible or undesirable (perhaps for reasons of privacy or performance) for your app to display live data on the design surface in Microsoft Visual Studio or Blend for Visual Studio.</source>
					<target>It may be impossible or undesirable (perhaps for reasons of privacy or performance) for your app to display live data on the design surface in Microsoft Visual Studio or Blend for Visual Studio.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>In order to have your controls populated with data (so that you can work on your app's layout, templates, and other visual properties), there are various ways in which you can use design-time sample data.</source>
					<target>In order to have your controls populated with data (so that you can work on your app's layout, templates, and other visual properties), there are various ways in which you can use design-time sample data.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Sample data can also be really useful and time-saving if you're building a sketch (or prototype) app.</source>
					<target>Sample data can also be really useful and time-saving if you're building a sketch (or prototype) app.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>You can use sample data in your sketch or prototype at run-time to illustrate your ideas without going as far as connecting to real, live data.</source>
					<target>You can use sample data in your sketch or prototype at run-time to illustrate your ideas without going as far as connecting to real, live data.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Setting DataContext in markup</source>
					<target>Setting DataContext in markup</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It's a fairly common developer practice to use imperative code (in code-behind) to set a page or user control's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc></pc> to a view model instance.</source>
					<target>It's a fairly common developer practice to use imperative code (in code-behind) to set a page or user control's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc></pc> to a view model instance.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>But if you do that then your page isn't as "designable" as it could be.</source>
					<target>But if you do that then your page isn't as "designable" as it could be.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The reason is that when your XAML page is opened in Visual Studio or Blend for Visual Studio, the imperative code that assigns the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> value is never run (in fact, none of your code-behind is executed).</source>
					<target>The reason is that when your XAML page is opened in Visual Studio or Blend for Visual Studio, the imperative code that assigns the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> value is never run (in fact, none of your code-behind is executed).</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>The XAML tools do of course parse your markup and instantiate any objects declared in it, but they don't actually instantiate your page's type itself.</source>
					<target>The XAML tools do of course parse your markup and instantiate any objects declared in it, but they don't actually instantiate your page's type itself.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The result is that you won't see any data in your controls or in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Data Binding</pc> dialog, and your page will be more challenging to style and to lay out.</source>
					<target>The result is that you won't see any data in your controls or in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Data Binding</pc> dialog, and your page will be more challenging to style and to lay out.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Sparse design UI.</source>
					<target>Sparse design UI.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The first remedy to try is to comment out that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> assignment and set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> in your page markup instead.</source>
					<target>The first remedy to try is to comment out that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> assignment and set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> in your page markup instead.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>That way, your live data shows up at design-time as well as at run-time.</source>
					<target>That way, your live data shows up at design-time as well as at run-time.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>To do this, first open your XAML page.</source>
					<target>To do this, first open your XAML page.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Then, in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Document Outline</pc> window, click the root designable element (usually with the label <pc dataRefEnd="id4" dataRefStart="id3" id="p2">\[Page\]</pc>) to select it.</source>
					<target>Then, in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Document Outline</pc> window, click the root designable element (usually with the label <pc dataRefEnd="id4" dataRefStart="id3" id="p2">\[Page\]</pc>) to select it.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> window, find the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> property (inside the Common category), and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">New</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> window, find the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> property (inside the Common category), and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">New</pc>.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Click your view model type from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Select Object</pc> dialog box, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc>.</source>
					<target>Click your view model type from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Select Object</pc> dialog box, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OK</pc>.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>UI for setting DataContext.</source>
					<target>UI for setting DataContext.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Here's what the resulting markup looks like.</source>
					<target>Here's what the resulting markup looks like.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>And here’s what the design surface looks like now that your bindings can resolve.</source>
					<target>And here’s what the design surface looks like now that your bindings can resolve.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Notice that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> picker in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create Data Binding</pc> dialog is now populated, based on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc> type and the properties that you can bind to.</source>
					<target>Notice that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path</pc> picker in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create Data Binding</pc> dialog is now populated, based on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc> type and the properties that you can bind to.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Designable UI.</source>
					<target>Designable UI.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Data Binding</pc> dialog only needs a type to work from, but the bindings need the properties to be initialized with values.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Data Binding</pc> dialog only needs a type to work from, but the bindings need the properties to be initialized with values.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>If you don't want to reach out to your cloud service at design-time (due to performance, paying for data transfer, privacy issues, that kind of thing) then your initialization code can check to see whether your app is running in a design tool (such as Visual Studio or Blend for Visual Studio) and in that case load sample data for use at design-time only.</source>
					<target>If you don't want to reach out to your cloud service at design-time (due to performance, paying for data transfer, privacy issues, that kind of thing) then your initialization code can check to see whether your app is running in a design tool (such as Visual Studio or Blend for Visual Studio) and in that case load sample data for use at design-time only.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>You could use a view model locator if you need to pass parameters to your initialization code.</source>
					<target>You could use a view model locator if you need to pass parameters to your initialization code.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>A view model locator is a class that you can put into app resources.</source>
					<target>A view model locator is a class that you can put into app resources.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It has a property that exposes the view model, and your page's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> binds to that property.</source>
					<target>It has a property that exposes the view model, and your page's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> binds to that property.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Another pattern that the locator or the view model can use is dependency injection, which can construct a design-time or a run-time data provider (each of which implements a common interface), as applicable.</source>
					<target>Another pattern that the locator or the view model can use is dependency injection, which can construct a design-time or a run-time data provider (each of which implements a common interface), as applicable.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>"Sample data from class", and design-time attributes</source>
					<target>"Sample data from class", and design-time attributes</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>If for whatever reason none of the options in the previous section work for you then you still have plenty of design-time data options available via XAML tools features and design-time attributes.</source>
					<target>If for whatever reason none of the options in the previous section work for you then you still have plenty of design-time data options available via XAML tools features and design-time attributes.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>One good option is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Sample Data from Class</pc> feature in Blend for Visual Studio.</source>
					<target>One good option is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create Sample Data from Class</pc> feature in Blend for Visual Studio.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can find that command on one of the buttons at the top of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel.</source>
					<target>You can find that command on one of the buttons at the top of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>All you need to do is to specify a class for the command to use.</source>
					<target>All you need to do is to specify a class for the command to use.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The command then does two important things for you.</source>
					<target>The command then does two important things for you.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>First, it generates a XAML file that contains sample data suitable for hydrating an instance of your chosen class and all of its members, recursively (in fact, the tooling works equally well with XAML or JSON files).</source>
					<target>First, it generates a XAML file that contains sample data suitable for hydrating an instance of your chosen class and all of its members, recursively (in fact, the tooling works equally well with XAML or JSON files).</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Second, it populates the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel with the schema of your chosen class.</source>
					<target>Second, it populates the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel with the schema of your chosen class.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can then drag members from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel onto the design surface to perform various tasks.</source>
					<target>You can then drag members from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data</pc> panel onto the design surface to perform various tasks.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Depending on what you drag and where you drop it, you can add bindings to existing controls (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>), or create new controls and bind them at the same time.</source>
					<target>Depending on what you drag and where you drop it, you can add bindings to existing controls (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>), or create new controls and bind them at the same time.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In either case, the operation also sets a design-time data context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc>) for you (if one is not already set) on the layout root of your page.</source>
					<target>In either case, the operation also sets a design-time data context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc>) for you (if one is not already set) on the layout root of your page.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>That design-time data context uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignData</pc> attribute to get its sample data from the XAML file that was generated (which, by the way, you are free to find in your project and edit so that it contains the sample data you want).</source>
					<target>That design-time data context uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignData</pc> attribute to get its sample data from the XAML file that was generated (which, by the way, you are free to find in your project and edit so that it contains the sample data you want).</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The various xmlns declarations mean that attributes with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:</pc> prefix are interpreted only at design-time and are ignored at run-time.</source>
					<target>The various xmlns declarations mean that attributes with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:</pc> prefix are interpreted only at design-time and are ignored at run-time.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR208713)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>So the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> attribute only affects the value of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> property at design-time; it has no effect at run-time.</source>
					<target>So the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> attribute only affects the value of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> property at design-time; it has no effect at run-time.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can even set both <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> in markup if you like.</source>
					<target>You can even set both <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> in markup if you like.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> will override at design-time, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> will override at run-time.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> will override at design-time, and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataContext</pc> will override at run-time.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>These same override rules apply to all design-time and run-time attributes.</source>
					<target>These same override rules apply to all design-time and run-time attributes.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=272504)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> attribute, and all other design-time attributes, are documented in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design-Time Attributes</pc> topic, which is still valid for Universal Windows Platform (UWP) apps.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DataContext</pc> attribute, and all other design-time attributes, are documented in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design-Time Attributes</pc> topic, which is still valid for Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> doesn't have a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc> property, but it does have a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Source</pc> property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> doesn't have a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc> property, but it does have a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Source</pc> property.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Consequently, there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:Source</pc> property that you can use to set design-time-only sample data on a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</source>
					<target>Consequently, there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:Source</pc> property that you can use to set design-time-only sample data on a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">`Recordings : ObservableCollection&lt;Recording&gt;`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>For this to work, you would have a class named <ph dataRef="id1" id="ph1" />, and you would edit the sample data XAML file so that it contains only a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Recordings</pc> object (with <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Recording</pc> objects inside that), as shown here.</source>
					<target>For this to work, you would have a class named <ph dataRef="id1" id="ph1" />, and you would edit the sample data XAML file so that it contains only a <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Recordings</pc> object (with <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Recording</pc> objects inside that), as shown here.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you use a JSON sample data file instead of XAML, you must set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type</pc> property.</source>
					<target>If you use a JSON sample data file instead of XAML, you must set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Type</pc> property.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So far, we've been using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignData</pc> to load design-time sample data from a XAML or JSON file.</source>
					<target>So far, we've been using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignData</pc> to load design-time sample data from a XAML or JSON file.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>An alternative to that is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignInstance</pc> markup extension, which indicates that the design-time source is based on the class specified by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc> property.</source>
					<target>An alternative to that is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">d:DesignInstance</pc> markup extension, which indicates that the design-time source is based on the class specified by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc> property.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Here's an example.</source>
					<target>Here's an example.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>