<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">05358eaace659edd690c939d4c93be9aff6ba023</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\get-started\create-a-hello-world-app-xaml-universal.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">e5710c31b6604773a98600dbdb2271c8dc984023</mda:meta><mda:meta type="olxliffhash">a13ac318cb485b82148a14b56af050b6f6e6f499</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Create a Hello, world app (XAML)</source>
					<target>Create a Hello, world app (XAML)</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C# to create a simple Hello, world app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
					<target>This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C# to create a simple Hello, world app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Create a "Hello, world" app (XAML)</source>
					<target>Create a "Hello, world" app (XAML)</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C# to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
					<target>This tutorial teaches you how to use Extensible Application Markup Language (XAML) with C# to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</source>
					<target>With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Here we focus on creating an app that runs equally well on desktop and mobile devices.</source>
					<target>Here we focus on creating an app that runs equally well on desktop and mobile devices.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>It won't work correctly with earlier versions.</source>
					<target>It won't work correctly with earlier versions.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Here you'll learn how to:</source>
					<target>Here you'll learn how to:</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Create a new Visual Studio project that targets Windows 10 and the UWP.</source>
					<target>Create a new Visual Studio project that targets Windows 10 and the UWP.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Add XAML content to your start page.</source>
					<target>Add XAML content to your start page.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Handle touch, pen, and mouse input.</source>
					<target>Handle touch, pen, and mouse input.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Run the project on the local desktop and on the phone emulator in Visual Studio.</source>
					<target>Run the project on the local desktop and on the phone emulator in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Adapt the UI to different screen sizes.</source>
					<target>Adapt the UI to different screen sizes.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Before you start...</source>
					<target>Before you start...</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>We're going to jump right into the steps you use to create a simple universal app.</source>
					<target>We're going to jump right into the steps you use to create a simple universal app.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://dev.windows.com/whats-new-windows-10-dev-preview)</data>
					<data id="id3">[</data>
					<data id="id4">](whats-a-uwp.md)</data>
				</originalData>
				<segment state="initial">
					<source>So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new in Windows 10</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">What's a Universal Windows app</pc> before you start this tutorial.</source>
					<target>So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new in Windows 10</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">What's a Universal Windows app</pc> before you start this tutorial.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>To complete this tutorial, you need Windows 10 and Visual Studio 2015.</source>
					<target>To complete this tutorial, you need Windows 10 and Visual Studio 2015.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](get-set-up.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get set up</pc> for more info.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get set up</pc> for more info.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185595)</data>
				</originalData>
				<segment state="initial">
					<source>We assume you have a basic understanding of XAML and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</source>
					<target>We assume you have a basic understanding of XAML and the concepts in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML overview</pc>.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>We also assume you're using the default window layout in Visual Studio.</source>
					<target>We also assume you're using the default window layout in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc> command.</source>
					<target>If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc> command.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Step 1: Create a new project in Visual Studio</source>
					<target>Step 1: Create a new project in Visual Studio</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Launch Visual Studio 2015.</source>
					<target>Launch Visual Studio 2015.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>The Visual Studio 2015 Start page appears.</source>
					<target>The Visual Studio 2015 Start page appears.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</source>
					<target>(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5"> &gt; </data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Project</pc>.</source>
					<target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Project</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog appears.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog appears.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The left pane of the dialog lets you select the type of templates to display.</source>
					<target>The left pane of the dialog lets you select the type of templates to display.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed &gt; Templates &gt; Visual C# &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Universal</pc> template group.</source>
					<target>In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed &gt; Templates &gt; Visual C# &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Universal</pc> template group.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</source>
					<target>The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>The New Project window</source>
					<target>The New Project window</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> template.</source>
					<target>In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> template.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>You add controls to the app over the course of this tutorial.</source>
					<target>You add controls to the app over the course of this tutorial.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> text box, type "HelloWorld".</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> text box, type "HelloWorld".</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the project.</source>
					<target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the project.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</source>
					<target>Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Visual Studio Solution Explorer for the HelloWorld project</source>
					<target>Visual Studio Solution Explorer for the HelloWorld project</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Although the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> is a minimal template, it still contains a lot of files:</source>
					<target>Although the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> is a minimal template, it still contains a lot of files:</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>A manifest file (Package.appxmanifest) that describes your app (its name, description, tile, start page, and so on) and lists the files that your app contains.</source>
					<target>A manifest file (Package.appxmanifest) that describes your app (its name, description, tile, start page, and so on) and lists the files that your app contains.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>A set of logo images (Assets/Square150x150Logo.scale-200.png, Assets/Square44x44Logo.scale-200.png, and Assets/Wide310x150Logo.scale-200.png)to display in the start menu.</source>
					<target>A set of logo images (Assets/Square150x150Logo.scale-200.png, Assets/Square44x44Logo.scale-200.png, and Assets/Wide310x150Logo.scale-200.png)to display in the start menu.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>An image (Assets/StoreLogo.png) to represent your app in the Windows Store.</source>
					<target>An image (Assets/StoreLogo.png) to represent your app in the Windows Store.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>A splash screen (Assets/SplashScreen.scale-200.png) to display when your app starts.</source>
					<target>A splash screen (Assets/SplashScreen.scale-200.png) to display when your app starts.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>XAML and code files for the app (App.xaml and App.xaml.cs).</source>
					<target>XAML and code files for the app (App.xaml and App.xaml.cs).</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>A start page (MainPage.xaml) and an accompanying code file (MainPage.xaml.cs) that run when your app starts.</source>
					<target>A start page (MainPage.xaml) and an accompanying code file (MainPage.xaml.cs) that run when your app starts.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>These files are essential to all UWP apps using C#.</source>
					<target>These files are essential to all UWP apps using C#.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Every project that you create in Visual Studio contains them.</source>
					<target>Every project that you create in Visual Studio contains them.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Step 2: Modify your start page</source>
					<target>Step 2: Modify your start page</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>What's in the files?</source>
					<target>What's in the files?</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To view and edit a file in your project, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</source>
					<target>To view and edit a file in your project, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>By default, you can expand a XAML file just like a folder to see its associated code file.</source>
					<target>By default, you can expand a XAML file just like a folder to see its associated code file.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>XAML files open in a split view that shows both the design surface and the XAML editor.</source>
					<target>XAML files open in a split view that shows both the design surface and the XAML editor.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>In this tutorial, you work with just a few of the files listed previously: App.xaml, MainPage.xaml, and MainPage.xaml.cs.</source>
					<target>In this tutorial, you work with just a few of the files listed previously: App.xaml, MainPage.xaml, and MainPage.xaml.cs.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>App.xaml and App.xaml.cs</source>
					<target>App.xaml and App.xaml.cs</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>App.xaml is where you declare resources that are used across the app.</source>
					<target>App.xaml is where you declare resources that are used across the app.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>App.xaml.cs is the code-behind file for App.xaml.</source>
					<target>App.xaml.cs is the code-behind file for App.xaml.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Code-behind is the code that is joined with the XAML page's partial class.</source>
					<target>Code-behind is the code that is joined with the XAML page's partial class.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Together, the XAML and code-behind make a complete class.</source>
					<target>Together, the XAML and code-behind make a complete class.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>App.xaml.cs is the entry point for your app.</source>
					<target>App.xaml.cs is the entry point for your app.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">`InitializeComponent`</data>
				</originalData>
				<segment state="initial">
					<source>Like all code-behind pages, it contains a constructor that calls the <ph dataRef="id1" id="ph1" /> method.</source>
					<target>Like all code-behind pages, it contains a constructor that calls the <ph dataRef="id1" id="ph1" /> method.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">`InitializeComponent`</data>
				</originalData>
				<segment state="initial">
					<source>You don't write the <ph dataRef="id1" id="ph1" /> method.</source>
					<target>You don't write the <ph dataRef="id1" id="ph1" /> method.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>It's generated by Visual Studio, and its main purpose is to initialize the elements declared in the XAML file.</source>
					<target>It's generated by Visual Studio, and its main purpose is to initialize the elements declared in the XAML file.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>App.xaml.cs also contains methods to handle activation and suspension of the app.</source>
					<target>App.xaml.cs also contains methods to handle activation and suspension of the app.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>MainPage.xaml</source>
					<target>MainPage.xaml</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>In MainPage.xaml you define the UI for your app.</source>
					<target>In MainPage.xaml you define the UI for your app.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>You can add elements directly using XAML markup, or you can use the design tools provided by Visual Studio.</source>
					<target>You can add elements directly using XAML markup, or you can use the design tools provided by Visual Studio.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>MainPage.xaml.cs is the code-behind page for MainPage.xaml.</source>
					<target>MainPage.xaml.cs is the code-behind page for MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>It's where you add your app logic and event handlers.</source>
					<target>It's where you add your app logic and event handlers.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">`MainPage`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR227503)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">`HelloWorld`</data>
				</originalData>
				<segment state="initial">
					<source>Together these two files define a new class called <ph dataRef="id1" id="ph1" />, which inherits from <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Page</pc></pc>, in the <ph dataRef="id6" id="ph2" /> namespace.</source>
					<target>Together these two files define a new class called <ph dataRef="id1" id="ph1" />, which inherits from <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Page</pc></pc>, in the <ph dataRef="id6" id="ph2" /> namespace.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>MainPage.xaml</source>
					<target>MainPage.xaml</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>MainPage.xaml.cs</source>
					<target>MainPage.xaml.cs</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Modify the start page</source>
					<target>Modify the start page</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Now, let's add some content to the app.</source>
					<target>Now, let's add some content to the app.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>To modify the start page</source>
					<target>To modify the start page</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Double-click MainPage.xaml in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc> to open it.</source>
					<target>Double-click MainPage.xaml in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc> to open it.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>In the XAML editor, add the controls for the UI.</source>
					<target>In the XAML editor, add the controls for the UI.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>, add this XAML.</source>
					<target>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc>, add this XAML.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209635)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
				</originalData>
				<segment state="initial">
					<source>It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StackPanel</pc></pc> with a title <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock</pc></pc>, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">TextBlock</pc> that asks the user's name, a <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">TextBox</pc></pc> element to accept the user's name, a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Button</pc></pc>, and another <pc dataRefEnd="id20" dataRefStart="id19" id="p10">TextBlock</pc> to show a greeting.</source>
					<target>It contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StackPanel</pc></pc> with a title <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextBlock</pc></pc>, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">TextBlock</pc> that asks the user's name, a <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">TextBox</pc></pc> element to accept the user's name, a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Button</pc></pc>, and another <pc dataRefEnd="id20" dataRefStart="id19" id="p10">TextBlock</pc> to show a greeting.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Some of these controls have names so that you can refer to them later in your code.</source>
					<target>Some of these controls have names so that you can refer to them later in your code.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Step 3: Start the app</source>
					<target>Step 3: Start the app</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>At this point, you've created a very simple app.</source>
					<target>At this point, you've created a very simple app.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>This is a good time to build, deploy, and launch your app and see what it looks like.</source>
					<target>This is a good time to build, deploy, and launch your app and see what it looks like.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</source>
					<target>You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Here's the target device menu in Visual Studio.</source>
					<target>Here's the target device menu in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Drop-down list of device targets for debugging your app</source>
					<target>Drop-down list of device targets for debugging your app</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Start the app on a Desktop device</source>
					<target>Start the app on a Desktop device</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>By default, the app runs on the local machine.</source>
					<target>By default, the app runs on the local machine.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>The target device menu provides several options for debugging your app on devices from the desktop device family.</source>
					<target>The target device menu provides several options for debugging your app on devices from the desktop device family.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Simulator</source>
					<target>Simulator</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Local Machine</source>
					<target>Local Machine</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Remote Machine</source>
					<target>Remote Machine</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>To start debugging on the local machine</source>
					<target>To start debugging on the local machine</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">![</data>
					<data id="id2">](images/startdebug-full.png)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Local Machine</pc> is selected.</source>
					<target>In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Local Machine</pc> is selected.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>(It's the default selection.)</source>
					<target>(It's the default selection.)</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">![</data>
					<data id="id4">](images/startdebug-sm.png)</data>
				</originalData>
				<segment state="initial">
					<source>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) on the toolbar.</source>
					<target>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) on the toolbar.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</source>
					<target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Press F5.</source>
					<target>Press F5.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>The app opens in a window, and a default splash screen appears first.</source>
					<target>The app opens in a window, and a default splash screen appears first.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</source>
					<target>The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>The splash screen disappears, and then your app appears.</source>
					<target>The splash screen disappears, and then your app appears.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>It looks like this.</source>
					<target>It looks like this.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Initial app screen</source>
					<target>Initial app screen</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu, then show all apps.</source>
					<target>Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu, then show all apps.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</source>
					<target>Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</source>
					<target>To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>It doesn't do much—yet—but congratulations, you've built your first UWP app!</source>
					<target>It doesn't do much—yet—but congratulations, you've built your first UWP app!</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>To stop debugging</source>
					<target>To stop debugging</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">![</data>
					<data id="id4">](images/stopdebug.png)</data>
				</originalData>
				<segment state="initial">
					<source>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop Debugging</pc> button (<ph dataRef="id3" id="ph1" />Stop debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</source>
					<target>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop Debugging</pc> button (<ph dataRef="id3" id="ph1" />Stop debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop debugging</pc>.</source>
					<target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop debugging</pc>.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Close the app window.</source>
					<target>Close the app window.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Start the app on a mobile device emulator</source>
					<target>Start the app on a mobile device emulator</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</source>
					<target>Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</source>
					<target>In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>You can choose among emulators for devices with different memory and display configurations.</source>
					<target>You can choose among emulators for devices with different memory and display configurations.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Device</source>
					<target>Device</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">&lt;SDK version&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Emulator <ph dataRef="id1" id="ph1" /> WVGA 4 inch 512MB</source>
					<target>Emulator <ph dataRef="id1" id="ph1" /> WVGA 4 inch 512MB</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">&lt;SDK version&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Emulator <ph dataRef="id1" id="ph1" /> WVGA 4 inch 1GB</source>
					<target>Emulator <ph dataRef="id1" id="ph1" /> WVGA 4 inch 1GB</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>etc... (Various emulators in other configurations)</source>
					<target>etc... (Various emulators in other configurations)</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</source>
					<target>It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>To start debugging on a mobile device emulator</source>
					<target>To start debugging on a mobile device emulator</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">![</data>
					<data id="id2">](images/startdebug-full.png)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</source>
					<target>In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">![</data>
					<data id="id4">](images/startdebug-sm.png)</data>
				</originalData>
				<segment state="initial">
					<source>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</source>
					<target>Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</source>
					<target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>–or–</source>
					<target>–or–</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>Press F5.</source>
					<target>Press F5.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Visual Studio starts the selected emulator and then deploys and starts your app.</source>
					<target>Visual Studio starts the selected emulator and then deploys and starts your app.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>On the mobile device emulator, the app looks like this.</source>
					<target>On the mobile device emulator, the app looks like this.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>Initial app screen on mobile device</source>
					<target>Initial app screen on mobile device</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>The first thing you'll notice is the button is pushed off the smaller screen of a mobile device.</source>
					<target>The first thing you'll notice is the button is pushed off the smaller screen of a mobile device.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</source>
					<target>Later in this tutorial, you'll learn how to adapt the UI to different screen sizes so your app always looks good.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You might also notice that you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc>, but right now, clicking or tapping the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> doesn't do anything.</source>
					<target>You might also notice that you can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc>, but right now, clicking or tapping the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Button</pc></pc> doesn't do anything.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the next steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event to display a personalized greeting.</source>
					<target>In the next steps, you create an event handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event to display a personalized greeting.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>You add the event handler code to your MainPage.xaml.cs file.</source>
					<target>You add the event handler code to your MainPage.xaml.cs file.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>Step 4: Create an event handler</source>
					<target>Step 4: Create an event handler</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>XAML elements can send messages when certain events occur.</source>
					<target>XAML elements can send messages when certain events occur.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>These event messages give you the opportunity to take some action in response to the event.</source>
					<target>These event messages give you the opportunity to take some action in response to the event.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>You put your code to respond to the event in an event handler method.</source>
					<target>You put your code to respond to the event in an event handler method.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>One of the most common events in many apps is a user clicking a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc>.</source>
					<target>One of the most common events in many apps is a user clicking a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Let's create an event handler for your button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</source>
					<target>Let's create an event handler for your button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">`nameInput`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">`greetingOutput`</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The event handler will get the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and use it to output a greeting to the <ph dataRef="id6" id="ph2" /> <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">TextBlock</pc></pc>.</source>
					<target>The event handler will get the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and use it to output a greeting to the <ph dataRef="id6" id="ph2" /> <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">TextBlock</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>Using events that work for touch, mouse, and pen input</source>
					<target>Using events that work for touch, mouse, and pen input</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>What events should you handle?</source>
					<target>What events should you handle?</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>Because they can run on a variety of devices, design your Windows Store apps with touch input in mind.</source>
					<target>Because they can run on a variety of devices, design your Windows Store apps with touch input in mind.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Your app must also be able to handle input from a mouse or a stylus.</source>
					<target>Your app must also be able to handle input from a mouse or a stylus.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR208922)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Fortunately, events such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleTapped</pc></pc> are device-independent.</source>
					<target>Fortunately, events such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleTapped</pc></pc> are device-independent.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If you're familiar with Microsoft .NET programming, you might have seen separate events for mouse, touch, and stylus input, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MouseMove</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TouchMove</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StylusMove</pc>.</source>
					<target>If you're familiar with Microsoft .NET programming, you might have seen separate events for mouse, touch, and stylus input, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MouseMove</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TouchMove</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">StylusMove</pc>.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208970)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In Windows Store apps, these separate events are replaced with a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event that works equally well for touch, mouse, and stylus input.</source>
					<target>In Windows Store apps, these separate events are replaced with a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PointerMoved</pc></pc> event that works equally well for touch, mouse, and stylus input.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>To add an event handler</source>
					<target>To add an event handler</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> that you added to MainPage.xaml.</source>
					<target>In XAML or design view, select the "Say Hello" <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> that you added to MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">![</data>
					<data id="id4">](images/eventsbutton.png)</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties Window</pc>, click the Events button (<ph dataRef="id3" id="ph1" />Events button<ph dataRef="id4" id="ph2" />).</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties Window</pc>, click the Events button (<ph dataRef="id3" id="ph1" />Events button<ph dataRef="id4" id="ph2" />).</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Find the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event at the top of the event list.</source>
					<target>Find the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc></pc> event at the top of the event list.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the text box for the event, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event.</source>
					<target>In the text box for the event, type the name of the function that handles the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>For this example, type "Button\_Click".</source>
					<target>For this example, type "Button\_Click".</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>Events list in the properties window</source>
					<target>Events list in the properties window</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>Press Enter.</source>
					<target>Press Enter.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>The event handler method is created and opened in the code editor so you can add code to be executed when the event occurs.</source>
					<target>The event handler method is created and opened in the code editor so you can add code to be executed when the event occurs.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209265)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR227737)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> is updated to declare the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event handler like this.</source>
					<target>In the XAML editor, the XAML for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> is updated to declare the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event handler like this.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>Add code to the event handler that you created in the code-behind page.</source>
					<target>Add code to the event handler that you created in the code-behind page.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<originalData>
					<data id="id1">`nameInput`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>In the event handler, retrieve the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and use it to create a greeting.</source>
					<target>In the event handler, retrieve the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBox</pc></pc> control and use it to create a greeting.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<originalData>
					<data id="id1">`greetingOutput`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR209652)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Use the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc></pc> to display the result.</source>
					<target>Use the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">TextBlock</pc></pc> to display the result.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>Debug the app on the local machine.</source>
					<target>Debug the app on the local machine.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>When you enter your name in the text box and click the button, the app displays a personalized greeting.</source>
					<target>When you enter your name in the text box and click the button, the app displays a personalized greeting.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>Step 5: Adapt the UI to different window sizes</source>
					<target>Step 5: Adapt the UI to different window sizes</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</source>
					<target>Now we'll make the UI adapt to different screen sizes so it looks good on mobile devices.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209021)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> and set properties that are applied for different visual states.</source>
					<target>To do this, you add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> and set properties that are applied for different visual states.</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>To adjust the UI layout</source>
					<target>To adjust the UI layout</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242704)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> element.</source>
					<target>In the XAML editor, add this block of XAML after the opening tag of the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> element.</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>Debug the app on the local machine.</source>
					<target>Debug the app on the local machine.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>Notice that the UI looks the same as before unless the window gets narrower than 641 pixels.</source>
					<target>Notice that the UI looks the same as before unless the window gets narrower than 641 pixels.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>Debug the app on the mobile device emulator.</source>
					<target>Debug the app on the mobile device emulator.</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<originalData>
					<data id="id1">`narrowState`</data>
				</originalData>
				<segment state="initial">
					<source>Notice that the UI uses the properties you defined in the <ph dataRef="id1" id="ph1" /> and appears correctly on the small screen.</source>
					<target>Notice that the UI uses the properties you defined in the <ph dataRef="id1" id="ph1" /> and appears correctly on the small screen.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>Mobile app screen</source>
					<target>Mobile app screen</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209021)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</source>
					<target>If you've used a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> in previous versions of XAML, you might notice that the XAML here uses a simplified syntax.</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209007)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`wideState`</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">[</data>
					<data id="id11">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> named <ph dataRef="id5" id="ph1" /> has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 641.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> named <ph dataRef="id5" id="ph1" /> has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 641.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>This means that the state is to be applied only when the window width is not less than the minimum of 641 pixels.</source>
					<target>This means that the state is to be applied only when the window width is not less than the minimum of 641 pixels.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208817)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</source>
					<target>You don't define any <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> objects for this state, so it uses the layout properties you defined in the XAML for the page content.</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209007)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`narrowState`</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/Dn890382)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">[</data>
					<data id="id11">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.adaptivetrigger.minwindowwidth)</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
				</originalData>
				<segment state="initial">
					<source>The second <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, <ph dataRef="id5" id="ph1" />, has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 0.</source>
					<target>The second <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc>, <ph dataRef="id5" id="ph1" />, has an <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">AdaptiveTrigger</pc></pc> with its <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinWindowWidth</pc></pc> property set to 0.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>This state is applied when the window width is greater than 0, but less than 641 pixels.</source>
					<target>This state is applied when the window width is greater than 0, but less than 641 pixels.</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<originalData>
					<data id="id1">`wideState`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/BR208817)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>(At 641 pixels, the <ph dataRef="id1" id="ph1" /> is applied.) In this state, you do define some <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Setter</pc></pc> objects to change the layout properties of controls in the UI:</source>
					<target>(At 641 pixels, the <ph dataRef="id1" id="ph1" /> is applied.) In this state, you do define some <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Setter</pc></pc> objects to change the layout properties of controls in the UI:</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.stackpanel.orientation)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`inputPanel`</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
				</originalData>
				<segment state="initial">
					<source>You change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Orientation</pc></pc> of the <ph dataRef="id5" id="ph1" /> element from <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Horizontal</pc> to <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Vertical</pc>.</source>
					<target>You change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Orientation</pc></pc> of the <ph dataRef="id5" id="ph1" /> element from <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Horizontal</pc> to <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Vertical</pc>.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<originalData>
					<data id="id1">`inputButton`</data>
				</originalData>
				<segment state="initial">
					<source>You add a top margin of 4 to the <ph dataRef="id1" id="ph1" /> element.</source>
					<target>You add a top margin of 4 to the <ph dataRef="id1" id="ph1" /> element.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>Summary</source>
					<target>Summary</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>Congratulations, you've created your first app for Windows 10 and the UWP!</source>
					<target>Congratulations, you've created your first app for Windows 10 and the UWP!</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>