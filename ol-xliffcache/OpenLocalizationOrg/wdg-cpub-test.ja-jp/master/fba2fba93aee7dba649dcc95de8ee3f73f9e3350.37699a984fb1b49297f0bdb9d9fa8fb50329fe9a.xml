{"nodes":[{"pos":[66,222],"content":"This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.","pos":[0,156]}]},{"pos":[230,234],"content":"MIDI","needQuote":true,"needEscape":true,"nodes":[{"content":"MIDI","pos":[0,4]}]},{"content":"MIDI","pos":[242,246]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[248,286]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[287,382],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.","pos":[385,541]},{"content":"Enumerate MIDI devices","pos":[546,568]},{"content":"Before enumerating and using MIDI devices, add the following namespaces to your project.","pos":[570,658]},{"pos":[670,675],"content":"Using"},{"content":"Add a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242868)</ept> control to your XAML page that will allow the user to select one of the MIDI input devices attached to the system.","pos":[730,922],"source":"Add a [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) control to your XAML page that will allow the user to select one of the MIDI input devices attached to the system."},{"content":"Add another one to list the MIDI output devices.","pos":[923,971]},{"pos":[984,997],"content":"MidiListBoxes"},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FindAllAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225432)</ept> method <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DeviceInformation<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225393)</ept> class is used to enumerate many different types of devices that are recognized by Windows.","pos":[1057,1317],"source":"The [**FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/br225432) method [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/br225393) class is used to enumerate many different types of devices that are recognized by Windows."},{"content":"To specify that you only want the method to find MIDI input devices, use the selector string returned by <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MidiInPort.GetDeviceSelector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894779)</ept>.","pos":[1318,1516],"source":" To specify that you only want the method to find MIDI input devices, use the selector string returned by [**MidiInPort.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn894779)."},{"content":"<bpt id=\"p1\">**</bpt>FindAllAsync<ept id=\"p1\">**</ept> returns a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DeviceInformationCollection<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225395)</ept> that contains a <bpt id=\"p4\">**</bpt>DeviceInformation<ept id=\"p4\">**</ept> for each MIDI input device registered with the system.","pos":[1517,1728],"source":"**FindAllAsync** returns a [**DeviceInformationCollection**](https://msdn.microsoft.com/library/windows/apps/br225395) that contains a **DeviceInformation** for each MIDI input device registered with the system."},{"content":"If the returned collection contains no items, then there are no available MIDI input devices.","pos":[1729,1822]},{"content":"If there are items in the collection, loop through the <bpt id=\"p1\">**</bpt>DeviceInformation<ept id=\"p1\">**</ept> objects and add the name of each device to the MIDI input device <bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept>.","pos":[1823,1977],"source":" If there are items in the collection, loop through the **DeviceInformation** objects and add the name of each device to the MIDI input device **ListBox**."},{"pos":[1989,2014],"content":"EnumerateMidiInputDevices"},{"pos":[2089,2363],"content":"Enumerating MIDI output devices works the exact same way as enumerating input devices, except that you should specify the selector string returned by <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MidiOutPort.GetDeviceSelector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894845)</ept> when calling <bpt id=\"p3\">**</bpt>FindAllAsync<ept id=\"p3\">**</ept>.","source":"Enumerating MIDI output devices works the exact same way as enumerating input devices, except that you should specify the selector string returned by [**MidiOutPort.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn894845) when calling **FindAllAsync**."},{"pos":[2375,2401],"content":"EnumerateMidiOutputDevices"},{"content":"Create a device watcher helper class","pos":[2480,2516]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Enumeration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225459)</ept> namespace provides the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DeviceWatcher<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225446)</ept> which can notify your app if devices are added or removed from the system, or if the information for a device is updated.","pos":[2518,2836],"source":"The [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/br225459) namespace provides the [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) which can notify your app if devices are added or removed from the system, or if the information for a device is updated."},{"content":"Since MIDI-enabled apps typically are interested in both input and output devices, this example creates a helper class that implements the <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept> pattern, so that the same code can be used for both MIDI input and MIDI output devices, without the need for duplication.","pos":[2837,3115],"source":" Since MIDI-enabled apps typically are interested in both input and output devices, this example creates a helper class that implements the **DeviceWatcher** pattern, so that the same code can be used for both MIDI input and MIDI output devices, without the need for duplication."},{"content":"Add a new class to your project to serve as your device watcher.","pos":[3117,3181]},{"content":"In this example the class is named <bpt id=\"p1\">**</bpt>MyMidiDeviceWatcher<ept id=\"p1\">**</ept>.","pos":[3182,3241],"source":" In this example the class is named **MyMidiDeviceWatcher**."},{"content":"The rest of the code in this section is used to implement the helper class.","pos":[3242,3317]},{"content":"Add some member variables to the class:","pos":[3319,3358]},{"pos":[3364,3488],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceWatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225446)</ept> object that will monitor for device changes.","source":"A [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) object that will monitor for device changes."},{"content":"A device selector string that will contain the MIDI in port selector string for one instance and the MIDI out port selector string for another instance.","pos":[3493,3645]},{"pos":[3650,3795],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242868)</ept> control that will be populated with the names of the available devices.","source":"A [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) control that will be populated with the names of the available devices."},{"pos":[3800,3954],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreDispatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208211)</ept> that is required to update the UI from a thread other than the UI thread.","source":"A [**CoreDispatcher**](https://msdn.microsoft.com/library/windows/apps/br208211) that is required to update the UI from a thread other than the UI thread."},{"pos":[3966,3982],"content":"WatcherVariables"},{"pos":[4054,4242],"content":"Add a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceInformationCollection<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225395)</ept> property that is used to access the current list of devices from outside the helper class.","source":"Add a [**DeviceInformationCollection**](https://msdn.microsoft.com/library/windows/apps/br225395) property that is used to access the current list of devices from outside the helper class."},{"pos":[4254,4288],"content":"DeclareDeviceInformationCollection"},{"pos":[4378,4542],"content":"In class constructor, the caller passes in the MIDI device selector string, the <bpt id=\"p1\">**</bpt>ListBox<ept id=\"p1\">**</ept> for listing the devices, and the <bpt id=\"p2\">**</bpt>Dispatcher<ept id=\"p2\">**</ept> needed to update the UI.","source":"In class constructor, the caller passes in the MIDI device selector string, the **ListBox** for listing the devices, and the **Dispatcher** needed to update the UI."},{"pos":[4544,4745],"content":"Call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceInformation.CreateWatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225427)</ept> to create a new instance of the <bpt id=\"p3\">**</bpt>DeviceWatcher<ept id=\"p3\">**</ept> class, passing in the MIDI device selector string.","source":"Call [**DeviceInformation.CreateWatcher**](https://msdn.microsoft.com/library/windows/apps/br225427) to create a new instance of the **DeviceWatcher** class, passing in the MIDI device selector string."},{"content":"Register handlers for the watcher's event handlers.","pos":[4747,4798]},{"pos":[4810,4828],"content":"WatcherConstructor"},{"pos":[4902,4949],"content":"The <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept> has the following events:","source":"The **DeviceWatcher** has the following events:"},{"pos":[4955,5075],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Added<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225450)</ept> - Raised when a new device is added to the system.","source":"[**Added**](https://msdn.microsoft.com/library/windows/apps/br225450) - Raised when a new device is added to the system."},{"pos":[5080,5202],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Removed<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225453)</ept> - Raised when a device is removed from the system.","source":"[**Removed**](https://msdn.microsoft.com/library/windows/apps/br225453) - Raised when a device is removed from the system."},{"pos":[5207,5355],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Updated<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225458)</ept> - Raised when the information associated with an existing device is updated.","source":"[**Updated**](https://msdn.microsoft.com/library/windows/apps/br225458) - Raised when the information associated with an existing device is updated."},{"pos":[5360,5530],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>EnumerationCompleted<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225451)</ept> - Raised when the watcher has completed its enumeration of the requested device type.","source":"[**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) - Raised when the watcher has completed its enumeration of the requested device type."},{"content":"In the event handler for each of these events, a helper method, <bpt id=\"p1\">**</bpt>UpdateDevices<ept id=\"p1\">**</ept>, is called to update the <bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept> with the current list of devices.","pos":[5532,5684],"source":"In the event handler for each of these events, a helper method, **UpdateDevices**, is called to update the **ListBox** with the current list of devices."},{"content":"Because <bpt id=\"p1\">**</bpt>UpdateDevices<ept id=\"p1\">**</ept> updates UI elements and these event handlers are not called on the UI thread, each call must be wrapped in a call to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>RunAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept>, which causes the specified code to be run on the UI thread.","pos":[5685,5961],"source":" Because **UpdateDevices** updates UI elements and these event handlers are not called on the UI thread, each call must be wrapped in a call to [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317), which causes the specified code to be run on the UI thread."},{"pos":[5973,5993],"content":"WatcherEventHandlers"},{"pos":[6069,6313],"content":"The <bpt id=\"p1\">**</bpt>UpdateDevices<ept id=\"p1\">**</ept> helper method calls <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DeviceInformation.FindAllAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225432)</ept> and updates the <bpt id=\"p4\">**</bpt>ListBox<ept id=\"p4\">**</ept> with the names of the returned devices as described previously in this article.","source":"The **UpdateDevices** helper method calls [**DeviceInformation.FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/br225432) and updates the **ListBox** with the names of the returned devices as described previously in this article."},{"pos":[6325,6345],"content":"WatcherUpdateDevices"},{"pos":[6421,6681],"content":"Add methods to start the watcher, using the <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept> object's <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Start<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225454)</ept> method, and to stop the watcher, using the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Stop<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br225456)</ept> method.","source":"Add methods to start the watcher, using the **DeviceWatcher** object's [**Start**](https://msdn.microsoft.com/library/windows/apps/br225454) method, and to stop the watcher, using the [**Stop**](https://msdn.microsoft.com/library/windows/apps/br225456) method."},{"pos":[6693,6709],"content":"WatcherStopStart"},{"content":"Provide a destructor to unregister the watcher event handlers and set the device watcher to null.","pos":[6781,6878]},{"pos":[6890,6907],"content":"WatcherDestructor"},{"content":"Create MIDI ports to send and receive messages","pos":[6983,7029]},{"pos":[7031,7206],"content":"In the code behind for your page, declare member variables to hold two instances of the <bpt id=\"p1\">**</bpt>MyMidiDeviceWatcher<ept id=\"p1\">**</ept> helper class, one for input devices and one for output devices.","source":"In the code behind for your page, declare member variables to hold two instances of the **MyMidiDeviceWatcher** helper class, one for input devices and one for output devices."},{"pos":[7218,7239],"content":"DeclareDeviceWatchers"},{"content":"Create a new instance of the watcher helper classes, passing in the device selector string, the <bpt id=\"p1\">**</bpt>ListBox<ept id=\"p1\">**</ept> to be populated, and the <bpt id=\"p2\">**</bpt>CoreDispatcher<ept id=\"p2\">**</ept> object that can be accessed through the page's <bpt id=\"p3\">**</bpt>Dispatcher<ept id=\"p3\">**</ept> property.","pos":[7310,7533],"source":"Create a new instance of the watcher helper classes, passing in the device selector string, the **ListBox** to be populated, and the **CoreDispatcher** object that can be accessed through the page's **Dispatcher** property."},{"content":"Then, call the method to start each object's <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept>.","pos":[7534,7597],"source":" Then, call the method to start each object's **DeviceWatcher**."},{"pos":[7599,7903],"content":"Shortly after each <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept> is started, it will finish enumerating the current devices connected to the system and raise its <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>EnumerationCompleted<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225451)</ept> event, which will cause each <bpt id=\"p4\">**</bpt>ListBox<ept id=\"p4\">**</ept> to be updated with the current MIDI devices.","source":"Shortly after each **DeviceWatcher** is started, it will finish enumerating the current devices connected to the system and raise its [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) event, which will cause each **ListBox** to be updated with the current MIDI devices."},{"pos":[7915,7928],"content":"StartWatchers"},{"pos":[7991,8295],"content":"Shortly after each <bpt id=\"p1\">**</bpt>DeviceWatcher<ept id=\"p1\">**</ept> is started, it will finish enumerating the current devices connected to the system and raise its <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>EnumerationCompleted<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225451)</ept> event, which will cause each <bpt id=\"p4\">**</bpt>ListBox<ept id=\"p4\">**</ept> to be updated with the current MIDI devices.","source":"Shortly after each **DeviceWatcher** is started, it will finish enumerating the current devices connected to the system and raise its [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) event, which will cause each **ListBox** to be updated with the current MIDI devices."},{"content":"When the user selects an item in the MIDI input <bpt id=\"p1\">**</bpt>ListBox<ept id=\"p1\">**</ept>, the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SelectionChanged<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209776)</ept> event is raised.","pos":[8297,8459],"source":"When the user selects an item in the MIDI input **ListBox**, the [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) event is raised."},{"content":"In the handler for this event, access the <bpt id=\"p1\">**</bpt>DeviceInformationCollection<ept id=\"p1\">**</ept> property of the helper class to get the current list of devices.","pos":[8460,8598],"source":" In the handler for this event, access the **DeviceInformationCollection** property of the helper class to get the current list of devices."},{"content":"If there are entries in the list, select the <bpt id=\"p1\">**</bpt>DeviceInformation<ept id=\"p1\">**</ept> object with the index corresponding to the <bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept> control's <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SelectedIndex<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br209768)</ept>.","pos":[8599,8809],"source":" If there are entries in the list, select the **DeviceInformation** object with the index corresponding to the **ListBox** control's [**SelectedIndex**](https://msdn.microsoft.com/library/windows/apps/br209768)."},{"pos":[8811,9156],"content":"Create the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MidiInPort<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894770)</ept> object representing the selected input device by calling <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MidiInPort.FromIdAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn894776)</ept>, passing in the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Id<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br225437)</ept> property of the selected device.","source":"Create the [**MidiInPort**](https://msdn.microsoft.com/library/windows/apps/dn894770) object representing the selected input device by calling [**MidiInPort.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn894776), passing in the [**Id**](https://msdn.microsoft.com/library/windows/apps/br225437) property of the selected device."},{"pos":[9158,9353],"content":"Register a handler for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MessageReceived<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894781)</ept> event, which is raised whenever a MIDI message is received through the specified device.","source":"Register a handler for the [**MessageReceived**](https://msdn.microsoft.com/library/windows/apps/dn894781) event, which is raised whenever a MIDI message is received through the specified device."},{"pos":[9365,9387],"content":"InPortSelectionChanged"},{"content":"When the <bpt id=\"p1\">**</bpt>MessageReceived<ept id=\"p1\">**</ept> handler is called, the message is contained in the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Message<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn894783)</ept> property of the <bpt id=\"p4\">**</bpt>MidiMessageReceivedEventArgs<ept id=\"p4\">**</ept>.","pos":[9459,9660],"source":"When the **MessageReceived** handler is called, the message is contained in the [**Message**](https://msdn.microsoft.com/library/windows/apps/dn894783) property of the **MidiMessageReceivedEventArgs**."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Type<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894726)</ept> of the message object is a value from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MidiMessageType<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn894786)</ept> enumeration indicating the type of message that was received.","pos":[9661,9917],"source":" The [**Type**](https://msdn.microsoft.com/library/windows/apps/dn894726) of the message object is a value from the [**MidiMessageType**](https://msdn.microsoft.com/library/windows/apps/dn894786) enumeration indicating the type of message that was received."},{"content":"The data of the message depends on the type of the message.","pos":[9918,9977]},{"content":"This example checks to see if the message is a note on message and, if so, outputs the midi channel, note, and velocity of the message.","pos":[9978,10113]},{"pos":[10125,10140],"content":"MessageReceived"},{"pos":[10205,10419],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectionChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209776)</ept> handler for the output device <bpt id=\"p3\">**</bpt>ListBox<ept id=\"p3\">**</ept> works the same as the handler for input devices, except no event handler is registered.","source":"The [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) handler for the output device **ListBox** works the same as the handler for input devices, except no event handler is registered."},{"pos":[10431,10454],"content":"OutPortSelectionChanged"},{"content":"Once the output device is created, you can send a message by creating a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IMidiMessage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn911508)</ept> for the type of message you want to send.","pos":[10527,10721],"source":"Once the output device is created, you can send a message by creating a new [**IMidiMessage**](https://msdn.microsoft.com/library/windows/apps/dn911508) for the type of message you want to send."},{"content":"In this example, the message is a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>NoteOnMessage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894817)</ept>.","pos":[10722,10834],"source":" In this example, the message is a [**NoteOnMessage**](https://msdn.microsoft.com/library/windows/apps/dn894817)."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SendMessage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn894730)</ept> method of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IMidiOutPort<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn894727)</ept> object is called to send the message.","pos":[10835,11043],"source":" The [**SendMessage**](https://msdn.microsoft.com/library/windows/apps/dn894730) method of the [**IMidiOutPort**](https://msdn.microsoft.com/library/windows/apps/dn894727) object is called to send the message."},{"pos":[11055,11066],"content":"SendMessage"},{"content":"When your app is deactivated, be sure to clean up your apps resources.","pos":[11127,11197]},{"content":"Unregister your event handlers and set the MIDI in port and out port objects to null.","pos":[11198,11283]},{"content":"Stop the device watchers and set them to null.","pos":[11284,11330]},{"pos":[11342,11349],"content":"CleanUp"},{"content":"Using the built-in Windows General MIDI synth","pos":[11409,11454]},{"content":"When you enumerate output MIDI devices using the technique described above, your app will discover a MIDI device called \"Microsoft GS Wavetable Synth\".","pos":[11456,11607]},{"content":"This is a built-in General MIDI synthesizer that you can play from your app.","pos":[11608,11684]},{"content":"However, attempting to create a MIDI outport to this device will fail unless you have included the SDK extension for the built-in synth in your project.","pos":[11685,11837]},{"content":"To include the General MIDI Synth SDK extension in your app project","pos":[11841,11908]},{"pos":[11916,12020],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, under your project, right-click <bpt id=\"p2\">**</bpt>References<ept id=\"p2\">**</ept> and select <bpt id=\"p3\">**</bpt>Add reference...<ept id=\"p3\">**</ept>","source":"In **Solution Explorer**, under your project, right-click **References** and select **Add reference...**"},{"pos":[12025,12063],"content":"Expand the <bpt id=\"p1\">**</bpt>Universal Windows<ept id=\"p1\">**</ept> node.","source":"Expand the **Universal Windows** node."},{"pos":[12068,12090],"content":"Select <bpt id=\"p1\">**</bpt>Extensions<ept id=\"p1\">**</ept>.","source":"Select **Extensions**."},{"pos":[12095,12426],"content":"From the list of extensions, select **Microsoft General MIDI DLS for Universal Windows Apps**.\n**Note**  If there are multiple versions of the extension, be sure to select the version that matches the target for your app. You can see which SDK version your app is targeting on the **Application** tab of the project Properties.","leadings":["","    "],"nodes":[{"content":"From the list of extensions, select <bpt id=\"p1\">**</bpt>Microsoft General MIDI DLS for Universal Windows Apps<ept id=\"p1\">**</ept>.","pos":[0,94],"source":"From the list of extensions, select **Microsoft General MIDI DLS for Universal Windows Apps**."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If there are multiple versions of the extension, be sure to select the version that matches the target for your app.","pos":[95,221],"source":"**Note**  If there are multiple versions of the extension, be sure to select the version that matches the target for your app."},{"content":"You can see which SDK version your app is targeting on the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> tab of the project Properties.","pos":[222,327],"source":" You can see which SDK version your app is targeting on the **Application** tab of the project Properties."}]}],"content":"---\nms.assetid: 9146212C-8480-4C16-B74C-D7F08C7086AF\ndescription: This article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.\ntitle: MIDI\n---\n\n# MIDI\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThis article shows you how to enumerate MIDI (Musical Instrument Digital Interface) devices and send and receive MIDI messages from a Universal Windows app.\n\n## Enumerate MIDI devices\n\nBefore enumerating and using MIDI devices, add the following namespaces to your project.\n\n[!code-cs[Using](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetUsing)]\n\nAdd a [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) control to your XAML page that will allow the user to select one of the MIDI input devices attached to the system. Add another one to list the MIDI output devices.\n\n[!code-xml[MidiListBoxes](./code/MIDIWin10/cs/MainPage.xaml#SnippetMidiListBoxes)]\n\nThe [**FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/br225432) method [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/br225393) class is used to enumerate many different types of devices that are recognized by Windows. To specify that you only want the method to find MIDI input devices, use the selector string returned by [**MidiInPort.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn894779). **FindAllAsync** returns a [**DeviceInformationCollection**](https://msdn.microsoft.com/library/windows/apps/br225395) that contains a **DeviceInformation** for each MIDI input device registered with the system. If the returned collection contains no items, then there are no available MIDI input devices. If there are items in the collection, loop through the **DeviceInformation** objects and add the name of each device to the MIDI input device **ListBox**.\n\n[!code-cs[EnumerateMidiInputDevices](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetEnumerateMidiInputDevices)]\n\nEnumerating MIDI output devices works the exact same way as enumerating input devices, except that you should specify the selector string returned by [**MidiOutPort.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn894845) when calling **FindAllAsync**.\n\n[!code-cs[EnumerateMidiOutputDevices](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetEnumerateMidiOutputDevices)]\n\n## Create a device watcher helper class\n\nThe [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/br225459) namespace provides the [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) which can notify your app if devices are added or removed from the system, or if the information for a device is updated. Since MIDI-enabled apps typically are interested in both input and output devices, this example creates a helper class that implements the **DeviceWatcher** pattern, so that the same code can be used for both MIDI input and MIDI output devices, without the need for duplication.\n\nAdd a new class to your project to serve as your device watcher. In this example the class is named **MyMidiDeviceWatcher**. The rest of the code in this section is used to implement the helper class.\n\nAdd some member variables to the class:\n\n-   A [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) object that will monitor for device changes.\n-   A device selector string that will contain the MIDI in port selector string for one instance and the MIDI out port selector string for another instance.\n-   A [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) control that will be populated with the names of the available devices.\n-   A [**CoreDispatcher**](https://msdn.microsoft.com/library/windows/apps/br208211) that is required to update the UI from a thread other than the UI thread.\n\n[!code-cs[WatcherVariables](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherVariables)]\n\nAdd a [**DeviceInformationCollection**](https://msdn.microsoft.com/library/windows/apps/br225395) property that is used to access the current list of devices from outside the helper class.\n\n[!code-cs[DeclareDeviceInformationCollection](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetDeclareDeviceInformationCollection)]\n\nIn class constructor, the caller passes in the MIDI device selector string, the **ListBox** for listing the devices, and the **Dispatcher** needed to update the UI.\n\nCall [**DeviceInformation.CreateWatcher**](https://msdn.microsoft.com/library/windows/apps/br225427) to create a new instance of the **DeviceWatcher** class, passing in the MIDI device selector string.\n\nRegister handlers for the watcher's event handlers.\n\n[!code-cs[WatcherConstructor](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherConstructor)]\n\nThe **DeviceWatcher** has the following events:\n\n-   [**Added**](https://msdn.microsoft.com/library/windows/apps/br225450) - Raised when a new device is added to the system.\n-   [**Removed**](https://msdn.microsoft.com/library/windows/apps/br225453) - Raised when a device is removed from the system.\n-   [**Updated**](https://msdn.microsoft.com/library/windows/apps/br225458) - Raised when the information associated with an existing device is updated.\n-   [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) - Raised when the watcher has completed its enumeration of the requested device type.\n\nIn the event handler for each of these events, a helper method, **UpdateDevices**, is called to update the **ListBox** with the current list of devices. Because **UpdateDevices** updates UI elements and these event handlers are not called on the UI thread, each call must be wrapped in a call to [**RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317), which causes the specified code to be run on the UI thread.\n\n[!code-cs[WatcherEventHandlers](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherEventHandlers)]\n\nThe **UpdateDevices** helper method calls [**DeviceInformation.FindAllAsync**](https://msdn.microsoft.com/library/windows/apps/br225432) and updates the **ListBox** with the names of the returned devices as described previously in this article.\n\n[!code-cs[WatcherUpdateDevices](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherUpdateDevices)]\n\nAdd methods to start the watcher, using the **DeviceWatcher** object's [**Start**](https://msdn.microsoft.com/library/windows/apps/br225454) method, and to stop the watcher, using the [**Stop**](https://msdn.microsoft.com/library/windows/apps/br225456) method.\n\n[!code-cs[WatcherStopStart](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherStopStart)]\n\nProvide a destructor to unregister the watcher event handlers and set the device watcher to null.\n\n[!code-cs[WatcherDestructor](./code/MIDIWin10/cs/MyMidiDeviceWatcher.cs#SnippetWatcherDestructor)]\n\n## Create MIDI ports to send and receive messages\n\nIn the code behind for your page, declare member variables to hold two instances of the **MyMidiDeviceWatcher** helper class, one for input devices and one for output devices.\n\n[!code-cs[DeclareDeviceWatchers](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetDeclareDeviceWatchers)]\n\nCreate a new instance of the watcher helper classes, passing in the device selector string, the **ListBox** to be populated, and the **CoreDispatcher** object that can be accessed through the page's **Dispatcher** property. Then, call the method to start each object's **DeviceWatcher**.\n\nShortly after each **DeviceWatcher** is started, it will finish enumerating the current devices connected to the system and raise its [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) event, which will cause each **ListBox** to be updated with the current MIDI devices.\n\n[!code-cs[StartWatchers](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetStartWatchers)]\n\nShortly after each **DeviceWatcher** is started, it will finish enumerating the current devices connected to the system and raise its [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451) event, which will cause each **ListBox** to be updated with the current MIDI devices.\n\nWhen the user selects an item in the MIDI input **ListBox**, the [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) event is raised. In the handler for this event, access the **DeviceInformationCollection** property of the helper class to get the current list of devices. If there are entries in the list, select the **DeviceInformation** object with the index corresponding to the **ListBox** control's [**SelectedIndex**](https://msdn.microsoft.com/library/windows/apps/br209768).\n\nCreate the [**MidiInPort**](https://msdn.microsoft.com/library/windows/apps/dn894770) object representing the selected input device by calling [**MidiInPort.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn894776), passing in the [**Id**](https://msdn.microsoft.com/library/windows/apps/br225437) property of the selected device.\n\nRegister a handler for the [**MessageReceived**](https://msdn.microsoft.com/library/windows/apps/dn894781) event, which is raised whenever a MIDI message is received through the specified device.\n\n[!code-cs[InPortSelectionChanged](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetInPortSelectionChanged)]\n\nWhen the **MessageReceived** handler is called, the message is contained in the [**Message**](https://msdn.microsoft.com/library/windows/apps/dn894783) property of the **MidiMessageReceivedEventArgs**. The [**Type**](https://msdn.microsoft.com/library/windows/apps/dn894726) of the message object is a value from the [**MidiMessageType**](https://msdn.microsoft.com/library/windows/apps/dn894786) enumeration indicating the type of message that was received. The data of the message depends on the type of the message. This example checks to see if the message is a note on message and, if so, outputs the midi channel, note, and velocity of the message.\n\n[!code-cs[MessageReceived](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetMessageReceived)]\n\nThe [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) handler for the output device **ListBox** works the same as the handler for input devices, except no event handler is registered.\n\n[!code-cs[OutPortSelectionChanged](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetOutPortSelectionChanged)]\n\nOnce the output device is created, you can send a message by creating a new [**IMidiMessage**](https://msdn.microsoft.com/library/windows/apps/dn911508) for the type of message you want to send. In this example, the message is a [**NoteOnMessage**](https://msdn.microsoft.com/library/windows/apps/dn894817). The [**SendMessage**](https://msdn.microsoft.com/library/windows/apps/dn894730) method of the [**IMidiOutPort**](https://msdn.microsoft.com/library/windows/apps/dn894727) object is called to send the message.\n\n[!code-cs[SendMessage](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetSendMessage)]\n\nWhen your app is deactivated, be sure to clean up your apps resources. Unregister your event handlers and set the MIDI in port and out port objects to null. Stop the device watchers and set them to null.\n\n[!code-cs[CleanUp](./code/MIDIWin10/cs/MainPage.xaml.cs#SnippetCleanUp)]\n\n## Using the built-in Windows General MIDI synth\n\nWhen you enumerate output MIDI devices using the technique described above, your app will discover a MIDI device called \"Microsoft GS Wavetable Synth\". This is a built-in General MIDI synthesizer that you can play from your app. However, attempting to create a MIDI outport to this device will fail unless you have included the SDK extension for the built-in synth in your project.\n\n**To include the General MIDI Synth SDK extension in your app project**\n\n1.  In **Solution Explorer**, under your project, right-click **References** and select **Add reference...**\n2.  Expand the **Universal Windows** node.\n3.  Select **Extensions**.\n4.  From the list of extensions, select **Microsoft General MIDI DLS for Universal Windows Apps**.\n    **Note**  If there are multiple versions of the extension, be sure to select the version that matches the target for your app. You can see which SDK version your app is targeting on the **Application** tab of the project Properties.\n\n \n\n \n\n\n\n\n"}