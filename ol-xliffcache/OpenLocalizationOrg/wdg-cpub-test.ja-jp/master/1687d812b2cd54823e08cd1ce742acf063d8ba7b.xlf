<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">1687d812b2cd54823e08cd1ce742acf063d8ba7b</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\setting-up-directx-resources.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">0535371ee0cc388473dd4dc7edaab16cf091ccc8</mda:meta><mda:meta type="olxliffhash">fdc34c8be992f760c0b863f73790bf8ef692e4d8</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Set up DirectX resources and display an image</source>
					<target>Set up DirectX resources and display an image</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</source>
					<target>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Set up DirectX resources and display an image</source>
					<target>Set up DirectX resources and display an image</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</source>
					<target>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Objective:</pc> To set up DirectX resources in a C++ Universal Windows Platform (UWP) app and to display a solid color.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Objective:</pc> To set up DirectX resources in a C++ Universal Windows Platform (UWP) app and to display a solid color.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>We assume that you are familiar with C++.</source>
					<target>We assume that you are familiar with C++.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>You also need basic experience with graphics programming concepts.</source>
					<target>You also need basic experience with graphics programming concepts.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time to complete:</pc> 20 minutes.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time to complete:</pc> 20 minutes.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Instructions</source>
					<target>Instructions</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>1. Declaring Direct3D interface variables with ComPtr</source>
					<target>1. Declaring Direct3D interface variables with ComPtr</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh279674.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>We declare Direct3D interface variables with the ComPtr <pc dataRefEnd="id2" dataRefStart="id1" id="p1">smart pointer</pc> template from the Windows Runtime C++ Template Library (WRL), so we can manage the lifetime of those variables in an exception safe manner.</source>
					<target>We declare Direct3D interface variables with the ComPtr <pc dataRefEnd="id2" dataRefStart="id1" id="p1">smart pointer</pc> template from the Windows Runtime C++ Template Library (WRL), so we can manage the lifetime of those variables in an exception safe manner.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We can then use those variables to access the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComPtr class</pc></pc> and its members.</source>
					<target>We can then use those variables to access the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ComPtr class</pc></pc> and its members.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>For example:</source>
					<target>For example:</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>If you declare <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11RenderTargetView</pc></pc> with ComPtr, you can then use ComPtr’s <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GetAddressOf</pc> method to get the address of the pointer to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11RenderTargetView</pc> (\*\*ID3D11RenderTargetView) to pass to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ID3D11DeviceContext::OMSetRenderTargets</pc></pc>.</source>
					<target>If you declare <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11RenderTargetView</pc></pc> with ComPtr, you can then use ComPtr’s <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GetAddressOf</pc> method to get the address of the pointer to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11RenderTargetView</pc> (\*\*ID3D11RenderTargetView) to pass to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ID3D11DeviceContext::OMSetRenderTargets</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OMSetRenderTargets</pc> binds the render target to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">output-merger stage</pc> to specify the render target as the output target.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OMSetRenderTargets</pc> binds the render target to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">output-merger stage</pc> to specify the render target as the output target.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>After the sample app is started, it initializes and loads, and is then ready to run.</source>
					<target>After the sample app is started, it initializes and loads, and is then ready to run.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>2. Creating the Direct3D device</source>
					<target>2. Creating the Direct3D device</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>To use the Direct3D API to render a scene, we must first create a Direct3D device that represents the display adapter.</source>
					<target>To use the Direct3D API to render a scene, we must first create a Direct3D device that represents the display adapter.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To create the Direct3D device, we call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11CreateDevice</pc></pc> function.</source>
					<target>To create the Direct3D device, we call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11CreateDevice</pc></pc> function.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476329)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We specify levels 9.1 through 11.1 in the array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D\_FEATURE\_LEVEL</pc></pc> values.</source>
					<target>We specify levels 9.1 through 11.1 in the array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D\_FEATURE\_LEVEL</pc></pc> values.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Direct3D walks the array in order and returns the highest supported feature level.</source>
					<target>Direct3D walks the array in order and returns the highest supported feature level.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So, to get the highest feature level available, we list the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D3D\_FEATURE\_LEVEL</pc> array entries from highest to lowest.</source>
					<target>So, to get the highest feature level available, we list the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D3D\_FEATURE\_LEVEL</pc> array entries from highest to lowest.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_BGRA_SUPPORT)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
				</originalData>
				<segment state="initial">
					<source>We pass the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_CREATE\_DEVICE\_BGRA\_SUPPORT</pc></pc> flag to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Flags</pc> parameter to make Direct3D resources interoperate with Direct2D.</source>
					<target>We pass the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_CREATE\_DEVICE\_BGRA\_SUPPORT</pc></pc> flag to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Flags</pc> parameter to make Direct3D resources interoperate with Direct2D.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_DEBUG)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If we use the debug build, we also pass the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_CREATE\_DEVICE\_DEBUG</pc></pc> flag.</source>
					<target>If we use the debug build, we also pass the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_CREATE\_DEVICE\_DEBUG</pc></pc> flag.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/jj200584)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about debugging apps, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the debug layer to debug apps</pc>.</source>
					<target>For more info about debugging apps, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using the debug layer to debug apps</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>We obtain the Direct3D 11.1 device (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc>) and device context (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc>) by querying the Direct3D 11 device and device context that are returned from <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">D3D11CreateDevice</pc></pc>.</source>
					<target>We obtain the Direct3D 11.1 device (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc>) and device context (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc>) by querying the Direct3D 11 device and device context that are returned from <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">D3D11CreateDevice</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>3. Creating the swap chain</source>
					<target>3. Creating the swap chain</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Next, we create a swap chain that the device uses for rendering and display.</source>
					<target>Next, we create a swap chain that the device uses for rendering and display.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We declare and initialize a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_CHAIN\_DESC1</pc></pc> structure to describe the swap chain.</source>
					<target>We declare and initialize a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_CHAIN\_DESC1</pc></pc> structure to describe the swap chain.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb173077#DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>Then, we set up the swap chain as flip-model (that is, a swap chain that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL</pc></pc> value set in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SwapEffect</pc> member) and set the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Format</pc> member to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc>.</source>
					<target>Then, we set up the swap chain as flip-model (that is, a swap chain that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL</pc></pc> value set in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SwapEffect</pc> member) and set the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Format</pc> member to <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/desktop/bb173072)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>We set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Count</pc> member of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DXGI\_SAMPLE\_DESC</pc></pc> structure that the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SampleDesc</pc> member specifies to 1 and the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Quality</pc> member of <pc dataRefEnd="id12" dataRefStart="id11" id="p6">DXGI\_SAMPLE\_DESC</pc> to zero because flip-model doesn’t support multiple sample antialiasing (MSAA).</source>
					<target>We set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Count</pc> member of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DXGI\_SAMPLE\_DESC</pc></pc> structure that the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SampleDesc</pc> member specifies to 1 and the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Quality</pc> member of <pc dataRefEnd="id12" dataRefStart="id11" id="p6">DXGI\_SAMPLE\_DESC</pc> to zero because flip-model doesn’t support multiple sample antialiasing (MSAA).</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BufferCount</pc> member to 2 so the swap chain can use a front buffer to present to the display device and a back buffer that serves as the render target.</source>
					<target>We set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BufferCount</pc> member to 2 so the swap chain can use a front buffer to present to the display device and a back buffer that serves as the render target.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>We obtain the underlying DXGI device by querying the Direct3D 11.1 device.</source>
					<target>We obtain the underlying DXGI device by querying the Direct3D 11.1 device.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, we call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIDevice1::SetMaximumFrameLatency</pc></pc> method with 1 as the maximum number of back buffer frames that DXGI can queue.</source>
					<target>To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, we call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIDevice1::SetMaximumFrameLatency</pc></pc> method with 1 as the maximum number of back buffer frames that DXGI can queue.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>This ensures that the app is rendered only after the vertical blank.</source>
					<target>This ensures that the app is rendered only after the vertical blank.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>To finally create the swap chain, we need to get the parent factory from the DXGI device.</source>
					<target>To finally create the swap chain, we need to get the parent factory from the DXGI device.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174531)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/bb174542)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIDevice::GetAdapter</pc></pc> to get the adapter for the device, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IDXGIObject::GetParent</pc></pc> on the adapter to get the parent factory (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IDXGIFactory2</pc></pc>).</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIDevice::GetAdapter</pc></pc> to get the adapter for the device, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IDXGIObject::GetParent</pc></pc> on the adapter to get the parent factory (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IDXGIFactory2</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To create the swap chain, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIFactory2::CreateSwapChainForCoreWindow</pc></pc> with the swap-chain descriptor and the app’s core window.</source>
					<target>To create the swap chain, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGIFactory2::CreateSwapChainForCoreWindow</pc></pc> with the swap-chain descriptor and the app’s core window.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>4. Creating the render-target view</source>
					<target>4. Creating the render-target view</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>To render graphics to the window, we need to create a render-target view.</source>
					<target>To render graphics to the window, we need to create a render-target view.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174570)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::GetBuffer</pc></pc> to get the swap chain’s back buffer to use when we create the render-target view.</source>
					<target>We call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::GetBuffer</pc></pc> to get the swap chain’s back buffer to use when we create the render-target view.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We specify the back buffer as a 2D texture (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Texture2D</pc></pc>).</source>
					<target>We specify the back buffer as a 2D texture (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Texture2D</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To create the render-target view, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateRenderTargetView</pc></pc> with the swap chain’s back buffer.</source>
					<target>To create the render-target view, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CreateRenderTargetView</pc></pc> with the swap chain’s back buffer.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476260)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We must specify to draw to the entire core window by specifying the view port (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_VIEWPORT</pc></pc>) as the full size of the swap chain's back buffer.</source>
					<target>We must specify to draw to the entire core window by specifying the view port (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11\_VIEWPORT</pc></pc>) as the full size of the swap chain's back buffer.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</data>
				</originalData>
				<segment state="initial">
					<source>We use the view port in a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::RSSetViewports</pc></pc> to bind the view port to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">rasterizer stage</pc> of the pipeline.</source>
					<target>We use the view port in a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::RSSetViewports</pc></pc> to bind the view port to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">rasterizer stage</pc> of the pipeline.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>The rasterizer stage converts vector information into a raster image.</source>
					<target>The rasterizer stage converts vector information into a raster image.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>In this case, we don't require a conversion because we are just displaying a solid color.</source>
					<target>In this case, we don't require a conversion because we are just displaying a solid color.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>5. Presenting the rendered image</source>
					<target>5. Presenting the rendered image</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>We enter an endless loop to continually render and display the scene.</source>
					<target>We enter an endless loop to continually render and display the scene.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>In this loop, we call:</source>
					<target>In this loop, we call:</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::OMSetRenderTargets</pc></pc> to specify the render target as the output target.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::OMSetRenderTargets</pc></pc> to specify the render target as the output target.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ClearRenderTargetView</pc></pc> to clear the render target to a solid color.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ClearRenderTargetView</pc></pc> to clear the render target to a solid color.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::Present</pc></pc> to present the rendered image to the window.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::Present</pc></pc> to present the rendered image to the window.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Because we previously set the maximum frame latency to 1, Windows generally slows down the render loop to the screen refresh rate, typically around 60 Hz.</source>
					<target>Because we previously set the maximum frame latency to 1, Windows generally slows down the render loop to the screen refresh rate, typically around 60 Hz.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Windows slows down the render loop by making the app sleep when the app calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Present</pc></pc>.</source>
					<target>Windows slows down the render loop by making the app sleep when the app calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Present</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Windows makes the app sleep until the screen is refreshed.</source>
					<target>Windows makes the app sleep until the screen is refreshed.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>6. Resizing the app window and the swap chain’s buffer</source>
					<target>6. Resizing the app window and the swap chain’s buffer</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>If the size of the app window changes, the app must resize the swap chain’s buffers, recreate the render-target view, and then present the resized rendered image.</source>
					<target>If the size of the app window changes, the app must resize the swap chain’s buffers, recreate the render-target view, and then present the resized rendered image.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To resize the swap chain’s buffers, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::ResizeBuffers</pc></pc>.</source>
					<target>To resize the swap chain’s buffers, we call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IDXGISwapChain::ResizeBuffers</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In this call, we leave the number of buffers and the format of the buffers unchanged (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BufferCount</pc> parameter to two and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NewFormat</pc> parameter to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc>).</source>
					<target>In this call, we leave the number of buffers and the format of the buffers unchanged (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BufferCount</pc> parameter to two and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NewFormat</pc> parameter to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DXGI\_FORMAT\_B8G8R8A8\_UNORM</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>We make the size of the swap chain’s back buffer the same size as the resized window.</source>
					<target>We make the size of the swap chain’s back buffer the same size as the resized window.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>After we resize the swap chain’s buffers, we create the new render target and present the new rendered image similarly to when we initialized the app.</source>
					<target>After we resize the swap chain’s buffers, we create the new render target and present the new rendered image similarly to when we initialized the app.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Summary and next steps</source>
					<target>Summary and next steps</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>We created a Direct3D device, swap chain, and render-target view, and presented the rendered image to the display.</source>
					<target>We created a Direct3D device, swap chain, and render-target view, and presented the rendered image to the display.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Next, we also draw a triangle on the display.</source>
					<target>Next, we also draw a triangle on the display.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Creating shaders and drawing primitives</source>
					<target>Creating shaders and drawing primitives</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>