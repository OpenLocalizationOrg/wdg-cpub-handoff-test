{"nodes":[{"pos":[17,139],"content":"Use visual feedback to show users when their interactions with a Windows Store app are detected, interpreted, and handled.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use visual feedback to show users when their interactions with a Windows Store app are detected, interpreted, and handled.","pos":[0,122]}]},{"pos":[147,162],"content":"Visual feedback","needQuote":true,"needEscape":true,"nodes":[{"content":"Visual feedback","pos":[0,15]}]},{"content":"Guidelines for visual feedback","pos":[263,293]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[296,334]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[335,430],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Use visual feedback to show users when their interactions are detected, interpreted, and handled.","pos":[433,530]},{"content":"Visual feedback can help users by encouraging interaction.","pos":[531,589]},{"content":"It indicates the success of an interaction, which improves the user's sense of control.","pos":[590,677]},{"content":"It also relays system status and reduces errors.","pos":[678,726]},{"content":"Important APIs","pos":[730,744]},{"content":"Windows.Devices.Input","pos":[755,776]},{"content":"Windows.UI.Input","pos":[845,861]},{"content":"Windows.UI.Core","pos":[930,945]},{"pos":[1111,1125],"content":"Dos and don'ts"},{"content":"Provide visual feedback no matter how brief the contact.","pos":[1132,1188]},{"content":"This helps the user to:","pos":[1189,1212]},{"content":"Confirm that the touch screen is working.","pos":[1221,1262]},{"content":"Identify whether the target is touch-enabled or responsive.","pos":[1271,1330]},{"content":"Identify whether the user missed their intended target.","pos":[1339,1394]},{"content":"Display feedback immediately for all interaction events.","pos":[1399,1455]},{"content":"Provide feedback that consists of subtle, intuitive cues that don't distract users.","pos":[1460,1543]},{"content":"Ensure touch targets stick to the fingertip during all manipulations.","pos":[1548,1617]},{"content":"Enable selection of items with the swipe gesture when panning is constrained to one direction.","pos":[1622,1716]},{"content":"Don't use touch visualizations in situations where they might interfere with the use of the app.","pos":[1721,1817]},{"content":"For more info, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ShowGestureFeedback<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241969)</ept>.","pos":[1818,1921],"source":" For more info, see [**ShowGestureFeedback**](https://msdn.microsoft.com/library/windows/apps/br241969)."},{"content":"Don't display feedback unless it is absolutely necessary.","pos":[1926,1983]},{"content":"Keep the UI clean and uncluttered by not showing visual feedback unless you are adding value that is not available elsewhere.","pos":[1984,2109]},{"content":"Never display tooltips if they repeat text that is already visible.","pos":[2110,2177]},{"content":"Tooltips should be reserved for specific occasions, such as truncated text (text with ellipsis) that is not displayed when the item is selected, or where additional information is required to understand or use your app.","pos":[2178,2397]},{"pos":[2402,2604],"content":"Don't use the press and hold gesture for anything other than informational UI.\n**Important**  Press and hold can be used for selection in cases where both horizontal and vertical panning is enabled.","leadings":["","    "],"nodes":[{"content":"Don't use the press and hold gesture for anything other than informational UI.","pos":[0,78]},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  Press and hold can be used for selection in cases where both horizontal and vertical panning is enabled.","pos":[79,198],"source":"**Important**  Press and hold can be used for selection in cases where both horizontal and vertical panning is enabled."}]},{"content":"Don't customize the visual feedback behaviors of the built-in Windows 8 gestures, as this can create an inconsistent and confusing user experience.","pos":[2617,2764]},{"content":"Don't show visual feedback during panning or dragging; the actual movement of the object on the screen is sufficient.","pos":[2769,2886]},{"content":"But if the content area doesn't pan or scroll, then use visualizations to indicate the boundary conditions.","pos":[2887,2994]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Guidelines for panning<ept id=\"p1\">](guidelines-for-panning.md)</ept>.","pos":[2995,3066],"source":" For more info, see [Guidelines for panning](guidelines-for-panning.md)."},{"content":"Don't display feedback for a control that isn't identified as the target.","pos":[3071,3144]},{"content":"Visual feedback is critical when relying on touch input for activities that require accuracy and precision based on location.","pos":[3145,3270]},{"content":"Displaying feedback every time you detect touch input helps the user understand any custom targeting heuristics defined by your app and its controls.","pos":[3271,3420]},{"content":"Don't use feedback behavior intended for one input type with another.","pos":[3425,3494]},{"content":"For example, a keyboard focus rectangle should be used only with keyboard input, not touch.","pos":[3495,3586]},{"pos":[3723,3748],"content":"Additional usage guidance"},{"content":"Contact visualizations are especially critical for touch interactions that require accuracy and precision.","pos":[3751,3857]},{"content":"For example, your app should clearly indicate the location of a tap to let a user know if they missed their target, how much they missed it by, and what adjustments they must make.","pos":[3858,4038]},{"content":"Use the platform controls exposed through the Windows Store apps language frameworks (Windows Store apps using JavaScript and Windows Store apps using C++, C#, or Visual Basic) to get Windows 8 visualizations for free.","pos":[4040,4258]},{"content":"If your app features custom interactions that require customized feedback, you should ensure the feedback is appropriate, spans input devices, and doesn't distract a user from their task.","pos":[4259,4446]},{"content":"This can be a particular issue in game or drawing apps, where the visual feedback might conflict with or obscure critical UI.","pos":[4447,4572]},{"content":"Important","pos":[4576,4585]},{"content":"We don't recommend changing the interaction behavior of the built-in gestures.","pos":[4590,4668]},{"content":"Feedback UI","pos":[4675,4686]},{"content":"Feedback UI is generally dependent on the input device (touch, touchpad, mouse, pen/stylus, keyboard, and so on).","pos":[4690,4803]},{"content":"For example, the built-in feedback for a mouse usually involves moving and changing the cursor, while touch and pen require contact visualizations, and keyboard input and navigation uses focus rectangles and highlighting.","pos":[4804,5025]},{"pos":[5027,5166],"content":"Use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ShowGestureFeedback<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241969)</ept> to set feedback behavior for the platform gestures.","source":"Use [**ShowGestureFeedback**](https://msdn.microsoft.com/library/windows/apps/br241969) to set feedback behavior for the platform gestures."},{"content":"If customizing feedback UI, ensure you provide feedback that supports, and is suitable for, all input modes.","pos":[5168,5276]},{"content":"Here are some examples of built-in contact visualizations in Windows 8.","pos":[5278,5349]},{"content":"Touch visualization","pos":[5603,5622]},{"content":"Mouse/touchpad visualization","pos":[5748,5776]},{"content":"Pen visualization","pos":[5898,5915]},{"content":"Keyboard visualization","pos":[6046,6068]},{"content":"Informational UI (popups)","pos":[6182,6207]},{"content":"One of the primary forms of visual feedback is informational UI (or disambiguation UI).","pos":[6211,6298]},{"content":"Informational UI identifies and displays info about an object, describes functionality and how to access it, and provides guidance where necessary.","pos":[6299,6446]},{"content":"Here are the different types of informational UI supported by Windows Store apps.","pos":[6448,6529]},{"content":"Tooltips","pos":[6535,6543]},{"content":"Rich tooltips","pos":[6548,6561]},{"content":"Menus","pos":[6566,6571]},{"content":"Message dialogs","pos":[6576,6591]},{"content":"Flyouts","pos":[6596,6603]},{"content":"Informational UI is particularly useful for overcoming fingertip occlusion (obstruction) and improving touch interactions with your app.","pos":[6605,6741]},{"content":"It even has a built-in gesture dedicated to it: press and hold.","pos":[6742,6805]},{"content":"Press and hold is a timed interaction, which are typically discouraged in Windows 8.","pos":[6807,6891]},{"content":"A timed interaction is acceptable in this case as it is used as a tool for learning and exploration.","pos":[6892,6992]},{"content":"The recommended length of time depends on the type of informational UI.","pos":[6993,7064]},{"content":"Here are the recommended time thresholds.","pos":[7065,7106]},{"content":"Informational UI type Timing Activation Usage Occlusion tooltip (for scrubbing and small targets) 0 ms Yes For rapid clarification of actions.","pos":[7108,7250],"source":"Informational UI type\nTiming\nActivation\nUsage\nOcclusion tooltip (for scrubbing and small targets)\n0 ms\nYes\nFor rapid clarification of actions."},{"content":"Typically used for commands.","pos":[7251,7279]},{"content":"Occlusion tooltip (for actions) 200 ms Yes Rich tooltip ~2000 ms No For slower, more deliberate exploration and learning.","pos":[7280,7401],"source":"\nOcclusion tooltip (for actions)\n200 ms\nYes\nRich tooltip\n~2000 ms\nNo\nFor slower, more deliberate exploration and learning."},{"content":"Typically used with collection items.","pos":[7402,7439]},{"content":"Self-revealing interaction ~2000 ms No Context menu ~2000 ms No Exposes a limited set of commands related to the selected object.","pos":[7440,7569],"source":"\nSelf-revealing interaction\n~2000 ms\nNo\nContext menu\n~2000 ms\nNo\nExposes a limited set of commands related to the selected object."},{"content":"Flyouts ~2000 ms No Exposes a limited set of commands related to the selected object.","pos":[7570,7655],"source":"\nFlyouts\n~2000 ms\nNo\nExposes a limited set of commands related to the selected object."},{"pos":[7659,7869],"content":"For more info on providing informational UI, see <bpt id=\"p1\">[</bpt>Laying out your UI<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465304)</ept> and <bpt id=\"p2\">[</bpt>Displaying popups<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh738362)</ept>.","source":"For more info on providing informational UI, see [Laying out your UI](https://msdn.microsoft.com/library/windows/apps/hh465304) and [Displaying popups](https://msdn.microsoft.com/library/windows/apps/hh738362)."},{"content":"Tooltips","pos":[7873,7881]},{"content":"Use tooltips to reveal more information about a control before asking the user to perform an action.","pos":[7885,7985]},{"content":"Tooltips (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Tooltip<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br229763)</ept>) appear automatically when a user performs a press and hold gesture (or a hover event is detected) on a control or object.","pos":[7987,8191],"source":"Tooltips ([**Tooltip**](https://msdn.microsoft.com/library/windows/apps/br229763)) appear automatically when a user performs a press and hold gesture (or a hover event is detected) on a control or object."},{"content":"The tooltip disappears when the contact or cursor moves off the control or object.","pos":[8192,8274]},{"content":"A tooltip can include text and images, but is not interactive.","pos":[8275,8337]},{"content":"Occlusion tooltips for small targets","pos":[8341,8377]},{"content":"Occlusion tooltips describe the occluded target.","pos":[8381,8429]},{"content":"These tooltips are useful when targeting and activating items smaller than a standard touch target size, such as hyperlinks on a webpage.","pos":[8430,8567]},{"content":"You can replace these tooltips with an informational pop-up after a certain time threshold has passed.","pos":[8569,8671]},{"content":"For example, use an occlusion tooltip to show the occluded text of the hyperlink and then replace the tooltip with a pop-up containing the URL.","pos":[8672,8815]},{"content":"Occlusion tooltips for actions and commands","pos":[8819,8862]},{"content":"These tooltips describe the action or command that occurs when a user lifts their finger from an element.","pos":[8866,8971]},{"content":"These tooltips are useful when targeting and activating a button or similar control.","pos":[8972,9056]},{"content":"A small-target tooltip can be followed by an action tooltip after a certain time threshold has passed.","pos":[9058,9160]},{"content":"In this case, the small-target tooltip should expand to include the additional info in the action tooltip.","pos":[9161,9267]},{"content":"Rich tooltip","pos":[9271,9283]},{"content":"These tooltips reveal secondary info about an element.","pos":[9287,9341]},{"content":"For example, a rich tooltip could be a text description of an image, the full text of a truncated title, or other info relevant to the target.","pos":[9342,9484]},{"content":"Rich tooltips typically contain info that doesn't need to be made available immediately and, in some cases, might be distracting if shown too quickly.","pos":[9486,9636]},{"content":"A longer time threshold lets users be more deliberate about obtaining the info.","pos":[9637,9716]},{"content":"After a rich tooltip is displayed, the object is no longer activated when the user lifts their finger.","pos":[9718,9820]},{"content":"The reason for this is that info gleaned from the tooltip might influence the user to not to activate the item.","pos":[9821,9932]},{"content":"We recommend that the visual design and info in the rich tooltip be distinct and more substantial than that of a standard tooltip.","pos":[9934,10064]},{"content":"Context menu","pos":[10068,10080]},{"pos":[10084,10314],"content":"The context menu (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PopupMenu<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208693)</ept>) is a lightweight menu that gives users immediate access to actions (like clipboard commands) on text or UI objects in Windows Store apps.","source":"The context menu ([**PopupMenu**](https://msdn.microsoft.com/library/windows/apps/br208693)) is a lightweight menu that gives users immediate access to actions (like clipboard commands) on text or UI objects in Windows Store apps."},{"content":"The touch-optimized context menu consists of two parts.","pos":[10316,10371]},{"content":"A visual cue, the hint, is displayed as a result of a hold interaction.","pos":[10372,10443]},{"content":"Then, the context menu itself is displayed after the hint disappears and the user lifts their finger.","pos":[10444,10545]},{"content":"The following images demonstrate how to invoke the default context menu for text by tapping within a selection or on a gripper (press and hold can also be used).","pos":[10547,10708]},{"content":"tap (or press and hold) within the selection or on a gripper to invoke the context menu.","pos":[10712,10800]},{"pos":[10842,10927],"content":"See <bpt id=\"p1\">[</bpt>Adding context menus<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465300)</ept>.","source":"See [Adding context menus](https://msdn.microsoft.com/library/windows/apps/hh465300)."},{"content":"Message dialog","pos":[10931,10945]},{"content":"Use message dialogs (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MessageDialog<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208674)</ept>) to prompt users for a response, based on user action or app state, before continuing.","pos":[10949,11134],"source":"Use message dialogs ([**MessageDialog**](https://msdn.microsoft.com/library/windows/apps/br208674)) to prompt users for a response, based on user action or app state, before continuing."},{"content":"Explicit user interaction is required and input to the app is blocked until the user responds.","pos":[11135,11229]},{"content":"message dialog for an error message","pos":[11233,11268]},{"content":"Here are some typical reasons to display a message dialog.","pos":[11297,11355]},{"content":"Present urgent information","pos":[11361,11387]},{"content":"Ask a question before continuing execution","pos":[11392,11434]},{"content":"Display error messages","pos":[11439,11461]},{"pos":[11463,11550],"content":"See <bpt id=\"p1\">[</bpt>Adding message dialogs<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh738361)</ept>.","source":"See [Adding message dialogs](https://msdn.microsoft.com/library/windows/apps/hh738361)."},{"content":"Flyout","pos":[11554,11560]},{"content":"A flyout (<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Flyout<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br211726)</ept>) is a lightweight UI panel displayed on a tap, click, or other activation that is used to present the user with information, questions, or a menu of options related to the current activity.","pos":[11564,11834],"source":"A flyout ([**Flyout**](https://msdn.microsoft.com/library/windows/apps/br211726)) is a lightweight UI panel displayed on a tap, click, or other activation that is used to present the user with information, questions, or a menu of options related to the current activity."},{"content":"It can be light dismissed (it disappears when the user touches or clicks outside the flyout panel or presses ESC).","pos":[11835,11949]},{"content":"In other words, a flyout can be ignored.","pos":[11950,11990]},{"content":"Unlike tooltips, flyouts can accept input.","pos":[11992,12034]},{"content":"Unlike message dialogs, the app is still active and accepting input.","pos":[12035,12103]},{"content":"flyout with confirmation","pos":[12107,12131]},{"pos":[12153,12242],"content":"See <bpt id=\"p1\">[</bpt>Adding Flyouts and menus<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh465325)</ept>.","source":"See [Adding Flyouts and menus](https://msdn.microsoft.com/library/windows/apps/hh465325)."},{"content":"Self-revealing UI","pos":[12310,12327]},{"content":"A self-revealing interaction is an informative visual cue or animation that demonstrates how to perform an action with a target object and provides a preview of the result of that action.","pos":[12331,12518]},{"content":"These next few images show the self-revealing interaction for a cross-slide selection on the Start screen.","pos":[12520,12626]},{"content":"When a user touches an app tile (without dragging the tile) the tile slides down (as if being dragged) to reveal the selection check mark that would appear if the app were actually selected.","pos":[12627,12817]},{"content":"screen shot showing an unselected state.","pos":[12821,12861]},{"content":"Press finger down on an item to start the self-revealing interaction for selection.","pos":[12900,12983]},{"content":"The self-revealing interaction demonstrates what action will be performed on the item.","pos":[12984,13070]},{"content":"screen shot showing the animation for selection.","pos":[13075,13123]},{"content":"Without lifting the finger, swipe to actually select the item.","pos":[13162,13224]},{"content":"screen shot showing the animation for drag and drop.","pos":[13229,13281]},{"content":"If the user continues to slide their finger, the self-revealing visualization changes to show that the object can now be moved.","pos":[13320,13447]},{"content":"After a self-revealing interaction is displayed, the object is no longer activated when the user lifts their finger.","pos":[13450,13566]},{"pos":[13604,13620],"content":"Related articles"},{"content":"For designers","pos":[13625,13638]},{"pos":[13643,13713],"content":"<bpt id=\"p1\">[</bpt>Guidelines for panning<ept id=\"p1\">](guidelines-for-panning.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>For developers<ept id=\"p2\">**</ept>","source":"[Guidelines for panning](guidelines-for-panning.md)\n**For developers**"},{"pos":[13716,13812],"content":"<bpt id=\"p1\">[</bpt>Custom user interactions<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt185599)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>Samples<ept id=\"p2\">**</ept>","source":"[Custom user interactions](https://msdn.microsoft.com/library/windows/apps/mt185599)\n**Samples**"},{"content":"Basic input sample","pos":[13816,13834]},{"content":"Low latency input sample","pos":[13888,13912]},{"content":"User interaction mode sample","pos":[13966,13994]},{"pos":[14047,14138],"content":"<bpt id=\"p1\">[</bpt>Focus visuals sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=619895)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>Archive samples<ept id=\"p2\">**</ept>","source":"[Focus visuals sample](http://go.microsoft.com/fwlink/p/?LinkID=619895)\n**Archive samples**"},{"content":"Input: XAML user input events sample","pos":[14142,14178]},{"content":"Input: Device capabilities sample","pos":[14232,14265]},{"content":"Input: Touch hit testing sample","pos":[14319,14350]},{"content":"XAML scrolling, panning, and zooming sample","pos":[14404,14447]},{"content":"Input: Simplified ink sample","pos":[14501,14529]},{"content":"Input: Windows 8 gestures sample","pos":[14583,14615]},{"content":"Input: Manipulations and gestures (C++) sample","pos":[14669,14715]},{"content":"DirectX touch input sample","pos":[14769,14795]}],"content":"---\nDescription: Use visual feedback to show users when their interactions with a Windows Store app are detected, interpreted, and handled.\ntitle: Visual feedback\nms.assetid: bf2f3672-95f0-4c8c-9a72-0934f2d3b767\nlabel: Visual feedback\ntemplate: detail.hbs\n---\n\n# Guidelines for visual feedback\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nUse visual feedback to show users when their interactions are detected, interpreted, and handled. Visual feedback can help users by encouraging interaction. It indicates the success of an interaction, which improves the user's sense of control. It also relays system status and reduces errors.\n\n**Important APIs**\n\n-   [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648)\n-   [**Windows.UI.Input**](https://msdn.microsoft.com/library/windows/apps/br242084)\n-   [**Windows.UI.Core**](https://msdn.microsoft.com/library/windows/apps/br208383)\n\n\n## <span id=\"Dos_and_don_ts\"></span><span id=\"dos_and_don_ts\"></span><span id=\"DOS_AND_DON_TS\"></span>Dos and don'ts\n\n\n-   Provide visual feedback no matter how brief the contact. This helps the user to:\n    -   Confirm that the touch screen is working.\n    -   Identify whether the target is touch-enabled or responsive.\n    -   Identify whether the user missed their intended target.\n-   Display feedback immediately for all interaction events.\n-   Provide feedback that consists of subtle, intuitive cues that don't distract users.\n-   Ensure touch targets stick to the fingertip during all manipulations.\n-   Enable selection of items with the swipe gesture when panning is constrained to one direction.\n-   Don't use touch visualizations in situations where they might interfere with the use of the app. For more info, see [**ShowGestureFeedback**](https://msdn.microsoft.com/library/windows/apps/br241969).\n-   Don't display feedback unless it is absolutely necessary. Keep the UI clean and uncluttered by not showing visual feedback unless you are adding value that is not available elsewhere. Never display tooltips if they repeat text that is already visible. Tooltips should be reserved for specific occasions, such as truncated text (text with ellipsis) that is not displayed when the item is selected, or where additional information is required to understand or use your app.\n-   Don't use the press and hold gesture for anything other than informational UI.\n    **Important**  Press and hold can be used for selection in cases where both horizontal and vertical panning is enabled.\n\n     \n\n-   Don't customize the visual feedback behaviors of the built-in Windows 8 gestures, as this can create an inconsistent and confusing user experience.\n-   Don't show visual feedback during panning or dragging; the actual movement of the object on the screen is sufficient. But if the content area doesn't pan or scroll, then use visualizations to indicate the boundary conditions. For more info, see [Guidelines for panning](guidelines-for-panning.md).\n-   Don't display feedback for a control that isn't identified as the target. Visual feedback is critical when relying on touch input for activities that require accuracy and precision based on location. Displaying feedback every time you detect touch input helps the user understand any custom targeting heuristics defined by your app and its controls.\n-   Don't use feedback behavior intended for one input type with another. For example, a keyboard focus rectangle should be used only with keyboard input, not touch.\n\n## <span id=\"Additional_usage_guidance\"></span><span id=\"additional_usage_guidance\"></span><span id=\"ADDITIONAL_USAGE_GUIDANCE\"></span>Additional usage guidance\n\n\nContact visualizations are especially critical for touch interactions that require accuracy and precision. For example, your app should clearly indicate the location of a tap to let a user know if they missed their target, how much they missed it by, and what adjustments they must make.\n\nUse the platform controls exposed through the Windows Store apps language frameworks (Windows Store apps using JavaScript and Windows Store apps using C++, C#, or Visual Basic) to get Windows 8 visualizations for free. If your app features custom interactions that require customized feedback, you should ensure the feedback is appropriate, spans input devices, and doesn't distract a user from their task. This can be a particular issue in game or drawing apps, where the visual feedback might conflict with or obscure critical UI.\n\n**Important**  \nWe don't recommend changing the interaction behavior of the built-in gestures.\n\n \n\n**Feedback UI**\n\nFeedback UI is generally dependent on the input device (touch, touchpad, mouse, pen/stylus, keyboard, and so on). For example, the built-in feedback for a mouse usually involves moving and changing the cursor, while touch and pen require contact visualizations, and keyboard input and navigation uses focus rectangles and highlighting.\n\nUse [**ShowGestureFeedback**](https://msdn.microsoft.com/library/windows/apps/br241969) to set feedback behavior for the platform gestures.\n\nIf customizing feedback UI, ensure you provide feedback that supports, and is suitable for, all input modes.\n\nHere are some examples of built-in contact visualizations in Windows 8.\n\n<table>\n<colgroup>\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\">\n<img src=\"images/feedback-touch-cursor.png\" alt=\"Screenshot showing a touch visualization.\" />\n<p>Touch visualization</p></td>\n<td align=\"left\"><img src=\"images/feedback-mouse-cursor2.png\" alt=\"Screenshot showing a mouse visualization.\" />\n<p>Mouse/touchpad visualization</p></td>\n<td align=\"left\"><img src=\"images/feedback-pen-cursor3.png\" alt=\"Screenshot showing a pen visualization.\" />\n<p>Pen visualization</p></td>\n<td align=\"left\"><img src=\"images/feedback-keyboard-cursor.png\" alt=\"Screenshot showing a keyboard visualization.\" />\n<p>Keyboard visualization</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n### <span id=\"informationalui\"></span><span id=\"INFORMATIONALUI\"></span>\n\n**Informational UI (popups)**\n\nOne of the primary forms of visual feedback is informational UI (or disambiguation UI). Informational UI identifies and displays info about an object, describes functionality and how to access it, and provides guidance where necessary.\n\nHere are the different types of informational UI supported by Windows Store apps.\n\n-   Tooltips\n-   Rich tooltips\n-   Menus\n-   Message dialogs\n-   Flyouts\n\nInformational UI is particularly useful for overcoming fingertip occlusion (obstruction) and improving touch interactions with your app. It even has a built-in gesture dedicated to it: press and hold.\n\nPress and hold is a timed interaction, which are typically discouraged in Windows 8. A timed interaction is acceptable in this case as it is used as a tool for learning and exploration. The recommended length of time depends on the type of informational UI. Here are the recommended time thresholds.\n\nInformational UI type\nTiming\nActivation\nUsage\nOcclusion tooltip (for scrubbing and small targets)\n0 ms\nYes\nFor rapid clarification of actions. Typically used for commands.\nOcclusion tooltip (for actions)\n200 ms\nYes\nRich tooltip\n~2000 ms\nNo\nFor slower, more deliberate exploration and learning. Typically used with collection items.\nSelf-revealing interaction\n~2000 ms\nNo\nContext menu\n~2000 ms\nNo\nExposes a limited set of commands related to the selected object.\nFlyouts\n~2000 ms\nNo\nExposes a limited set of commands related to the selected object.\n \n\nFor more info on providing informational UI, see [Laying out your UI](https://msdn.microsoft.com/library/windows/apps/hh465304) and [Displaying popups](https://msdn.microsoft.com/library/windows/apps/hh738362).\n\n**Tooltips**\n\nUse tooltips to reveal more information about a control before asking the user to perform an action.\n\nTooltips ([**Tooltip**](https://msdn.microsoft.com/library/windows/apps/br229763)) appear automatically when a user performs a press and hold gesture (or a hover event is detected) on a control or object. The tooltip disappears when the contact or cursor moves off the control or object. A tooltip can include text and images, but is not interactive.\n\n**Occlusion tooltips for small targets**\n\nOcclusion tooltips describe the occluded target. These tooltips are useful when targeting and activating items smaller than a standard touch target size, such as hyperlinks on a webpage.\n\nYou can replace these tooltips with an informational pop-up after a certain time threshold has passed. For example, use an occlusion tooltip to show the occluded text of the hyperlink and then replace the tooltip with a pop-up containing the URL.\n\n**Occlusion tooltips for actions and commands**\n\nThese tooltips describe the action or command that occurs when a user lifts their finger from an element. These tooltips are useful when targeting and activating a button or similar control.\n\nA small-target tooltip can be followed by an action tooltip after a certain time threshold has passed. In this case, the small-target tooltip should expand to include the additional info in the action tooltip.\n\n**Rich tooltip**\n\nThese tooltips reveal secondary info about an element. For example, a rich tooltip could be a text description of an image, the full text of a truncated title, or other info relevant to the target.\n\nRich tooltips typically contain info that doesn't need to be made available immediately and, in some cases, might be distracting if shown too quickly. A longer time threshold lets users be more deliberate about obtaining the info.\n\nAfter a rich tooltip is displayed, the object is no longer activated when the user lifts their finger. The reason for this is that info gleaned from the tooltip might influence the user to not to activate the item.\n\nWe recommend that the visual design and info in the rich tooltip be distinct and more substantial than that of a standard tooltip.\n\n**Context menu**\n\nThe context menu ([**PopupMenu**](https://msdn.microsoft.com/library/windows/apps/br208693)) is a lightweight menu that gives users immediate access to actions (like clipboard commands) on text or UI objects in Windows Store apps.\n\nThe touch-optimized context menu consists of two parts. A visual cue, the hint, is displayed as a result of a hold interaction. Then, the context menu itself is displayed after the hint disappears and the user lifts their finger.\n\nThe following images demonstrate how to invoke the default context menu for text by tapping within a selection or on a gripper (press and hold can also be used).\n\n![tap (or press and hold) within the selection or on a gripper to invoke the context menu.](images/textselection-show-context.png)\n\nSee [Adding context menus](https://msdn.microsoft.com/library/windows/apps/hh465300).\n\n**Message dialog**\n\nUse message dialogs ([**MessageDialog**](https://msdn.microsoft.com/library/windows/apps/br208674)) to prompt users for a response, based on user action or app state, before continuing. Explicit user interaction is required and input to the app is blocked until the user responds.\n\n![message dialog for an error message](images/messagedialog.png)\n\nHere are some typical reasons to display a message dialog.\n\n-   Present urgent information\n-   Ask a question before continuing execution\n-   Display error messages\n\nSee [Adding message dialogs](https://msdn.microsoft.com/library/windows/apps/hh738361).\n\n**Flyout**\n\nA flyout ([**Flyout**](https://msdn.microsoft.com/library/windows/apps/br211726)) is a lightweight UI panel displayed on a tap, click, or other activation that is used to present the user with information, questions, or a menu of options related to the current activity. It can be light dismissed (it disappears when the user touches or clicks outside the flyout panel or presses ESC). In other words, a flyout can be ignored.\n\nUnlike tooltips, flyouts can accept input. Unlike message dialogs, the app is still active and accepting input.\n\n![flyout with confirmation](images/flyout.png)\n\nSee [Adding Flyouts and menus](https://msdn.microsoft.com/library/windows/apps/hh465325).\n\n### <span id=\"selfreveal\"></span><span id=\"SELFREVEAL\"></span>\n\n**Self-revealing UI**\n\nA self-revealing interaction is an informative visual cue or animation that demonstrates how to perform an action with a target object and provides a preview of the result of that action.\n\nThese next few images show the self-revealing interaction for a cross-slide selection on the Start screen. When a user touches an app tile (without dragging the tile) the tile slides down (as if being dragged) to reveal the selection check mark that would appear if the app were actually selected.\n\n![screen shot showing an unselected state.](images/crossslide-selfreveal1.png)\n\n*Press finger down on an item to start the self-revealing interaction for selection. The self-revealing interaction demonstrates what action will be performed on the item.*\n\n![screen shot showing the animation for selection.](images/crossslide-selfreveal2.png)\n\n*Without lifting the finger, swipe to actually select the item.*\n\n![screen shot showing the animation for drag and drop.](images/crossslide-selfreveal3.png)\n\n*If the user continues to slide their finger, the self-revealing visualization changes to show that the object can now be moved.*\n\nAfter a self-revealing interaction is displayed, the object is no longer activated when the user lifts their finger.\n\n## <span id=\"related_topics\"></span>Related articles\n\n\n**For designers**\n* [Guidelines for panning](guidelines-for-panning.md)\n**For developers**\n* [Custom user interactions](https://msdn.microsoft.com/library/windows/apps/mt185599)\n**Samples**\n* [Basic input sample](http://go.microsoft.com/fwlink/p/?LinkID=620302)\n* [Low latency input sample](http://go.microsoft.com/fwlink/p/?LinkID=620304)\n* [User interaction mode sample](http://go.microsoft.com/fwlink/p/?LinkID=619894)\n* [Focus visuals sample](http://go.microsoft.com/fwlink/p/?LinkID=619895)\n**Archive samples**\n* [Input: XAML user input events sample](http://go.microsoft.com/fwlink/p/?linkid=226855)\n* [Input: Device capabilities sample](http://go.microsoft.com/fwlink/p/?linkid=231530)\n* [Input: Touch hit testing sample](http://go.microsoft.com/fwlink/p/?linkid=231590)\n* [XAML scrolling, panning, and zooming sample](http://go.microsoft.com/fwlink/p/?linkid=251717)\n* [Input: Simplified ink sample](http://go.microsoft.com/fwlink/p/?linkid=246570)\n* [Input: Windows 8 gestures sample](http://go.microsoft.com/fwlink/p/?LinkId=264995)\n* [Input: Manipulations and gestures (C++) sample](http://go.microsoft.com/fwlink/p/?linkid=231605)\n* [DirectX touch input sample](http://go.microsoft.com/fwlink/p/?LinkID=231627)\n \n\n \n\n\n\n\n"}