{"nodes":[{"pos":[11,48],"content":"Create and register a background task","needQuote":true,"needEscape":true,"nodes":[{"content":"Create and register a background task","pos":[0,37]}]},{"pos":[62,155],"content":"Create a background task class and register it to run when your app is not in the foreground.","needQuote":true,"needEscape":true,"nodes":[{"content":"Create a background task class and register it to run when your app is not in the foreground.","pos":[0,93]}]},{"content":"Create and register a background task","pos":[212,249]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[252,290]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[291,386],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[391,405]},{"content":"IBackgroundTask","pos":[416,431]},{"content":"BackgroundTaskBuilder","pos":[500,521]},{"content":"BackgroundTaskCompletedEventHandler","pos":[590,625]},{"content":"Create a background task class and register it to run when your app is not in the foreground.","pos":[688,781]},{"content":"Create the Background Task class","pos":[786,818]},{"content":"You can run code in the background by writing classes that implement the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBackgroundTask<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224794)</ept> interface.","pos":[821,984],"source":"You can run code in the background by writing classes that implement the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface."},{"content":"This code will run when a specific event is triggered by using, for example, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SystemTrigger<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224839)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MaintenanceTrigger<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh700517)</ept>.","pos":[985,1226],"source":" This code will run when a specific event is triggered by using, for example, [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224839) or [**MaintenanceTrigger**](https://msdn.microsoft.com/library/windows/apps/hh700517)."},{"content":"The following steps show you how to write a new class that implements the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBackgroundTask<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224794)</ept> interface.","pos":[1228,1392],"source":"The following steps show you how to write a new class that implements the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface."},{"content":"Before getting started, create a new project in your solution for background tasks.","pos":[1393,1476]},{"content":"Add a new empty class for your background task and import the <bpt id=\"p1\">[</bpt>Windows.ApplicationModel.Background<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224847)</ept> namespace.","pos":[1477,1645],"source":" Add a new empty class for your background task and import the [Windows.ApplicationModel.Background](https://msdn.microsoft.com/library/windows/apps/br224847) namespace."},{"content":"Create a new project for background tasks and add it to your solution.","pos":[1651,1721]},{"content":"To do this, right-click on your solution node in the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> and select Add-<ph id=\"ph1\">&amp;gt;</ph>New Project.","pos":[1722,1828],"source":" To do this, right-click on your solution node in the **Solution Explorer** and select Add-&gt;New Project."},{"content":"Then select the <bpt id=\"p1\">**</bpt>Windows Runtime Component (Universal Windows)<ept id=\"p1\">**</ept> project type, name the project, and click OK.","pos":[1829,1940],"source":" Then select the **Windows Runtime Component (Universal Windows)** project type, name the project, and click OK."},{"content":"Reference the background tasks project from your Universal Windows Platform (UWP) app project.","pos":[1945,2039]},{"content":"For a C++ app, right-click on your app project and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","pos":[2045,2118],"source":"For a C++ app, right-click on your app project and select **Properties**."},{"content":"Then go to <bpt id=\"p1\">**</bpt>Common Properties<ept id=\"p1\">**</ept> and click <bpt id=\"p2\">**</bpt>Add New Reference<ept id=\"p2\">**</ept>, check the box next to your background tasks project, and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept> on both dialogs.","pos":[2119,2271],"source":" Then go to **Common Properties** and click **Add New Reference**, check the box next to your background tasks project, and click **OK** on both dialogs."},{"content":"For a C# app, in your app project, right click on <bpt id=\"p1\">**</bpt>References<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Add New Reference<ept id=\"p2\">**</ept>.","pos":[2277,2375],"source":"For a C# app, in your app project, right click on **References** and select **Add New Reference**."},{"content":"Under <bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>Projects<ept id=\"p2\">**</ept> and then select the name of your background task project and click <bpt id=\"p3\">**</bpt>Ok<ept id=\"p3\">**</ept>.","pos":[2376,2490],"source":" Under **Solution**, select **Projects** and then select the name of your background task project and click **Ok**."},{"content":"Create a new class that implements the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBackgroundTask<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224794)</ept> interface.","pos":[2496,2625],"source":"Create a new class that implements the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Run<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224811)</ept> method is a required entry point that will be called when the specified event is triggered; this method is required in every background task.","pos":[2626,2839],"source":" The [**Run**](https://msdn.microsoft.com/library/windows/apps/br224811) method is a required entry point that will be called when the specified event is triggered; this method is required in every background task."},{"pos":[2847,2997],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The background task class itself - and all other classes in the background task project - need to be <bpt id=\"p2\">**</bpt>public<ept id=\"p2\">**</ept> classes that are <bpt id=\"p3\">**</bpt>sealed<ept id=\"p3\">**</ept>.","source":"**Note**  The background task class itself - and all other classes in the background task project - need to be **public** classes that are **sealed**."},{"content":"The following sample code shows a very basic starting point for a background task class:","pos":[3003,3091]},{"content":"If you run any asynchronous code in your background task, then your background task needs to use a deferral.","pos":[4383,4491]},{"content":"If you don't use a deferral, then the background task process can terminate unexpectedly if the Run method completes before your asynchronous method call has completed.","pos":[4492,4660]},{"content":"Request the deferral in the Run method before calling the asynchronous method.","pos":[4666,4744]},{"content":"Save the deferral to a global variable so it can be accessed from the asynchronous method.","pos":[4745,4835]},{"content":"Declare the deferral complete after the asynchronous code completes.","pos":[4836,4904]},{"content":"The following sample code gets the deferral, saves it, and releases it when the asynchronous code is complete:","pos":[4910,5020]},{"content":"The following steps are completed in one of your app classes (for example, MainPage.xaml.cs).","pos":[6694,6787]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  You can also create a function dedicated to registering background tasks - see <bpt id=\"p2\">[</bpt>Register a background task<ept id=\"p2\">](register-a-background-task.md)</ept>.","pos":[6791,6940],"source":"**Note**  You can also create a function dedicated to registering background tasks - see [Register a background task](register-a-background-task.md)."},{"content":"In that case, instead of using the next 3 steps, you can simply construct the trigger and provide it to the registration function along with the task name, task entry point, and (optionally) a condition.","pos":[6941,7144]},{"content":"Register the background task to run","pos":[7150,7185]},{"content":"Find out if the background task is already registered by iterating through the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskRegistration.AllTasks<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224787)</ept> property.","pos":[7193,7381],"source":"Find out if the background task is already registered by iterating through the [**BackgroundTaskRegistration.AllTasks**](https://msdn.microsoft.com/library/windows/apps/br224787) property."},{"content":"This step is important; if your app doesn't check for existing background task registrations, it could easily register the task multiple times, causing issues with performance and maxing out the task's available CPU time before work can complete.","pos":[7382,7628]},{"content":"The following example iterates on the AllTasks property and sets a flag variable to true if the task is already registered:","pos":[7634,7757]},{"content":"If the background task is not already registered, use <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskBuilder<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> to create an instance of your background task.","pos":[8593,8779],"source":"If the background task is not already registered, use [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) to create an instance of your background task."},{"content":"The task entry point should be the name of your background task class prefixed by the namespace.","pos":[8780,8876]},{"content":"The background task trigger controls when the background task will run.","pos":[8882,8953]},{"content":"For a list of possible triggers, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SystemTrigger<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224839)</ept>.","pos":[8954,9069],"source":" For a list of possible triggers, see [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224839)."},{"pos":[9075,9193],"content":"For example, this code creates a new background task and sets it to run when the <bpt id=\"p1\">**</bpt>TimeZoneChanged<ept id=\"p1\">**</ept> trigger is fired:","source":"For example, this code creates a new background task and sets it to run when the **TimeZoneChanged** trigger is fired:"},{"content":"You can add a condition to control when your task will run after the trigger event occurs (optional).","pos":[9778,9879]},{"content":"For example, if you don't want the task to run until the user is present, use the condition <bpt id=\"p1\">**</bpt>UserPresent<ept id=\"p1\">**</ept>.","pos":[9880,9988],"source":" For example, if you don't want the task to run until the user is present, use the condition **UserPresent**."},{"content":"For a list of possible conditions, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SystemConditionType<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224835)</ept>.","pos":[9989,10112],"source":" For a list of possible conditions, see [**SystemConditionType**](https://msdn.microsoft.com/library/windows/apps/br224835)."},{"content":"The following sample code assigns a condition requiring the user to be present:","pos":[10118,10197]},{"content":"Register the background task by calling the Register method on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskBuilder<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> object.","pos":[10439,10599],"source":"Register the background task by calling the Register method on the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) object."},{"content":"Store the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskRegistration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224786)</ept> result so it can be used in the next step.","pos":[10600,10743],"source":" Store the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) result so it can be used in the next step."},{"content":"The following code registers the background task and stores the result:","pos":[10749,10820]},{"content":"Handle background task completion using event handlers","pos":[11649,11703]},{"content":"You should register a method with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskCompletedEventHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224781)</ept>, so that your app can get results from the background task.","pos":[11706,11903],"source":"You should register a method with the [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781), so that your app can get results from the background task."},{"content":"When the app is launched or resumed, the mark method will be called if the background task has completed since the last time the app was in the foreground.","pos":[11904,12059]},{"content":"(The OnCompleted method will be called immediately if the background task completes while your app is currently in the foreground.)","pos":[12060,12191]},{"content":"Write an OnCompleted method to handle the completion of background tasks.","pos":[12197,12270]},{"content":"For example, the background task result might cause a UI update.","pos":[12271,12335]},{"content":"The method footprint shown here is required for the OnCompleted event handler method, even though this example does not use the <bpt id=\"p1\">*</bpt>args<ept id=\"p1\">*</ept> parameter.","pos":[12336,12481],"source":" The method footprint shown here is required for the OnCompleted event handler method, even though this example does not use the *args* parameter."},{"content":"The following sample code recognizes background task completion and calls an example UI update method that takes a message string.","pos":[12487,12617]},{"content":"Go back to where you registered the background task.","pos":[13620,13672]},{"content":"After that line of code, add a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskCompletedEventHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224781)</ept> object.","pos":[13673,13815],"source":" After that line of code, add a new [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781) object."},{"content":"Provide your OnCompleted method as the parameter for the <bpt id=\"p1\">**</bpt>BackgroundTaskCompletedEventHandler<ept id=\"p1\">**</ept> constructor.","pos":[13816,13925],"source":" Provide your OnCompleted method as the parameter for the **BackgroundTaskCompletedEventHandler** constructor."},{"pos":[13931,14162],"content":"The following sample code adds a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskCompletedEventHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224781)</ept> to the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BackgroundTaskRegistration<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br224786)</ept>:","source":"The following sample code adds a [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781) to the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786):"},{"content":"Declare that your app uses background tasks in the app manifest","pos":[14444,14507]},{"content":"Before your app can run background tasks, you must declare each background task in the app manifest.","pos":[14510,14610]},{"content":"If your app attempts to register a background task with a trigger that isn't listed in the manifest, the registration will fail.","pos":[14611,14739]},{"content":"Open the package manifest designer by opening the file named Package.appxmanifest.","pos":[14745,14827]},{"pos":[14832,14862],"content":"Open the <bpt id=\"p1\">**</bpt>Declarations<ept id=\"p1\">**</ept> tab.","source":"Open the **Declarations** tab."},{"pos":[14867,14960],"content":"From the <bpt id=\"p1\">**</bpt>Available Declarations<ept id=\"p1\">**</ept> drop-down, select <bpt id=\"p2\">**</bpt>Background Tasks<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>.","source":"From the **Available Declarations** drop-down, select **Background Tasks** and click **Add**."},{"pos":[14965,15002],"content":"Select the <bpt id=\"p1\">**</bpt>System event<ept id=\"p1\">**</ept> checkbox.","source":"Select the **System event** checkbox."},{"pos":[15007,15163],"content":"In the <bpt id=\"p1\">**</bpt>Entry point:<ept id=\"p1\">**</ept> textbox, enter the namespace and name of your background class which is for this example is RuntimeComponent1.ExampleBackgroundTask.","source":"In the **Entry point:** textbox, enter the namespace and name of your background class which is for this example is RuntimeComponent1.ExampleBackgroundTask."},{"content":"Close the manfiest designer.","pos":[15168,15196]},{"content":"The following Extensions element is added to your Package.appxmanifest file to register the background task:","pos":[15202,15310]},{"content":"Summary and next steps","pos":[15587,15609]},{"content":"You should now understand the basics of how to write a background task class, how to register the background task from within your app, and how to make your app recognize when the background task is complete.","pos":[15612,15820]},{"content":"You should also understand how to update the application manifest so that your app can successfully register the background task.","pos":[15821,15950]},{"pos":[15954,16155],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Download the <bpt id=\"p2\">[</bpt>background task sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkId=618666)</ept> to see similar code examples in the context of a complete and robust UWP app that uses background tasks.","source":"**Note**  Download the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) to see similar code examples in the context of a complete and robust UWP app that uses background tasks."},{"content":"See the following related topics for API reference, background task conceptual guidance, and more detailed instructions for writing apps that use background tasks.","pos":[16160,16323]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.","pos":[16327,16425],"source":"**Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps."},{"content":"If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[16426,16567],"source":" If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132)."},{"content":"Related topics","pos":[16575,16589]},{"content":"Detailed background task instructional topics","pos":[16594,16639]},{"content":"Respond to system events with background tasks","pos":[16646,16692]},{"content":"Register a background task","pos":[16748,16774]},{"content":"Set conditions for running a background task","pos":[16810,16854]},{"content":"Use a maintenance trigger","pos":[16908,16933]},{"content":"Handle a cancelled background task","pos":[16968,17002]},{"content":"Monitor background task progress and completion","pos":[17046,17093]},{"content":"Run a background task on a timer","pos":[17150,17182]},{"content":"Background task guidance","pos":[17225,17249]},{"content":"Guidelines for background tasks","pos":[17256,17287]},{"content":"Debug a background task","pos":[17328,17351]},{"content":"How to trigger suspend, resume, and background events in Windows Store apps (when debugging)","pos":[17384,17476]},{"content":"Background Task API Reference","pos":[17530,17559]},{"content":"Windows.ApplicationModel.Background","pos":[17568,17603]}],"content":"---\ntitle: Create and register a background task\ndescription: Create a background task class and register it to run when your app is not in the foreground.\nms.assetid: 4F98F6A3-0D3D-4EFB-BA8E-30ED37AE098B\n---\n\n# Create and register a background task\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794)\n-   [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768)\n-   [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781)\n\nCreate a background task class and register it to run when your app is not in the foreground.\n\n## Create the Background Task class\n\n\nYou can run code in the background by writing classes that implement the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface. This code will run when a specific event is triggered by using, for example, [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224839) or [**MaintenanceTrigger**](https://msdn.microsoft.com/library/windows/apps/hh700517).\n\nThe following steps show you how to write a new class that implements the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface. Before getting started, create a new project in your solution for background tasks. Add a new empty class for your background task and import the [Windows.ApplicationModel.Background](https://msdn.microsoft.com/library/windows/apps/br224847) namespace.\n\n1.  Create a new project for background tasks and add it to your solution. To do this, right-click on your solution node in the **Solution Explorer** and select Add-&gt;New Project. Then select the **Windows Runtime Component (Universal Windows)** project type, name the project, and click OK.\n2.  Reference the background tasks project from your Universal Windows Platform (UWP) app project.\n\n    For a C++ app, right-click on your app project and select **Properties**. Then go to **Common Properties** and click **Add New Reference**, check the box next to your background tasks project, and click **OK** on both dialogs.\n\n    For a C# app, in your app project, right click on **References** and select **Add New Reference**. Under **Solution**, select **Projects** and then select the name of your background task project and click **Ok**.\n\n3.  Create a new class that implements the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface. The [**Run**](https://msdn.microsoft.com/library/windows/apps/br224811) method is a required entry point that will be called when the specified event is triggered; this method is required in every background task.\n\n    > **Note**  The background task class itself - and all other classes in the background task project - need to be **public** classes that are **sealed**.\n\n    The following sample code shows a very basic starting point for a background task class:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     //\n>     // ExampleBackgroundTask.cs\n>     //\n> \n>     using Windows.ApplicationModel.Background;\n> \n>     namespace Tasks\n>     {\n>         public sealed class ExampleBackgroundTask : IBackgroundTask\n>         {\n>             public void Run(IBackgroundTaskInstance taskInstance)\n>             {\n>                 \n>             }        \n>         }\n>     }\n> ```\n> ```cpp\n>     //\n>     // ExampleBackgroundTask.cpp\n>     //\n> \n>     #include \"ExampleBackgroundTask.h\"\n> \n>     using namespace Tasks;\n> \n>     void ExampleBackgroundTask::Run(IBackgroundTaskInstance^ taskInstance)\n>     {\n> \n>     }\n>  ```\n\n    \n> ```cpp\n>     //\n>     // ExampleBackgroundTask.h\n>     //\n> \n>     #pragma once\n> \n>     using namespace Windows::ApplicationModel::Background;\n> \n>     namespace RuntimeComponent1\n>     {\n>         public ref class ExampleBackgroundTask sealed : public IBackgroundTask\n>         {\n> \n>         public:\n>             ExampleBackgroundTask();\n> \n>             virtual void Run(IBackgroundTaskInstance^ taskInstance);\n>             void OnCompleted(\n>                     BackgroundTaskRegistration^ task,\n>                     BackgroundTaskCompletedEventArgs^ args\n>                     );\n>         };\n>     }\n> ```\n\n4.  If you run any asynchronous code in your background task, then your background task needs to use a deferral. If you don't use a deferral, then the background task process can terminate unexpectedly if the Run method completes before your asynchronous method call has completed.\n\n    Request the deferral in the Run method before calling the asynchronous method. Save the deferral to a global variable so it can be accessed from the asynchronous method. Declare the deferral complete after the asynchronous code completes.\n\n    The following sample code gets the deferral, saves it, and releases it when the asynchronous code is complete:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     BackgroundTaskDeferral _deferral = taskInstance.GetDeferral(); // Note: define at class scope\n>     public async void Run(IBackgroundTaskInstance taskInstance)\n>     {\n>         //\n>         // TODO: Insert code to start one or more asynchronous methods using the\n>         //       await keyword, for example:\n>         //\n>         // await ExampleMethodAsync();\n>         //\n>         \n>         _deferral.Complete();\n>     }\n> ```\n> ```cpp\n>     BackgroundTaskDeferral^ deferral = taskInstance->GetDeferral(); // Note: define at class scope\n>     void ExampleBackgroundTask::Run(IBackgroundTaskInstance^ taskInstance)\n>     {\n>         //\n>         // TODO: Modify the following line of code to call a real async function.\n>         //       Note that the task<void> return type applies only to async\n>         //       actions. If you need to call an async operation instead, replace\n>         //       task<void> with the correct return type.\n>         //\n>         task<void> myTask(ExampleFunctionAsync());\n>         \n>         myTask.then([=] () {\n>             deferral->Complete();\n>         });\n>     }\n> ```\n\n    **Note**  In C#, your background task's asynchronous methods can be called using the **async/await** keywords. In C++, a similar result can be achieved by using a task chain.\n\n    For more information on asynchronous patterns, see [Asynchronous programming](https://msdn.microsoft.com/library/windows/apps/mt187335). For additional examples of how to use deferrals to keep a background task from stopping early, see the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666).\n\nThe following steps are completed in one of your app classes (for example, MainPage.xaml.cs).\n\n> **Note**  You can also create a function dedicated to registering background tasks - see [Register a background task](register-a-background-task.md). In that case, instead of using the next 3 steps, you can simply construct the trigger and provide it to the registration function along with the task name, task entry point, and (optionally) a condition.\n\n \n**Register the background task to run**\n\n1.  Find out if the background task is already registered by iterating through the [**BackgroundTaskRegistration.AllTasks**](https://msdn.microsoft.com/library/windows/apps/br224787) property. This step is important; if your app doesn't check for existing background task registrations, it could easily register the task multiple times, causing issues with performance and maxing out the task's available CPU time before work can complete.\n\n    The following example iterates on the AllTasks property and sets a flag variable to true if the task is already registered:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     var taskRegistered = false;\n>     var exampleTaskName = \"ExampleBackgroundTask\";\n> \n>     foreach (var task in BackgroundTaskRegistration.AllTasks)\n>     {\n>         if (task.Value.Name == exampleTaskName)\n>         {\n>             taskRegistered = true;\n>             break;\n>         }\n>     }\n> ```\n> ```cpp\n>     boolean taskRegistered = false;\n>     Platform::String^ exampleTaskName = \"ExampleBackgroundTask\";\n> \n>     auto iter = BackgroundTaskRegistration::AllTasks->First();\n>     auto hascur = iter->HasCurrent;\n> \n>     while (hascur)\n>     {\n>         auto cur = iter->Current->Value;\n> \n>         if(cur->Name == exampleTaskName)\n>         {\n>             taskRegistered = true;\n>             break;\n>         }\n> \n>         hascur = iter->MoveNext();\n>     }\n> ```\n\n2.  If the background task is not already registered, use [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) to create an instance of your background task. The task entry point should be the name of your background task class prefixed by the namespace.\n\n    The background task trigger controls when the background task will run. For a list of possible triggers, see [**SystemTrigger**](https://msdn.microsoft.com/library/windows/apps/br224839).\n\n    For example, this code creates a new background task and sets it to run when the **TimeZoneChanged** trigger is fired:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     var builder = new BackgroundTaskBuilder();\n> \n>     builder.Name = exampleTaskName;\n>     builder.TaskEntryPoint = \"RuntimeComponent1.ExampleBackgroundTask\";\n>     builder.SetTrigger(new SystemTrigger(SystemTriggerType.TimeZoneChange, false));\n> ```\n> ```cpp\n>     auto builder = ref new BackgroundTaskBuilder();\n> \n>     builder->Name = exampleTaskName;\n>     builder->TaskEntryPoint = \"RuntimeComponent1.ExampleBackgroundTask\";\n>     builder->SetTrigger(ref new SystemTrigger(SystemTriggerType::TimeZoneChange, false));\n> ```\n\n3.  You can add a condition to control when your task will run after the trigger event occurs (optional). For example, if you don't want the task to run until the user is present, use the condition **UserPresent**. For a list of possible conditions, see [**SystemConditionType**](https://msdn.microsoft.com/library/windows/apps/br224835).\n\n    The following sample code assigns a condition requiring the user to be present:\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cs\n>     builder.AddCondition(new SystemCondition(SystemConditionType.UserPresent));\n> ```\n> ```cpp\n>     builder->AddCondition(ref new SystemCondition(SystemConditionType::UserPresent));\n> ```\n\n4.  Register the background task by calling the Register method on the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) object. Store the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786) result so it can be used in the next step.\n\n    The following code registers the background task and stores the result:\n\n> [!div class=\"tabbedCodeSnippets\"]\n>     ```cs\n>     BackgroundTaskRegistration task = builder.Register();\n>     ```\n>     ```cpp\n>     BackgroundTaskRegistration^ task = builder->Register();\n>     ```\n\n    > **Note**  Universal Windows apps must call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) before registering any of the background trigger types.\n\n    To ensure that your Universal Windows app continues to run properly after you release an update, you must call [**RemoveAccess**](https://msdn.microsoft.com/library/windows/apps/hh700471) and then call [**RequestAccessAsync**](https://msdn.microsoft.com/library/windows/apps/hh700485) when your app launches after being updated. For more information, see [Guidelines for background tasks](guidelines-for-background-tasks.md).\n\n## Handle background task completion using event handlers\n\n\nYou should register a method with the [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781), so that your app can get results from the background task. When the app is launched or resumed, the mark method will be called if the background task has completed since the last time the app was in the foreground. (The OnCompleted method will be called immediately if the background task completes while your app is currently in the foreground.)\n\n1.  Write an OnCompleted method to handle the completion of background tasks. For example, the background task result might cause a UI update. The method footprint shown here is required for the OnCompleted event handler method, even though this example does not use the *args* parameter.\n\n    The following sample code recognizes background task completion and calls an example UI update method that takes a message string.\n\n> [!div class=\"tabbedCodeSnippets\"]\n>     ```cs\n>     private void OnCompleted(IBackgroundTaskRegistration task, BackgroundTaskCompletedEventArgs args)\n>     {\n>         var settings = Windows.Storage.ApplicationData.Current.LocalSettings;\n>         var key = task.TaskId.ToString();\n>         var message = settings.Values[key].ToString();\n>         UpdateUI(message);\n>     }\n>     ```\n>     ```cpp\n>     void ExampleBackgroundTask::OnCompleted(BackgroundTaskRegistration^ task, BackgroundTaskCompletedEventArgs^ args)\n>     {\n>         auto settings = ApplicationData::Current->LocalSettings->Values;\n>         auto key = task->TaskId.ToString();\n>         auto message = dynamic_cast<String^>(settings->Lookup(key));\n>         UpdateUI(message);\n>     }\n>     ```\n\n    > **Note**  UI updates should be performed asynchronously, to avoid holding up the UI thread. For an example, see the UpdateUI method in the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666).\n\n     \n\n2.  Go back to where you registered the background task. After that line of code, add a new [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781) object. Provide your OnCompleted method as the parameter for the **BackgroundTaskCompletedEventHandler** constructor.\n\n    The following sample code adds a [**BackgroundTaskCompletedEventHandler**](https://msdn.microsoft.com/library/windows/apps/br224781) to the [**BackgroundTaskRegistration**](https://msdn.microsoft.com/library/windows/apps/br224786):\n\n> [!div class=\"tabbedCodeSnippets\"]\n>     ```cs\n>     task.Completed += new BackgroundTaskCompletedEventHandler(OnCompleted);\n>     ```\n>     ```cpp\n>     task->Completed += ref new BackgroundTaskCompletedEventHandler(this, &amp;ExampleBackgroundTask::OnCompleted);\n>     ```\n\n## Declare that your app uses background tasks in the app manifest\n\n\nBefore your app can run background tasks, you must declare each background task in the app manifest. If your app attempts to register a background task with a trigger that isn't listed in the manifest, the registration will fail.\n\n1.  Open the package manifest designer by opening the file named Package.appxmanifest.\n2.  Open the **Declarations** tab.\n3.  From the **Available Declarations** drop-down, select **Background Tasks** and click **Add**.\n4.  Select the **System event** checkbox.\n5.  In the **Entry point:** textbox, enter the namespace and name of your background class which is for this example is RuntimeComponent1.ExampleBackgroundTask.\n6.  Close the manfiest designer.\n\n    The following Extensions element is added to your Package.appxmanifest file to register the background task:\n\n    ```xaml\n    <Extensions>\n      <Extension Category=\"windows.backgroundTasks\" EntryPoint=\"RuntimeComponent1.ExampleBackgroundTask\">\n        <BackgroundTasks>\n          <Task Type=\"systemEvent\" />\n        </BackgroundTasks>\n      </Extension>\n    </Extensions>\n    ```\n\n## Summary and next steps\n\n\nYou should now understand the basics of how to write a background task class, how to register the background task from within your app, and how to make your app recognize when the background task is complete. You should also understand how to update the application manifest so that your app can successfully register the background task.\n\n> **Note**  Download the [background task sample](http://go.microsoft.com/fwlink/p/?LinkId=618666) to see similar code examples in the context of a complete and robust UWP app that uses background tasks.\n\n \n\nSee the following related topics for API reference, background task conceptual guidance, and more detailed instructions for writing apps that use background tasks.\n\n> **Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps. If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n \n\n## Related topics\n\n\n**Detailed background task instructional topics**\n\n* [Respond to system events with background tasks](respond-to-system-events-with-background-tasks.md)\n* [Register a background task](register-a-background-task.md)\n* [Set conditions for running a background task](set-conditions-for-running-a-background-task.md)\n* [Use a maintenance trigger](use-a-maintenance-trigger.md)\n* [Handle a cancelled background task](handle-a-cancelled-background-task.md)\n* [Monitor background task progress and completion](monitor-background-task-progress-and-completion.md)\n* [Run a background task on a timer](run-a-background-task-on-a-timer-.md)\n\n**Background task guidance**\n\n* [Guidelines for background tasks](guidelines-for-background-tasks.md)\n* [Debug a background task](debug-a-background-task.md)\n* [How to trigger suspend, resume, and background events in Windows Store apps (when debugging)](http://go.microsoft.com/fwlink/p/?linkid=254345)\n\n**Background Task API Reference**\n\n* [**Windows.ApplicationModel.Background**](https://msdn.microsoft.com/library/windows/apps/br224847)\n\n \n\n \n\n\n\n"}