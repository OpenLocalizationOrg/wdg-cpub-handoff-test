{"nodes":[{"pos":[60,80],"content":"Use the inclinometer","needQuote":true,"needEscape":true,"nodes":[{"content":"Use the inclinometer","pos":[0,20]}]},{"pos":[94,162],"content":"Learn how to use the inclinometer to determine pitch, roll, and yaw.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to use the inclinometer to determine pitch, roll, and yaw.","pos":[0,68]}]},{"content":"Use the inclinometer","pos":[169,189]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[191,229]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[230,325],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"** Important APIs **","pos":[327,347]},{"content":"Windows.Devices.Sensors","pos":[356,379]},{"content":"Inclinometer","pos":[448,460]},{"content":"Learn how to use the inclinometer to determine pitch, roll, and yaw.","pos":[523,591]},{"content":"Some 3-D games require an inclinometer as an input device.","pos":[593,651]},{"content":"One common example is the flight simulator, which maps the three axes of the inclinometer (X, Y, and Z) to the elevator, aileron, and rudder inputs of the aircraft.","pos":[652,816]},{"content":"Prerequisites","pos":[822,835]},{"content":"You should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C#, and events.","pos":[837,944]},{"content":"The device or emulator that you're using must support a inclinometer.","pos":[946,1015]},{"content":"Create a simple inclinometer app","pos":[1021,1053]},{"content":"This section is divided into two subsections.","pos":[1055,1100]},{"content":"The first subsection will take you through the steps necessary to create a simple inclinometer application from scratch.","pos":[1101,1221]},{"content":"The following subsection explains the app you have just created.","pos":[1222,1286]},{"content":"Instructions","pos":[1293,1305]},{"pos":[1311,1419],"content":"Create a new project, choosing a <bpt id=\"p1\">**</bpt>Blank App (Universal Windows)<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Visual C#<ept id=\"p2\">**</ept> project templates.","source":"Create a new project, choosing a **Blank App (Universal Windows)** from the **Visual C#** project templates."},{"content":"Open your project's MainPage.xaml.cs file and replace the existing code with the following.","pos":[1425,1516]},{"content":"You'll need to rename the namespace in the previous snippet with the name you gave your project.","pos":[3754,3850]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>InclinometerCS<ept id=\"p1\">**</ept>, you'd replace <ph id=\"ph1\">`namespace App1`</ph> with <ph id=\"ph2\">`namespace InclinometerCS`</ph>.","pos":[3851,3978],"source":" For example, if you created a project named **InclinometerCS**, you'd replace `namespace App1` with `namespace InclinometerCS`."},{"content":"Open the file MainPage.xaml and replace the original contents with the following XML.","pos":[3984,4069]},{"content":"You'll need to replace the first part of the class name in the previous snippet with the namespace of your app.","pos":[5664,5775]},{"content":"For example, if you created a project named <bpt id=\"p1\">**</bpt>InclinometerCS<ept id=\"p1\">**</ept>, you'd replace <ph id=\"ph1\">`x:Class=\"App1.MainPage\"`</ph> with <ph id=\"ph2\">`x:Class=\"InclinometerCS.MainPage\"`</ph>.","pos":[5776,5921],"source":" For example, if you created a project named **InclinometerCS**, you'd replace `x:Class=\"App1.MainPage\"` with `x:Class=\"InclinometerCS.MainPage\"`."},{"content":"You should also replace <ph id=\"ph1\">`xmlns:local=\"using:App1\"`</ph> with <ph id=\"ph2\">`xmlns:local=\"using:InclinometerCS\"`</ph>.","pos":[5922,6015],"source":" You should also replace `xmlns:local=\"using:App1\"` with `xmlns:local=\"using:InclinometerCS\"`."},{"pos":[6021,6106],"content":"Press F5 or select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Start Debugging<ept id=\"p2\">**</ept> to build, deploy, and run the app.","source":"Press F5 or select **Debug** > **Start Debugging** to build, deploy, and run the app."},{"content":"Once the app is running, you can change the inclinometer values by moving the device or using the emulator tools.","pos":[6108,6221]},{"pos":[6227,6349],"content":"Stop the app by returning to Visual Studio and pressing Shift+F5 or select <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept><ph id=\"ph1\"> &gt; </ph><bpt id=\"p2\">**</bpt>Stop Debugging<ept id=\"p2\">**</ept> to stop the app.","source":"Stop the app by returning to Visual Studio and pressing Shift+F5 or select **Debug** > **Stop Debugging** to stop the app."},{"content":"Explanation","pos":[6356,6367]},{"content":"The previous example demonstrates how little code you'll need to write in order to integrate inclinometer input in your app.","pos":[6369,6493]},{"pos":[6495,6585],"content":"The app establishes a connection with the default inclinometer in the <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> method.","source":"The app establishes a connection with the default inclinometer in the **MainPage** method."},{"content":"The app establishes the report interval within the <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> method.","pos":[6645,6716],"source":"The app establishes the report interval within the **MainPage** method."},{"content":"This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate).","pos":[6717,6883]},{"content":"If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum.","pos":[6884,6997]},{"content":"Otherwise, it sets the value to the requested interval.","pos":[6998,7053]},{"content":"The new inclinometer data is captured in the <bpt id=\"p1\">**</bpt>ReadingChanged<ept id=\"p1\">**</ept> method.","pos":[7250,7321],"source":"The new inclinometer data is captured in the **ReadingChanged** method."},{"content":"Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler.","pos":[7322,7443]},{"content":"The app registers this event handler on the following line.","pos":[7444,7503]},{"content":"These new values are written to the TextBlocks found in the project's XAML.","pos":[7637,7712]},{"content":"Related topics","pos":[8766,8780]},{"content":"Inclinometer Sample","pos":[8785,8804]}],"content":"---\nms.assetid: 16AD53CA-1252-456C-8567-2263D3EC95F3\ntitle: Use the inclinometer\ndescription: Learn how to use the inclinometer to determine pitch, roll, and yaw.\n---\n# Use the inclinometer\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**Windows.Devices.Sensors**](https://msdn.microsoft.com/library/windows/apps/BR206408)\n-   [**Inclinometer**](https://msdn.microsoft.com/library/windows/apps/BR225766)\n\nLearn how to use the inclinometer to determine pitch, roll, and yaw.\n\nSome 3-D games require an inclinometer as an input device. One common example is the flight simulator, which maps the three axes of the inclinometer (X, Y, and Z) to the elevator, aileron, and rudder inputs of the aircraft.\n\n ## Prerequisites\n\nYou should be familiar with Extensible Application Markup Language (XAML), Microsoft Visual C#, and events.\n\nThe device or emulator that you're using must support a inclinometer.\n\n ## Create a simple inclinometer app\n\nThis section is divided into two subsections. The first subsection will take you through the steps necessary to create a simple inclinometer application from scratch. The following subsection explains the app you have just created.\n\n###  Instructions\n\n-   Create a new project, choosing a **Blank App (Universal Windows)** from the **Visual C#** project templates.\n\n-   Open your project's MainPage.xaml.cs file and replace the existing code with the following.\n\n```csharp\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using Windows.Foundation;\n    using Windows.Foundation.Collections;\n    using Windows.UI.Xaml;\n    using Windows.UI.Xaml.Controls;\n    using Windows.UI.Xaml.Controls.Primitives;\n    using Windows.UI.Xaml.Data;\n    using Windows.UI.Xaml.Input;\n    using Windows.UI.Xaml.Media;\n    using Windows.UI.Xaml.Navigation;\n\n    using Windows.UI.Core;\n    using Windows.Devices.Sensors;\n\n\n    namespace App1\n    {\n        /// <summary>\n        /// An empty page that can be used on its own or navigated to within a Frame.\n        /// </summary>\n        public sealed partial class MainPage : Page\n        {\n            private Inclinometer _inclinometer;\n\n            // This event handler writes the current inclinometer reading to \n            // the three text blocks on the app' s main page.\n\n            private async void ReadingChanged(object sender, InclinometerReadingChangedEventArgs e)\n            {\n                await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n                {\n                    InclinometerReading reading = e.Reading;\n                    txtPitch.Text = String.Format(\"{0,5:0.00}\", reading.PitchDegrees);\n                    txtRoll.Text = String.Format(\"{0,5:0.00}\", reading.RollDegrees);\n                    txtYaw.Text = String.Format(\"{0,5:0.00}\", reading.YawDegrees);\n                });\n            }\n\n            public MainPage()\n            {\n                this.InitializeComponent();\n                _inclinometer = Inclinometer.GetDefault();\n     \n\n                if (_inclinometer != null)\n                {\n                    // Establish the report interval for all scenarios\n                    uint minReportInterval = _inclinometer.MinimumReportInterval;\n                    uint reportInterval = minReportInterval > 16 ? minReportInterval : 16;\n                    _inclinometer.ReportInterval = reportInterval;\n\n                    // Establish the event handler\n                    _inclinometer.ReadingChanged += new TypedEventHandler<Inclinometer, InclinometerReadingChangedEventArgs>(ReadingChanged);\n                }\n            }\n        }\n    }\n```\n\nYou'll need to rename the namespace in the previous snippet with the name you gave your project. For example, if you created a project named **InclinometerCS**, you'd replace `namespace App1` with `namespace InclinometerCS`.\n\n-   Open the file MainPage.xaml and replace the original contents with the following XML.\n\n```xml\n        <Page\n        x:Class=\"App1.MainPage\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"using:App1\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        mc:Ignorable=\"d\">\n\n        <Grid x:Name=\"LayoutRoot\" Background=\"#FF0C0C0C\">\n            <TextBlock HorizontalAlignment=\"Left\" Height=\"21\" Margin=\"0,8,0,0\" TextWrapping=\"Wrap\" Text=\"Pitch: \" VerticalAlignment=\"Top\" Width=\"45\" Foreground=\"#FFF9F4F4\"/>\n            <TextBlock x:Name=\"txtPitch\" HorizontalAlignment=\"Left\" Height=\"21\" Margin=\"59,8,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"71\" Foreground=\"#FFFDF9F9\"/>\n            <TextBlock HorizontalAlignment=\"Left\" Height=\"23\" Margin=\"0,29,0,0\" TextWrapping=\"Wrap\" Text=\"Roll:\" VerticalAlignment=\"Top\" Width=\"55\" Foreground=\"#FFF7F1F1\"/>\n            <TextBlock x:Name=\"txtRoll\" HorizontalAlignment=\"Left\" Height=\"23\" Margin=\"59,29,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"50\" Foreground=\"#FFFCF9F9\"/>\n            <TextBlock HorizontalAlignment=\"Left\" Height=\"19\" Margin=\"0,56,0,0\" TextWrapping=\"Wrap\" Text=\"Yaw:\" VerticalAlignment=\"Top\" Width=\"55\" Foreground=\"#FFF7F3F3\"/>\n            <TextBlock x:Name=\"txtYaw\" HorizontalAlignment=\"Left\" Height=\"19\" Margin=\"55,56,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"54\" Foreground=\"#FFF6F2F2\"/>\n\n        </Grid>\n    </Page>\n```\n\nYou'll need to replace the first part of the class name in the previous snippet with the namespace of your app. For example, if you created a project named **InclinometerCS**, you'd replace `x:Class=\"App1.MainPage\"` with `x:Class=\"InclinometerCS.MainPage\"`. You should also replace `xmlns:local=\"using:App1\"` with `xmlns:local=\"using:InclinometerCS\"`.\n\n-   Press F5 or select **Debug** > **Start Debugging** to build, deploy, and run the app.\n\nOnce the app is running, you can change the inclinometer values by moving the device or using the emulator tools.\n\n-   Stop the app by returning to Visual Studio and pressing Shift+F5 or select **Debug** > **Stop Debugging** to stop the app.\n\n###  Explanation\n\nThe previous example demonstrates how little code you'll need to write in order to integrate inclinometer input in your app.\n\nThe app establishes a connection with the default inclinometer in the **MainPage** method.\n\n```csharp\n_inclinometer = Inclinometer.GetDefault();\n```\n\nThe app establishes the report interval within the **MainPage** method. This code retrieves the minimum interval supported by the device and compares it to a requested interval of 16 milliseconds (which approximates a 60-Hz refresh rate). If the minimum supported interval is greater than the requested interval, the code sets the value to the minimum. Otherwise, it sets the value to the requested interval.\n\n```csharp\nuint minReportInterval = _inclinometer.MinimumReportInterval;\nuint reportInterval = minReportInterval > 16 ? minReportInterval : 16;\n_inclinometer.ReportInterval = reportInterval;\n```\n\nThe new inclinometer data is captured in the **ReadingChanged** method. Each time the sensor driver receives new data from the sensor, it passes the values to your app using this event handler. The app registers this event handler on the following line.\n\n```\n_inclinometer.ReadingChanged += new TypedEventHandler<Inclinometer, \nInclinometerReadingChangedEventArgs>(ReadingChanged);\n```\n\nThese new values are written to the TextBlocks found in the project's XAML.\n\n```xml\n<TextBlock HorizontalAlignment=\"Left\" Height=\"21\" Margin=\"0,8,0,0\" TextWrapping=\"Wrap\" Text=\"Pitch: \" VerticalAlignment=\"Top\" Width=\"45\" Foreground=\"#FFF9F4F4\"/>\n <TextBlock x:Name=\"txtPitch\" HorizontalAlignment=\"Left\" Height=\"21\" Margin=\"59,8,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"71\" Foreground=\"#FFFDF9F9\"/>\n <TextBlock HorizontalAlignment=\"Left\" Height=\"23\" Margin=\"0,29,0,0\" TextWrapping=\"Wrap\" Text=\"Roll:\" VerticalAlignment=\"Top\" Width=\"55\" Foreground=\"#FFF7F1F1\"/>\n <TextBlock x:Name=\"txtRoll\" HorizontalAlignment=\"Left\" Height=\"23\" Margin=\"59,29,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"50\" Foreground=\"#FFFCF9F9\"/>\n <TextBlock HorizontalAlignment=\"Left\" Height=\"19\" Margin=\"0,56,0,0\" TextWrapping=\"Wrap\" Text=\"Yaw:\" VerticalAlignment=\"Top\" Width=\"55\" Foreground=\"#FFF7F3F3\"/>\n <TextBlock x:Name=\"txtYaw\" HorizontalAlignment=\"Left\" Height=\"19\" Margin=\"55,56,0,0\" TextWrapping=\"Wrap\" Text=\"TextBlock\" VerticalAlignment=\"Top\" Width=\"54\" Foreground=\"#FFF6F2F2\"/>\n```\n\n ## Related topics\n\n* [Inclinometer Sample](http://go.microsoft.com/fwlink/p/?linkid=241380)\n\n"}