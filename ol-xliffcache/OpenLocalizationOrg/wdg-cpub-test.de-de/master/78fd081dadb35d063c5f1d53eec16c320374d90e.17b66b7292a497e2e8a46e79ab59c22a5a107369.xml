{"nodes":[{"pos":[60,115],"content":"Bind hierarchical data and create a master/details view","needQuote":true,"needEscape":true,"nodes":[{"content":"Bind hierarchical data and create a master/details view","pos":[0,55]}]},{"pos":[129,321],"content":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.","needQuote":true,"needEscape":true,"nodes":[{"content":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.","pos":[0,192]}]},{"content":"Bind hierarchical data and create a master/details view","pos":[328,383]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[385,423]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[424,519],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"pos":[524,619],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Also see the <bpt id=\"p2\">[</bpt>Master/detail sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619991)</ept>.","source":"**Note**  Also see the [Master/detail sample](http://go.microsoft.com/fwlink/p/?linkid=619991)."},{"content":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances that are bound together in a chain.","pos":[621,877],"source":"You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances that are bound together in a chain."},{"content":"In this topic we use the <bpt id=\"p1\">[</bpt>{x:Bind} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> where possible, and the more flexible (but less performant) <bpt id=\"p2\">[</bpt>{Binding} markup extension<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> where necessary.","pos":[878,1152],"source":" In this topic we use the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) where possible, and the more flexible (but less performant) [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) where necessary."},{"content":"One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.","pos":[1154,1306]},{"content":"This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.","pos":[1307,1419]},{"content":"Another option is to display multiple levels of data on a single page.","pos":[1420,1490]},{"content":"This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.","pos":[1491,1610]},{"content":"This topic describes how to implement this interaction.","pos":[1611,1666]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances keep track of the current selection at each hierarchical level.","pos":[1667,1829],"source":" The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances keep track of the current selection at each hierarchical level."},{"content":"We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.","pos":[1831,1975]},{"content":"When you select an item from any list, the subsequent views update automatically.","pos":[1976,2057]},{"content":"master/details view of a sports hierarchy","pos":[2061,2102]},{"content":"Prerequisites","pos":[2139,2152]},{"content":"This topic assumes that you know how to create a basic UWP app.","pos":[2154,2217]},{"content":"For instructions on creating your first UWP app, see <bpt id=\"p1\">[</bpt>Create your first UWP app using C# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh974581)</ept>.","pos":[2218,2382],"source":" For instructions on creating your first UWP app, see [Create your first UWP app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581)."},{"content":"Create the project","pos":[2387,2405]},{"content":"Create a new <bpt id=\"p1\">**</bpt>Blank Application (Windows Universal)<ept id=\"p1\">**</ept> project.","pos":[2407,2470],"source":"Create a new **Blank Application (Windows Universal)** project."},{"content":"Name it \"MasterDetailsBinding\".","pos":[2471,2502]},{"content":"Create the data model","pos":[2507,2528]},{"content":"Add a new class to your project, name it ViewModel.cs, and add this code to it.","pos":[2530,2609]},{"content":"This will be your binding source class.","pos":[2610,2649]},{"content":"Create the view","pos":[4475,4490]},{"content":"Next, expose the binding source class from the class that represents your page of markup.","pos":[4492,4581]},{"content":"We do that by adding a property of type <bpt id=\"p1\">**</bpt>LeagueList<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>MainPage<ept id=\"p2\">**</ept>.","pos":[4582,4653],"source":" We do that by adding a property of type **LeagueList** to **MainPage**."},{"content":"Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> instances and binds them together in a chain.","pos":[5075,5309],"source":"Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances and binds them together in a chain."},{"content":"The subsequent controls can then bind to the appropriate <bpt id=\"p1\">**</bpt>CollectionViewSource<ept id=\"p1\">**</ept>, depending on its level in the hierarchy.","pos":[5310,5433],"source":" The subsequent controls can then bind to the appropriate **CollectionViewSource**, depending on its level in the hierarchy."},{"content":"Note that by binding directly to the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.","pos":[9278,9527],"source":"Note that by binding directly to the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833), you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself."},{"content":"There's no need to specify the <bpt id=\"p1\">**</bpt>CurrentItem<ept id=\"p1\">**</ept> property as the path for the binding, although you can do that if there's any ambiguity).","pos":[9528,9664],"source":" There's no need to specify the **CurrentItem** property as the path for the binding, although you can do that if there's any ambiguity)."},{"content":"For example, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ContentControl<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209365)</ept> representing the team view has its <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Content<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209365-content)</ept> property bound to the <ph id=\"ph1\">`Teams`</ph><bpt id=\"p5\">**</bpt>CollectionViewSource<ept id=\"p5\">**</ept>.","pos":[9665,9930],"source":" For example, the [**ContentControl**](https://msdn.microsoft.com/library/windows/apps/BR209365) representing the team view has its [**Content**](https://msdn.microsoft.com/library/windows/apps/BR209365-content) property bound to the `Teams`**CollectionViewSource**."},{"content":"However, the controls in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept> bind to properties of the <ph id=\"ph1\">`Team`</ph> class because the <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept> automatically supplies the currently selected team from the teams list when necessary.","pos":[9931,10199],"source":" However, the controls in the [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348) bind to properties of the `Team` class because the **CollectionViewSource** automatically supplies the currently selected team from the teams list when necessary."}],"content":"---\nms.assetid: 0C69521B-47E0-421F-857B-851B0E9605F2\ntitle: Bind hierarchical data and create a master/details view\ndescription: You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to CollectionViewSource instances that are bound together in a chain.\n---\n# Bind hierarchical data and create a master/details view\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n> **Note**  Also see the [Master/detail sample](http://go.microsoft.com/fwlink/p/?linkid=619991).\n\nYou can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances that are bound together in a chain. In this topic we use the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) where possible, and the more flexible (but less performant) [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) where necessary.\n\nOne common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list. This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy. Another option is to display multiple levels of data on a single page. This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest. This topic describes how to implement this interaction. The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances keep track of the current selection at each hierarchical level.\n\nWe'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view. When you select an item from any list, the subsequent views update automatically.\n\n![master/details view of a sports hierarchy](images/xaml-masterdetails.png)\n\n## Prerequisites\n\nThis topic assumes that you know how to create a basic UWP app. For instructions on creating your first UWP app, see [Create your first UWP app using C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/Hh974581).\n\n## Create the project\n\nCreate a new **Blank Application (Windows Universal)** project. Name it \"MasterDetailsBinding\".\n\n## Create the data model\n\nAdd a new class to your project, name it ViewModel.cs, and add this code to it. This will be your binding source class.\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MasterDetailsBinding\n{\n    public class Team\n    {\n        public string Name { get; set; }\n        public int Wins { get; set; }\n        public int Losses { get; set; }\n    }\n\n    public class Division\n    {\n        public string Name { get; set; }\n        public IEnumerable&lt;Team&gt; Teams { get; set; }\n    }\n\n    public class League\n    {\n        public string Name { get; set; }\n        public IEnumerable&lt;Division&gt; Divisions { get; set; }\n    }\n\n    public class LeagueList : List&lt;League&gt;\n    {\n        public LeagueList()\n        {\n            this.AddRange(GetLeague().ToList());\n        }\n\n        public IEnumerable&lt;League&gt; GetLeague()\n        {\n            return from x in Enumerable.Range(1, 2)\n                   select new League\n                   {\n                       Name = &quot;League &quot; + x,\n                       Divisions = GetDivisions(x).ToList()\n                   };\n        }\n\n        public IEnumerable&lt;Division&gt; GetDivisions(int x)\n        {\n            return from y in Enumerable.Range(1, 3)\n                   select new Division\n                   {\n                       Name = String.Format(&quot;Division {0}-{1}&quot;, x, y),\n                       Teams = GetTeams(x, y).ToList()\n                   };\n        }\n\n        public IEnumerable&lt;Team&gt; GetTeams(int x, int y)\n        {\n            return from z in Enumerable.Range(1, 4)\n                   select new Team\n                   {\n                       Name = String.Format(&quot;Team {0}-{1}-{2}&quot;, x, y, z),\n                       Wins = 25 - (x * y * z),\n                       Losses = x * y * z\n                   };\n        }\n    }\n}\n```\n\n## Create the view\n\nNext, expose the binding source class from the class that represents your page of markup. We do that by adding a property of type **LeagueList** to **MainPage**.\n\n```cs\nnamespace MasterDetailsBinding\n{\n    /// &lt;summary&gt;\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// &lt;/summary&gt;\n    public sealed partial class MainPage : Page\n    {\n        public MainPage()\n        {\n            this.InitializeComponent();\n            this.ViewModel = new LeagueList();\n        }\n        public LeagueList ViewModel { get; set; }\n    }\n}\n```\n\nFinally, replace the contents of the MainPage.xaml file with the following markup, which declares three [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) instances and binds them together in a chain. The subsequent controls can then bind to the appropriate **CollectionViewSource**, depending on its level in the hierarchy.\n\n```xaml\n<Page\n    x:Class=&quot;MasterDetailsBinding.MainPage&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:local=&quot;using:MasterDetailsBinding&quot;\n    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n    mc:Ignorable=&quot;d&quot;>\n\n    <Page.Resources>\n        <CollectionViewSource x:Name=&quot;Leagues&quot;\n            Source=&quot;{x:Bind ViewModel}&quot;/>\n        <CollectionViewSource x:Name=&quot;Divisions&quot;\n            Source=&quot;{Binding Divisions, Source={StaticResource Leagues}}&quot;/>\n        <CollectionViewSource x:Name=&quot;Teams&quot;\n            Source=&quot;{Binding Teams, Source={StaticResource Divisions}}&quot;/>\n\n        <Style TargetType=&quot;TextBlock&quot;>\n            <Setter Property=&quot;FontSize&quot; Value=&quot;15&quot;/>\n            <Setter Property=&quot;FontWeight&quot; Value=&quot;Bold&quot;/>\n        </Style>\n\n        <Style TargetType=&quot;ListBox&quot;>\n            <Setter Property=&quot;FontSize&quot; Value=&quot;15&quot;/>\n        </Style>\n\n        <Style TargetType=&quot;ContentControl&quot;>\n            <Setter Property=&quot;FontSize&quot; Value=&quot;15&quot;/>\n        </Style>\n\n    </Page.Resources>\n\n    <Grid Background=&quot;{ThemeResource ApplicationPageBackgroundThemeBrush}&quot;>\n\n        <StackPanel Orientation=&quot;Horizontal&quot;>\n\n            <!-- All Leagues view -->\n\n            <StackPanel Margin=&quot;5&quot;>\n                <TextBlock Text=&quot;All Leagues&quot;/>\n                <ListBox ItemsSource=&quot;{Binding Source={StaticResource Leagues}}&quot; \n                    DisplayMemberPath=&quot;Name&quot;/>\n            </StackPanel>\n\n            <!-- League/Divisions view -->\n\n            <StackPanel Margin=&quot;5&quot;>\n                <TextBlock Text=&quot;{Binding Name, Source={StaticResource Leagues}}&quot;/>\n                <ListBox ItemsSource=&quot;{Binding Source={StaticResource Divisions}}&quot; \n                    DisplayMemberPath=&quot;Name&quot;/>\n            </StackPanel>\n\n            <!-- Division/Teams view -->\n\n            <StackPanel Margin=&quot;5&quot;>\n                <TextBlock Text=&quot;{Binding Name, Source={StaticResource Divisions}}&quot;/>\n                <ListBox ItemsSource=&quot;{Binding Source={StaticResource Teams}}&quot; \n                    DisplayMemberPath=&quot;Name&quot;/>\n            </StackPanel>\n\n            <!-- Team view -->\n\n            <ContentControl Content=&quot;{Binding Source={StaticResource Teams}}&quot;>\n                <ContentControl.ContentTemplate>\n                    <DataTemplate>\n                        <StackPanel Margin=&quot;5&quot;>\n                            <TextBlock Text=&quot;{Binding Name}&quot; \n                                FontSize=&quot;15&quot; FontWeight=&quot;Bold&quot;/>\n                            <StackPanel Orientation=&quot;Horizontal&quot; Margin=&quot;10,10&quot;>\n                                <TextBlock Text=&quot;Wins:&quot; Margin=&quot;0,0,5,0&quot;/>\n                                <TextBlock Text=&quot;{Binding Wins}&quot;/>\n                            </StackPanel>\n                            <StackPanel Orientation=&quot;Horizontal&quot; Margin=&quot;10,0&quot;>\n                                <TextBlock Text=&quot;Losses:&quot; Margin=&quot;0,0,5,0&quot;/>\n                                <TextBlock Text=&quot;{Binding Losses}&quot;/>\n                            </StackPanel>\n                        </StackPanel>\n                    </DataTemplate>\n                </ContentControl.ContentTemplate>\n            </ContentControl>\n\n        </StackPanel>\n\n    </Grid>\n</Page>\n```\n\nNote that by binding directly to the [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833), you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself. There's no need to specify the **CurrentItem** property as the path for the binding, although you can do that if there's any ambiguity). For example, the [**ContentControl**](https://msdn.microsoft.com/library/windows/apps/BR209365) representing the team view has its [**Content**](https://msdn.microsoft.com/library/windows/apps/BR209365-content) property bound to the `Teams`**CollectionViewSource**. However, the controls in the [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348) bind to properties of the `Team` class because the **CollectionViewSource** automatically supplies the currently selected team from the teams list when necessary.\n\n \n\n \n\n"}