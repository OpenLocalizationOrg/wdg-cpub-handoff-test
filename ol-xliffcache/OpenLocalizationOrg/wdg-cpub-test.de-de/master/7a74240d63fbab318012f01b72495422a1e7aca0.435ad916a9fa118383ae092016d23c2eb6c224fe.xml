{"nodes":[{"content":"Getting started: Navigation","pos":[67,94]},{"content":"Getting started: Navigation","pos":[104,131]},{"content":"Getting started: Navigation","pos":[140,167]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[169,207]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[208,303],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Adding navigation","pos":[308,325]},{"pos":[327,506],"content":"iOS provides the <bpt id=\"p1\">**</bpt>UINavigationController<ept id=\"p1\">**</ept> class to help with in-app navigation: you can push and pop views to create the hierarchy of <bpt id=\"p2\">**</bpt>UIViewControllers<ept id=\"p2\">**</ept> that define your app.","source":"iOS provides the **UINavigationController** class to help with in-app navigation: you can push and pop views to create the hierarchy of **UIViewControllers** that define your app."},{"content":"In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.","pos":[508,612]},{"content":"You can imagine your users hopping from page to page as they click on controls to work their way through the app.","pos":[613,726]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Navigation design basics<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn958438)</ept>.","pos":[727,831],"source":" For more info, see [Navigation design basics](https://msdn.microsoft.com/library/windows/apps/dn958438)."},{"content":"One of the ways to manage this navigation in a Windows 10 app is to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Frame<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242682)</ept> class.","pos":[833,985],"source":"One of the ways to manage this navigation in a Windows 10 app is to use the [**Frame**](https://msdn.microsoft.com/library/windows/apps/br242682) class."},{"content":"The following walkthrough shows you how to try this out.","pos":[986,1042]},{"content":"Continuing with the solution you started earlier, open the <bpt id=\"p1\">**</bpt>MainPage.xaml<ept id=\"p1\">**</ept> file, and add a button in the <bpt id=\"p2\">**</bpt>Design<ept id=\"p2\">**</ept> view.","pos":[1044,1167],"source":"Continuing with the solution you started earlier, open the **MainPage.xaml** file, and add a button in the **Design** view."},{"content":"Change the button's <bpt id=\"p1\">**</bpt>Content<ept id=\"p1\">**</ept> property from \"Button\" to \"Go To Page\".","pos":[1168,1239],"source":" Change the button's **Content** property from \"Button\" to \"Go To Page\"."},{"content":"Then, create a handler for the button's <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> event, as shown in the following figure.","pos":[1240,1330],"source":" Then, create a handler for the button's **Click** event, as shown in the following figure."},{"content":"If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> view).","pos":[1331,1471],"source":" If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the **Design** view)."},{"content":"adding a button and its click event in visual studio","pos":[1475,1527]},{"content":"Let's add a new page.","pos":[1567,1588]},{"content":"In the <bpt id=\"p1\">**</bpt>Solution<ept id=\"p1\">**</ept> view, tap the <bpt id=\"p2\">**</bpt>Project<ept id=\"p2\">**</ept> menu, and tap <bpt id=\"p3\">**</bpt>Add New Item<ept id=\"p3\">**</ept>.","pos":[1589,1666],"source":" In the **Solution** view, tap the **Project** menu, and tap **Add New Item**."},{"content":"Tap <bpt id=\"p1\">**</bpt>Blank Page<ept id=\"p1\">**</ept> as shown in the following figure, and then tap <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>.","pos":[1667,1741],"source":" Tap **Blank Page** as shown in the following figure, and then tap **Add**."},{"content":"adding a new page in visual studio","pos":[1745,1779]},{"content":"Next, add a button to the BlankPage.xaml file.","pos":[1821,1867]},{"content":"Let's use the AppBarButton control, and let's give it a back arrow image: in the <bpt id=\"p1\">**</bpt>XAML<ept id=\"p1\">**</ept> view, add <ph id=\"ph1\">` &lt;AppBarButton Icon=\"Back\"/&gt;`</ph> between the <ph id=\"ph2\">`&lt;Grid&gt; &lt;/Grid&gt;`</ph> elements.","pos":[1868,2037],"source":" Let's use the AppBarButton control, and let's give it a back arrow image: in the **XAML** view, add ` <AppBarButton Icon=\"Back\"/>` between the `<Grid> </Grid>` elements."},{"pos":[2039,2343],"content":"Now, let's add an event handler to the button: double-click the control in the <bpt id=\"p1\">**</bpt>Design<ept id=\"p1\">**</ept> view and Microsoft Visual Studio adds the text \"AppBarButton\\_Click\" to the <bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.","source":"Now, let's add an event handler to the button: double-click the control in the **Design** view and Microsoft Visual Studio adds the text \"AppBarButton\\_Click\" to the **Click** box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file."},{"content":"adding a back button and its click event in visual studio","pos":[2347,2404]},{"pos":[2449,2615],"content":"If you return to the BlankPage.xaml file's <bpt id=\"p1\">**</bpt>XAML<ept id=\"p1\">**</ept> view, the <ph id=\"ph1\">`&lt;AppBarButton&gt;`</ph> element's Extensible Application Markup Language (XAML) code should now look like this:","source":"If you return to the BlankPage.xaml file's **XAML** view, the `<AppBarButton>` element's Extensible Application Markup Language (XAML) code should now look like this:"},{"content":"Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.","pos":[2676,2790]},{"content":"Finally, open the MainPage.xaml.cs file and add this code.","pos":[2940,2998]},{"content":"It opens BlankPage after the user taps the button.","pos":[2999,3049]},{"content":"Now, run the program.","pos":[3209,3230]},{"content":"Tap the \"Go To Page\" button to go to the other page, and then tap the back-arrow button to return to the previous page.","pos":[3231,3350]},{"content":"Page navigation is managed by the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Frame<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242682)</ept> class.","pos":[3352,3462],"source":"Page navigation is managed by the [**Frame**](https://msdn.microsoft.com/library/windows/apps/br242682) class."},{"content":"As the <bpt id=\"p1\">**</bpt>UINavigationController<ept id=\"p1\">**</ept> class in iOS uses <bpt id=\"p2\">**</bpt>pushViewController<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>popViewController<ept id=\"p3\">**</ept> methods, the <bpt id=\"p4\">**</bpt>Frame<ept id=\"p4\">**</ept> class for Windows Store apps provides <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Navigate<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br242694)</ept> and <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>GoBack<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/dn996568)</ept> methods.","pos":[3463,3781],"source":" As the **UINavigationController** class in iOS uses **pushViewController** and **popViewController** methods, the **Frame** class for Windows Store apps provides [**Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) and [**GoBack**](https://msdn.microsoft.com/library/windows/apps/dn996568) methods."},{"content":"The <bpt id=\"p1\">**</bpt>Frame<ept id=\"p1\">**</ept> class also has a method called <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>GoForward<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242693)</ept>, which does what you might expect.","pos":[3782,3935],"source":" The **Frame** class also has a method called [**GoForward**](https://msdn.microsoft.com/library/windows/apps/br242693), which does what you might expect."},{"content":"This walkthrough creates a new instance of BlankPage each time you navigate to it.","pos":[3937,4019]},{"content":"(The previous instance will be freed, or <bpt id=\"p1\">*</bpt>released<ept id=\"p1\">*</ept>, automatically).","pos":[4020,4088],"source":" (The previous instance will be freed, or *released*, automatically)."},{"content":"If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.","pos":[4089,4237]},{"content":"This will enable the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>NavigationCacheMode<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227506)</ept> behavior.","pos":[4238,4352],"source":" This will enable the [**NavigationCacheMode**](https://msdn.microsoft.com/library/windows/apps/br227506) behavior."},{"pos":[4550,4744],"content":"You can also get or set the <bpt id=\"p1\">**</bpt>Frame<ept id=\"p1\">**</ept> class's <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CacheSize<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br242683)</ept> property to manage how many pages in the navigation history can be cached.","source":"You can also get or set the **Frame** class's [**CacheSize**](https://msdn.microsoft.com/library/windows/apps/br242683) property to manage how many pages in the navigation history can be cached."},{"pos":[4746,4943],"content":"For more info about navigation, see <bpt id=\"p1\">[</bpt>Navigation<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187344)</ept> and <bpt id=\"p2\">[</bpt>XAML personality animations sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?LinkID=242401)</ept>.","source":"For more info about navigation, see [Navigation](https://msdn.microsoft.com/library/windows/apps/mt187344) and [XAML personality animations sample](http://go.microsoft.com/fwlink/p/?LinkID=242401)."},{"pos":[4945,5136],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For info about navigation for Windows Store apps using JavaScript and HTML, see <bpt id=\"p2\">[</bpt>Quickstart: Using single-page navigation<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh452768)</ept>.","source":"**Note**  For info about navigation for Windows Store apps using JavaScript and HTML, see [Quickstart: Using single-page navigation](https://msdn.microsoft.com/library/windows/apps/hh452768)."},{"content":"Next step","pos":[5143,5152]},{"content":"Getting started: Animation","pos":[5155,5181]}],"content":"---\nms.assetid: F4DF5C5F-C886-4483-BBDA-498C4E2C1BAF\ndescription: \"Getting started: Navigation\"\ntitle: \"Getting started: Navigation\"\n---\n\n# Getting started: Navigation\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n## Adding navigation\n\niOS provides the **UINavigationController** class to help with in-app navigation: you can push and pop views to create the hierarchy of **UIViewControllers** that define your app.\n\nIn contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation. You can imagine your users hopping from page to page as they click on controls to work their way through the app. For more info, see [Navigation design basics](https://msdn.microsoft.com/library/windows/apps/dn958438).\n\nOne of the ways to manage this navigation in a Windows 10 app is to use the [**Frame**](https://msdn.microsoft.com/library/windows/apps/br242682) class. The following walkthrough shows you how to try this out.\n\nContinuing with the solution you started earlier, open the **MainPage.xaml** file, and add a button in the **Design** view. Change the button's **Content** property from \"Button\" to \"Go To Page\". Then, create a handler for the button's **Click** event, as shown in the following figure. If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the **Design** view).\n\n![adding a button and its click event in visual studio](images/ios-to-uwp/vs-go-to-page.png)\n\nLet's add a new page. In the **Solution** view, tap the **Project** menu, and tap **Add New Item**. Tap **Blank Page** as shown in the following figure, and then tap **Add**.\n\n![adding a new page in visual studio](images/ios-to-uwp/vs-add-new-page.png)\n\nNext, add a button to the BlankPage.xaml file. Let's use the AppBarButton control, and let's give it a back arrow image: in the **XAML** view, add ` <AppBarButton Icon=\"Back\"/>` between the `<Grid> </Grid>` elements.\n\nNow, let's add an event handler to the button: double-click the control in the **Design** view and Microsoft Visual Studio adds the text \"AppBarButton\\_Click\" to the **Click** box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.\n\n![adding a back button and its click event in visual studio](images/ios-to-uwp/vs-add-back-button.png)\n\nIf you return to the BlankPage.xaml file's **XAML** view, the `<AppBarButton>` element's Extensible Application Markup Language (XAML) code should now look like this:\n\n` <AppBarButton Icon=\"Back\" Click=\"AppBarButton_Click\"/>`\n\nReturn to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.\n\n```csharp\nprivate void AppBarButton_Click(object sender, RoutedEventArgs e)\n{\n    // Add the following line of code.    \n    Frame.GoBack();\n}\n```\n\nFinally, open the MainPage.xaml.cs file and add this code. It opens BlankPage after the user taps the button.\n\n```csharp\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    // Add the following line of code.\n    Frame.Navigate(typeof(BlankPage1));\n}\n```\n\nNow, run the program. Tap the \"Go To Page\" button to go to the other page, and then tap the back-arrow button to return to the previous page.\n\nPage navigation is managed by the [**Frame**](https://msdn.microsoft.com/library/windows/apps/br242682) class. As the **UINavigationController** class in iOS uses **pushViewController** and **popViewController** methods, the **Frame** class for Windows Store apps provides [**Navigate**](https://msdn.microsoft.com/library/windows/apps/br242694) and [**GoBack**](https://msdn.microsoft.com/library/windows/apps/dn996568) methods. The **Frame** class also has a method called [**GoForward**](https://msdn.microsoft.com/library/windows/apps/br242693), which does what you might expect.\n\nThis walkthrough creates a new instance of BlankPage each time you navigate to it. (The previous instance will be freed, or *released*, automatically). If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file. This will enable the [**NavigationCacheMode**](https://msdn.microsoft.com/library/windows/apps/br227506) behavior.\n\n```csharp\npublic BlankPage()\n{\n    this.InitializeComponent();\n    // Add the following line of code.\n    this.NavigationCacheMode = Windows.UI.Xaml.Navigation.NavigationCacheMode.Enabled;\n}\n```\n\nYou can also get or set the **Frame** class's [**CacheSize**](https://msdn.microsoft.com/library/windows/apps/br242683) property to manage how many pages in the navigation history can be cached.\n\nFor more info about navigation, see [Navigation](https://msdn.microsoft.com/library/windows/apps/mt187344) and [XAML personality animations sample](http://go.microsoft.com/fwlink/p/?LinkID=242401).\n\n**Note**  For info about navigation for Windows Store apps using JavaScript and HTML, see [Quickstart: Using single-page navigation](https://msdn.microsoft.com/library/windows/apps/hh452768).\n \n### Next step\n\n[Getting started: Animation](getting-started-animation.md)\n\n"}