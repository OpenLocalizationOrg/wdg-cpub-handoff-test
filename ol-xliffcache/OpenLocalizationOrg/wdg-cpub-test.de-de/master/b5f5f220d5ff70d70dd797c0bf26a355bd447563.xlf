<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">b5f5f220d5ff70d70dd797c0bf26a355bd447563</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolciTestTDReach\accessibility\practices-to-avoid.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">9627378249d4b40de6be1890afbf964300ff5f7e</mda:meta><mda:meta type="olxliffhash">7ff6d1f38aac4f0072de68970d84a1948a2a072d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Lists the practices to avoid if you want to create an accessible Universal Windows Platform (UWP) app.</source>
					<target>Lists the practices to avoid if you want to create an accessible Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Accessibility practices to avoid</source>
					<target>Accessibility practices to avoid</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Accessibility practices to avoid</source>
					<target>Accessibility practices to avoid</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Lists the practices to avoid if you want to create an accessible Universal Windows Platform (UWP) app.</source>
					<target>Lists the practices to avoid if you want to create an accessible Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>Avoid building custom UI elements if you can use the default Windows controls or controls that have already implemented Microsoft UI Automation support.</source>
					<target>Avoid building custom UI elements if you can use the default Windows controls or controls that have already implemented Microsoft UI Automation support.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Standard Windows controls are accessible by default and usually require adding only a few accessibility attributes that are app-specific.</source>
					<target>Standard Windows controls are accessible by default and usually require adding only a few accessibility attributes that are app-specific.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209185)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](custom-automation-peers.md)</data>
				</originalData>
				<segment state="initial">
					<source>In contrast, implementing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationPeer</pc></pc> support for a true custom control is somewhat more involved (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Custom automation peers</pc>).</source>
					<target>In contrast, implementing the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutomationPeer</pc></pc> support for a true custom control is somewhat more involved (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Custom automation peers</pc>).</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209461)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Don't put static text or other non-interactive elements into the tab order (for example, by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TabIndex</pc></pc> property for an element that is not interactive).</source>
					<target>Don't put static text or other non-interactive elements into the tab order (for example, by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TabIndex</pc></pc> property for an element that is not interactive).</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>If non-interactive elements are in the tab order, that is against keyboard accessibility guidelines because it decreases efficiency of keyboard navigation for users.</source>
					<target>If non-interactive elements are in the tab order, that is against keyboard accessibility guidelines because it decreases efficiency of keyboard navigation for users.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Many assistive technologies use tab order and ability to focus an element as part of their logic for how to present an app's interface to the assistive technology user.</source>
					<target>Many assistive technologies use tab order and ability to focus an element as part of their logic for how to present an app's interface to the assistive technology user.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Text-only elements in the tab order can confuse users who expect only interactive elements in the tab order (buttons, check boxes, text input fields, combo boxes, lists, and so on).</source>
					<target>Text-only elements in the tab order can confuse users who expect only interactive elements in the tab order (buttons, check boxes, text input fields, combo boxes, lists, and so on).</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Avoid using absolute positioning of UI elements (such as in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> element) because the presentation order often differs from the child element declaration order (which is the de facto logical order).</source>
					<target>Avoid using absolute positioning of UI elements (such as in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> element) because the presentation order often differs from the child element declaration order (which is the de facto logical order).</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Whenever possible, arrange UI elements in document or logical order to ensure that screen readers can read those elements in the correct order.</source>
					<target>Whenever possible, arrange UI elements in document or logical order to ensure that screen readers can read those elements in the correct order.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209461)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the visible order of UI elements can diverge from the document or logical order, use explicit tab index values (set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TabIndex</pc></pc>) to define the correct reading order.</source>
					<target>If the visible order of UI elements can diverge from the document or logical order, use explicit tab index values (set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TabIndex</pc></pc>) to define the correct reading order.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Don’t use color as the only way to convey information.</source>
					<target>Don’t use color as the only way to convey information.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Users who are color blind cannot receive information that is conveyed only through color, such as in a color status indicator.</source>
					<target>Users who are color blind cannot receive information that is conveyed only through color, such as in a color status indicator.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Include other visual cues, preferably text, to ensure that information is accessible.</source>
					<target>Include other visual cues, preferably text, to ensure that information is accessible.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Don’t automatically refresh an entire app canvas unless it is really necessary for app functionality.</source>
					<target>Don’t automatically refresh an entire app canvas unless it is really necessary for app functionality.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>If you need to automatically refresh page content, update only certain areas of the page.</source>
					<target>If you need to automatically refresh page content, update only certain areas of the page.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Assistive technologies generally must assume that a refreshed app canvas is a totally new structure, even if the effective changes were minimal.</source>
					<target>Assistive technologies generally must assume that a refreshed app canvas is a totally new structure, even if the effective changes were minimal.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The cost of this to the assistive technology user is that any document view or description of the refreshed app now must be recreated and presented to the user again.</source>
					<target>The cost of this to the assistive technology user is that any document view or description of the refreshed app now must be recreated and presented to the user again.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/JJ191516)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If you do refresh content within a region, consider setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilityProperties.LiveSetting</pc></pc> accessibility property on that element to one of the non-default settings <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Polite</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Assertive</pc>.</source>
					<target>If you do refresh content within a region, consider setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilityProperties.LiveSetting</pc></pc> accessibility property on that element to one of the non-default settings <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Polite</pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Assertive</pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Some assistive technologies can map this setting to the Accessible Rich Internet Applications (ARIA) concept of live regions and can thus inform the user that a region of content has changed.</source>
					<target>Some assistive technologies can map this setting to the Accessible Rich Internet Applications (ARIA) concept of live regions and can thus inform the user that a region of content has changed.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>A deliberate page navigation that is initiated by the user is a legitimate case for refreshing the app's structure.</source>
					<target>A deliberate page navigation that is initiated by the user is a legitimate case for refreshing the app's structure.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>But make sure that the UI item that initiates the navigation is correctly identified or named to give some indication that invoking it will result in a context change and page reload.</source>
					<target>But make sure that the UI item that initiates the navigation is correctly identified or named to give some indication that invoking it will result in a context change and page reload.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Don’t use UI elements that flash more than three times per second.</source>
					<target>Don’t use UI elements that flash more than three times per second.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Flashing elements can cause some people to have seizures.</source>
					<target>Flashing elements can cause some people to have seizures.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>It is best to avoid using UI elements that flash.</source>
					<target>It is best to avoid using UI elements that flash.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Don’t change user context or activate functionality automatically.</source>
					<target>Don’t change user context or activate functionality automatically.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Context or activation changes should occur only when the user takes a direct action on a UI element that has focus.</source>
					<target>Context or activation changes should occur only when the user takes a direct action on a UI element that has focus.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Changes in user context include changing focus, displaying new content, and navigating to a different page.</source>
					<target>Changes in user context include changing focus, displaying new content, and navigating to a different page.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Making context changes without involving the user can be disorienting for users who have disabilities.</source>
					<target>Making context changes without involving the user can be disorienting for users who have disabilities.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The exceptions to this requirement include displaying submenus, validating forms, displaying help text in another control, and changing context in response to an asynchronous event.</source>
					<target>The exceptions to this requirement include displaying submenus, validating forms, displaying help text in another control, and changing context in response to an asynchronous event.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Accessibility</source>
					<target>Accessibility</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Accessibility in the Store</source>
					<target>Accessibility in the Store</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Accessibility checklist</source>
					<target>Accessibility checklist</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>