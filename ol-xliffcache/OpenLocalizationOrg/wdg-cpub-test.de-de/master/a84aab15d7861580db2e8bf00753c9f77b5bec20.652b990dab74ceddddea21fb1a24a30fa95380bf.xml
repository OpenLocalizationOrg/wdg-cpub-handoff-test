{"nodes":[{"pos":[60,81],"content":"Data binding in depth","needQuote":true,"needEscape":true,"nodes":[{"content":"Data binding in depth","pos":[0,21]}]},{"pos":[95,198],"content":"Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.","needQuote":true,"needEscape":true,"nodes":[{"content":"Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.","pos":[0,103]}]},{"content":"Data binding in depth","pos":[205,226]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[228,266]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[267,362],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"** Important APIs **","pos":[365,385]},{"content":"Binding class","pos":[394,407]},{"content":"DataContext","pos":[476,487]},{"content":"INotifyPropertyChanged","pos":[556,578]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This topic describes data binding features in detail.","pos":[641,704],"source":"**Note**  This topic describes data binding features in detail."},{"content":"For a short, practical introduction, see <bpt id=\"p1\">[</bpt>Data binding overview<ept id=\"p1\">](data-binding-quickstart.md)</ept>.","pos":[705,798],"source":" For a short, practical introduction, see [Data binding overview](data-binding-quickstart.md)."},{"content":"Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.","pos":[803,906]},{"content":"Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.","pos":[907,1110]},{"content":"You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.","pos":[1112,1255]},{"content":"This is called one-time binding, and it works well for data whose values don't change during run-time.","pos":[1256,1358]},{"content":"Additionally, you can choose to \"observe\" the values and to update the UI when they change.","pos":[1359,1450]},{"content":"This is called one-way binding, and it works well for read-only data.","pos":[1451,1520]},{"content":"Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.","pos":[1521,1683]},{"content":"This is called two-way binding, and it works well for read-write data.","pos":[1684,1754]},{"content":"Here are some examples.","pos":[1755,1778]},{"pos":[1784,1924],"content":"You could use one-time binding to bind an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Image<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> to the current user's photo.","source":"You could use one-time binding to bind an [**Image**](https://msdn.microsoft.com/library/windows/apps/BR242752) to the current user's photo."},{"pos":[1929,2114],"content":"You could use one-way binding to bind a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of real-time news articles grouped by newspaper section.","source":"You could use one-way binding to bind a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) to a collection of real-time news articles grouped by newspaper section."},{"pos":[2119,2262],"content":"You could use two-way binding to bind a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> to a customer's name in a form.","source":"You could use two-way binding to bind a [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) to a customer's name in a form."},{"content":"There are two kinds of binding, and they're both typically declared in UI markup.","pos":[2264,2345]},{"content":"You can choose to use either the <bpt id=\"p1\">[</bpt>{x:Bind} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or the <bpt id=\"p2\">[</bpt>{Binding} markup extension<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.","pos":[2346,2559],"source":" You can choose to use either the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) or the [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782)."},{"content":"And you can even use a mixture of the two in the same appâ€”even on the same UI element.","pos":[2560,2646]},{"content":"{x:Bind} is new for Windows 10 and it has better performance.","pos":[2647,2708]},{"content":"{Binding} has more features.","pos":[2709,2737]},{"content":"All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.","pos":[2738,2844]},{"content":"Sample apps that demonstrate {x:Bind}","pos":[2848,2885]},{"pos":[2893,2960],"content":"<bpt id=\"p1\">[</bpt>{x:Bind} sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.","source":"[{x:Bind} sample](http://go.microsoft.com/fwlink/p/?linkid=619989)."},{"pos":[2965,3033],"content":"<bpt id=\"p1\">[</bpt>QuizGame<ept id=\"p1\">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept>.","source":"[QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame)."},{"pos":[3038,3111],"content":"<bpt id=\"p1\">[</bpt>XAML UI Basics sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619992)</ept>.","source":"[XAML UI Basics sample](http://go.microsoft.com/fwlink/p/?linkid=619992)."},{"content":"Sample apps that demonstrate {Binding}","pos":[3115,3153]},{"pos":[3161,3238],"content":"Download the <bpt id=\"p1\">[</bpt>Bookstore1<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=532950)</ept> app.","source":"Download the [Bookstore1](http://go.microsoft.com/fwlink/?linkid=532950) app."},{"pos":[3243,3320],"content":"Download the <bpt id=\"p1\">[</bpt>Bookstore2<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> app.","source":"Download the [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) app."},{"content":"Every binding involves these pieces","pos":[3322,3357]},{"content":"A <bpt id=\"p1\">*</bpt>binding source<ept id=\"p1\">*</ept>.","pos":[3400,3419],"source":"A *binding source*."},{"content":"This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.","pos":[3420,3568]},{"content":"A <bpt id=\"p1\">*</bpt>binding target<ept id=\"p1\">*</ept>.","pos":[3573,3592],"source":"A *binding target*."},{"content":"This is a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyProperty<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept> of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FrameworkElement<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> in your UI that displays the data.","pos":[3593,3808],"source":" This is a [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/BR242362) of the [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/BR208706) in your UI that displays the data."},{"content":"A <bpt id=\"p1\">*</bpt>binding object<ept id=\"p1\">*</ept>.","pos":[3813,3832],"source":"A *binding object*."},{"content":"This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.","pos":[3833,3959]},{"content":"The binding object is created at XAML load time from your <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> markup extension.","pos":[3960,4177],"source":" The binding object is created at XAML load time from your [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) or [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) markup extension."},{"content":"In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.","pos":[4179,4297]},{"content":"And we'll link the sections together with the example of binding a button's content to a string property named <bpt id=\"p1\">**</bpt>NextButtonText<ept id=\"p1\">**</ept>, which belongs to a class named <bpt id=\"p2\">**</bpt>HostViewModel<ept id=\"p2\">**</ept>.","pos":[4298,4478],"source":" And we'll link the sections together with the example of binding a button's content to a string property named **NextButtonText**, which belongs to a class named **HostViewModel**."},{"content":"Binding source","pos":[4480,4494]},{"content":"Here's a very rudimentary implementation of a class that we could use as a binding source.","pos":[4511,4601]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If you're using <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> with Visual C++ component extensions (C++/CX) then you'll need to add the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>BindableAttribute<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to your binding source class.","pos":[4603,4894],"source":"**Note**  If you're using [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) with Visual C++ component extensions (C++/CX) then you'll need to add the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) attribute to your binding source class."},{"content":"If you're using <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> then you don't need that attribute.","pos":[4895,5015],"source":" If you're using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) then you don't need that attribute."},{"content":"See <bpt id=\"p1\">[</bpt>Adding a details view<ept id=\"p1\">](data-binding-quickstart.md#adding-a-details-view)</ept> for a code snippet.","pos":[5016,5113],"source":" See [Adding a details view](data-binding-quickstart.md#adding-a-details-view) for a code snippet."},{"content":"That implementation of <bpt id=\"p1\">**</bpt>HostViewModel<ept id=\"p1\">**</ept>, and its property <bpt id=\"p2\">**</bpt>NextButtonText<ept id=\"p2\">**</ept>, are only appropriate for one-time binding.","pos":[5286,5407],"source":"That implementation of **HostViewModel**, and its property **NextButtonText**, are only appropriate for one-time binding."},{"content":"But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.","pos":[5408,5586]},{"content":"In order for those kinds of binding to work correctly, you need to make your binding source \"observable\" to the binding object.","pos":[5587,5714]},{"content":"So in our example, if we want to one-way or two-way bind to the <bpt id=\"p1\">**</bpt>NextButtonText<ept id=\"p1\">**</ept> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.","pos":[5715,5928],"source":" So in our example, if we want to one-way or two-way bind to the **NextButtonText** property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object."},{"content":"One way of doing that is to derive the class that represents your binding source from <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyObject<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242356)</ept>, and expose a data value through a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DependencyProperty<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>.","pos":[5930,6215],"source":"One way of doing that is to derive the class that represents your binding source from [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/BR242356), and expose a data value through a [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/BR242362)."},{"content":"That's how a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FrameworkElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> becomes observable.","pos":[6216,6329],"source":" That's how a [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/BR208706) becomes observable."},{"content":"<bpt id=\"p1\">**</bpt>FrameworkElements<ept id=\"p1\">**</ept> are good binding sources right out of the box.","pos":[6330,6398],"source":"**FrameworkElements** are good binding sources right out of the box."},{"content":"A more lightweight way of making a class observableâ€”and a necessary one for classes that already have a base classâ€”is to implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.","pos":[6400,6630],"source":"A more lightweight way of making a class observableâ€”and a necessary one for classes that already have a base classâ€”is to implement [**System.ComponentModel.INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged)."},{"content":"This really just involves implementing a single event named <bpt id=\"p1\">**</bpt>PropertyChanged<ept id=\"p1\">**</ept>.","pos":[6631,6711],"source":" This really just involves implementing a single event named **PropertyChanged**."},{"content":"An example using <bpt id=\"p1\">**</bpt>HostViewModel<ept id=\"p1\">**</ept> is below.","pos":[6712,6756],"source":" An example using **HostViewModel** is below."},{"pos":[6758,7140],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For C++/CX, you implement <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Windows::UI::Xaml::Data::INotifyPropertyChanged<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>, and the binding source class must either have the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>BindableAttribute<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id=\"p6\">[</bpt><bpt id=\"p7\">**</bpt>ICustomPropertyProvider<ept id=\"p7\">**</ept><ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.","source":"**Note**  For C++/CX, you implement [**Windows::UI::Xaml::Data::INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899), and the binding source class must either have the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) or implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878)."},{"content":"Now the <bpt id=\"p1\">**</bpt>NextButtonText<ept id=\"p1\">**</ept> property is observable.","pos":[7882,7932],"source":"Now the **NextButtonText** property is observable."},{"content":"When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <bpt id=\"p1\">**</bpt>PropertyChanged<ept id=\"p1\">**</ept> event.","pos":[7933,8094],"source":" When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the **PropertyChanged** event."},{"content":"When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.","pos":[8095,8225]},{"content":"That's how the binding object knows which property's value to go and read again.","pos":[8226,8306]},{"content":"So that you don't have to implement the pattern shown above multiple times, you can just derive from the <bpt id=\"p1\">**</bpt>BindableBase<ept id=\"p1\">**</ept> bass class that you'll find in the <bpt id=\"p2\">[</bpt>QuizGame<ept id=\"p2\">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the \"Common\" folder).","pos":[8308,8565],"source":"So that you don't have to implement the pattern shown above multiple times, you can just derive from the **BindableBase** bass class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the \"Common\" folder)."},{"content":"Here's an example of how that looks.","pos":[8566,8602]},{"content":"Raising the <bpt id=\"p1\">**</bpt>PropertyChanged<ept id=\"p1\">**</ept> event with an argument of <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>String.Empty<ept id=\"p3\">**</ept><ept id=\"p2\">](T:System.String)</ept> or <bpt id=\"p4\">**</bpt>null<ept id=\"p4\">**</ept> indicates that all non-indexer properties on the object should be re-read.","pos":[8935,9115],"source":"Raising the **PropertyChanged** event with an argument of [**String.Empty**](T:System.String) or **null** indicates that all non-indexer properties on the object should be re-read."},{"content":"You can raise the event to indicate that indexer properties on the object have changed by using an argument of \"Item\\[<bpt id=\"p1\">*</bpt>indexer<ept id=\"p1\">*</ept>\\]\" for specific indexers (where <bpt id=\"p2\">*</bpt>indexer<ept id=\"p2\">*</ept> is the index value), or a value of \"Item\\[\\]\" for all indexers.","pos":[9116,9349],"source":" You can raise the event to indicate that indexer properties on the object have changed by using an argument of \"Item\\[*indexer*\\]\" for specific indexers (where *indexer* is the index value), or a value of \"Item\\[\\]\" for all indexers."},{"content":"A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.","pos":[9351,9470]},{"content":"In C# and Visual Basic code, you can one-time bind to an object that implements <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>List(Of T)<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.Generic.List%601)</ept> to display a collection that does not change at run-time.","pos":[9471,9664],"source":" In C# and Visual Basic code, you can one-time bind to an object that implements [**List(Of T)**](T:System.Collections.Generic.List%601) to display a collection that does not change at run-time."},{"content":"For an observable collection (observing when items are added to and removed from the collection), one-way bind to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObservableCollection(Of T)<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> instead.","pos":[9665,9879],"source":" For an observable collection (observing when items are added to and removed from the collection), one-way bind to [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) instead."},{"content":"In C++ code, you can bind to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Vector<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</ept> for both observable and non-observable collections.","pos":[9880,10038],"source":" In C++ code, you can bind to [**Vector&lt;T&gt;**](https://msdn.microsoft.com/en-us/library/dn858385.aspx) for both observable and non-observable collections."},{"content":"To bind to your own collection classes, use the guidance in the following table.","pos":[10039,10119]},{"content":"Scenario","pos":[10123,10131]},{"content":"C# and VB (CLR)","pos":[10189,10204]},{"content":"C++/CX","pos":[10609,10615]},{"content":"Bind to an object.","pos":[12022,12040]},{"content":"Can be any object.","pos":[12088,12106]},{"pos":[12509,12709],"content":"Object must have <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BindableAttribute<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ICustomPropertyProvider<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.","source":"Object must have [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) or implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878)."},{"content":"Get property change updates from a bound object.","pos":[13014,13062]},{"pos":[13080,13202],"content":"Object must implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>System.ComponentModel. INotifyPropertyChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.","source":"Object must implement [**System.ComponentModel. INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged)."},{"pos":[13501,13632],"content":"Object must implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.UI.Xaml.Data. INotifyPropertyChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>.","source":"Object must implement [**Windows.UI.Xaml.Data. INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899)."},{"content":"Bind to a collection.","pos":[13983,14004]},{"content":"List(Of T)","pos":[14052,14062]},{"content":"Platform::Collections::Vector<ph id=\"ph1\">&amp;lt;</ph>T","pos":[14473,14507],"source":"Platform::Collections::Vector&lt;T"},{"content":"Get collection change updates from a bound collection.","pos":[14969,15023]},{"content":"ObservableCollection(Of T)","pos":[15038,15064]},{"content":"Platform::Collections::Vector<ph id=\"ph1\">&amp;lt;</ph>T","pos":[15459,15493],"source":"Platform::Collections::Vector&lt;T"},{"content":"Implement a collection that supports binding.","pos":[15955,16000]},{"content":"Extend <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>List(Of T)<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.Generic.List%601)</ept> or implement <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IList<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.Collections.IList)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>IList<ept id=\"p6\">**</ept><ept id=\"p5\">](T:System.Collections.Generic.IList%601)</ept>(Of <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Object<ept id=\"p8\">**</ept><ept id=\"p7\">](T:System.Object)</ept>), <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>IEnumerable<ept id=\"p10\">**</ept><ept id=\"p9\">](T:System.Collections.IEnumerable)</ept>, or <bpt id=\"p11\">[</bpt><bpt id=\"p12\">**</bpt>IEnumerable<ept id=\"p12\">**</ept><ept id=\"p11\">](T:System.Collections.Generic.IEnumerable%601)</ept>(Of <bpt id=\"p13\">**</bpt>Object<ept id=\"p13\">**</ept>).","pos":[16021,16360],"source":"Extend [**List(Of T)**](T:System.Collections.Generic.List%601) or implement [**IList**](T:System.Collections.IList), [**IList**](T:System.Collections.Generic.IList%601)(Of [**Object**](T:System.Object)), [**IEnumerable**](T:System.Collections.IEnumerable), or [**IEnumerable**](T:System.Collections.Generic.IEnumerable%601)(Of **Object**)."},{"content":"Binding to generic <bpt id=\"p1\">**</bpt>IList(Of T)<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IEnumerable(Of T)<ept id=\"p2\">**</ept> is not supported.","pos":[16361,16439],"source":" Binding to generic **IList(Of T)** and **IEnumerable(Of T)** is not supported."},{"content":"Implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBindableVector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IBindableIterable<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>IVector<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR206631)</ept><ph id=\"ph1\">&amp;lt;</ph><bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Object<ept id=\"p8\">**</ept><ept id=\"p7\">](T:System.Object)</ept><ph id=\"ph2\">^&amp;gt;</ph>, <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>IIterable<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/BR226024)</ept><ph id=\"ph3\">&amp;lt;</ph><bpt id=\"p11\">**</bpt>Object<ept id=\"p11\">**</ept><ph id=\"ph4\">^&amp;gt;</ph>, <bpt id=\"p12\">**</bpt>IVector<ept id=\"p12\">**</ept><ph id=\"ph5\">&amp;lt;</ph><bpt id=\"p13\">[</bpt><bpt id=\"p14\">**</bpt>IInspectable<ept id=\"p14\">**</ept><ept id=\"p13\">](https://msdn.microsoft.com/library/BR205821)</ept><ph id=\"ph6\">\\*&amp;gt;</ph>, or <bpt id=\"p15\">**</bpt>IIterable<ept id=\"p15\">**</ept><ph id=\"ph7\">&amp;lt;</ph><bpt id=\"p16\">**</bpt>IInspectable<ept id=\"p16\">**</ept><ph id=\"ph8\">\\*&amp;gt;</ph>.","pos":[16442,16950],"source":"Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979), [**IBindableIterable**](https://msdn.microsoft.com/library/windows/apps/Hh701957), [**IVector**](https://msdn.microsoft.com/library/windows/apps/BR206631)&lt;[**Object**](T:System.Object)^&gt;, [**IIterable**](https://msdn.microsoft.com/library/windows/apps/BR226024)&lt;**Object**^&gt;, **IVector**&lt;[**IInspectable**](https://msdn.microsoft.com/library/BR205821)\\*&gt;, or **IIterable**&lt;**IInspectable**\\*&gt;."},{"content":"Binding to generic <bpt id=\"p1\">**</bpt>IVector<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IIterable<ph id=\"ph3\">&amp;lt;</ph>T<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">**</ept> is not supported.","pos":[16951,17035],"source":" Binding to generic **IVector&lt;T&gt;** and **IIterable&lt;T&gt;** is not supported."},{"content":"Implement a collection that supports collection change updates.","pos":[17040,17103]},{"pos":[17106,17366],"content":"Extend <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObservableCollection(Of T)<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IList<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.Collections.IList)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>INotifyCollectionChanged<ept id=\"p6\">**</ept><ept id=\"p5\">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.","source":"Extend [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) or implement (non-generic) [**IList**](T:System.Collections.IList) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged)."},{"pos":[17527,17711],"content":"Implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBindableVector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IBindableObservableVector<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>.","source":"Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979) and [**IBindableObservableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701974)."},{"content":"Implement a collection that supports incremental loading.","pos":[18026,18083]},{"content":"Extend <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ObservableCollection(Of T)<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IList<ept id=\"p4\">**</ept><ept id=\"p3\">](T:System.Collections.IList)</ept> and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>INotifyCollectionChanged<ept id=\"p6\">**</ept><ept id=\"p5\">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.","pos":[18092,18352],"source":"Extend [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) or implement (non-generic) [**IList**](T:System.Collections.IList) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged)."},{"content":"Additionally, implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ISupportIncrementalLoading<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.","pos":[18353,18468],"source":" Additionally, implement [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916)."},{"pos":[18528,18805],"content":"Implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBindableVector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IBindableObservableVector<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>, and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>ISupportIncrementalLoading<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.","source":"Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979), [**IBindableObservableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701974), and [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916)."},{"content":"You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.","pos":[19043,19170]},{"content":"For example, you can bind list controls to Bing image query results without having to load all the results at once.","pos":[19171,19286]},{"content":"Instead, you load only some results immediately, and load additional results as needed.","pos":[19287,19374]},{"content":"To support incremental loading, you must implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ISupportIncrementalLoading<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept> on a data source that supports collection change notification.","pos":[19375,19579],"source":" To support incremental loading, you must implement [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916) on a data source that supports collection change notification."},{"content":"When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.","pos":[19580,19775]},{"content":"Binding target","pos":[19777,19791]},{"content":"In the two examples below, the <bpt id=\"p1\">**</bpt>Button.Content<ept id=\"p1\">**</ept> property is the binding target, and its value is set to a markup extension which declares the binding object.","pos":[19808,19967],"source":"In the two examples below, the **Button.Content** property is the binding target, and its value is set to a markup extension which declares the binding object."},{"content":"First <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> is shown, and then <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.","pos":[19968,20132],"source":" First [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) is shown, and then [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)."},{"content":"Declaring bindings in markup is the common case (it's convenient, readable, and toolable).","pos":[20133,20223]},{"content":"But you can avoid markup and imperatively (programmatically) create an instance of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Binding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class instead if you need to.","pos":[20224,20412],"source":" But you can avoid markup and imperatively (programmatically) create an instance of the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class instead if you need to."},{"content":"Binding object declared using {x:Bind}","pos":[20590,20628]},{"content":"There's one step we need to do before we author our <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> markup.","pos":[20669,20797],"source":"There's one step we need to do before we author our [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) markup."},{"content":"We need to expose our binding source class from the class that represents our page of markup.","pos":[20798,20891]},{"content":"We do that by adding a property (of type <bpt id=\"p1\">**</bpt>HostViewModel<ept id=\"p1\">**</ept> in this case) to our <bpt id=\"p2\">**</bpt>HostView<ept id=\"p2\">**</ept> page class.","pos":[20892,20996],"source":" We do that by adding a property (of type **HostViewModel** in this case) to our **HostView** page class."},{"content":"That done, we can now take a closer look at the markup that declares the binding object.","pos":[21296,21384]},{"content":"The example below uses the same <bpt id=\"p1\">**</bpt>Button.Content<ept id=\"p1\">**</ept> binding target we used in the \"Binding target\" section earlier, and shows it being bound to the <bpt id=\"p2\">**</bpt>HostViewModel.NextButtonText<ept id=\"p2\">**</ept> property.","pos":[21385,21574],"source":" The example below uses the same **Button.Content** binding target we used in the \"Binding target\" section earlier, and shows it being bound to the **HostViewModel.NextButtonText** property."},{"content":"Notice the value that we specify for <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept>.","pos":[21723,21769],"source":"Notice the value that we specify for **Path**."},{"content":"This value is interpreted in the context of the page itself, and in this case the path begins by referencing the <bpt id=\"p1\">**</bpt>ViewModel<ept id=\"p1\">**</ept> property that we just added to the <bpt id=\"p2\">**</bpt>HostView<ept id=\"p2\">**</ept> page.","pos":[21770,21950],"source":" This value is interpreted in the context of the page itself, and in this case the path begins by referencing the **ViewModel** property that we just added to the **HostView** page."},{"content":"That property returns a <bpt id=\"p1\">**</bpt>HostViewModel<ept id=\"p1\">**</ept> instance, and so we can dot into that object to access the <bpt id=\"p2\">**</bpt>HostViewModel.NextButtonText<ept id=\"p2\">**</ept> property.","pos":[21951,22094],"source":" That property returns a **HostViewModel** instance, and so we can dot into that object to access the **HostViewModel.NextButtonText** property."},{"content":"And we specify <bpt id=\"p1\">**</bpt>Mode<ept id=\"p1\">**</ept>, to override the <bpt id=\"p2\">[</bpt>{x:Bind}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> default of one-time.","pos":[22095,22225],"source":" And we specify **Mode**, to override the [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) default of one-time."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.","pos":[22227,22438],"source":"The [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Property-path syntax<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.","pos":[22439,22539],"source":" For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586)."},{"content":"Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICustomPropertyProvider<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.","pos":[22540,22737],"source":" Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878)."},{"content":"For other settings, see <bpt id=\"p1\">[</bpt>{x:Bind} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>.","pos":[22738,22848],"source":" For other settings, see [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783)."},{"pos":[22850,23117],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Changes to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>TextBox.Text<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>TextBox<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus, and not after every user keystroke.","source":"**Note**  Changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus, and not after every user keystroke."},{"content":"DataTemplate and x:DataType","pos":[23121,23148]},{"content":"Inside a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept> (whether used as an item template, a content template, or a header template), the value of <bpt id=\"p3\">**</bpt>Path<ept id=\"p3\">**</ept> is not interpreted in the context of the page, but in the context of the data object being templated.","pos":[23152,23439],"source":"Inside a [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348) (whether used as an item template, a content template, or a header template), the value of **Path** is not interpreted in the context of the page, but in the context of the data object being templated."},{"content":"So that its bindings can be validated (and efficient code generated for them) at compile-time, a <bpt id=\"p1\">**</bpt>DataTemplate<ept id=\"p1\">**</ept> needs to declare the type of its data object using <bpt id=\"p2\">**</bpt>x:DataType<ept id=\"p2\">**</ept>.","pos":[23440,23620],"source":" So that its bindings can be validated (and efficient code generated for them) at compile-time, a **DataTemplate** needs to declare the type of its data object using **x:DataType**."},{"content":"The example given below could be used as the <bpt id=\"p1\">**</bpt>ItemTemplate<ept id=\"p1\">**</ept> of an items control bound to a collection of <bpt id=\"p2\">**</bpt>SampleDataGroup<ept id=\"p2\">**</ept> objects.","pos":[23621,23756],"source":" The example given below could be used as the **ItemTemplate** of an items control bound to a collection of **SampleDataGroup** objects."},{"content":"Weakly-typed objects in your Path","pos":[24025,24058]},{"content":"Consider for example that you have a type named SampleDataGroup, which implements a string property named Title.","pos":[24062,24174]},{"content":"And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup.","pos":[24175,24315]},{"content":"The binding <ph id=\"ph1\">`&lt;TextBlock Text=\"{x:Bind SampleDataGroupAsObject.Title}\"/&gt;`</ph> will result in a compile error because the Title property is not found on the type object.","pos":[24316,24479],"source":" The binding `<TextBlock Text=\"{x:Bind SampleDataGroupAsObject.Title}\"/>` will result in a compile error because the Title property is not found on the type object."},{"content":"The remedy for this is to add a cast to your Path syntax like this: <ph id=\"ph1\">`&lt;TextBlock Text=\"{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}\"/&gt;`</ph>.","pos":[24480,24632],"source":" The remedy for this is to add a cast to your Path syntax like this: `<TextBlock Text=\"{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}\"/>`."},{"content":"Here's another example where Element is declared as object but is actually a TextBlock: <ph id=\"ph1\">`&lt;TextBlock Text=\"{x:Bind Element.Text}\"/&gt;`</ph>.","pos":[24633,24765],"source":" Here's another example where Element is declared as object but is actually a TextBlock: `<TextBlock Text=\"{x:Bind Element.Text}\"/>`."},{"content":"And a cast remedies the issue: <ph id=\"ph1\">`&lt;TextBlock Text=\"{x:Bind Element.(TextBlock.Text)}\"/&gt;`</ph>.","pos":[24766,24853],"source":" And a cast remedies the issue: `<TextBlock Text=\"{x:Bind Element.(TextBlock.Text)}\"/>`."},{"content":"If your data loads asynchronously","pos":[24857,24890]},{"content":"Code to support <bpt id=\"p1\">**</bpt>{x:Bind}<ept id=\"p1\">**</ept> is generated at compile-time in the partial classes for your pages.","pos":[24894,24990],"source":"Code to support **{x:Bind}** is generated at compile-time in the partial classes for your pages."},{"content":"These files can be found in your <ph id=\"ph1\">`obj`</ph> folder, with names like (for C#) <ph id=\"ph2\">`&lt;view name&gt;.g.cs`</ph>.","pos":[24991,25082],"source":" These files can be found in your `obj` folder, with names like (for C#) `<view name>.g.cs`."},{"content":"The generated code includes a handler for your page's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Loading<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208706-loading)</ept> event, and that handler calls the <bpt id=\"p3\">**</bpt>Initialize<ept id=\"p3\">**</ept> method on a generated class that represent's your page's bindings.","pos":[25083,25332],"source":" The generated code includes a handler for your page's [**Loading**](https://msdn.microsoft.com/library/windows/apps/BR208706-loading) event, and that handler calls the **Initialize** method on a generated class that represent's your page's bindings."},{"content":"<bpt id=\"p1\">**</bpt>Initialize<ept id=\"p1\">**</ept> in turn calls <bpt id=\"p2\">**</bpt>Update<ept id=\"p2\">**</ept> to begin moving data between the binding source and the target.","pos":[25333,25436],"source":"**Initialize** in turn calls **Update** to begin moving data between the binding source and the target."},{"content":"<bpt id=\"p1\">**</bpt>Loading<ept id=\"p1\">**</ept> is raised just before the first measure pass of the page or user control.","pos":[25437,25522],"source":"**Loading** is raised just before the first measure pass of the page or user control."},{"content":"So if your data is loaded asynchronously it may not be ready by the time <bpt id=\"p1\">**</bpt>Initialize<ept id=\"p1\">**</ept> is called.","pos":[25523,25621],"source":" So if your data is loaded asynchronously it may not be ready by the time **Initialize** is called."},{"content":"So, after you've loaded data, you can force one-time bindings to be initialized by calling <ph id=\"ph1\">`this-&gt;Bindings-&gt;Update();`</ph>.","pos":[25622,25741],"source":" So, after you've loaded data, you can force one-time bindings to be initialized by calling `this->Bindings->Update();`."},{"content":"If you only need one-time bindings for asynchronously-loaded data then itâ€™s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.","pos":[25742,25921]},{"content":"If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <bpt id=\"p1\">**</bpt>Update<ept id=\"p1\">**</ept>.","pos":[25922,26143],"source":" If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to **Update**."},{"content":"Limitations","pos":[26147,26158]},{"content":"<bpt id=\"p1\">**</bpt>{x:Bind}<ept id=\"p1\">**</ept> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names (\"if it walks, swims, and quacks like a duck then it's a duck\").","pos":[26162,26430],"source":"**{x:Bind}** is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names (\"if it walks, swims, and quacks like a duck then it's a duck\")."},{"content":"With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.","pos":[26431,26537]},{"content":"For these scenarios, use <bpt id=\"p1\">**</bpt>{Binding}<ept id=\"p1\">**</ept>.","pos":[26538,26577],"source":" For these scenarios, use **{Binding}**."},{"content":"Binding object declared using {Binding}","pos":[26579,26618]},{"content":"<bpt id=\"p1\">[</bpt>{Binding}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> assumes, by default, that you're binding to the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DataContext<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of your markup page.","pos":[26660,26874],"source":"[{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) assumes, by default, that you're binding to the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) of your markup page."},{"content":"So we'll set the <bpt id=\"p1\">**</bpt>DataContext<ept id=\"p1\">**</ept> of our page to be an instance of our binding source class (of type <bpt id=\"p2\">**</bpt>HostViewModel<ept id=\"p2\">**</ept> in this case).","pos":[26875,27007],"source":" So we'll set the **DataContext** of our page to be an instance of our binding source class (of type **HostViewModel** in this case)."},{"content":"The example below shows the markup that declares the binding object.","pos":[27008,27076]},{"content":"We use the same <bpt id=\"p1\">**</bpt>Button.Content<ept id=\"p1\">**</ept> binding target we used in the \"Binding target\" section earlier, and we bind to the <bpt id=\"p2\">**</bpt>HostViewModel.NextButtonText<ept id=\"p2\">**</ept> property.","pos":[27077,27237],"source":" We use the same **Button.Content** binding target we used in the \"Binding target\" section earlier, and we bind to the **HostViewModel.NextButtonText** property."},{"content":"Notice the value that we specify for <bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept>.","pos":[27464,27510],"source":"Notice the value that we specify for **Path**."},{"content":"This value is interpreted in the context of the page's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataContext<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which in this example is set to an instance of <bpt id=\"p3\">**</bpt>HostViewModel<ept id=\"p3\">**</ept>.","pos":[27511,27708],"source":" This value is interpreted in the context of the page's [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713), which in this example is set to an instance of **HostViewModel**."},{"content":"The path references the <bpt id=\"p1\">**</bpt>HostViewModel.NextButtonText<ept id=\"p1\">**</ept> property.","pos":[27709,27775],"source":" The path references the **HostViewModel.NextButtonText** property."},{"content":"We can omit <bpt id=\"p1\">**</bpt>Mode<ept id=\"p1\">**</ept>, because the <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> default of one-way works here.","pos":[27776,27910],"source":" We can omit **Mode**, because the [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) default of one-way works here."},{"content":"The default value of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataContext<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> for a UI element is the inherited value of its parent.","pos":[27912,28063],"source":"The default value of [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) for a UI element is the inherited value of its parent."},{"content":"You can of course override that default by setting <bpt id=\"p1\">**</bpt>DataContext<ept id=\"p1\">**</ept> explicitly, which is in turn inherited by children by default.","pos":[28064,28193],"source":" You can of course override that default by setting **DataContext** explicitly, which is in turn inherited by children by default."},{"content":"Setting <bpt id=\"p1\">**</bpt>DataContext<ept id=\"p1\">**</ept> explicitly on an element is useful when you want to have multiple bindings that use the same source.","pos":[28194,28318],"source":" Setting **DataContext** explicitly on an element is useful when you want to have multiple bindings that use the same source."},{"content":"A binding object has a <bpt id=\"p1\">**</bpt>Source<ept id=\"p1\">**</ept> property, which defaults to the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DataContext<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of the UI element on which the binding is declared.","pos":[28320,28513],"source":"A binding object has a **Source** property, which defaults to the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) of the UI element on which the binding is declared."},{"content":"You can override this default by setting <bpt id=\"p1\">**</bpt>Source<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>RelativeSource<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>ElementName<ept id=\"p3\">**</ept> explicitly on the binding (see <bpt id=\"p4\">[</bpt>{Binding}<ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> for details).","pos":[28514,28720],"source":" You can override this default by setting **Source**, **RelativeSource**, or **ElementName** explicitly on the binding (see [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) for details)."},{"content":"Inside a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DataTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242348)</ept>, the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DataContext<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> is set to the data object being templated.","pos":[28722,28931],"source":"Inside a [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348), the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) is set to the data object being templated."},{"content":"The example given below could be used as the <bpt id=\"p1\">**</bpt>ItemTemplate<ept id=\"p1\">**</ept> of an items control bound to a collection of any type that has string properties named <bpt id=\"p2\">**</bpt>Title<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept>.","pos":[28932,29111],"source":" The example given below could be used as the **ItemTemplate** of an items control bound to a collection of any type that has string properties named **Title** and **Description**."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  By default, changes to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>TextBox.Text<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209683-text)</ept> are sent to a two-way bound source when the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>TextBox<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> loses focus.","pos":[29345,29588],"source":"**Note**  By default, changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus."},{"content":"To cause changes to be sent after every user keystroke, set <bpt id=\"p1\">**</bpt>UpdateSourceTrigger<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>PropertyChanged<ept id=\"p2\">**</ept> on the binding in markup.","pos":[29589,29721],"source":" To cause changes to be sent after every user keystroke, set **UpdateSourceTrigger** to **PropertyChanged** on the binding in markup."},{"content":"You can also completely take control of when changes are sent to the source by setting <bpt id=\"p1\">**</bpt>UpdateSourceTrigger<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Explicit<ept id=\"p2\">**</ept>.","pos":[29722,29849],"source":" You can also completely take control of when changes are sent to the source by setting **UpdateSourceTrigger** to **Explicit**."},{"content":"You then handle events on the text box (typically <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBox.TextChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)</ept>), call <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>GetBindingExpression<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression)</ept> on the target to get a <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>BindingExpression<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR209820expression)</ept> object, and finally call <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>BindingExpression.UpdateSource<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource)</ept> to programmatically update the data source.","pos":[29850,30410],"source":" You then handle events on the text box (typically [**TextBox.TextChanged**](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)), call [**GetBindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression) on the target to get a [**BindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR209820expression) object, and finally call [**BindingExpression.UpdateSource**](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource) to programmatically update the data source."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Path<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820-path)</ept> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.","pos":[30412,30623],"source":"The [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Property-path syntax<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt185586)</ept>.","pos":[30624,30724],"source":" For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586)."},{"content":"Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICustomPropertyProvider<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.","pos":[30725,30922],"source":" Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878)."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ElementName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname)</ept> property is useful for element-to-element binding.","pos":[30923,31065],"source":" The [**ElementName**](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname) property is useful for element-to-element binding."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RelativeSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource)</ept> property has several uses, one of which is as a more powerful alternative to template binding inside a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ControlTemplate<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209391)</ept>.","pos":[31066,31347],"source":" The [**RelativeSource**](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource) property has several uses, one of which is as a more powerful alternative to template binding inside a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209391)."},{"content":"For other settings, see <bpt id=\"p1\">[</bpt>{Binding} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> and the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Binding<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class.","pos":[31348,31545],"source":" For other settings, see [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) and the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class."},{"content":"What if the source and the target are not the same type?","pos":[31547,31603]},{"content":"If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another.","pos":[31662,32023]},{"content":"There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there.","pos":[32024,32211]},{"content":"But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties.","pos":[32212,32333]},{"content":"In that case you'll want to use something known as a value converter.","pos":[32334,32403]},{"content":"This section describes how to implement and consume a value converter.","pos":[32404,32474]},{"content":"Here's a value converter, suitable for a one-time or a one-way binding, that converts a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DateTime<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.DateTime)</ept> value to a string value containing the month.","pos":[32476,32643],"source":"Here's a value converter, suitable for a one-time or a one-way binding, that converts a [**DateTime**](T:System.DateTime) value to a string value containing the month."},{"content":"The class implements <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IValueConverter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.","pos":[32644,32745],"source":" The class implements [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903)."},{"content":"And here's how you consume that value converter in your binding object markup.","pos":[34980,35058]},{"content":"The binding engine calls the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Convert<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209903-convert)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ConvertBack<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209903-convertback)</ept> methods if the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Converter<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR209820-converter)</ept> parameter is defined for the binding.","pos":[35378,35715],"source":"The binding engine calls the [**Convert**](https://msdn.microsoft.com/library/windows/apps/BR209903-convert) and [**ConvertBack**](https://msdn.microsoft.com/library/windows/apps/BR209903-convertback) methods if the [**Converter**](https://msdn.microsoft.com/library/windows/apps/BR209820-converter) parameter is defined for the binding."},{"content":"When data is passed from the source, the binding engine calls <bpt id=\"p1\">**</bpt>Convert<ept id=\"p1\">**</ept> and passes the returned data to the target.","pos":[35716,35833],"source":" When data is passed from the source, the binding engine calls **Convert** and passes the returned data to the target."},{"content":"When data is passed from the target (for a two-way binding), the binding engine calls <bpt id=\"p1\">**</bpt>ConvertBack<ept id=\"p1\">**</ept> and passes the returned data to the source.","pos":[35834,35979],"source":" When data is passed from the target (for a two-way binding), the binding engine calls **ConvertBack** and passes the returned data to the source."},{"content":"The converter also has optional parameters: <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ConverterLanguage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterlanguage)</ept>, which allows specifying the language to be used in the conversion, and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ConverterParameter<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209820-converterparameter)</ept>, which allows passing a parameter for the conversion logic.","pos":[35981,36358],"source":"The converter also has optional parameters: [**ConverterLanguage**](https://msdn.microsoft.com/library/windows/apps/BR209820-converterlanguage), which allows specifying the language to be used in the conversion, and [**ConverterParameter**](https://msdn.microsoft.com/library/windows/apps/BR209820-converterparameter), which allows passing a parameter for the conversion logic."},{"content":"For an example that uses a converter parameter, see <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IValueConverter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209903)</ept>.","pos":[36359,36491],"source":" For an example that uses a converter parameter, see [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903)."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If there is an error in the conversion, do not throw an exception.","pos":[36493,36569],"source":"**Note**  If there is an error in the conversion, do not throw an exception."},{"content":"Instead, return <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyProperty.UnsetValue<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242362-unsetvalue)</ept>, which will stop the data transfer.","pos":[36570,36726],"source":" Instead, return [**DependencyProperty.UnsetValue**](https://msdn.microsoft.com/library/windows/apps/BR242362-unsetvalue), which will stop the data transfer."},{"content":"To display a default value to use whenever the binding source cannot be resolved, set the <bpt id=\"p1\">**</bpt>FallbackValue<ept id=\"p1\">**</ept> property on the binding object in markup.","pos":[36728,36877],"source":"To display a default value to use whenever the binding source cannot be resolved, set the **FallbackValue** property on the binding object in markup."},{"content":"This is useful to handle conversion and formatting errors.","pos":[36878,36936]},{"content":"It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.","pos":[36937,37065]},{"content":"If you bind a text control to a value that is not a string, the data binding engine will convert the value to a string.","pos":[37067,37186]},{"content":"If the value is a reference type, the data binding engine will retrieve the string value by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICustomPropertyProvider.GetStringRepresentation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209878-getstringrepresentation)</ept> or <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IStringable.ToString<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/Dn302136)</ept> if available, and will otherwise call <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Object.ToString<ept id=\"p6\">**</ept><ept id=\"p5\">](M:System.Object.ToString)</ept>.","pos":[37187,37584],"source":" If the value is a reference type, the data binding engine will retrieve the string value by calling [**ICustomPropertyProvider.GetStringRepresentation**](https://msdn.microsoft.com/library/windows/apps/BR209878-getstringrepresentation) or [**IStringable.ToString**](https://msdn.microsoft.com/library/Dn302136) if available, and will otherwise call [**Object.ToString**](M:System.Object.ToString)."},{"content":"Note, however, that the binding engine will ignore any <bpt id=\"p1\">**</bpt>ToString<ept id=\"p1\">**</ept> implementation that hides the base-class implementation.","pos":[37585,37709],"source":" Note, however, that the binding engine will ignore any **ToString** implementation that hides the base-class implementation."},{"content":"Subclass implementations should override the base class <bpt id=\"p1\">**</bpt>ToString<ept id=\"p1\">**</ept> method instead.","pos":[37710,37794],"source":" Subclass implementations should override the base class **ToString** method instead."},{"content":"Similarly, in native languages, all managed objects appear to implement <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICustomPropertyProvider<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IStringable<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/Dn302135)</ept>.","pos":[37795,38022],"source":" Similarly, in native languages, all managed objects appear to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878) and [**IStringable**](https://msdn.microsoft.com/library/Dn302135)."},{"content":"However, all calls to <bpt id=\"p1\">**</bpt>GetStringRepresentation<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>IStringable.ToString<ept id=\"p2\">**</ept> are routed to <bpt id=\"p3\">**</bpt>Object.ToString<ept id=\"p3\">**</ept> or an override of that method, and never to a new <bpt id=\"p4\">**</bpt>ToString<ept id=\"p4\">**</ept> implementation that hides the base-class implementation.","pos":[38023,38255],"source":" However, all calls to **GetStringRepresentation** and **IStringable.ToString** are routed to **Object.ToString** or an override of that method, and never to a new **ToString** implementation that hides the base-class implementation."},{"content":"Resource dictionaries with {x:Bind}","pos":[38257,38292]},{"content":"The <bpt id=\"p1\">[</bpt>{x:Bind} markup extension<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> depends on code generation, so it needs a code-behind file containing a constructor that calls <bpt id=\"p2\">**</bpt>InitializeComponent<ept id=\"p2\">**</ept> (to initialize the generated code).","pos":[38330,38574],"source":"The [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) depends on code generation, so it needs a code-behind file containing a constructor that calls **InitializeComponent** (to initialize the generated code)."},{"content":"You re-use the resource dictionary by instantiating its type (so that <bpt id=\"p1\">**</bpt>InitializeComponent<ept id=\"p1\">**</ept> is called) instead of referencing its filename.","pos":[38575,38716],"source":" You re-use the resource dictionary by instantiating its type (so that **InitializeComponent** is called) instead of referencing its filename."},{"content":"Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.","pos":[38717,38828]},{"content":"TemplatesResourceDictionary.xaml","pos":[38830,38862]},{"content":"TemplatesResourceDictionary.xaml.cs","pos":[39227,39262]},{"content":"MainPage.xaml","pos":[39506,39519]},{"content":"Event binding and ICommand","pos":[39936,39962]},{"content":"<bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> supports a feature called event binding.","pos":[39991,40100],"source":"[{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) supports a feature called event binding."},{"content":"With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file.","pos":[40101,40272]},{"content":"Let's say you have a <bpt id=\"p1\">**</bpt>RootFrame<ept id=\"p1\">**</ept> property on your <bpt id=\"p2\">**</bpt>MainPage<ept id=\"p2\">**</ept> class.","pos":[40273,40344],"source":" Let's say you have a **RootFrame** property on your **MainPage** class."},{"content":"You can then bind a button's <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> event to a method on the <bpt id=\"p2\">**</bpt>Frame<ept id=\"p2\">**</ept> object returned by the <bpt id=\"p3\">**</bpt>RootFrame<ept id=\"p3\">**</ept> property like this.","pos":[40522,40652],"source":"You can then bind a button's **Click** event to a method on the **Frame** object returned by the **RootFrame** property like this."},{"content":"Note that we also bind the button's <bpt id=\"p1\">**</bpt>IsEnabled<ept id=\"p1\">**</ept> property to another member of the same <bpt id=\"p2\">**</bpt>Frame<ept id=\"p2\">**</ept>.","pos":[40653,40752],"source":" Note that we also bind the button's **IsEnabled** property to another member of the same **Frame**."},{"content":"Overloaded methods cannot be used to handle an event with this technique.","pos":[40921,40994]},{"content":"Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively.","pos":[40995,41148]},{"content":"In this case, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Frame.GoForward<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242693)</ept> is not overloaded and it has no parameters (but it would still be valid even if it took two <bpt id=\"p3\">**</bpt>object<ept id=\"p3\">**</ept> parameters).","pos":[41149,41358],"source":" In this case, [**Frame.GoForward**](https://msdn.microsoft.com/library/windows/apps/BR242693) is not overloaded and it has no parameters (but it would still be valid even if it took two **object** parameters)."},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Frame.GoBack<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn996568)</ept> is overloaded, though, so we can't use that method with this technique.","pos":[41359,41507],"source":"[**Frame.GoBack**](https://msdn.microsoft.com/library/windows/apps/Dn996568) is overloaded, though, so we can't use that method with this technique."},{"content":"The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICommand<ept id=\"p2\">**</ept><ept id=\"p1\">](T:System.Windows.Input.ICommand)</ept> interface).","pos":[41509,41714],"source":"The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the [**ICommand**](T:System.Windows.Input.ICommand) interface)."},{"content":"Both <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> work with commands.","pos":[41715,41882],"source":" Both [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) work with commands."},{"content":"So that you don't have to implement the command pattern multiple times, you can use the <bpt id=\"p1\">**</bpt>DelegateCommand<ept id=\"p1\">**</ept> helper class that you'll find in the <bpt id=\"p2\">[</bpt>QuizGame<ept id=\"p2\">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the \"Common\" folder).","pos":[41883,42128],"source":" So that you don't have to implement the command pattern multiple times, you can use the **DelegateCommand** helper class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the \"Common\" folder)."},{"content":"Binding to a collection of folders or files","pos":[42133,42176]},{"content":"You can use the APIs in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Storage<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR227346)</ept> namespace to retrieve folder and file data.","pos":[42178,42329],"source":"You can use the APIs in the [**Windows.Storage**](https://msdn.microsoft.com/library/windows/apps/BR227346) namespace to retrieve folder and file data."},{"content":"However, the various <bpt id=\"p1\">**</bpt>GetFilesAsync<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>GetFoldersAsync<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>GetItemsAsync<ept id=\"p3\">**</ept> methods do not return values that are suitable for binding to list controls.","pos":[42330,42489],"source":" However, the various **GetFilesAsync**, **GetFoldersAsync**, and **GetItemsAsync** methods do not return values that are suitable for binding to list controls."},{"content":"Instead, you must bind to the return values of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetVirtualizedFilesVector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh701422)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>GetVirtualizedFoldersVector<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Hh701428)</ept>, and <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>GetVirtualizedItemsVector<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/Hh701430)</ept> methods of the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>FileInformationFactory<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/BR207501)</ept> class.","pos":[42490,42927],"source":" Instead, you must bind to the return values of the [**GetVirtualizedFilesVector**](https://msdn.microsoft.com/library/windows/apps/Hh701422), [**GetVirtualizedFoldersVector**](https://msdn.microsoft.com/library/windows/apps/Hh701428), and [**GetVirtualizedItemsVector**](https://msdn.microsoft.com/library/windows/apps/Hh701430) methods of the [**FileInformationFactory**](https://msdn.microsoft.com/library/windows/apps/BR207501) class."},{"content":"The following code example from the <bpt id=\"p1\">[</bpt>StorageDataSource and GetVirtualizedFilesVector sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=228621)</ept> shows the typical usage pattern.","pos":[42928,43102],"source":" The following code example from the [StorageDataSource and GetVirtualizedFilesVector sample](http://go.microsoft.com/fwlink/p/?linkid=228621) shows the typical usage pattern."},{"content":"Remember to declare the <bpt id=\"p1\">**</bpt>picturesLibrary<ept id=\"p1\">**</ept> capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.","pos":[43103,43256],"source":" Remember to declare the **picturesLibrary** capability in your app package manifest, and confirm that there are pictures in your Pictures library folder."},{"content":"You will typically use this approach to create a read-only view of file and folder info.","pos":[44217,44305]},{"content":"You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.","pos":[44306,44426]},{"content":"However, any changes are not persisted until you call the appropriate <bpt id=\"p1\">**</bpt>SavePropertiesAsync<ept id=\"p1\">**</ept> method (for example, <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>MusicProperties.SavePropertiesAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR207760)</ept>).","pos":[44427,44643],"source":" However, any changes are not persisted until you call the appropriate **SavePropertiesAsync** method (for example, [**MusicProperties.SavePropertiesAsync**](https://msdn.microsoft.com/library/windows/apps/BR207760))."},{"content":"You should commit changes when the item loses focus because this triggers a selection reset.","pos":[44644,44736]},{"content":"Note that two-way binding using this technique works only with indexed locations, such as Music.","pos":[44738,44834]},{"content":"You can determine whether a location is indexed by calling the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FolderInformation.GetIndexedStateAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR207627)</ept> method.","pos":[44835,45008],"source":" You can determine whether a location is indexed by calling the [**FolderInformation.GetIndexedStateAsync**](https://msdn.microsoft.com/library/windows/apps/BR207627) method."},{"content":"Note also that a virtualized vector can return <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept> for some items before it populates their value.","pos":[45010,45113],"source":"Note also that a virtualized vector can return **null** for some items before it populates their value."},{"content":"For example, you should check for <bpt id=\"p1\">**</bpt>null<ept id=\"p1\">**</ept> before you use the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SelectedItem<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> value of a list control bound to a virtualized vector, or use <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>SelectedIndex<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/BR209768)</ept> instead.","pos":[45114,45401],"source":" For example, you should check for **null** before you use the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) value of a list control bound to a virtualized vector, or use [**SelectedIndex**](https://msdn.microsoft.com/library/windows/apps/BR209768) instead."},{"content":"Binding to data grouped by a key","pos":[45403,45435]},{"content":"If you take a flat collection of itemsâ€”books, for example, represented by a <bpt id=\"p1\">**</bpt>BookSku<ept id=\"p1\">**</ept> classâ€”and you group the items by using a common property as a keyâ€”the <bpt id=\"p2\">**</bpt>BookSku.AuthorName<ept id=\"p2\">**</ept> property, for exampleâ€”then the result is called grouped data.","pos":[45470,45712],"source":"If you take a flat collection of itemsâ€”books, for example, represented by a **BookSku** classâ€”and you group the items by using a common property as a keyâ€”the **BookSku.AuthorName** property, for exampleâ€”then the result is called grouped data."},{"content":"When you group data, it is no longer a flat collection.","pos":[45713,45768]},{"content":"Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.","pos":[45769,45914]},{"content":"To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <bpt id=\"p1\">**</bpt>BookSku<ept id=\"p1\">**</ept>s whose <bpt id=\"p2\">**</bpt>AuthorName<ept id=\"p2\">**</ept> property matches the group's key.","pos":[45915,46192],"source":" To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the **BookSku**s whose **AuthorName** property matches the group's key."},{"content":"In general, to display a collection, you bind the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> of an items control (such as <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ListView<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>GridView<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>) directly to a property that returns a collection.","pos":[46194,46548],"source":"In general, to display a collection, you bind the [**ItemsSource**](https://msdn.microsoft.com/library/windows/apps/BR242828) of an items control (such as [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) or [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705)) directly to a property that returns a collection."},{"content":"If that's a flat collection of items then you don't need to do anything special.","pos":[46549,46629]},{"content":"But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> which sits between the items control and the binding source.","pos":[46630,46919],"source":" But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) which sits between the items control and the binding source."},{"content":"You bind the <bpt id=\"p1\">**</bpt>CollectionViewSource<ept id=\"p1\">**</ept> to the property that returns grouped data, and you bind the items control to the <bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept>.","pos":[46920,47064],"source":" You bind the **CollectionViewSource** to the property that returns grouped data, and you bind the items control to the **CollectionViewSource**."},{"content":"An extra value-add of a <bpt id=\"p1\">**</bpt>CollectionViewSource<ept id=\"p1\">**</ept> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept>.","pos":[47065,47267],"source":" An extra value-add of a **CollectionViewSource** is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same **CollectionViewSource**."},{"content":"You can also access the current item programmatically through the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ICollectionView.CurrentItem<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209857)</ept> property of the object returned by the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CollectionViewSource.View<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</ept> property.","pos":[47268,47569],"source":" You can also access the current item programmatically through the [**ICollectionView.CurrentItem**](https://msdn.microsoft.com/library/windows/apps/BR209857) property of the object returned by the [**CollectionViewSource.View**](https://msdn.microsoft.com/library/windows/apps/BR209833-view) property."},{"content":"To activate the grouping facility of a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, set <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IsSourceGrouped<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</ept> to <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept>.","pos":[47571,47808],"source":"To activate the grouping facility of a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833), set [**IsSourceGrouped**](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped) to **true**."},{"content":"Whether you also need to set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsPath<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</ept> property depends on exactly how you author your group objects.","pos":[47809,47988],"source":" Whether you also need to set the [**ItemsPath**](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath) property depends on exactly how you author your group objects."},{"content":"There are two ways to author a group object: the \"is-a-group\" pattern, and the \"has-a-group\" pattern.","pos":[47989,48090]},{"content":"In the \"is-a-group\" pattern, the group object derives from a collection type (for example, <bpt id=\"p1\">**</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept>), so the group object actually is itself the group of items.","pos":[48091,48260],"source":" In the \"is-a-group\" pattern, the group object derives from a collection type (for example, **List&lt;T&gt;**), so the group object actually is itself the group of items."},{"content":"With this pattern you do not need to set <bpt id=\"p1\">**</bpt>ItemsPath<ept id=\"p1\">**</ept>.","pos":[48261,48316],"source":" With this pattern you do not need to set **ItemsPath**."},{"content":"In the \"has-a-group\" pattern, the group object has one or more properties of a collection type (such as <bpt id=\"p1\">**</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept>), so the group \"has a\" group of items in the form of a property (or several groups of items in the form of several properties).","pos":[48317,48566],"source":" In the \"has-a-group\" pattern, the group object has one or more properties of a collection type (such as **List&lt;T&gt;**), so the group \"has a\" group of items in the form of a property (or several groups of items in the form of several properties)."},{"content":"With this pattern you need to set <bpt id=\"p1\">**</bpt>ItemsPath<ept id=\"p1\">**</ept> to the name of the property that contains the group of items.","pos":[48567,48676],"source":" With this pattern you need to set **ItemsPath** to the name of the property that contains the group of items."},{"content":"The example below illustrates the \"has-a-group\" pattern.","pos":[48678,48734]},{"content":"The page class has a property named <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ViewModel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which returns an instance of our view model.","pos":[48735,48890],"source":" The page class has a property named [**ViewModel**](https://msdn.microsoft.com/library/windows/apps/BR208713), which returns an instance of our view model."},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> binds to the <bpt id=\"p3\">**</bpt>Authors<ept id=\"p3\">**</ept> property of the view model (<bpt id=\"p4\">**</bpt>Authors<ept id=\"p4\">**</ept> is the collection of group objects) and also specifies that it's the <bpt id=\"p5\">**</bpt>Author.BookSkus<ept id=\"p5\">**</ept> property that contains the grouped items.","pos":[48891,49175],"source":" The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) binds to the **Authors** property of the view model (**Authors** is the collection of group objects) and also specifies that it's the **Author.BookSkus** property that contains the grouped items."},{"content":"Finally, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GridView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> is bound to the <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept>, and has its group style defined so that it can render the items in groups.","pos":[49176,49378],"source":" Finally, the [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705) is bound to the **CollectionViewSource**, and has its group style defined so that it can render the items in groups."},{"content":"Note that the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemsSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> must use <bpt id=\"p3\">[</bpt>{Binding}<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> (and not <bpt id=\"p4\">[</bpt>{x:Bind}<ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept>) because it needs to set the <bpt id=\"p5\">**</bpt>Source<ept id=\"p5\">**</ept> property to a resource.","pos":[49920,50230],"source":"Note that the [**ItemsSource**](https://msdn.microsoft.com/library/windows/apps/BR242828) must use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) (and not [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783)) because it needs to set the **Source** property to a resource."},{"content":"To see the above example in the context of the complete app, download the <bpt id=\"p1\">[</bpt>Bookstore2<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app.","pos":[50231,50376],"source":" To see the above example in the context of the complete app, download the [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) sample app."},{"content":"Unlike the markup shown above, <bpt id=\"p1\">[</bpt>Bookstore2<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> uses {Binding} exclusively.","pos":[50377,50495],"source":" Unlike the markup shown above, [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) uses {Binding} exclusively."},{"content":"You can implement the \"is-a-group\" pattern in one of two ways.","pos":[50497,50559]},{"content":"One way is to author your own group class.","pos":[50560,50602]},{"content":"Derive the class from <bpt id=\"p1\">**</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">**</ept> (where <bpt id=\"p2\">*</bpt>T<ept id=\"p2\">*</ept> is the type of the items).","pos":[50603,50680],"source":" Derive the class from **List&lt;T&gt;** (where *T* is the type of the items)."},{"content":"For example, <ph id=\"ph1\">`public class Author : List&lt;BookSku&gt;`</ph>.","pos":[50681,50732],"source":" For example, `public class Author : List<BookSku>`."},{"content":"The second way is to use a <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](http://msdn.microsoft.com/library/bb397926.aspx)</ept> expression to dynamically create group objects (and a group class) from like property values of the <bpt id=\"p2\">**</bpt>BookSku<ept id=\"p2\">**</ept> items.","pos":[50733,50934],"source":" The second way is to use a [LINQ](http://msdn.microsoft.com/library/bb397926.aspx) expression to dynamically create group objects (and a group class) from like property values of the **BookSku** items."},{"content":"This approachâ€”maintaining only a flat list of items and grouping them together on the flyâ€”is typical of an app that accesses data from a cloud service.","pos":[50935,51086]},{"content":"You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <bpt id=\"p1\">**</bpt>Author<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Genre<ept id=\"p2\">**</ept>.","pos":[51087,51233],"source":" You get the flexibility to group books by author or by genre (for example) without needing special group classes such as **Author** and **Genre**."},{"content":"The example below illustrates the \"is-a-group\" pattern using <bpt id=\"p1\">[</bpt>LINQ<ept id=\"p1\">](http://msdn.microsoft.com/library/bb397926.aspx)</ept>.","pos":[51235,51352],"source":"The example below illustrates the \"is-a-group\" pattern using [LINQ](http://msdn.microsoft.com/library/bb397926.aspx)."},{"content":"This time we group books by genre, displayed with the genre name in the group headers.","pos":[51353,51439]},{"content":"This is indicated by the \"Key\" property path in reference to the group <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Key<ept id=\"p2\">**</ept><ept id=\"p1\">](P:System.Linq.IGrouping%602.Key)</ept> value.","pos":[51440,51560],"source":" This is indicated by the \"Key\" property path in reference to the group [**Key**](P:System.Linq.IGrouping%602.Key) value."},{"content":"Remember that when using <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> with data templates we need to indicate the type being bound to by setting an <bpt id=\"p2\">**</bpt>x:DataType<ept id=\"p2\">**</ept> value.","pos":[52036,52229],"source":"Remember that when using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) with data templates we need to indicate the type being bound to by setting an **x:DataType** value."},{"content":"If the type is generic then we can't express that in markup so we need to use <bpt id=\"p1\">[</bpt>{Binding}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> instead in the group style header template.","pos":[52230,52421],"source":" If the type is generic then we can't express that in markup so we need to use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) instead in the group style header template."},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SemanticZoom<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh702601)</ept> control is a great way for your users to view and navigate grouped data.","pos":[53253,53404],"source":"A [**SemanticZoom**](https://msdn.microsoft.com/library/windows/apps/Hh702601) control is a great way for your users to view and navigate grouped data."},{"content":"The <bpt id=\"p1\">[</bpt>Bookstore2<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> sample app illustrates how to use the <bpt id=\"p2\">**</bpt>SemanticZoom<ept id=\"p2\">**</ept>.","pos":[53405,53524],"source":" The [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) sample app illustrates how to use the **SemanticZoom**."},{"content":"In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view).","pos":[53525,53678]},{"content":"The jump list affords much quicker navigation than scrolling through the list of books.","pos":[53679,53766]},{"content":"The zoomed-in and zoomed-out views are actually <bpt id=\"p1\">**</bpt>ListView<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>GridView<ept id=\"p2\">**</ept> controls bound to the same <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept>.","pos":[53767,53896],"source":" The zoomed-in and zoomed-out views are actually **ListView** or **GridView** controls bound to the same **CollectionViewSource**."},{"content":"An illustration of a SemanticZoom","pos":[53900,53933]},{"content":"When you bind to hierarchical dataâ€”such as subcategories within categoriesâ€”you can choose to display the hierarchical levels in your UI with a series of items controls.","pos":[53953,54121]},{"content":"A selection in one items control determines the contents of subsequent items controls.","pos":[54122,54208]},{"content":"You can keep the lists synchronized by binding each list to its own <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CollectionViewSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> and binding the <bpt id=\"p3\">**</bpt>CollectionViewSource<ept id=\"p3\">**</ept> instances together in a chain.","pos":[54209,54433],"source":" You can keep the lists synchronized by binding each list to its own [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) and binding the **CollectionViewSource** instances together in a chain."},{"content":"This is called a master/details (or list/details) view.","pos":[54434,54489]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>How to bind to hierarchical data and create a master/details view<ept id=\"p1\">](how-to-bind-to-hierarchical-data-and-create-a-master-details-view.md)</ept>.","pos":[54490,54647],"source":" For more info, see [How to bind to hierarchical data and create a master/details view](how-to-bind-to-hierarchical-data-and-create-a-master-details-view.md)."},{"content":"Diagnosing and debugging data binding problems","pos":[54649,54695]},{"content":"Your binding markup contains the names of properties (and, for C#, sometimes fields and methods).","pos":[54745,54842]},{"content":"So when you rename a property, you'll also need to change any binding that references it.","pos":[54843,54932]},{"content":"Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.","pos":[54933,55062]},{"content":"The binding objects created by <bpt id=\"p1\">[</bpt>{x:Bind}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> and <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> are largely functionally equivalent.","pos":[55064,55274],"source":"The binding objects created by [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) are largely functionally equivalent."},{"content":"But {x:Bind} has type information for the binding source, and it generates source code at compile-time.","pos":[55275,55378]},{"content":"With {x:Bind} you get the same kind of problem detection that you get with the rest of your code.","pos":[55379,55476]},{"content":"That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page.","pos":[55477,55645]},{"content":"These classes can be found in the files in your <ph id=\"ph1\">`obj`</ph> folder, with names like (for C#) <ph id=\"ph2\">`&lt;view name&gt;.g.cs`</ph>).","pos":[55646,55753],"source":" These classes can be found in the files in your `obj` folder, with names like (for C#) `<view name>.g.cs`)."},{"content":"If you have a problem with a binding then turn on <bpt id=\"p1\">**</bpt>Break On Unhandled Exceptions<ept id=\"p1\">**</ept> in the Microsoft Visual Studio debugger.","pos":[55754,55878],"source":" If you have a problem with a binding then turn on **Break On Unhandled Exceptions** in the Microsoft Visual Studio debugger."},{"content":"The debugger will break execution at that point, and you can then debug what has gone wrong.","pos":[55879,55971]},{"content":"The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <bpt id=\"p1\">**</bpt>Call Stack<ept id=\"p1\">**</ept> window to help determine the sequence of calls that led up to the problem.","pos":[55972,56201],"source":" The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the **Call Stack** window to help determine the sequence of calls that led up to the problem."},{"content":"<bpt id=\"p1\">[</bpt>{Binding}<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> does not have type information for the binding source.","pos":[56203,56327],"source":"[{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) does not have type information for the binding source."},{"content":"But when you run your app with the debugger attached, any binding errors appear in the <bpt id=\"p1\">**</bpt>Output<ept id=\"p1\">**</ept> window in Visual Studio.","pos":[56328,56450],"source":" But when you run your app with the debugger attached, any binding errors appear in the **Output** window in Visual Studio."},{"content":"Creating bindings in code","pos":[56452,56477]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This section only applies to <bpt id=\"p2\">[</bpt>{Binding}<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, because you can't create <bpt id=\"p3\">[</bpt>{x:Bind}<ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings in code.","pos":[56505,56726],"source":"**Note**  This section only applies to [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782), because you can't create [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) bindings in code."},{"content":"However, some of the same benefits of {x:Bind} can be achieved with <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyProperty.RegisterPropertyChangedCallback<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</ept>, which enables you to register for change notifications on any dependency property.","pos":[56727,57025],"source":" However, some of the same benefits of {x:Bind} can be achieved with [**DependencyProperty.RegisterPropertyChangedCallback**](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback), which enables you to register for change notifications on any dependency property."},{"content":"You can also connect UI elements to data using procedural code instead of XAML.","pos":[57027,57106]},{"content":"To do this, create a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Binding<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> object, set the appropriate properties, then call <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FrameworkElement.SetBinding<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</ept> or <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>BindingOperations.SetBinding<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</ept>.","pos":[57107,57474],"source":" To do this, create a new [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) object, set the appropriate properties, then call [**FrameworkElement.SetBinding**](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding) or [**BindingOperations.SetBinding**](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)."},{"content":"Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.","pos":[57475,57634]},{"content":"Note, however, that you cannot change the binding property values after you call <bpt id=\"p1\">**</bpt>SetBinding<ept id=\"p1\">**</ept>.","pos":[57635,57731],"source":" Note, however, that you cannot change the binding property values after you call **SetBinding**."},{"content":"The following example shows how to implement a binding in code.","pos":[57733,57796]},{"content":"{x:Bind} and {Binding} feature comparison","pos":[58899,58940]},{"content":"Feature","pos":[58987,58994]},{"content":"{x:Bind}","pos":[58997,59005]},{"content":"{Binding}","pos":[59008,59017]},{"content":"Notes","pos":[59020,59025]},{"content":"Path is the default property","pos":[59073,59101]},{"content":"Path property","pos":[59148,59161]},{"content":"In x:Bind, Path is rooted at the Page by default, not the DataContext.","pos":[59213,59283]},{"content":"Indexer","pos":[59289,59296]},{"content":"Binds to the specified item in the collection.","pos":[59358,59404]},{"content":"Only integer-based indexes are supported.","pos":[59405,59446]},{"content":"Attached properties","pos":[59452,59471]},{"content":"Attached properties are specified using parentheses.","pos":[59541,59593]},{"content":"If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.","pos":[59594,59756]},{"content":"Casting","pos":[59762,59769]},{"content":"Not needed&lt;","pos":[59824,59835],"source":"Not needed<"},{"content":"Casts are specified using parentheses.","pos":[59838,59876]},{"content":"If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.","pos":[59877,60039]},{"content":"Converter","pos":[60045,60054]},{"content":"Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.","pos":[60190,60277]},{"content":"ConverterParameter, ConverterLanguage","pos":[60283,60320]},{"content":"Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.","pos":[60554,60641]},{"content":"TargetNullValue","pos":[60647,60662]},{"content":"Used when the leaf of the binding expression is null.","pos":[60740,60793]},{"content":"Use single quotes for a string value.","pos":[60794,60831]},{"content":"FallbackValue","pos":[60837,60850]},{"content":"Used when any part of the path for the binding (except for the leaf) is null.","pos":[60936,61013]},{"content":"ElementName","pos":[61019,61030]},{"content":"With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.","pos":[61101,61232]},{"content":"RelativeSource: Self","pos":[61238,61258]},{"content":"With {x:Bind}, name the element and use its name in Path.","pos":[61437,61494]},{"content":"RelativeSource: TemplatedParent","pos":[61500,61531]},{"content":"Not supported","pos":[61534,61547]},{"content":"Regular template binding can be used in control templates for most uses.","pos":[61620,61692]},{"content":"But use TemplatedParent where you need to use a converter, or a two-way binding.&lt;","pos":[61693,61774],"source":" But use TemplatedParent where you need to use a converter, or a two-way binding.<"},{"content":"Source","pos":[61780,61786]},{"content":"Not supported","pos":[61789,61802]},{"content":"For {x:Bind} use a property or a static path instead.","pos":[61884,61937]},{"content":"Mode","pos":[61943,61947]},{"content":"Mode can be OneTime, OneWay, or TwoWay.","pos":[62013,62052]},{"content":"{x:Bind} defaults to OneTime; {Binding} defaults to OneWay.","pos":[62053,62112]},{"content":"UpdateSourceTrigger","pos":[62118,62137]},{"content":"Not supported","pos":[62140,62153]},{"content":"`&lt;Binding UpdateSourceTrigger=\"[Default","pos":[62156,62195],"source":"`<Binding UpdateSourceTrigger=\"[Default"},{"content":"PropertyChanged","pos":[62198,62213]},{"content":"Explicit]\"/&gt;`","pos":[62216,62229],"source":"Explicit]\"/>`"},{"content":"{x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.","pos":[62232,62356]}],"content":"---\nms.assetid: 41E1B4F1-6CAF-4128-A61A-4E400B149011\ntitle: Data binding in depth\ndescription: Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.\n---\n# Data binding in depth\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n** Important APIs **\n\n-   [**Binding class**](https://msdn.microsoft.com/library/windows/apps/BR209820)\n-   [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713)\n-   [**INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899)\n\n**Note**  This topic describes data binding features in detail. For a short, practical introduction, see [Data binding overview](data-binding-quickstart.md).\n\n \n\nData binding is a way for your app's UI to display data, and optionally to stay in sync with that data. Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.\n\nYou can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values. This is called one-time binding, and it works well for data whose values don't change during run-time. Additionally, you can choose to \"observe\" the values and to update the UI when they change. This is called one-way binding, and it works well for read-only data. Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source. This is called two-way binding, and it works well for read-write data. Here are some examples.\n\n-   You could use one-time binding to bind an [**Image**](https://msdn.microsoft.com/library/windows/apps/BR242752) to the current user's photo.\n-   You could use one-way binding to bind a [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) to a collection of real-time news articles grouped by newspaper section.\n-   You could use two-way binding to bind a [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) to a customer's name in a form.\n\nThere are two kinds of binding, and they're both typically declared in UI markup. You can choose to use either the [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) or the [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782). And you can even use a mixture of the two in the same appâ€”even on the same UI element. {x:Bind} is new for Windows 10 and it has better performance. {Binding} has more features. All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.\n\n**Sample apps that demonstrate {x:Bind}**\n\n-   [{x:Bind} sample](http://go.microsoft.com/fwlink/p/?linkid=619989).\n-   [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame).\n-   [XAML UI Basics sample](http://go.microsoft.com/fwlink/p/?linkid=619992).\n\n**Sample apps that demonstrate {Binding}**\n\n-   Download the [Bookstore1](http://go.microsoft.com/fwlink/?linkid=532950) app.\n-   Download the [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) app.\n\nEvery binding involves these pieces\n------------------------------------\n\n-   A *binding source*. This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.\n-   A *binding target*. This is a [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/BR242362) of the [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/BR208706) in your UI that displays the data.\n-   A *binding object*. This is the piece that transfers data values from the source to the target, and optionally from the target back to the source. The binding object is created at XAML load time from your [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) or [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) markup extension.\n\nIn the following sections, we'll take a closer look at the binding source, the binding target, and the binding object. And we'll link the sections together with the example of binding a button's content to a string property named **NextButtonText**, which belongs to a class named **HostViewModel**.\n\nBinding source\n--------------\n\nHere's a very rudimentary implementation of a class that we could use as a binding source.\n\n**Note**  If you're using [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) with Visual C++ component extensions (C++/CX) then you'll need to add the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) attribute to your binding source class. If you're using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) then you don't need that attribute. See [Adding a details view](data-binding-quickstart.md#adding-a-details-view) for a code snippet.\n\n```csharp\npublic class HostViewModel\n{\n    public HostViewModel()\n    {\n        this.NextButtonText = \"Next\";\n    }\n\n    public string NextButtonText { get; set; }\n}\n```\n\nThat implementation of **HostViewModel**, and its property **NextButtonText**, are only appropriate for one-time binding. But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source. In order for those kinds of binding to work correctly, you need to make your binding source \"observable\" to the binding object. So in our example, if we want to one-way or two-way bind to the **NextButtonText** property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.\n\nOne way of doing that is to derive the class that represents your binding source from [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/BR242356), and expose a data value through a [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/BR242362). That's how a [**FrameworkElement**](https://msdn.microsoft.com/library/windows/apps/BR208706) becomes observable. **FrameworkElements** are good binding sources right out of the box.\n\nA more lightweight way of making a class observableâ€”and a necessary one for classes that already have a base classâ€”is to implement [**System.ComponentModel.INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged). This really just involves implementing a single event named **PropertyChanged**. An example using **HostViewModel** is below.\n\n**Note**  For C++/CX, you implement [**Windows::UI::Xaml::Data::INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899), and the binding source class must either have the [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) or implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878).\n\n``` csharp\npublic class HostViewModel : INotifyPropertyChanged\n{\n    private string nextButtonText;\n\n    public event PropertyChangedEventHandler PropertyChanged = delegate { };\n\n    public HostViewModel()\n    {\n        this.NextButtonText = \"Next\";\n    }\n\n    public string NextButtonText\n    {\n        get { return this.nextButtonText; }\n        set\n        {\n            this.nextButtonText = value;\n            this.OnPropertyChanged();\n        }\n    }\n\n    public void OnPropertyChanged([CallerMemberName] string propertyName = null)\n    {\n        // Raise the PropertyChanged event, passing the name of the property whose value has changed.\n        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n```\n\nNow the **NextButtonText** property is observable. When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the **PropertyChanged** event. When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed. That's how the binding object knows which property's value to go and read again.\n\nSo that you don't have to implement the pattern shown above multiple times, you can just derive from the **BindableBase** bass class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the \"Common\" folder). Here's an example of how that looks.\n\n``` csharp\npublic class HostViewModel : BindableBase\n{\n    private string nextButtonText;\n\n    public HostViewModel()\n    {\n        this.NextButtonText = \"Next\";\n    }\n\n    public string NextButtonText\n    {\n        get { return this.nextButtonText; }\n        set { this.SetProperty(ref this.nextButtonText, value); }\n    }\n}\n```\n\nRaising the **PropertyChanged** event with an argument of [**String.Empty**](T:System.String) or **null** indicates that all non-indexer properties on the object should be re-read. You can raise the event to indicate that indexer properties on the object have changed by using an argument of \"Item\\[*indexer*\\]\" for specific indexers (where *indexer* is the index value), or a value of \"Item\\[\\]\" for all indexers.\n\nA binding source can be treated either as a single object whose properties contain data, or as a collection of objects. In C# and Visual Basic code, you can one-time bind to an object that implements [**List(Of T)**](T:System.Collections.Generic.List%601) to display a collection that does not change at run-time. For an observable collection (observing when items are added to and removed from the collection), one-way bind to [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) instead. In C++ code, you can bind to [**Vector&lt;T&gt;**](https://msdn.microsoft.com/en-us/library/dn858385.aspx) for both observable and non-observable collections. To bind to your own collection classes, use the guidance in the following table.\n\n| Scenario                                                        | C# and VB (CLR)                                                                                                                                                                                                                                                                                                                                                                                                                   | C++/CX                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n|-----------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Bind to an object.                                              | Can be any object.                                                                                                                                                                                                                                                                                                                                                                                                                 | Object must have [**BindableAttribute**](https://msdn.microsoft.com/library/windows/apps/Hh701872) or implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878).                                                                                                                                                                                                                                                                                                             |\n| Get property change updates from a bound object.                | Object must implement [**System.ComponentModel. INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged).                                                                                                                                                                                                                                                                                                         | Object must implement [**Windows.UI.Xaml.Data. INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899).                                                                                                                                                                                                                                                                                                                                                           |\n| Bind to a collection.                                           | [**List(Of T)**](T:System.Collections.Generic.List%601)                                                                                                                                                                                                                                                                                                                                                                            | [**Platform::Collections::Vector&lt;T&gt;**](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh441570.aspx)                                                                                                                                                                                                                                                                                                                                                                                         |\n| Get collection change updates from a bound collection.          | [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601)                                                                                                                                                                                                                                                                                                                                        | [**Platform::Collections::Vector&lt;T&gt;**](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh441570.aspx)                                                                                                                                                                                                                                                                                                                                                                                         |\n| Implement a collection that supports binding.                   | Extend [**List(Of T)**](T:System.Collections.Generic.List%601) or implement [**IList**](T:System.Collections.IList), [**IList**](T:System.Collections.Generic.IList%601)(Of [**Object**](T:System.Object)), [**IEnumerable**](T:System.Collections.IEnumerable), or [**IEnumerable**](T:System.Collections.Generic.IEnumerable%601)(Of **Object**). Binding to generic **IList(Of T)** and **IEnumerable(Of T)** is not supported. | Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979), [**IBindableIterable**](https://msdn.microsoft.com/library/windows/apps/Hh701957), [**IVector**](https://msdn.microsoft.com/library/windows/apps/BR206631)&lt;[**Object**](T:System.Object)^&gt;, [**IIterable**](https://msdn.microsoft.com/library/windows/apps/BR226024)&lt;**Object**^&gt;, **IVector**&lt;[**IInspectable**](https://msdn.microsoft.com/library/BR205821)\\*&gt;, or **IIterable**&lt;**IInspectable**\\*&gt;. Binding to generic **IVector&lt;T&gt;** and **IIterable&lt;T&gt;** is not supported. |\n| Implement a collection that supports collection change updates. | Extend [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) or implement (non-generic) [**IList**](T:System.Collections.IList) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged).                                                                                                                                                               | Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979) and [**IBindableObservableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701974).                                                                                                                                                                                                                                                                                                                       |\n| Implement a collection that supports incremental loading.       | Extend [**ObservableCollection(Of T)**](T:System.Collections.ObjectModel.ObservableCollection%601) or implement (non-generic) [**IList**](T:System.Collections.IList) and [**INotifyCollectionChanged**](T:System.Collections.Specialized.INotifyCollectionChanged). Additionally, implement [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916).                                                          | Implement [**IBindableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701979), [**IBindableObservableVector**](https://msdn.microsoft.com/library/windows/apps/Hh701974), and [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916).                                                                                                                                                                                                                                         |\n\n \nYou can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading. For example, you can bind list controls to Bing image query results without having to load all the results at once. Instead, you load only some results immediately, and load additional results as needed. To support incremental loading, you must implement [**ISupportIncrementalLoading**](https://msdn.microsoft.com/library/windows/apps/Hh701916) on a data source that supports collection change notification. When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.\n\nBinding target\n--------------\n\nIn the two examples below, the **Button.Content** property is the binding target, and its value is set to a markup extension which declares the binding object. First [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) is shown, and then [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782). Declaring bindings in markup is the common case (it's convenient, readable, and toolable). But you can avoid markup and imperatively (programmatically) create an instance of the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class instead if you need to.\n\n<!-- XAML lang specifier not yet supported in OP. Using XML for now. -->\n``` xml\n<Button Content=\"{x:Bind ...}\" ... />\n```\n\n``` xml\n<Button Content=\"{Binding ...}\" ... />\n```\n\nBinding object declared using {x:Bind}\n--------------------------------------\n\nThere's one step we need to do before we author our [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) markup. We need to expose our binding source class from the class that represents our page of markup. We do that by adding a property (of type **HostViewModel** in this case) to our **HostView** page class.\n\n``` csharp\nnamespace QuizGame.View\n{\n    public sealed partial class HostView : Page\n    {\n        public HostView()\n        {\n            this.InitializeComponent();\n            this.ViewModel = new HostViewModel();\n        }\n    \n        public HostViewModel ViewModel { get; set; }\n    }\n}\n```\n\nThat done, we can now take a closer look at the markup that declares the binding object. The example below uses the same **Button.Content** binding target we used in the \"Binding target\" section earlier, and shows it being bound to the **HostViewModel.NextButtonText** property.\n\n``` xml\n<Page x:Class=\"QuizGame.View.HostView\" ... >\n    <Button Content=\"{x:Bind Path=ViewModel.NextButtonText, Mode=OneWay}\" ... />\n</Page>\n```\n\nNotice the value that we specify for **Path**. This value is interpreted in the context of the page itself, and in this case the path begins by referencing the **ViewModel** property that we just added to the **HostView** page. That property returns a **HostViewModel** instance, and so we can dot into that object to access the **HostViewModel.NextButtonText** property. And we specify **Mode**, to override the [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) default of one-time.\n\nThe [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers. For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586). Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878). For other settings, see [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783).\n\n**Note**  Changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus, and not after every user keystroke.\n\n**DataTemplate and x:DataType**\n\nInside a [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348) (whether used as an item template, a content template, or a header template), the value of **Path** is not interpreted in the context of the page, but in the context of the data object being templated. So that its bindings can be validated (and efficient code generated for them) at compile-time, a **DataTemplate** needs to declare the type of its data object using **x:DataType**. The example given below could be used as the **ItemTemplate** of an items control bound to a collection of **SampleDataGroup** objects.\n\n``` xml\n<DataTemplate x:Key=\"SimpleItemTemplate\" x:DataType=\"data:SampleDataGroup\">\n    <StackPanel Orientation=\"Vertical\" Height=\"50\">\n      <TextBlock Text=\"{x:Bind Title}\"/>\n      <TextBlock Text=\"{x:Bind Description}\"/>\n    </StackPanel>\n  </DataTemplate>\n```\n\n**Weakly-typed objects in your Path**\n\nConsider for example that you have a type named SampleDataGroup, which implements a string property named Title. And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup. The binding `<TextBlock Text=\"{x:Bind SampleDataGroupAsObject.Title}\"/>` will result in a compile error because the Title property is not found on the type object. The remedy for this is to add a cast to your Path syntax like this: `<TextBlock Text=\"{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}\"/>`. Here's another example where Element is declared as object but is actually a TextBlock: `<TextBlock Text=\"{x:Bind Element.Text}\"/>`. And a cast remedies the issue: `<TextBlock Text=\"{x:Bind Element.(TextBlock.Text)}\"/>`.\n\n**If your data loads asynchronously**\n\nCode to support **{x:Bind}** is generated at compile-time in the partial classes for your pages. These files can be found in your `obj` folder, with names like (for C#) `<view name>.g.cs`. The generated code includes a handler for your page's [**Loading**](https://msdn.microsoft.com/library/windows/apps/BR208706-loading) event, and that handler calls the **Initialize** method on a generated class that represent's your page's bindings. **Initialize** in turn calls **Update** to begin moving data between the binding source and the target. **Loading** is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time **Initialize** is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling `this->Bindings->Update();`. If you only need one-time bindings for asynchronously-loaded data then itâ€™s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes. If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to **Update**.\n\n**Limitations**\n\n**{x:Bind}** is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names (\"if it walks, swims, and quacks like a duck then it's a duck\"). With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object. For these scenarios, use **{Binding}**.\n\nBinding object declared using {Binding}\n---------------------------------------\n\n[{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) assumes, by default, that you're binding to the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) of your markup page. So we'll set the **DataContext** of our page to be an instance of our binding source class (of type **HostViewModel** in this case). The example below shows the markup that declares the binding object. We use the same **Button.Content** binding target we used in the \"Binding target\" section earlier, and we bind to the **HostViewModel.NextButtonText** property.\n\n``` xml\n<Page xmlns:viewmodel=\"using:QuizGame.ViewModel\" ... >\n    <Page.DataContext>\n        <viewmodel:HostViewModel/>\n    </Page.DataContext>\n    ...\n    <Button Content=\"{Binding Path=NextButtonText}\" ... />\n</Page>\n```\n\nNotice the value that we specify for **Path**. This value is interpreted in the context of the page's [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713), which in this example is set to an instance of **HostViewModel**. The path references the **HostViewModel.NextButtonText** property. We can omit **Mode**, because the [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) default of one-way works here.\n\nThe default value of [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) for a UI element is the inherited value of its parent. You can of course override that default by setting **DataContext** explicitly, which is in turn inherited by children by default. Setting **DataContext** explicitly on an element is useful when you want to have multiple bindings that use the same source.\n\nA binding object has a **Source** property, which defaults to the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) of the UI element on which the binding is declared. You can override this default by setting **Source**, **RelativeSource**, or **ElementName** explicitly on the binding (see [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) for details).\n\nInside a [**DataTemplate**](https://msdn.microsoft.com/library/windows/apps/BR242348), the [**DataContext**](https://msdn.microsoft.com/library/windows/apps/BR208713) is set to the data object being templated. The example given below could be used as the **ItemTemplate** of an items control bound to a collection of any type that has string properties named **Title** and **Description**.\n\n``` xml\n<DataTemplate x:Key=\"SimpleItemTemplate\">\n    <StackPanel Orientation=\"Vertical\" Height=\"50\">\n      <TextBlock Text=\"{Binding Title}\"/>\n      <TextBlock Text=\"{Binding Description\"/>\n    </StackPanel>\n  </DataTemplate>\n```\n\n**Note**  By default, changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus. To cause changes to be sent after every user keystroke, set **UpdateSourceTrigger** to **PropertyChanged** on the binding in markup. You can also completely take control of when changes are sent to the source by setting **UpdateSourceTrigger** to **Explicit**. You then handle events on the text box (typically [**TextBox.TextChanged**](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)), call [**GetBindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression) on the target to get a [**BindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR209820expression) object, and finally call [**BindingExpression.UpdateSource**](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource) to programmatically update the data source.\n\nThe [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers. For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586). Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878). The [**ElementName**](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname) property is useful for element-to-element binding. The [**RelativeSource**](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource) property has several uses, one of which is as a more powerful alternative to template binding inside a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209391). For other settings, see [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) and the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class.\n\nWhat if the source and the target are not the same type?\n--------------------------------------------------------\n\nIf you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another. There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there. But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties. In that case you'll want to use something known as a value converter. This section describes how to implement and consume a value converter.\n\nHere's a value converter, suitable for a one-time or a one-way binding, that converts a [**DateTime**](T:System.DateTime) value to a string value containing the month. The class implements [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903).\n\n``` csharp\npublic class DateToStringConverter : IValueConverter\n{\n    // Define the Convert method to convert a DateTime value to \n    // a month string.\n    public object Convert(object value, Type targetType, \n        object parameter, string language)\n    {\n        // value is the data from the source object.\n        DateTime thisdate = (DateTime)value;\n        int monthnum = thisdate.Month;\n        string month;\n        switch (monthnum)\n        {\n            case 1:\n                month = \"January\";\n                break;\n            case 2:\n                month = \"February\";\n                break;\n            default:\n                month = \"Month not found\";\n                break;\n        }\n        // Return the value to pass to the target.\n        return month;\n    }\n\n    // ConvertBack is not implemented for a OneWay binding.\n    public object ConvertBack(object value, Type targetType, \n        object parameter, string language)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\n``` vbnet\nPublic Class DateToStringConverter\n    Implements IValueConverter\n\n    ' Define the Convert method to change a DateTime object to\n    ' a month string.\n    Public Function Convert(ByVal value As Object, -\n        ByVal targetType As Type, ByVal parameter As Object, -\n        ByVal language As String) As Object -\n        Implements IValueConverter.Convert\n\n        ' value is the data from the source object.\n        Dim thisdate As DateTime = CType(value, DateTime)\n        Dim monthnum As Integer = thisdate.Month\n        Dim month As String\n        Select Case (monthnum)\n            Case 1\n                month = \"January\"\n            Case 2\n                month = \"February\"\n            Case Else\n                month = \"Month not found\"\n        End Select\n        ' Return the value to pass to the target.\n        Return month\n\n    End Function\n\n    ' ConvertBack is not implemented for a OneWay binding.\n    Public Function ConvertBack(ByVal value As Object, -\n        ByVal targetType As Type, ByVal parameter As Object, -\n        ByVal language As String) As Object -\n        Implements IValueConverter.ConvertBack\n\n        Throw New NotImplementedException\n\n    End Function\nEnd Class\n```\n\nAnd here's how you consume that value converter in your binding object markup.\n\n``` xml\n<UserControl.Resources>\n  <local:DateToStringConverter x:Key=\"Converter1\"/>\n</UserControl.Resources>\n\n...\n\n<TextBlock Grid.Column=\"0\" \n  Text=\"{x:Bind ViewModel.Month, Converter={StaticResource Converter1}}\"/>\n\n<TextBlock Grid.Column=\"0\" \n  Text=\"{Binding Month, Converter={StaticResource Converter1}}\"/>\n```\n\nThe binding engine calls the [**Convert**](https://msdn.microsoft.com/library/windows/apps/BR209903-convert) and [**ConvertBack**](https://msdn.microsoft.com/library/windows/apps/BR209903-convertback) methods if the [**Converter**](https://msdn.microsoft.com/library/windows/apps/BR209820-converter) parameter is defined for the binding. When data is passed from the source, the binding engine calls **Convert** and passes the returned data to the target. When data is passed from the target (for a two-way binding), the binding engine calls **ConvertBack** and passes the returned data to the source.\n\nThe converter also has optional parameters: [**ConverterLanguage**](https://msdn.microsoft.com/library/windows/apps/BR209820-converterlanguage), which allows specifying the language to be used in the conversion, and [**ConverterParameter**](https://msdn.microsoft.com/library/windows/apps/BR209820-converterparameter), which allows passing a parameter for the conversion logic. For an example that uses a converter parameter, see [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903).\n\n**Note**  If there is an error in the conversion, do not throw an exception. Instead, return [**DependencyProperty.UnsetValue**](https://msdn.microsoft.com/library/windows/apps/BR242362-unsetvalue), which will stop the data transfer.\n\nTo display a default value to use whenever the binding source cannot be resolved, set the **FallbackValue** property on the binding object in markup. This is useful to handle conversion and formatting errors. It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.\n\nIf you bind a text control to a value that is not a string, the data binding engine will convert the value to a string. If the value is a reference type, the data binding engine will retrieve the string value by calling [**ICustomPropertyProvider.GetStringRepresentation**](https://msdn.microsoft.com/library/windows/apps/BR209878-getstringrepresentation) or [**IStringable.ToString**](https://msdn.microsoft.com/library/Dn302136) if available, and will otherwise call [**Object.ToString**](M:System.Object.ToString). Note, however, that the binding engine will ignore any **ToString** implementation that hides the base-class implementation. Subclass implementations should override the base class **ToString** method instead. Similarly, in native languages, all managed objects appear to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878) and [**IStringable**](https://msdn.microsoft.com/library/Dn302135). However, all calls to **GetStringRepresentation** and **IStringable.ToString** are routed to **Object.ToString** or an override of that method, and never to a new **ToString** implementation that hides the base-class implementation.\n\nResource dictionaries with {x:Bind}\n-----------------------------------\n\nThe [{x:Bind} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204783) depends on code generation, so it needs a code-behind file containing a constructor that calls **InitializeComponent** (to initialize the generated code). You re-use the resource dictionary by instantiating its type (so that **InitializeComponent** is called) instead of referencing its filename. Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.\n\nTemplatesResourceDictionary.xaml\n\n``` xml\n<ResourceDictionary\n    x:Class=\"ExampleNamespace.TemplatesResourceDictionary\"\n    .....\n    xmlns:examplenamespace=\"using:ExampleNamespace\">\n    \n    <DataTemplate x:Key=\"EmployeeTemplate\" x:DataType=\"examplenamespace:IEmployee\">\n        <Grid>\n            <TextBlock Text=\"{x:Bind Name}\"/>\n        </Grid>\n    </DataTemplate>\n</ResourceDictionary>\n```\n\nTemplatesResourceDictionary.xaml.cs\n\n``` csharp\nusing Windows.UI.Xaml.Data;\n \nnamespace ExampleNamespace\n{\n    public partial class TemplatesResourceDictionary\n    {\n        public TemplatesResourceDictionary()\n        {\n            InitializeComponent();\n        }\n    }\n}\n```\n\nMainPage.xaml\n\n``` xml\n<Page x:Class=\"ExampleNamespace.MainPage\"\n    ....\n    xmlns:examplenamespace=\"using:ExampleNamespace\">\n\n    <Page.Resources>\n        <ResourceDictionary>\n            .... \n            <ResourceDictionary.MergedDictionaries>\n                <examplenamespace:TemplatesResourceDictionary/>\n            </ResourceDictionary.MergedDictionaries>\n        </ResourceDictionary>\n    </Page.Resources>\n</Page>\n```\n\nEvent binding and ICommand\n--------------------------\n\n[{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) supports a feature called event binding. With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file. Let's say you have a **RootFrame** property on your **MainPage** class.\n\n``` csharp\n    public sealed partial class MainPage : Page\n    {\n        ....    \n        public Frame RootFrame { get { return Window.Current.Content as Frame; } }\n    }\n```\n\nYou can then bind a button's **Click** event to a method on the **Frame** object returned by the **RootFrame** property like this. Note that we also bind the button's **IsEnabled** property to another member of the same **Frame**.\n\n``` xml\n    <AppBarButton Icon=\"Forward\" IsCompact=\"True\"\n    IsEnabled=\"{x:Bind RootFrame.CanGoForward, Mode=OneWay}\"\n    Click=\"{x:Bind RootFrame.GoForward}\"/>\n```\n\nOverloaded methods cannot be used to handle an event with this technique. Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively. In this case, [**Frame.GoForward**](https://msdn.microsoft.com/library/windows/apps/BR242693) is not overloaded and it has no parameters (but it would still be valid even if it took two **object** parameters). [**Frame.GoBack**](https://msdn.microsoft.com/library/windows/apps/Dn996568) is overloaded, though, so we can't use that method with this technique.\n\nThe event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the [**ICommand**](T:System.Windows.Input.ICommand) interface). Both [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) work with commands. So that you don't have to implement the command pattern multiple times, you can use the **DelegateCommand** helper class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the \"Common\" folder).\n\n## Binding to a collection of folders or files\n\nYou can use the APIs in the [**Windows.Storage**](https://msdn.microsoft.com/library/windows/apps/BR227346) namespace to retrieve folder and file data. However, the various **GetFilesAsync**, **GetFoldersAsync**, and **GetItemsAsync** methods do not return values that are suitable for binding to list controls. Instead, you must bind to the return values of the [**GetVirtualizedFilesVector**](https://msdn.microsoft.com/library/windows/apps/Hh701422), [**GetVirtualizedFoldersVector**](https://msdn.microsoft.com/library/windows/apps/Hh701428), and [**GetVirtualizedItemsVector**](https://msdn.microsoft.com/library/windows/apps/Hh701430) methods of the [**FileInformationFactory**](https://msdn.microsoft.com/library/windows/apps/BR207501) class. The following code example from the [StorageDataSource and GetVirtualizedFilesVector sample](http://go.microsoft.com/fwlink/p/?linkid=228621) shows the typical usage pattern. Remember to declare the **picturesLibrary** capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.\n\n``` csharp\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            var library = Windows.Storage.KnownFolders.PicturesLibrary;\n            var queryOptions = new Windows.Storage.Search.QueryOptions();\n            queryOptions.FolderDepth = Windows.Storage.Search.FolderDepth.Deep;\n            queryOptions.IndexerOption = Windows.Storage.Search.IndexerOption.UseIndexerWhenAvailable;\n\n            var fileQuery = library.CreateFileQueryWithOptions(queryOptions);\n\n            var fif = new Windows.Storage.BulkAccess.FileInformationFactory(\n                fileQuery,\n                Windows.Storage.FileProperties.ThumbnailMode.PicturesView,\n                190,\n                Windows.Storage.FileProperties.ThumbnailOptions.UseCurrentScale,\n                false\n                );\n\n            var dataSource = fif.GetVirtualizedFilesVector();\n            this.PicturesListView.ItemsSource = dataSource;\n        }\n```\n\nYou will typically use this approach to create a read-only view of file and folder info. You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view. However, any changes are not persisted until you call the appropriate **SavePropertiesAsync** method (for example, [**MusicProperties.SavePropertiesAsync**](https://msdn.microsoft.com/library/windows/apps/BR207760)). You should commit changes when the item loses focus because this triggers a selection reset.\n\nNote that two-way binding using this technique works only with indexed locations, such as Music. You can determine whether a location is indexed by calling the [**FolderInformation.GetIndexedStateAsync**](https://msdn.microsoft.com/library/windows/apps/BR207627) method.\n\nNote also that a virtualized vector can return **null** for some items before it populates their value. For example, you should check for **null** before you use the [**SelectedItem**](https://msdn.microsoft.com/library/windows/apps/BR209770) value of a list control bound to a virtualized vector, or use [**SelectedIndex**](https://msdn.microsoft.com/library/windows/apps/BR209768) instead.\n\nBinding to data grouped by a key\n--------------------------------\n\nIf you take a flat collection of itemsâ€”books, for example, represented by a **BookSku** classâ€”and you group the items by using a common property as a keyâ€”the **BookSku.AuthorName** property, for exampleâ€”then the result is called grouped data. When you group data, it is no longer a flat collection. Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key. To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the **BookSku**s whose **AuthorName** property matches the group's key.\n\nIn general, to display a collection, you bind the [**ItemsSource**](https://msdn.microsoft.com/library/windows/apps/BR242828) of an items control (such as [**ListView**](https://msdn.microsoft.com/library/windows/apps/BR242878) or [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705)) directly to a property that returns a collection. If that's a flat collection of items then you don't need to do anything special. But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) which sits between the items control and the binding source. You bind the **CollectionViewSource** to the property that returns grouped data, and you bind the items control to the **CollectionViewSource**. An extra value-add of a **CollectionViewSource** is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same **CollectionViewSource**. You can also access the current item programmatically through the [**ICollectionView.CurrentItem**](https://msdn.microsoft.com/library/windows/apps/BR209857) property of the object returned by the [**CollectionViewSource.View**](https://msdn.microsoft.com/library/windows/apps/BR209833-view) property.\n\nTo activate the grouping facility of a [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833), set [**IsSourceGrouped**](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped) to **true**. Whether you also need to set the [**ItemsPath**](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath) property depends on exactly how you author your group objects. There are two ways to author a group object: the \"is-a-group\" pattern, and the \"has-a-group\" pattern. In the \"is-a-group\" pattern, the group object derives from a collection type (for example, **List&lt;T&gt;**), so the group object actually is itself the group of items. With this pattern you do not need to set **ItemsPath**. In the \"has-a-group\" pattern, the group object has one or more properties of a collection type (such as **List&lt;T&gt;**), so the group \"has a\" group of items in the form of a property (or several groups of items in the form of several properties). With this pattern you need to set **ItemsPath** to the name of the property that contains the group of items.\n\nThe example below illustrates the \"has-a-group\" pattern. The page class has a property named [**ViewModel**](https://msdn.microsoft.com/library/windows/apps/BR208713), which returns an instance of our view model. The [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) binds to the **Authors** property of the view model (**Authors** is the collection of group objects) and also specifies that it's the **Author.BookSkus** property that contains the grouped items. Finally, the [**GridView**](https://msdn.microsoft.com/library/windows/apps/BR242705) is bound to the **CollectionViewSource**, and has its group style defined so that it can render the items in groups.\n\n``` csharp\n    <Page.Resources>\n        <CollectionViewSource\n        x:Name=\"AuthorHasACollectionOfBookSku\"\n        Source=\"{x:Bind ViewModel.Authors}\"\n        IsSourceGrouped=\"true\"\n        ItemsPath=\"BookSkus\"/>\n    </Page.Resources>\n    ...\n\n    <GridView\n    ItemsSource=\"{Binding Source={StaticResource AuthorHasACollectionOfBookSku}}\" ...>\n        <GridView.GroupStyle>\n            <GroupStyle\n                HeaderTemplate=\"{StaticResource AuthorGroupHeaderTemplateWide}\" ... />\n        </GridView.GroupStyle>\n    </GridView>\n```\n\nNote that the [**ItemsSource**](https://msdn.microsoft.com/library/windows/apps/BR242828) must use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) (and not [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783)) because it needs to set the **Source** property to a resource. To see the above example in the context of the complete app, download the [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) sample app. Unlike the markup shown above, [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) uses {Binding} exclusively.\n\nYou can implement the \"is-a-group\" pattern in one of two ways. One way is to author your own group class. Derive the class from **List&lt;T&gt;** (where *T* is the type of the items). For example, `public class Author : List<BookSku>`. The second way is to use a [LINQ](http://msdn.microsoft.com/library/bb397926.aspx) expression to dynamically create group objects (and a group class) from like property values of the **BookSku** items. This approachâ€”maintaining only a flat list of items and grouping them together on the flyâ€”is typical of an app that accesses data from a cloud service. You get the flexibility to group books by author or by genre (for example) without needing special group classes such as **Author** and **Genre**.\n\nThe example below illustrates the \"is-a-group\" pattern using [LINQ](http://msdn.microsoft.com/library/bb397926.aspx). This time we group books by genre, displayed with the genre name in the group headers. This is indicated by the \"Key\" property path in reference to the group [**Key**](P:System.Linq.IGrouping%602.Key) value.\n\n``` csharp\n    using System.Linq;\n\n    ...\n\n    private IOrderedEnumerable<IGrouping<string, BookSku>> genres;\n\n    public IOrderedEnumerable<IGrouping<string, BookSku>> Genres\n    {\n        get\n        {\n            if (this.genres == null)\n            {\n                this.genres = from book in this.bookSkus\n                group book by book.genre into grp\n                orderby grp.Key select grp;\n            }\n            return this.genres;\n        }\n    }\n```\n\nRemember that when using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) with data templates we need to indicate the type being bound to by setting an **x:DataType** value. If the type is generic then we can't express that in markup so we need to use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) instead in the group style header template.\n\n``` xml\n    <Grid.Resources>\n        <CollectionViewSource x:Name=\"GenreIsACollectionOfBookSku\"\n        Source=\"{Binding Genres}\"\n        IsSourceGrouped=\"true\"/>\n    </Grid.Resources>\n    <GridView ItemsSource=\"{Binding Source={StaticResource GenreIsACollectionOfBookSku}}\">\n        <GridView.ItemTemplate x:DataType=\"local:BookTemplate\">\n            <DataTemplate>\n                <TextBlock Text=\"{x:Bind Title}\"/>\n            </DataTemplate>\n        </GridView.ItemTemplate>\n        <GridView.GroupStyle>\n            <GroupStyle>\n                <GroupStyle.HeaderTemplate>\n                    <DataTemplate>\n                        <TextBlock Text=\"{Binding Key}\"/>\n                    </DataTemplate>\n                </GroupStyle.HeaderTemplate>\n            </GroupStyle>\n        </GridView.GroupStyle>\n    </GridView>\n```\n\nA [**SemanticZoom**](https://msdn.microsoft.com/library/windows/apps/Hh702601) control is a great way for your users to view and navigate grouped data. The [Bookstore2](http://go.microsoft.com/fwlink/?linkid=532952) sample app illustrates how to use the **SemanticZoom**. In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view). The jump list affords much quicker navigation than scrolling through the list of books. The zoomed-in and zoomed-out views are actually **ListView** or **GridView** controls bound to the same **CollectionViewSource**.\n\n![An illustration of a SemanticZoom](images/sezo.png)\n\nWhen you bind to hierarchical dataâ€”such as subcategories within categoriesâ€”you can choose to display the hierarchical levels in your UI with a series of items controls. A selection in one items control determines the contents of subsequent items controls. You can keep the lists synchronized by binding each list to its own [**CollectionViewSource**](https://msdn.microsoft.com/library/windows/apps/BR209833) and binding the **CollectionViewSource** instances together in a chain. This is called a master/details (or list/details) view. For more info, see [How to bind to hierarchical data and create a master/details view](how-to-bind-to-hierarchical-data-and-create-a-master-details-view.md).\n\nDiagnosing and debugging data binding problems\n-----------------------------------------------\n\nYour binding markup contains the names of properties (and, for C#, sometimes fields and methods). So when you rename a property, you'll also need to change any binding that references it. Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.\n\nThe binding objects created by [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) are largely functionally equivalent. But {x:Bind} has type information for the binding source, and it generates source code at compile-time. With {x:Bind} you get the same kind of problem detection that you get with the rest of your code. That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page. These classes can be found in the files in your `obj` folder, with names like (for C#) `<view name>.g.cs`). If you have a problem with a binding then turn on **Break On Unhandled Exceptions** in the Microsoft Visual Studio debugger. The debugger will break execution at that point, and you can then debug what has gone wrong. The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the **Call Stack** window to help determine the sequence of calls that led up to the problem.\n\n[{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) does not have type information for the binding source. But when you run your app with the debugger attached, any binding errors appear in the **Output** window in Visual Studio.\n\nCreating bindings in code\n-------------------------\n\n**Note**  This section only applies to [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782), because you can't create [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) bindings in code. However, some of the same benefits of {x:Bind} can be achieved with [**DependencyProperty.RegisterPropertyChangedCallback**](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback), which enables you to register for change notifications on any dependency property.\n\nYou can also connect UI elements to data using procedural code instead of XAML. To do this, create a new [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) object, set the appropriate properties, then call [**FrameworkElement.SetBinding**](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding) or [**BindingOperations.SetBinding**](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding). Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls. Note, however, that you cannot change the binding property values after you call **SetBinding**.\n\nThe following example shows how to implement a binding in code.\n\n``` xml\n<TextBox x:Name=\"MyTextBox\" Text=\"Text\"/>\n```\n\n```csharp\n// Create an instance of the MyColors class \n// that implements INotifyPropertyChanged.\nMyColors textcolor = new MyColors();\n\n// Brush1 is set to be a SolidColorBrush with the value Red.\ntextcolor.Brush1 = new SolidColorBrush(Colors.Red);\n\n// Set the DataContext of the TextBox MyTextBox.\nMyTextBox.DataContext = textcolor;\n\n// Create the binding and associate it with the text box.\nBinding binding = new Binding() { Path = new PropertyPath(\"Brush1\") };\nMyTextBox.SetBinding(TextBox.ForegroundProperty, binding);\n```\n\n``` vbnet\n' Create an instance of the MyColors class \n' that implements INotifyPropertyChanged. \nDim textcolor As New MyColors()\n\n' Brush1 is set to be a SolidColorBrush with the value Red. \ntextcolor.Brush1 = New SolidColorBrush(Colors.Red)\n\n' Set the DataContext of the TextBox MyTextBox. \nMyTextBox.DataContext = textcolor\n\n' Create the binding and associate it with the text box.\nDim binding As New Binding() With {.Path = New PropertyPath(\"Brush1\")}\nMyTextBox.SetBinding(TextBox.ForegroundProperty, binding)\n```\n\n{x:Bind} and {Binding} feature comparison\n------------------------------------------\n\n| Feature | {x:Bind} | {Binding} | Notes |\n|---------|----------|-----------|-------|\n| Path is the default property | `{x:Bind a.b.c}` | `{Binding a.b.c}` | | \n| Path property | `{x:Bind Path=a.b.c}` | `{Binding Path=a.b.c}` | In x:Bind, Path is rooted at the Page by default, not the DataContext. | \n| Indexer | `{x:Bind Groups[2].Title}` | `{Binding Groups[2].Title}` | Binds to the specified item in the collection. Only integer-based indexes are supported. | \n| Attached properties | `{x:Bind Button22.(Grid.Row)}` | `{Binding Button22.(Grid.Row)}` | Attached properties are specified using parentheses. If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document. | \n| Casting | `{x:Bind groups[0].(data:SampleDataGroup.Title)}` | Not needed< | Casts are specified using parentheses. If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document. | \n| Converter | `{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}` | `{Binding IsShown, Converter={StaticResource BoolToVisibility}}` | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml. | \n| ConverterParameter, ConverterLanguage | `{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}` | `{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}` | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml. | \n| TargetNullValue | `{x:Bind Name, TargetNullValue=0}` | `{Binding Name, TargetNullValue=0}` | Used when the leaf of the binding expression is null. Use single quotes for a string value. | \n| FallbackValue | `{x:Bind Name, FallbackValue='empty'}` | `{Binding Name, FallbackValue='empty'}` | Used when any part of the path for the binding (except for the leaf) is null. | \n| ElementName | `{x:Bind slider1.Value}` | `{Binding Value, ElementName=slider1}` | With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field. | \n| RelativeSource: Self | `<Rectangle x:Name=\"rect1\" Width=\"200\" Height=\"{x:Bind rect1.Width}\" ... />` | `<Rectangle Width=\"200\" Height=\"{Binding Width, RelativeSource={RelativeSource Self}}\" ... />` | With {x:Bind}, name the element and use its name in Path. | \n| RelativeSource: TemplatedParent | Not supported | `{Binding <path>, RelativeSource={RelativeSource TemplatedParent}}` | Regular template binding can be used in control templates for most uses. But use TemplatedParent where you need to use a converter, or a two-way binding.< | \n| Source | Not supported | `<ListView ItemsSource=\"{Binding Orders, Source={StaticResource MyData}}\"/>` | For {x:Bind} use a property or a static path instead. | \n| Mode | `{x:Bind Name, Mode=OneWay}` | `{Binding Name, Mode=TwoWay}` | Mode can be OneTime, OneWay, or TwoWay. {x:Bind} defaults to OneTime; {Binding} defaults to OneWay. | \n| UpdateSourceTrigger | Not supported | `<Binding UpdateSourceTrigger=\"[Default | PropertyChanged | Explicit]\"/>` | {x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source. | \n\n\n"}