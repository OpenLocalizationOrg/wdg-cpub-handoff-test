{"nodes":[{"pos":[11,104],"content":"Walkthrough-- Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)","needQuote":true,"needEscape":true,"nodes":[{"content":"Walkthrough-- Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)","pos":[0,93]}]},{"pos":[118,256],"content":"This porting exercise shows how to bring a simple rendering framework from Direct3D 9 to Direct3D 11 and Universal Windows Platform (UWP).","needQuote":true,"needEscape":true,"nodes":[{"content":"This porting exercise shows how to bring a simple rendering framework from Direct3D 9 to Direct3D 11 and Universal Windows Platform (UWP).","pos":[0,138]}]},{"content":"Walkthrough: Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)","pos":[313,405]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[408,446]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[447,542],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This porting exercise shows how to bring a simple rendering framework from Direct3D 9 to Direct3D 11 and Universal Windows Platform (UWP).","pos":[544,682]},{"content":"Topic","pos":[803,808]},{"content":"Description","pos":[831,842]},{"content":"Initialize Direct3D 11","pos":[909,931]},{"content":"Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.","pos":[1032,1218]},{"content":"Convert the rendering framework","pos":[1273,1304]},{"content":"Shows how to convert a simple rendering framework from Direct3D 9 to Direct3D 11, including how to port geometry buffers, how to compile and load HLSL shader programs, and how to implement the rendering chain in Direct3D 11.","pos":[1393,1617]},{"content":"Port the game loop","pos":[1671,1689]},{"content":"Shows how to implement a window for a UWP game and how to bring over the game loop, including how to build an [<ph id=\"ph1\">&lt;strong&gt;</ph>IFrameworkView<ph id=\"ph2\">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/hh700478) to control a full-screen [<ph id=\"ph3\">&lt;strong&gt;</ph>CoreWindow<ph id=\"ph4\">&lt;/strong&gt;</ph>](https://msdn.microsoft.com/library/windows/apps/br208225).","pos":[1791,2106],"source":"Shows how to implement a window for a UWP game and how to bring over the game loop, including how to build an [<strong>IFrameworkView</strong>](https://msdn.microsoft.com/library/windows/apps/hh700478) to control a full-screen [<strong>CoreWindow</strong>](https://msdn.microsoft.com/library/windows/apps/br208225)."},{"content":"This topic walks through two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube.","pos":[2144,2265]},{"content":"In both cases, the code covers the following process:","pos":[2266,2319]},{"content":"Creating a Direct3D device and a swap chain.","pos":[2325,2369]},{"content":"Creating a vertex buffer, and an index buffer, to represent a colorful cube mesh.","pos":[2374,2455]},{"content":"Creating a vertex shader that transforms vertices to screen space, a pixel shader that blends color values, compiling the shaders, and loading the shaders as Direct3D resources.","pos":[2460,2637]},{"content":"Implementing the rendering chain and presenting the drawn cube to the screen.","pos":[2642,2719]},{"content":"Creating a window, starting a main loop, and taking care of window message processing.","pos":[2724,2810]},{"content":"Upon completing this walkthrough, you should be familiar with the following basic differences between Direct3D 9 and Direct3D 11:","pos":[2812,2941]},{"content":"The separation of device, device context, and graphics infrastructure.","pos":[2947,3017]},{"content":"The process of compiling shaders, and loading shader bytecode at runtime.","pos":[3022,3095]},{"content":"How to configure per-vertex data for the Input Assembler (IA) stage.","pos":[3100,3168]},{"pos":[3173,3294],"content":"How to use an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IFrameworkView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh700478)</ept> to create a CoreWindow view.","source":"How to use an [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) to create a CoreWindow view."},{"pos":[3296,3451],"content":"Note that this walkthrough uses <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreWindow<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> for simplicity, and does not cover XAML interop.","source":"Note that this walkthrough uses [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225) for simplicity, and does not cover XAML interop."},{"content":"Prerequisites","pos":[3456,3469]},{"content":"You should <bpt id=\"p1\">[</bpt>Prepare your dev environment for UWP DirectX game development<ept id=\"p1\">](prepare-your-dev-environment-for-windows-store-directx-game-development.md)</ept>.","pos":[3472,3623],"source":"You should [Prepare your dev environment for UWP DirectX game development](prepare-your-dev-environment-for-windows-store-directx-game-development.md)."},{"content":"You don't need a template yet, but you'll need Microsoft Visual Studio 2015 to load the code samples for this walkthrough.","pos":[3624,3746]},{"pos":[3748,3923],"content":"Visit <bpt id=\"p1\">[</bpt>Porting concepts and considerations<ept id=\"p1\">](porting-considerations.md)</ept> to gain a better understanding of the DirectX 11 and UWP programming concepts shown in this walkthrough.","source":"Visit [Porting concepts and considerations](porting-considerations.md) to gain a better understanding of the DirectX 11 and UWP programming concepts shown in this walkthrough."},{"content":"Related topics","pos":[3928,3942]},{"pos":[3945,4055],"content":"<bpt id=\"p1\">**</bpt>Direct3D<ept id=\"p1\">**</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Writing HLSL Shaders in Direct3D 9<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/desktop/bb944006)</ept>","source":"**Direct3D**\n[Writing HLSL Shaders in Direct3D 9](https://msdn.microsoft.com/library/windows/desktop/bb944006)"},{"content":"Create a new DirectX 11 project for UWP","pos":[4058,4097]},{"pos":[4119,4228],"content":"<bpt id=\"p1\">**</bpt>Windows Store<ept id=\"p1\">**</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Microsoft::WRL::ComPtr<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept>","source":"**Windows Store**\n[**Microsoft::WRL::ComPtr**](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)"},{"pos":[4230,4326],"content":"[<bpt id=\"p1\">**</bpt>Handle to Object Operator (^)<ept id=\"p1\">**</ept>]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx","source":"[**Handle to Object Operator (^)**]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx"}],"content":"---\ntitle: Walkthrough-- Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)\ndescription: This porting exercise shows how to bring a simple rendering framework from Direct3D 9 to Direct3D 11 and Universal Windows Platform (UWP).\nms.assetid: d4467e1f-929b-a4b8-b233-e142a8714c96\n---\n\n# Walkthrough: Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nThis porting exercise shows how to bring a simple rendering framework from Direct3D 9 to Direct3D 11 and Universal Windows Platform (UWP).\n## \n<table>\n<colgroup>\n<col width=\"50%\" />\n<col width=\"50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">Topic</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>[Initialize Direct3D 11](simple-port-from-direct3d-9-to-11-1-part-1--initializing-direct3d.md)</p></td>\n<td align=\"left\"><p>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>[Convert the rendering framework](simple-port-from-direct3d-9-to-11-1-part-2--rendering.md)</p></td>\n<td align=\"left\"><p>Shows how to convert a simple rendering framework from Direct3D 9 to Direct3D 11, including how to port geometry buffers, how to compile and load HLSL shader programs, and how to implement the rendering chain in Direct3D 11.</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>[Port the game loop](simple-port-from-direct3d-9-to-11-1-part-3--viewport-and-game-loop.md)</p></td>\n<td align=\"left\"><p>Shows how to implement a window for a UWP game and how to bring over the game loop, including how to build an [<strong>IFrameworkView</strong>](https://msdn.microsoft.com/library/windows/apps/hh700478) to control a full-screen [<strong>CoreWindow</strong>](https://msdn.microsoft.com/library/windows/apps/br208225).</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\nThis topic walks through two code paths that perform the same basic graphics task: display a rotating vertex-shaded cube. In both cases, the code covers the following process:\n\n1.  Creating a Direct3D device and a swap chain.\n2.  Creating a vertex buffer, and an index buffer, to represent a colorful cube mesh.\n3.  Creating a vertex shader that transforms vertices to screen space, a pixel shader that blends color values, compiling the shaders, and loading the shaders as Direct3D resources.\n4.  Implementing the rendering chain and presenting the drawn cube to the screen.\n5.  Creating a window, starting a main loop, and taking care of window message processing.\n\nUpon completing this walkthrough, you should be familiar with the following basic differences between Direct3D 9 and Direct3D 11:\n\n-   The separation of device, device context, and graphics infrastructure.\n-   The process of compiling shaders, and loading shader bytecode at runtime.\n-   How to configure per-vertex data for the Input Assembler (IA) stage.\n-   How to use an [**IFrameworkView**](https://msdn.microsoft.com/library/windows/apps/hh700478) to create a CoreWindow view.\n\nNote that this walkthrough uses [**CoreWindow**](https://msdn.microsoft.com/library/windows/apps/br208225) for simplicity, and does not cover XAML interop.\n\n## Prerequisites\n\n\nYou should [Prepare your dev environment for UWP DirectX game development](prepare-your-dev-environment-for-windows-store-directx-game-development.md). You don't need a template yet, but you'll need Microsoft Visual Studio 2015 to load the code samples for this walkthrough.\n\nVisit [Porting concepts and considerations](porting-considerations.md) to gain a better understanding of the DirectX 11 and UWP programming concepts shown in this walkthrough.\n\n## Related topics\n\n\n**Direct3D**\n[Writing HLSL Shaders in Direct3D 9](https://msdn.microsoft.com/library/windows/desktop/bb944006)\n\n[Create a new DirectX 11 project for UWP](user-interface.md)\n\n**Windows Store**\n[**Microsoft::WRL::ComPtr**](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)\n\n[**Handle to Object Operator (^)**]https://msdn.microsoft.com/library/windows/apps/yk97tc08.aspx\n\n \n\n \n\n\n\n\n"}