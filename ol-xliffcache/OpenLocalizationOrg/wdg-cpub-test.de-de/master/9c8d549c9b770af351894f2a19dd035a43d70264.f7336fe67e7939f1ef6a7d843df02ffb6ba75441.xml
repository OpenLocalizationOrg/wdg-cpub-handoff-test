{"nodes":[{"pos":[85,173],"content":"This article shows you how to cast media to remote devices from a Universal Windows app.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article shows you how to cast media to remote devices from a Universal Windows app.","pos":[0,88]}]},{"pos":[181,194],"content":"Media casting","needQuote":true,"needEscape":true,"nodes":[{"content":"Media casting","pos":[0,13]}]},{"content":"Media casting","pos":[202,215]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[217,255]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[256,351],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"This article shows you how to cast media to remote devices from a Universal Windows app.","pos":[354,442]},{"content":"Built-in media casting with MediaElement","pos":[447,487]},{"pos":[489,683],"content":"The simplest way to cast media from a Universal Windows app is to use the built-in casting capability of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>MediaElement<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242926)</ept> control.","source":"The simplest way to cast media from a Universal Windows app is to use the built-in casting capability of the [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/br242926) control."},{"pos":[685,815],"content":"To allow the user to open a video file to be played in the <bpt id=\"p1\">**</bpt>MediaElement<ept id=\"p1\">**</ept> control, add the following namespaces to your project.","source":"To allow the user to open a video file to be played in the **MediaElement** control, add the following namespaces to your project."},{"pos":[827,846],"content":"BuiltInCastingUsing"},{"pos":[923,1079],"content":"In your app's XAML file, add a <bpt id=\"p1\">**</bpt>MediaElement<ept id=\"p1\">**</ept> and set <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>AreTransportControlsEnabled<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn298977)</ept> to true.","source":"In your app's XAML file, add a **MediaElement** and set [**AreTransportControlsEnabled**](https://msdn.microsoft.com/library/windows/apps/dn298977) to true."},{"pos":[1092,1104],"content":"MediaElement"},{"content":"Add a button to let the user initiate picking a file.","pos":[1171,1224]},{"pos":[1237,1247],"content":"OpenButton"},{"pos":[1312,1706],"content":"In the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Click<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event handler for the button, create a new instance of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FileOpenPicker<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept>, add video file types to the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>FileTypeFilter<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br207850)</ept> collection, and set the starting location to the user's videos library.","source":"In the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event handler for the button, create a new instance of the [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847), add video file types to the [**FileTypeFilter**](https://msdn.microsoft.com/library/windows/apps/br207850) collection, and set the starting location to the user's videos library."},{"content":"Call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PickSingleFileAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/jj635275)</ept> to launch the file picker dialog.","pos":[1708,1830],"source":"Call [**PickSingleFileAsync**](https://msdn.microsoft.com/library/windows/apps/jj635275) to launch the file picker dialog."},{"content":"When this method returns, the result is a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFile<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object representing the video file.","pos":[1831,1984],"source":" When this method returns, the result is a [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object representing the video file."},{"content":"Check to make sure the file isn't null, which it will be if the user cancels the picking operation.","pos":[1985,2084]},{"content":"Call the file's <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>OpenAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227221.aspx)</ept> method to get an <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>IRandomAccessStream<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept> for the file.","pos":[2085,2294],"source":" Call the file's [**OpenAsync**](https://msdn.microsoft.com/library/windows/apps/br227221.aspx) method to get an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) for the file."},{"content":"Finally, call the <bpt id=\"p1\">**</bpt>MediaElement<ept id=\"p1\">**</ept> object's <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SetSource<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br244338)</ept> method to make the video file the video source for the control.","pos":[2295,2476],"source":" Finally, call the **MediaElement** object's [**SetSource**](https://msdn.microsoft.com/library/windows/apps/br244338) method to make the video file the video source for the control."},{"pos":[2488,2503],"content":"OpenButtonClick"},{"pos":[2576,2800],"content":"Once the video is loaded in the <bpt id=\"p1\">**</bpt>MediaElement<ept id=\"p1\">**</ept>, the user can simply press the casting button on the transport controls to launch a built-in dialog that allows them to choose a device to which the loaded media will be cast.","source":"Once the video is loaded in the **MediaElement**, the user can simply press the casting button on the transport controls to launch a built-in dialog that allows them to choose a device to which the loaded media will be cast."},{"content":"mediaelement casting button","pos":[2804,2831]},{"content":"Media casting with the CastingDevicePicker","pos":[2878,2920]},{"content":"A second way to cast media to a device is to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CastingDevicePicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972525)</ept>.","pos":[2922,3059],"source":"A second way to cast media to a device is to use the [**CastingDevicePicker**](https://msdn.microsoft.com/library/windows/apps/dn972525)."},{"content":"To use this class, include the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Media.Casting<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972568)</ept> namespace in your project.","pos":[3060,3203],"source":" To use this class, include the [**Windows.Media.Casting**](https://msdn.microsoft.com/library/windows/apps/dn972568) namespace in your project."},{"pos":[3215,3231],"content":"CastingNamespace"},{"pos":[3305,3370],"content":"Declare a member variable for the <bpt id=\"p1\">**</bpt>CastingDevicePicker<ept id=\"p1\">**</ept> object.","source":"Declare a member variable for the **CastingDevicePicker** object."},{"pos":[3382,3402],"content":"DeclareCastingPicker"},{"content":"When you page is initialized, create a new instance of the casting picker and set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Filter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972540)</ept> to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>SupportsVideo<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972526)</ept> property to indicate that the casting devices listed by the picker should support video.","pos":[3480,3806],"source":"When you page is initialized, create a new instance of the casting picker and set the [**Filter**](https://msdn.microsoft.com/library/windows/apps/dn972540) to [**SupportsVideo**](https://msdn.microsoft.com/library/windows/apps/dn972526) property to indicate that the casting devices listed by the picker should support video."},{"content":"Register a handler for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CastingDeviceSelected<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972539)</ept> event, which is raised when the user picks a device for casting.","pos":[3807,3984],"source":" Register a handler for the [**CastingDeviceSelected**](https://msdn.microsoft.com/library/windows/apps/dn972539) event, which is raised when the user picks a device for casting."},{"pos":[3996,4013],"content":"InitCastingPicker"},{"content":"In your XAML file, add a button to allow the user to launch the picker.","pos":[4088,4159]},{"pos":[4172,4188],"content":"CastPickerButton"},{"content":"In the <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> event handler for the button, call <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>TransformToVisual<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br208986)</ept> to get the transform of a UI element relative to another element.","pos":[4259,4458],"source":"In the **Click** event handler for the button, call [**TransformToVisual**](https://msdn.microsoft.com/library/windows/apps/br208986) to get the transform of a UI element relative to another element."},{"content":"In this example, the transform is the position of the cast picker button relative to the visual root of the application window.","pos":[4459,4586]},{"content":"Call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Show<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972542)</ept> method of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CastingDevicePicker<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972525)</ept> object to launch the casting picker dialog.","pos":[4587,4806],"source":" Call the [**Show**](https://msdn.microsoft.com/library/windows/apps/dn972542) method of the [**CastingDevicePicker**](https://msdn.microsoft.com/library/windows/apps/dn972525) object to launch the casting picker dialog."},{"content":"Specify the location and dimensions of the cast picker button so that the system can make the dialog fly out from the button that the user pressed.","pos":[4807,4954]},{"pos":[4966,4987],"content":"CastPickerButtonClick"},{"content":"In the <bpt id=\"p1\">**</bpt>CastingDeviceSelected<ept id=\"p1\">**</ept> event handler, call the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CreateCastingConnection<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn972547)</ept> method of the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>SelectedCastingDevice<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn972546)</ept> property of the event args, which represents the casting device selected by the user.","pos":[5066,5396],"source":"In the **CastingDeviceSelected** event handler, call the [**CreateCastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972547) method of the [**SelectedCastingDevice**](https://msdn.microsoft.com/library/windows/apps/dn972546) property of the event args, which represents the casting device selected by the user."},{"content":"Register handlers for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ErrorOccurred<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972519)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StateChanged<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972523)</ept> events.","pos":[5397,5589],"source":" Register handlers for the [**ErrorOccurred**](https://msdn.microsoft.com/library/windows/apps/dn972519) and [**StateChanged**](https://msdn.microsoft.com/library/windows/apps/dn972523) events."},{"content":"Finally, call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestStartCastingAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972520)</ept> to begin casting, passing in the result of the <bpt id=\"p3\">**</bpt>MediaElement<ept id=\"p3\">**</ept> object's <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>GetAsCastingSource<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn920012)</ept> method to specify that the media to be cast is the content of the <bpt id=\"p6\">**</bpt>MediaElement<ept id=\"p6\">**</ept>.","pos":[5590,5932],"source":" Finally, call [**RequestStartCastingAsync**](https://msdn.microsoft.com/library/windows/apps/dn972520) to begin casting, passing in the result of the **MediaElement** object's [**GetAsCastingSource**](https://msdn.microsoft.com/library/windows/apps/dn920012) method to specify that the media to be cast is the content of the **MediaElement**."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The casting connection must be initiated on the UI thread.","pos":[5934,6002],"source":"**Note**  The casting connection must be initiated on the UI thread."},{"content":"Since the <bpt id=\"p1\">**</bpt>CastingDeviceSelected<ept id=\"p1\">**</ept> is not called on the UI thread, you must place these calls inside a call to <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept> which causes them to be called on the UI thread.","pos":[6003,6251],"source":" Since the **CastingDeviceSelected** is not called on the UI thread, you must place these calls inside a call to [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317) which causes them to be called on the UI thread."},{"pos":[6263,6284],"content":"CastingDeviceSelected"},{"content":"In the <bpt id=\"p1\">**</bpt>ErrorOccurred<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>StateChanged<ept id=\"p2\">**</ept> event handlers, you should update your UI to inform the user of the current casting status.","pos":[6363,6500],"source":"In the **ErrorOccurred** and **StateChanged** event handlers, you should update your UI to inform the user of the current casting status."},{"content":"These events are discussed in detail in the following section on creating a custom casting device picker.","pos":[6501,6606]},{"pos":[6618,6636],"content":"EmptyStateHandlers"},{"content":"Media casting with a custom device picker","pos":[6715,6756]},{"content":"The following section describes how to create your own casting device picker UI by enumerating the casting devices and initiating the connection from your code.","pos":[6758,6918]},{"pos":[6920,7094],"content":"To enumerate the available casting devices, include the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Enumeration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225459)</ept> namespace in your project.","source":"To enumerate the available casting devices, include the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/br225459) namespace in your project."},{"pos":[7106,7126],"content":"EnumerationNamespace"},{"content":"Add the following controls to your XAML page to implement the rudimentary UI for this example:","pos":[7204,7298]},{"content":"A button to start the device watcher that looks for available casting devices.","pos":[7304,7382]},{"pos":[7387,7542],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProgressRing<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227538)</ept> control to provide feedback to the user that casting enumeration is ongoing.","source":"A [**ProgressRing**](https://msdn.microsoft.com/library/windows/apps/br227538) control to provide feedback to the user that casting enumeration is ongoing."},{"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242868)</ept> to list the discovered casting devices.","pos":[7547,7660],"source":"A [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) to list the discovered casting devices."},{"content":"Define an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242830)</ept> for the control so that we can assign the casting device objects directly to the control and still display the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FriendlyName<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972549)</ept> property.","pos":[7661,7945],"source":" Define an [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/br242830) for the control so that we can assign the casting device objects directly to the control and still display the [**FriendlyName**](https://msdn.microsoft.com/library/windows/apps/dn972549) property."},{"content":"A button to allow the user to disconnect the casting device.","pos":[7950,8010]},{"pos":[8023,8039],"content":"CustomPickerXAML"},{"pos":[8110,8332],"content":"In your code behind, declare member variables for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceWatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225446)</ept> and the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CastingConnection<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972510)</ept>.","source":"In your code behind, declare member variables for the [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) and the [**CastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972510)."},{"pos":[8344,8364],"content":"DeclareDeviceWatcher"},{"content":"In the <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> handler for the <bpt id=\"p2\">*</bpt>startWatcherButton<ept id=\"p2\">*</ept>, first update the UI by disabling the button and making the progress ring active while device enumeration is ongoing.","pos":[8442,8613],"source":"In the **Click** handler for the *startWatcherButton*, first update the UI by disabling the button and making the progress ring active while device enumeration is ongoing."},{"content":"Clear the list box of casting devices.","pos":[8614,8652]},{"content":"Next, create a device watcher by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceInformation.CreateWatcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225427)</ept>.","pos":[8654,8791],"source":"Next, create a device watcher by calling [**DeviceInformation.CreateWatcher**](https://msdn.microsoft.com/library/windows/apps/br225427)."},{"content":"This method can be used to watch for many different types of devices.","pos":[8792,8861]},{"content":"Specify that you want to watch for devices that support video casting by using the device selector string returned by <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CastingDevice.GetDeviceSelector<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972551)</ept>.","pos":[8862,9076],"source":" Specify that you want to watch for devices that support video casting by using the device selector string returned by [**CastingDevice.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn972551)."},{"pos":[9078,9432],"content":"Finally, register event handlers for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Added<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225450)</ept>, <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Removed<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225453)</ept>, <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>EnumerationCompleted<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br225451)</ept>, and <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>Stopped<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br225457)</ept> events.","source":"Finally, register event handlers for the [**Added**](https://msdn.microsoft.com/library/windows/apps/br225450), [**Removed**](https://msdn.microsoft.com/library/windows/apps/br225453), [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451), and [**Stopped**](https://msdn.microsoft.com/library/windows/apps/br225457) events."},{"pos":[9444,9467],"content":"StartWatcherButtonClick"},{"content":"The <bpt id=\"p1\">**</bpt>Added<ept id=\"p1\">**</ept> event is raised when a new device is discovered by the watcher.","pos":[9548,9625],"source":"The **Added** event is raised when a new device is discovered by the watcher."},{"content":"In the handler for this event, create a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CastingDevice<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972524)</ept> object by calling <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CastingDevice.FromIdAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972550)</ept> and passing in the ID of the discovered casting device, which is contained in the <bpt id=\"p5\">**</bpt>DeviceInformation<ept id=\"p5\">**</ept> object passed into the handler.","pos":[9626,9991],"source":" In the handler for this event, create a new [**CastingDevice**](https://msdn.microsoft.com/library/windows/apps/dn972524) object by calling [**CastingDevice.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn972550) and passing in the ID of the discovered casting device, which is contained in the **DeviceInformation** object passed into the handler."},{"content":"Add the <bpt id=\"p1\">**</bpt>CastingDevice<ept id=\"p1\">**</ept> to the casting device <bpt id=\"p2\">**</bpt>ListBox<ept id=\"p2\">**</ept> so that the user can select it.","pos":[9993,10084],"source":"Add the **CastingDevice** to the casting device **ListBox** so that the user can select it."},{"content":"Because of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ItemTemplate<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242830)</ept> defined in the XAML, the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>FriendlyName<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972549)</ept> property will be used as the item text for in the list box.","pos":[10085,10338],"source":" Because of the [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/br242830) defined in the XAML, the [**FriendlyName**](https://msdn.microsoft.com/library/windows/apps/dn972549) property will be used as the item text for in the list box."},{"content":"Because this event handler is not called on the UI thread, you must update the UI from within a call to <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept>.","pos":[10339,10531],"source":" Because this event handler is not called on the UI thread, you must update the UI from within a call to [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317)."},{"pos":[10543,10555],"content":"WatcherAdded"},{"content":"The <bpt id=\"p1\">**</bpt>Removed<ept id=\"p1\">**</ept> event is raised when the watcher detects that a casting device is no longer present.","pos":[10625,10725],"source":"The **Removed** event is raised when the watcher detects that a casting device is no longer present."},{"content":"Compare the ID property of the <bpt id=\"p1\">**</bpt>Added<ept id=\"p1\">**</ept> object passed into the handler to the ID of each <bpt id=\"p2\">**</bpt>Added<ept id=\"p2\">**</ept> in the list box's <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Items<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242823)</ept> collection.","pos":[10726,10925],"source":" Compare the ID property of the **Added** object passed into the handler to the ID of each **Added** in the list box's [**Items**](https://msdn.microsoft.com/library/windows/apps/br242823) collection."},{"content":"If the ID matches, remove that object from the collection.","pos":[10926,10984]},{"content":"Again, because the UI is being updated, this call must be made from within a <bpt id=\"p1\">**</bpt>RunAsync<ept id=\"p1\">**</ept> call.","pos":[10985,11080],"source":" Again, because the UI is being updated, this call must be made from within a **RunAsync** call."},{"pos":[11092,11106],"content":"WatcherRemoved"},{"content":"The <bpt id=\"p1\">**</bpt>EnumerationCompleted<ept id=\"p1\">**</ept> event is raised when the watcher has finished detecting devices.","pos":[11178,11271],"source":"The **EnumerationCompleted** event is raised when the watcher has finished detecting devices."},{"content":"In the handler for this event, update the UI to let the user know that device enumeration has completed and stop the device watcher by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Stop<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225456)</ept>.","pos":[11272,11484],"source":" In the handler for this event, update the UI to let the user know that device enumeration has completed and stop the device watcher by calling [**Stop**](https://msdn.microsoft.com/library/windows/apps/br225456)."},{"pos":[11496,11523],"content":"WatcherEnumerationCompleted"},{"content":"The Stopped event is raised when the device watcher has finished stopping.","pos":[11608,11682]},{"content":"In the handler for this event, stop the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ProgressRing<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227538)</ept> control and reenable the <bpt id=\"p3\">*</bpt>startWatcherButton<ept id=\"p3\">*</ept> so that the user can restart the device enumeration process.","pos":[11683,11906],"source":" In the handler for this event, stop the [**ProgressRing**](https://msdn.microsoft.com/library/windows/apps/br227538) control and reenable the *startWatcherButton* so that the user can restart the device enumeration process."},{"pos":[11918,11932],"content":"WatcherStopped"},{"content":"When the user selects one of the casting devices from the list box, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SelectionChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209776)</ept> event is raised.","pos":[12004,12173],"source":"When the user selects one of the casting devices from the list box, the [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) event is raised."},{"content":"It is within this handler that the casting connection will be created and casting will be started.","pos":[12174,12272]},{"content":"First, make sure the device watcher is stopped so that device enumeration doesn't interfere with media casting.","pos":[12274,12385]},{"content":"Create a casting connection by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreateCastingConnection<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972547)</ept> on the <bpt id=\"p3\">**</bpt>CastingDevice<ept id=\"p3\">**</ept> object selected by the user.","pos":[12386,12566],"source":" Create a casting connection by calling [**CreateCastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972547) on the **CastingDevice** object selected by the user."},{"content":"Add event handlers for the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StateChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972523)</ept> and <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ErrorOccurred<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn972519)</ept> events.","pos":[12567,12760],"source":" Add event handlers for the [**StateChanged**](https://msdn.microsoft.com/library/windows/apps/dn972523) and [**ErrorOccurred**](https://msdn.microsoft.com/library/windows/apps/dn972519) events."},{"content":"Start media casting by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestStartCastingAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn972520)</ept>, passing in the casting source returned by calling the <bpt id=\"p3\">**</bpt>MediaElement<ept id=\"p3\">**</ept> method <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>GetAsCastingSource<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn920012)</ept>.","pos":[12762,13044],"source":"Start media casting by calling [**RequestStartCastingAsync**](https://msdn.microsoft.com/library/windows/apps/dn972520), passing in the casting source returned by calling the **MediaElement** method [**GetAsCastingSource**](https://msdn.microsoft.com/library/windows/apps/dn920012)."},{"content":"Finally, make the disconnect button visible to allow the user to stop media casting.","pos":[13045,13129]},{"pos":[13141,13157],"content":"SelectionChanged"},{"content":"In the state changed handler, the action you take depends on the new state of the casting connection:","pos":[13231,13332]},{"pos":[13338,13474],"content":"If the state is <bpt id=\"p1\">**</bpt>Connected<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Rendering<ept id=\"p2\">**</ept>, make sure the <bpt id=\"p3\">**</bpt>ProgressRing<ept id=\"p3\">**</ept> control is inactive and the disconnect button is visible.","source":"If the state is **Connected** or **Rendering**, make sure the **ProgressRing** control is inactive and the disconnect button is visible."},{"pos":[13479,13641],"content":"If the state is <bpt id=\"p1\">**</bpt>Disconnected<ept id=\"p1\">**</ept>, unselect the current casting device in the list box, make the <bpt id=\"p2\">**</bpt>ProgressRing<ept id=\"p2\">**</ept> control inactive, and hide the disconnect button.","source":"If the state is **Disconnected**, unselect the current casting device in the list box, make the **ProgressRing** control inactive, and hide the disconnect button."},{"pos":[13646,13750],"content":"If the state is <bpt id=\"p1\">**</bpt>Connecting<ept id=\"p1\">**</ept>, make the <bpt id=\"p2\">**</bpt>ProgressRing<ept id=\"p2\">**</ept> control active and hide the disconnect button.","source":"If the state is **Connecting**, make the **ProgressRing** control active and hide the disconnect button."},{"pos":[13755,13862],"content":"If the state is <bpt id=\"p1\">**</bpt>Disconnecting<ept id=\"p1\">**</ept>, make the <bpt id=\"p2\">**</bpt>ProgressRing<ept id=\"p2\">**</ept> control active and hide the disconnect button.","source":"If the state is **Disconnecting**, make the **ProgressRing** control active and hide the disconnect button."},{"pos":[13874,13886],"content":"StateChanged"},{"pos":[13956,14136],"content":"In the handler for the <bpt id=\"p1\">**</bpt>ErrorOccurred<ept id=\"p1\">**</ept> event, update your UI to let the user know that a casting error occurred and unselect the current <bpt id=\"p2\">**</bpt>CastingDevice<ept id=\"p2\">**</ept> object in the list box.","source":"In the handler for the **ErrorOccurred** event, update your UI to let the user know that a casting error occurred and unselect the current **CastingDevice** object in the list box."},{"pos":[14148,14161],"content":"ErrorOccurred"},{"content":"Finally, implement the handler for the disconnect button.","pos":[14232,14289]},{"content":"Stop media casting and disconnect from the casting device by calling the <bpt id=\"p1\">**</bpt>CastingConnection<ept id=\"p1\">**</ept> object's <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>DisconnectAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn972518)</ept> method.","pos":[14290,14481],"source":" Stop media casting and disconnect from the casting device by calling the **CastingConnection** object's [**DisconnectAsync**](https://msdn.microsoft.com/library/windows/apps/dn972518) method."},{"content":"This call must be dispatched to the UI thread by calling <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh750317)</ept>.","pos":[14482,14627],"source":" This call must be dispatched to the UI thread by calling [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317)."},{"pos":[14639,14655],"content":"DisconnectButton"}],"content":"---\nauthor: drewbatgit\nms.assetid: 40B97E0C-EB1B-40C2-A022-1AB95DFB085E\ndescription: This article shows you how to cast media to remote devices from a Universal Windows app.\ntitle: Media casting\n---\n\n# Media casting\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nThis article shows you how to cast media to remote devices from a Universal Windows app.\n\n## Built-in media casting with MediaElement\n\nThe simplest way to cast media from a Universal Windows app is to use the built-in casting capability of the [**MediaElement**](https://msdn.microsoft.com/library/windows/apps/br242926) control.\n\nTo allow the user to open a video file to be played in the **MediaElement** control, add the following namespaces to your project.\n\n[!code-cs[BuiltInCastingUsing](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetBuiltInCastingUsing)]\n\nIn your app's XAML file, add a **MediaElement** and set [**AreTransportControlsEnabled**](https://msdn.microsoft.com/library/windows/apps/dn298977) to true.\n\n[!code-xml[MediaElement](./code/MediaCastingWin10/cs/MainPage.xaml#SnippetMediaElement)]\n\nAdd a button to let the user initiate picking a file.\n\n[!code-xml[OpenButton](./code/MediaCastingWin10/cs/MainPage.xaml#SnippetOpenButton)]\n\nIn the [**Click**](https://msdn.microsoft.com/library/windows/apps/br227737) event handler for the button, create a new instance of the [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847), add video file types to the [**FileTypeFilter**](https://msdn.microsoft.com/library/windows/apps/br207850) collection, and set the starting location to the user's videos library.\n\nCall [**PickSingleFileAsync**](https://msdn.microsoft.com/library/windows/apps/jj635275) to launch the file picker dialog. When this method returns, the result is a [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object representing the video file. Check to make sure the file isn't null, which it will be if the user cancels the picking operation. Call the file's [**OpenAsync**](https://msdn.microsoft.com/library/windows/apps/br227221.aspx) method to get an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) for the file. Finally, call the **MediaElement** object's [**SetSource**](https://msdn.microsoft.com/library/windows/apps/br244338) method to make the video file the video source for the control.\n\n[!code-cs[OpenButtonClick](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetOpenButtonClick)]\n\nOnce the video is loaded in the **MediaElement**, the user can simply press the casting button on the transport controls to launch a built-in dialog that allows them to choose a device to which the loaded media will be cast.\n\n![mediaelement casting button](images/media-element-casting-button.png)\n\n## Media casting with the CastingDevicePicker\n\nA second way to cast media to a device is to use the [**CastingDevicePicker**](https://msdn.microsoft.com/library/windows/apps/dn972525). To use this class, include the [**Windows.Media.Casting**](https://msdn.microsoft.com/library/windows/apps/dn972568) namespace in your project.\n\n[!code-cs[CastingNamespace](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetCastingNamespace)]\n\nDeclare a member variable for the **CastingDevicePicker** object.\n\n[!code-cs[DeclareCastingPicker](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetDeclareCastingPicker)]\n\nWhen you page is initialized, create a new instance of the casting picker and set the [**Filter**](https://msdn.microsoft.com/library/windows/apps/dn972540) to [**SupportsVideo**](https://msdn.microsoft.com/library/windows/apps/dn972526) property to indicate that the casting devices listed by the picker should support video. Register a handler for the [**CastingDeviceSelected**](https://msdn.microsoft.com/library/windows/apps/dn972539) event, which is raised when the user picks a device for casting.\n\n[!code-cs[InitCastingPicker](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetInitCastingPicker)]\n\nIn your XAML file, add a button to allow the user to launch the picker.\n\n[!code-xml[CastPickerButton](./code/MediaCastingWin10/cs/MainPage.xaml#SnippetCastPickerButton)]\n\nIn the **Click** event handler for the button, call [**TransformToVisual**](https://msdn.microsoft.com/library/windows/apps/br208986) to get the transform of a UI element relative to another element. In this example, the transform is the position of the cast picker button relative to the visual root of the application window. Call the [**Show**](https://msdn.microsoft.com/library/windows/apps/dn972542) method of the [**CastingDevicePicker**](https://msdn.microsoft.com/library/windows/apps/dn972525) object to launch the casting picker dialog. Specify the location and dimensions of the cast picker button so that the system can make the dialog fly out from the button that the user pressed.\n\n[!code-cs[CastPickerButtonClick](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetCastPickerButtonClick)]\n\nIn the **CastingDeviceSelected** event handler, call the [**CreateCastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972547) method of the [**SelectedCastingDevice**](https://msdn.microsoft.com/library/windows/apps/dn972546) property of the event args, which represents the casting device selected by the user. Register handlers for the [**ErrorOccurred**](https://msdn.microsoft.com/library/windows/apps/dn972519) and [**StateChanged**](https://msdn.microsoft.com/library/windows/apps/dn972523) events. Finally, call [**RequestStartCastingAsync**](https://msdn.microsoft.com/library/windows/apps/dn972520) to begin casting, passing in the result of the **MediaElement** object's [**GetAsCastingSource**](https://msdn.microsoft.com/library/windows/apps/dn920012) method to specify that the media to be cast is the content of the **MediaElement**.\n\n**Note**  The casting connection must be initiated on the UI thread. Since the **CastingDeviceSelected** is not called on the UI thread, you must place these calls inside a call to [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317) which causes them to be called on the UI thread.\n\n[!code-cs[CastingDeviceSelected](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetCastingDeviceSelected)]\n\nIn the **ErrorOccurred** and **StateChanged** event handlers, you should update your UI to inform the user of the current casting status. These events are discussed in detail in the following section on creating a custom casting device picker.\n\n[!code-cs[EmptyStateHandlers](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetEmptyStateHandlers)]\n\n## Media casting with a custom device picker\n\nThe following section describes how to create your own casting device picker UI by enumerating the casting devices and initiating the connection from your code.\n\nTo enumerate the available casting devices, include the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/br225459) namespace in your project.\n\n[!code-cs[EnumerationNamespace](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetEnumerationNamespace)]\n\nAdd the following controls to your XAML page to implement the rudimentary UI for this example:\n\n-   A button to start the device watcher that looks for available casting devices.\n-   A [**ProgressRing**](https://msdn.microsoft.com/library/windows/apps/br227538) control to provide feedback to the user that casting enumeration is ongoing.\n-   A [**ListBox**](https://msdn.microsoft.com/library/windows/apps/br242868) to list the discovered casting devices. Define an [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/br242830) for the control so that we can assign the casting device objects directly to the control and still display the [**FriendlyName**](https://msdn.microsoft.com/library/windows/apps/dn972549) property.\n-   A button to allow the user to disconnect the casting device.\n\n[!code-xml[CustomPickerXAML](./code/MediaCastingWin10/cs/MainPage.xaml#SnippetCustomPickerXAML)]\n\nIn your code behind, declare member variables for the [**DeviceWatcher**](https://msdn.microsoft.com/library/windows/apps/br225446) and the [**CastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972510).\n\n[!code-cs[DeclareDeviceWatcher](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetDeclareDeviceWatcher)]\n\nIn the **Click** handler for the *startWatcherButton*, first update the UI by disabling the button and making the progress ring active while device enumeration is ongoing. Clear the list box of casting devices.\n\nNext, create a device watcher by calling [**DeviceInformation.CreateWatcher**](https://msdn.microsoft.com/library/windows/apps/br225427). This method can be used to watch for many different types of devices. Specify that you want to watch for devices that support video casting by using the device selector string returned by [**CastingDevice.GetDeviceSelector**](https://msdn.microsoft.com/library/windows/apps/dn972551).\n\nFinally, register event handlers for the [**Added**](https://msdn.microsoft.com/library/windows/apps/br225450), [**Removed**](https://msdn.microsoft.com/library/windows/apps/br225453), [**EnumerationCompleted**](https://msdn.microsoft.com/library/windows/apps/br225451), and [**Stopped**](https://msdn.microsoft.com/library/windows/apps/br225457) events.\n\n[!code-cs[StartWatcherButtonClick](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetStartWatcherButtonClick)]\n\nThe **Added** event is raised when a new device is discovered by the watcher. In the handler for this event, create a new [**CastingDevice**](https://msdn.microsoft.com/library/windows/apps/dn972524) object by calling [**CastingDevice.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/dn972550) and passing in the ID of the discovered casting device, which is contained in the **DeviceInformation** object passed into the handler.\n\nAdd the **CastingDevice** to the casting device **ListBox** so that the user can select it. Because of the [**ItemTemplate**](https://msdn.microsoft.com/library/windows/apps/br242830) defined in the XAML, the [**FriendlyName**](https://msdn.microsoft.com/library/windows/apps/dn972549) property will be used as the item text for in the list box. Because this event handler is not called on the UI thread, you must update the UI from within a call to [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317).\n\n[!code-cs[WatcherAdded](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetWatcherAdded)]\n\nThe **Removed** event is raised when the watcher detects that a casting device is no longer present. Compare the ID property of the **Added** object passed into the handler to the ID of each **Added** in the list box's [**Items**](https://msdn.microsoft.com/library/windows/apps/br242823) collection. If the ID matches, remove that object from the collection. Again, because the UI is being updated, this call must be made from within a **RunAsync** call.\n\n[!code-cs[WatcherRemoved](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetWatcherRemoved)]\n\nThe **EnumerationCompleted** event is raised when the watcher has finished detecting devices. In the handler for this event, update the UI to let the user know that device enumeration has completed and stop the device watcher by calling [**Stop**](https://msdn.microsoft.com/library/windows/apps/br225456).\n\n[!code-cs[WatcherEnumerationCompleted](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetWatcherEnumerationCompleted)]\n\nThe Stopped event is raised when the device watcher has finished stopping. In the handler for this event, stop the [**ProgressRing**](https://msdn.microsoft.com/library/windows/apps/br227538) control and reenable the *startWatcherButton* so that the user can restart the device enumeration process.\n\n[!code-cs[WatcherStopped](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetWatcherStopped)]\n\nWhen the user selects one of the casting devices from the list box, the [**SelectionChanged**](https://msdn.microsoft.com/library/windows/apps/br209776) event is raised. It is within this handler that the casting connection will be created and casting will be started.\n\nFirst, make sure the device watcher is stopped so that device enumeration doesn't interfere with media casting. Create a casting connection by calling [**CreateCastingConnection**](https://msdn.microsoft.com/library/windows/apps/dn972547) on the **CastingDevice** object selected by the user. Add event handlers for the [**StateChanged**](https://msdn.microsoft.com/library/windows/apps/dn972523) and [**ErrorOccurred**](https://msdn.microsoft.com/library/windows/apps/dn972519) events.\n\nStart media casting by calling [**RequestStartCastingAsync**](https://msdn.microsoft.com/library/windows/apps/dn972520), passing in the casting source returned by calling the **MediaElement** method [**GetAsCastingSource**](https://msdn.microsoft.com/library/windows/apps/dn920012). Finally, make the disconnect button visible to allow the user to stop media casting.\n\n[!code-cs[SelectionChanged](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetSelectionChanged)]\n\nIn the state changed handler, the action you take depends on the new state of the casting connection:\n\n-   If the state is **Connected** or **Rendering**, make sure the **ProgressRing** control is inactive and the disconnect button is visible.\n-   If the state is **Disconnected**, unselect the current casting device in the list box, make the **ProgressRing** control inactive, and hide the disconnect button.\n-   If the state is **Connecting**, make the **ProgressRing** control active and hide the disconnect button.\n-   If the state is **Disconnecting**, make the **ProgressRing** control active and hide the disconnect button.\n\n[!code-cs[StateChanged](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetStateChanged)]\n\nIn the handler for the **ErrorOccurred** event, update your UI to let the user know that a casting error occurred and unselect the current **CastingDevice** object in the list box.\n\n[!code-cs[ErrorOccurred](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetErrorOccurred)]\n\nFinally, implement the handler for the disconnect button. Stop media casting and disconnect from the casting device by calling the **CastingConnection** object's [**DisconnectAsync**](https://msdn.microsoft.com/library/windows/apps/dn972518) method. This call must be dispatched to the UI thread by calling [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/hh750317).\n\n[!code-cs[DisconnectButton](./code/MediaCastingWin10/cs/MainPage.xaml.cs#SnippetDisconnectButton)]\n\n \n\n \n\n\n\n\n"}