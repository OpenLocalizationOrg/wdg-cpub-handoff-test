{"nodes":[{"pos":[11,41],"content":"Getting started with Animation","needQuote":true,"needEscape":true,"nodes":[{"content":"Getting started with Animation","pos":[0,30]}]},{"pos":[104,208],"content":"In this project, we're going to move a rectangle, apply a fade effect, and then bring it back into view.","needQuote":true,"needEscape":true,"nodes":[{"content":"In this project, we're going to move a rectangle, apply a fade effect, and then bring it back into view.","pos":[0,104]}]},{"content":"Getting started: Animation","pos":[216,242]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[244,282]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[283,378],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Adding animations","pos":[383,400]},{"content":"In iOS, you most often create animation effects programmatically.","pos":[402,467]},{"content":"For example, you might use animations provided by the block-based <bpt id=\"p1\">**</bpt>UIView<ept id=\"p1\">**</ept> class's <bpt id=\"p2\">**</bpt>animateWithDuration<ept id=\"p2\">**</ept> methods, or the older non-block based methods.","pos":[468,623],"source":" For example, you might use animations provided by the block-based **UIView** class's **animateWithDuration** methods, or the older non-block based methods."},{"content":"Or, you might explicitly use the <bpt id=\"p1\">**</bpt>CALayer<ept id=\"p1\">**</ept> class to animate layers.","pos":[624,693],"source":" Or, you might explicitly use the **CALayer** class to animate layers."},{"content":"Animations in Windows apps can be created programmatically, but they can also be defined declaratively with Extensible Application Markup Language (XAML).","pos":[694,848]},{"content":"You can use Microsoft Visual Studio to edit XAML code directly, but Visual Studio also comes with a tool called <bpt id=\"p1\">**</bpt>Blend<ept id=\"p1\">**</ept>, which creates XAML code for you as you work with animations in a designer.","pos":[849,1046],"source":" You can use Microsoft Visual Studio to edit XAML code directly, but Visual Studio also comes with a tool called **Blend**, which creates XAML code for you as you work with animations in a designer."},{"content":"In fact, Blend allows you to open, design, build, and run complete Visual Studio projects, graphically.","pos":[1047,1150]},{"content":"The following walkthrough lets you try this out.","pos":[1151,1199]},{"content":"Create a new Universal Windows Platform (UWP) app and name it something like \"SimpleAnimation\".","pos":[1201,1296]},{"content":"In this project, we're going to move a rectangle, apply a fade effect, and then bring it back into view.","pos":[1297,1401]},{"content":"Animations in XAML are based on the concept of <bpt id=\"p1\">*</bpt>storyboards<ept id=\"p1\">*</ept> (not to be confused with iOS storyboards).","pos":[1402,1505],"source":" Animations in XAML are based on the concept of *storyboards* (not to be confused with iOS storyboards)."},{"content":"Storyboards use <bpt id=\"p1\">*</bpt>keyframes<ept id=\"p1\">*</ept> to animate property changes.","pos":[1506,1562],"source":" Storyboards use *keyframes* to animate property changes."},{"content":"With your project open, in <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the project's name and then select <bpt id=\"p2\">**</bpt>Open in Blend<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Design in Blend<ept id=\"p3\">**</ept>, as shown in the following figure.","pos":[1564,1736],"source":"With your project open, in **Solution Explorer**, right-click the project's name and then select **Open in Blend** or **Design in Blend**, as shown in the following figure."},{"content":"Visual Studio continues to run in the background.","pos":[1737,1786]},{"content":"open in blend menu command","pos":[1790,1816]},{"content":"After Blend starts, you should see something similar to the following figure.","pos":[1859,1936]},{"content":"blend development environment","pos":[1940,1969]},{"content":"Double-click on <bpt id=\"p1\">**</bpt>MainPage.xaml<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt>Solution Explorer<ept id=\"p2\">**</ept> on the left hand side.","pos":[2003,2088],"source":"Double-click on **MainPage.xaml** in the **Solution Explorer** on the left hand side."},{"content":"Next, from the vertical strip of tools on the edge of the central <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept>, select the <bpt id=\"p2\">**</bpt>Rectangle<ept id=\"p2\">**</ept> tool, and then draw a rectangle in <bpt id=\"p3\">**</bpt>Design View<ept id=\"p3\">**</ept>, as shown in the following figure.","pos":[2089,2282],"source":" Next, from the vertical strip of tools on the edge of the central **Design View**, select the **Rectangle** tool, and then draw a rectangle in **Design View**, as shown in the following figure."},{"content":"adding a rectangle to design view","pos":[2286,2319]},{"content":"To make the rectangle green, look in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, and in the <bpt id=\"p2\">**</bpt>Brush<ept id=\"p2\">**</ept> area, click on the <bpt id=\"p3\">**</bpt>Solid color brush<ept id=\"p3\">**</ept> button, and then click the <bpt id=\"p4\">**</bpt>Color eyedropper<ept id=\"p4\">**</ept> icon.","pos":[2353,2532],"source":"To make the rectangle green, look in the **Properties** window, and in the **Brush** area, click on the **Solid color brush** button, and then click the **Color eyedropper** icon."},{"content":"Click somewhere in the green band of hues.","pos":[2533,2575]},{"pos":[2577,2742],"content":"To begin animating the rectangle, in the <bpt id=\"p1\">**</bpt>Objects and Timeline<ept id=\"p1\">**</ept> window, tap the plus symbol (<bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>) button as shown in the following figure, and then tap <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>.","source":"To begin animating the rectangle, in the **Objects and Timeline** window, tap the plus symbol (**New**) button as shown in the following figure, and then tap **OK**."},{"content":"adding a storyboard","pos":[2746,2765]},{"content":"A storyboard appears in the <bpt id=\"p1\">**</bpt>Objects and Timeline<ept id=\"p1\">**</ept> window (you may need to resize the view to see it properly).","pos":[2799,2912],"source":"A storyboard appears in the **Objects and Timeline** window (you may need to resize the view to see it properly)."},{"content":"The <bpt id=\"p1\">**</bpt>Design View<ept id=\"p1\">**</ept> display changes to show that <bpt id=\"p2\">**</bpt>Storyboard1 timeline recording is on<ept id=\"p2\">**</ept>.","pos":[2913,3003],"source":" The **Design View** display changes to show that **Storyboard1 timeline recording is on**."},{"content":"To capture the current state of the rectangle, in the <bpt id=\"p1\">**</bpt>Objects and Timeline<ept id=\"p1\">**</ept> window, tap the <bpt id=\"p2\">**</bpt>Record Keyframe<ept id=\"p2\">**</ept> button just above the yellow arrow, as shown in the following figure.","pos":[3004,3188],"source":" To capture the current state of the rectangle, in the **Objects and Timeline** window, tap the **Record Keyframe** button just above the yellow arrow, as shown in the following figure."},{"content":"recording a keyframe","pos":[3192,3212]},{"content":"Now, let's move the rectangle and fade it away.","pos":[3246,3293]},{"content":"To do this, drag the orange/yellow arrow to the 2-second position, and then move your green rectangle slightly to the right.","pos":[3294,3418]},{"content":"Then, in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, in the <bpt id=\"p2\">**</bpt>Appearance<ept id=\"p2\">**</ept> area, change the <bpt id=\"p3\">**</bpt>Opacity<ept id=\"p3\">**</ept> property to <bpt id=\"p4\">**</bpt>0<ept id=\"p4\">**</ept>, as shown in the following figure.","pos":[3419,3558],"source":" Then, in the **Properties** window, in the **Appearance** area, change the **Opacity** property to **0**, as shown in the following figure."},{"content":"To preview the animation, tap the <bpt id=\"p1\">**</bpt>Play<ept id=\"p1\">**</ept> button in the Storyboard panel.","pos":[3559,3633],"source":" To preview the animation, tap the **Play** button in the Storyboard panel."},{"content":"properties windows and play button","pos":[3637,3671]},{"content":"Next, let's bring the rectangle back into view.","pos":[3705,3752]},{"content":"In the <bpt id=\"p1\">**</bpt>Objects and Timeline<ept id=\"p1\">**</ept> window, double-click <bpt id=\"p2\">**</bpt>Storyboard1<ept id=\"p2\">**</ept>.","pos":[3753,3822],"source":" In the **Objects and Timeline** window, double-click **Storyboard1**."},{"content":"Then, in the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, in the <bpt id=\"p2\">**</bpt>Common<ept id=\"p2\">**</ept> area, select <bpt id=\"p3\">**</bpt>AutoReverse<ept id=\"p3\">**</ept>, as shown in the following figure.","pos":[3823,3940],"source":" Then, in the **Properties** window, in the **Common** area, select **AutoReverse**, as shown in the following figure."},{"content":"selecting a storyboard","pos":[3944,3966]},{"pos":[4000,4058],"content":"Finally, click on the <bpt id=\"p1\">**</bpt>Play<ept id=\"p1\">**</ept> button to see what happens.","source":"Finally, click on the **Play** button to see what happens."},{"content":"You can build and run the project by clicking on the green run button at the top of the window (or just press F5).","pos":[4060,4174]},{"content":"If you do this, you'll see your project will indeed build and run, but the green rectangle will stubbornly sit perfectly still, like a toddler denied candy in a supermarket aisle.","pos":[4175,4354]},{"content":"To start the animation, you'll need to add a line of code to the project.","pos":[4355,4428]},{"content":"Here's how.","pos":[4429,4440]},{"content":"Save the project, by opening the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, and selecting <bpt id=\"p2\">**</bpt>Save MainPage.xaml<ept id=\"p2\">**</ept>.","pos":[4442,4527],"source":"Save the project, by opening the **File** menu, and selecting **Save MainPage.xaml**."},{"content":"Return to Visual Studio.","pos":[4528,4552]},{"content":"If Visual Studio displays a dialog box asking whether you want to reload the modified file, select <bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>.","pos":[4553,4660],"source":" If Visual Studio displays a dialog box asking whether you want to reload the modified file, select **Yes**."},{"content":"Double-click the <bpt id=\"p1\">**</bpt>MainPage.xaml.cs<ept id=\"p1\">**</ept> file, which is hidden under <bpt id=\"p2\">**</bpt>MainPage.xaml<ept id=\"p2\">**</ept>, to open it, and add the following code just above the public MainPage() method:","pos":[4661,4825],"source":" Double-click the **MainPage.xaml.cs** file, which is hidden under **MainPage.xaml**, to open it, and add the following code just above the public MainPage() method:"},{"content":"Run the project again, and watch the rectangle animate.","pos":[4971,5026]},{"content":"Hurrah!","pos":[5027,5034]},{"content":"If you open the MainPage.xaml file, in <bpt id=\"p1\">**</bpt>XAML<ept id=\"p1\">**</ept> view, you'll see the XAML code that Blend added for you as you worked in the designer.","pos":[5036,5170],"source":"If you open the MainPage.xaml file, in **XAML** view, you'll see the XAML code that Blend added for you as you worked in the designer."},{"content":"In particular, look at the code in the <ph id=\"ph1\">`&lt;Storyboard&gt;`</ph> and <ph id=\"ph2\">`&lt;Rectangle&gt;`</ph> elements.","pos":[5171,5252],"source":" In particular, look at the code in the `<Storyboard>` and `<Rectangle>` elements."},{"content":"The following code shows an example.","pos":[5253,5289]},{"content":"Ellipses indicate unrelated code omitted for brevity, and line breaks have been added for code readability.)","pos":[5290,5398]},{"content":"You can edit this XAML manually, or return to Blend to continue working on it there.","pos":[7062,7146]},{"content":"Blend makes it fun to create interesting user interfaces, and the ability to animate them using a graphical tool can dramatically speed up development time.","pos":[7147,7303]},{"content":"For more info about animations, see <bpt id=\"p1\">[</bpt>Animations overview<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187350)</ept>.","pos":[7304,7420],"source":" For more info about animations, see [Animations overview](https://msdn.microsoft.com/library/windows/apps/mt187350)."},{"pos":[7422,7597],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  For info about animations for Windows Store apps using JavaScript and HTML, see <bpt id=\"p2\">[</bpt>Animating your UI (HTML)<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh465165)</ept>.","source":"**Note**  For info about animations for Windows Store apps using JavaScript and HTML, see [Animating your UI (HTML)](https://msdn.microsoft.com/library/windows/apps/hh465165)."},{"content":"Next step","pos":[7603,7612]},{"content":"Getting started: What next?","pos":[7615,7642]}],"content":"---\ntitle: Getting started with Animation\nms.assetid: C1C3F5EA-B775-4700-9C45-695E78C16205\ndescription: In this project, we're going to move a rectangle, apply a fade effect, and then bring it back into view.\n---\n\n# Getting started: Animation\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n## Adding animations\n\nIn iOS, you most often create animation effects programmatically. For example, you might use animations provided by the block-based **UIView** class's **animateWithDuration** methods, or the older non-block based methods. Or, you might explicitly use the **CALayer** class to animate layers. Animations in Windows apps can be created programmatically, but they can also be defined declaratively with Extensible Application Markup Language (XAML). You can use Microsoft Visual Studio to edit XAML code directly, but Visual Studio also comes with a tool called **Blend**, which creates XAML code for you as you work with animations in a designer. In fact, Blend allows you to open, design, build, and run complete Visual Studio projects, graphically. The following walkthrough lets you try this out.\n\nCreate a new Universal Windows Platform (UWP) app and name it something like \"SimpleAnimation\". In this project, we're going to move a rectangle, apply a fade effect, and then bring it back into view. Animations in XAML are based on the concept of *storyboards* (not to be confused with iOS storyboards). Storyboards use *keyframes* to animate property changes.\n\nWith your project open, in **Solution Explorer**, right-click the project's name and then select **Open in Blend** or **Design in Blend**, as shown in the following figure. Visual Studio continues to run in the background.\n\n![open in blend menu command](images/ios-to-uwp/vs-open-in-blend.png)\n\nAfter Blend starts, you should see something similar to the following figure.\n\n![blend development environment](images/ios-to-uwp/blend-1.png)\n\nDouble-click on **MainPage.xaml** in the **Solution Explorer** on the left hand side. Next, from the vertical strip of tools on the edge of the central **Design View**, select the **Rectangle** tool, and then draw a rectangle in **Design View**, as shown in the following figure.\n\n![adding a rectangle to design view](images/ios-to-uwp/blend-2.png)\n\nTo make the rectangle green, look in the **Properties** window, and in the **Brush** area, click on the **Solid color brush** button, and then click the **Color eyedropper** icon. Click somewhere in the green band of hues.\n\nTo begin animating the rectangle, in the **Objects and Timeline** window, tap the plus symbol (**New**) button as shown in the following figure, and then tap **OK**.\n\n![adding a storyboard](images/ios-to-uwp/blend-3.png)\n\nA storyboard appears in the **Objects and Timeline** window (you may need to resize the view to see it properly). The **Design View** display changes to show that **Storyboard1 timeline recording is on**. To capture the current state of the rectangle, in the **Objects and Timeline** window, tap the **Record Keyframe** button just above the yellow arrow, as shown in the following figure.\n\n![recording a keyframe](images/ios-to-uwp/blend-4.png)\n\nNow, let's move the rectangle and fade it away. To do this, drag the orange/yellow arrow to the 2-second position, and then move your green rectangle slightly to the right. Then, in the **Properties** window, in the **Appearance** area, change the **Opacity** property to **0**, as shown in the following figure. To preview the animation, tap the **Play** button in the Storyboard panel.\n\n![properties windows and play button](images/ios-to-uwp/blend-5.png)\n\nNext, let's bring the rectangle back into view. In the **Objects and Timeline** window, double-click **Storyboard1**. Then, in the **Properties** window, in the **Common** area, select **AutoReverse**, as shown in the following figure.\n\n![selecting a storyboard](images/ios-to-uwp/blend-6.png)\n\nFinally, click on the **Play** button to see what happens.\n\nYou can build and run the project by clicking on the green run button at the top of the window (or just press F5). If you do this, you'll see your project will indeed build and run, but the green rectangle will stubbornly sit perfectly still, like a toddler denied candy in a supermarket aisle. To start the animation, you'll need to add a line of code to the project. Here's how.\n\nSave the project, by opening the **File** menu, and selecting **Save MainPage.xaml**. Return to Visual Studio. If Visual Studio displays a dialog box asking whether you want to reload the modified file, select **Yes**. Double-click the **MainPage.xaml.cs** file, which is hidden under **MainPage.xaml**, to open it, and add the following code just above the public MainPage() method:\n\n```csharp\nprotected override void OnNavigatedTo(NavigationEventArgs e)\n{\n    // Add the following line of code.\n    Storyboard1.Begin();\n}\n```\n\nRun the project again, and watch the rectangle animate. Hurrah!\n\nIf you open the MainPage.xaml file, in **XAML** view, you'll see the XAML code that Blend added for you as you worked in the designer. In particular, look at the code in the `<Storyboard>` and `<Rectangle>` elements. The following code shows an example. Ellipses indicate unrelated code omitted for brevity, and line breaks have been added for code readability.)\n\n```xaml\n...\n<Storyboard \n        x:Name=\"Storyboard1\" \n        AutoReverse=\"True\">\n    <DoubleAnimationUsingKeyFrames \n            Storyboard.TargetProperty=\"(UIElement.RenderTransform).(CompositeTransform.TranslateX)\"\n            Storyboard.TargetName=\"rectangle\">\n        <EasingDoubleKeyFrame \n                KeyTime=\"0\" \n                Value=\"0\"/>\n        <EasingDoubleKeyFrame \n                KeyTime=\"0:0:2\" \n                Value=\"185.075\"/>\n    </DoubleAnimationUsingKeyFrames>\n    <DoubleAnimationUsingKeyFrames \n            Storyboard.TargetProperty=\"(UIElement.RenderTransform).(CompositeTransform.TranslateY)\" \n            Storyboard.TargetName=\"rectangle\">\n        <EasingDoubleKeyFrame \n                KeyTime=\"0\" \n                Value=\"0\"/>\n        <EasingDoubleKeyFrame \n                KeyTime=\"0:0:2\" \n                Value=\"2.985\"/>\n    </DoubleAnimationUsingKeyFrames>\n    <DoubleAnimationUsingKeyFrames \n            Storyboard.TargetProperty=\"(UIElement.Opacity)\" \n            Storyboard.TargetName=\"rectangle\">\n        <EasingDoubleKeyFrame \n                KeyTime=\"0\" \n                Value=\"1\"/>\n        <EasingDoubleKeyFrame \n                KeyTime=\"0:0:2\"\n                Value=\"0\"/>\n    </DoubleAnimationUsingKeyFrames>\n</Storyboard>\n...\n<Rectangle \n        x:Name=\"rectangle\" \n        Fill=\"#FF00FF63\" \n        HorizontalAlignment=\"Left\" \n        Height=\"122\" \n        Margin=\"151,312,0,0\" \n        Stroke=\"Black\" \n        VerticalAlignment=\"Top\" \n        Width=\"239\" \n        RenderTransformOrigin=\"0.5,0.5\">\n    <Rectangle.RenderTransform>\n        <CompositeTransform/>\n    </Rectangle.RenderTransform>\n</Rectangle>\n...\n```\n\nYou can edit this XAML manually, or return to Blend to continue working on it there. Blend makes it fun to create interesting user interfaces, and the ability to animate them using a graphical tool can dramatically speed up development time. For more info about animations, see [Animations overview](https://msdn.microsoft.com/library/windows/apps/mt187350).\n\n**Note**  For info about animations for Windows Store apps using JavaScript and HTML, see [Animating your UI (HTML)](https://msdn.microsoft.com/library/windows/apps/hh465165).\n\n### Next step\n\n[Getting started: What next?](getting-started-what-next.md)\n"}