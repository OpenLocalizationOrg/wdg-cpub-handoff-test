{"nodes":[{"pos":[17,146],"content":"Identify the input devices connected to a Universal Windows Platform (UWP) device and identify their capabilities and attributes.","needQuote":true,"needEscape":true,"nodes":[{"content":"Identify the input devices connected to a Universal Windows Platform (UWP) device and identify their capabilities and attributes.","pos":[0,129]}]},{"pos":[154,176],"content":"Identify input devices","needQuote":true,"needEscape":true,"nodes":[{"content":"Identify input devices","pos":[0,22]}]},{"content":"Identify input devices","pos":[284,306]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[309,347]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[348,443],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[448,462]},{"content":"Windows.Devices.Input","pos":[473,494]},{"content":"Windows.UI.Input","pos":[563,579]},{"content":"Windows.UI.Xaml.Input","pos":[648,669]},{"content":"Identify the input devices connected to a Universal Windows Platform (UWP) device and identify their capabilities and attributes.","pos":[732,861]},{"pos":[999,1024],"content":"Retrieve mouse properties"},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Input<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225648)</ept> namespace contains the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>MouseCapabilities<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225626)</ept> class used to retrieve the properties exposed by one or more connected mice.","pos":[1027,1298],"source":"The [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**MouseCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225626) class used to retrieve the properties exposed by one or more connected mice."},{"content":"Just create a new <bpt id=\"p1\">**</bpt>MouseCapabilities<ept id=\"p1\">**</ept> object and get the properties you're interested in.","pos":[1299,1390],"source":" Just create a new **MouseCapabilities** object and get the properties you're interested in."},{"pos":[1392,1649],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The values returned by the properties discussed here are based on all detected mice: Boolean properties return non-zero if at least one mouse supports a specific capability, and numeric properties return the maximum value exposed by any one mouse.","source":"**Note**  The values returned by the properties discussed here are based on all detected mice: Boolean properties return non-zero if at least one mouse supports a specific capability, and numeric properties return the maximum value exposed by any one mouse."},{"pos":[1654,1827],"content":"The following code uses a series of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> elements to display the individual mouse properties and values.","source":"The following code uses a series of [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) elements to display the individual mouse properties and values."},{"pos":[2500,2528],"content":"Retrieve keyboard properties"},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Input<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225648)</ept> namespace contains the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>KeyboardCapabilities<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225623)</ept> class used to retrieve whether a keyboard is connected.","pos":[2531,2784],"source":"The [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**KeyboardCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225623) class used to retrieve whether a keyboard is connected."},{"content":"Just create a new <bpt id=\"p1\">**</bpt>KeyboardCapabilities<ept id=\"p1\">**</ept> object and get the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>KeyboardPresent<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br225625)</ept> property.","pos":[2785,2936],"source":" Just create a new **KeyboardCapabilities** object and get the [**KeyboardPresent**](https://msdn.microsoft.com/library/windows/apps/br225625) property."},{"pos":[2938,3089],"content":"The following code uses a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> element to display the keyboard property and value.","source":"The following code uses a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) element to display the keyboard property and value."},{"pos":[3465,3490],"content":"Retrieve touch properties"},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Input<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225648)</ept> namespace contains the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>TouchCapabilities<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225644)</ept> class used to retrieve whether any touch digitizers are connected.","pos":[3493,3754],"source":"The [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**TouchCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225644) class used to retrieve whether any touch digitizers are connected."},{"content":"Just create a new <bpt id=\"p1\">**</bpt>TouchCapabilities<ept id=\"p1\">**</ept> object and get the properties you're interested in.","pos":[3755,3846],"source":" Just create a new **TouchCapabilities** object and get the properties you're interested in."},{"pos":[3848,4125],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The values returned by the properties discussed here are based on all detected touch digitizers: Boolean properties return non-zero if at least one digitizer supports a specific capability, and numeric properties return the maximum value exposed by any one digitizer.","source":"**Note**  The values returned by the properties discussed here are based on all detected touch digitizers: Boolean properties return non-zero if at least one digitizer supports a specific capability, and numeric properties return the maximum value exposed by any one digitizer."},{"pos":[4130,4292],"content":"The following code uses a series of <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TextBlock<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209652)</ept> elements to display the touch properties and values.","source":"The following code uses a series of [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) elements to display the touch properties and values."},{"pos":[4712,4739],"content":"Retrieve pointer properties"},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Input<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br225648)</ept> namespace contains the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PointerDevice<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br225633)</ept> class used to retrieve whether any detected devices support pointer input (touch, touchpad, mouse, or pen).","pos":[4742,5040],"source":"The [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**PointerDevice**](https://msdn.microsoft.com/library/windows/apps/br225633) class used to retrieve whether any detected devices support pointer input (touch, touchpad, mouse, or pen)."},{"content":"Just create a new <bpt id=\"p1\">**</bpt>PointerDevice<ept id=\"p1\">**</ept> object and get the properties you're interested in.","pos":[5041,5128],"source":" Just create a new **PointerDevice** object and get the properties you're interested in."},{"pos":[5130,5408],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The values returned by the properties discussed here are based on all detected pointer devices: Boolean properties return non-zero if at least one device supports a specific capability, and numeric properties return the maximum value exposed by any one pointer device.","source":"**Note**  The values returned by the properties discussed here are based on all detected pointer devices: Boolean properties return non-zero if at least one device supports a specific capability, and numeric properties return the maximum value exposed by any one pointer device."},{"content":"The following code uses a table to display the properties and values for each pointer device.","pos":[5413,5506]},{"pos":[9062,9078],"content":"Related articles"},{"content":"Samples","pos":[9083,9090]},{"content":"Basic input sample","pos":[9096,9114]},{"content":"Low latency input sample","pos":[9168,9192]},{"pos":[9245,9344],"content":"<bpt id=\"p1\">[</bpt>User interaction mode sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=619894)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>Archive samples<ept id=\"p2\">**</ept>","source":"[User interaction mode sample](http://go.microsoft.com/fwlink/p/?LinkID=619894)\n**Archive samples**"},{"content":"Input: Device capabilities sample","pos":[9348,9381]}],"content":"---\nDescription: Identify the input devices connected to a Universal Windows Platform (UWP) device and identify their capabilities and attributes.\ntitle: Identify input devices\nms.assetid: B2E93FBF-C508-44D9-BA46-ECFDAA8746F4\nlabel: Identify input devices\ntemplate: detail.hbs\n---\n\n# Identify input devices\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648)\n-   [**Windows.UI.Input**](https://msdn.microsoft.com/library/windows/apps/br208383)\n-   [**Windows.UI.Xaml.Input**](https://msdn.microsoft.com/library/windows/apps/br242084)\n\nIdentify the input devices connected to a Universal Windows Platform (UWP) device and identify their capabilities and attributes.\n\n\n## <span id=\"Retrieve_mouse_properties\"></span><span id=\"retrieve_mouse_properties\"></span><span id=\"RETRIEVE_MOUSE_PROPERTIES\"></span>Retrieve mouse properties\n\n\nThe [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**MouseCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225626) class used to retrieve the properties exposed by one or more connected mice. Just create a new **MouseCapabilities** object and get the properties you're interested in.\n\n**Note**  The values returned by the properties discussed here are based on all detected mice: Boolean properties return non-zero if at least one mouse supports a specific capability, and numeric properties return the maximum value exposed by any one mouse.\n\n \n\nThe following code uses a series of [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) elements to display the individual mouse properties and values.\n\n```CSharp\nprivate void GetMouseProperties()\n{\n    MouseCapabilities mouseCapabilities = new Windows.Devices.Input.MouseCapabilities();\n    MousePresent.Text = mouseCapabilities.MousePresent != 0 ? \"Yes\" : \"No\";\n    VertWheel.Text = mouseCapabilities.VerticalWheelPresent != 0 ? \"Yes\" : \"No\";\n    HorzWheel.Text = mouseCapabilities.HorizontalWheelPresent != 0 ? \"Yes\" : \"No\";\n    SwappedButtons.Text = mouseCapabilities.SwapButtons != 0 ? \"Yes\" : \"No\";\n    NumButtons.Text = mouseCapabilities.NumberOfButtons.ToString();\n}\n```\n\n## <span id=\"Retrieve_keyboard_properties\"></span><span id=\"retrieve_keyboard_properties\"></span><span id=\"RETRIEVE_KEYBOARD_PROPERTIES\"></span>Retrieve keyboard properties\n\n\nThe [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**KeyboardCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225623) class used to retrieve whether a keyboard is connected. Just create a new **KeyboardCapabilities** object and get the [**KeyboardPresent**](https://msdn.microsoft.com/library/windows/apps/br225625) property.\n\nThe following code uses a [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) element to display the keyboard property and value.\n\n```CSharp\nprivate void GetKeyboardProperties()\n{\n    KeyboardCapabilities keyboardCapabilities = new Windows.Devices.Input.KeyboardCapabilities();\n    KeyboardPresent.Text = keyboardCapabilities.KeyboardPresent != 0 ? \"Yes\" : \"No\";\n}\n```\n\n## <span id=\"Retrieve_touch_properties\"></span><span id=\"retrieve_touch_properties\"></span><span id=\"RETRIEVE_TOUCH_PROPERTIES\"></span>Retrieve touch properties\n\n\nThe [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**TouchCapabilities**](https://msdn.microsoft.com/library/windows/apps/br225644) class used to retrieve whether any touch digitizers are connected. Just create a new **TouchCapabilities** object and get the properties you're interested in.\n\n**Note**  The values returned by the properties discussed here are based on all detected touch digitizers: Boolean properties return non-zero if at least one digitizer supports a specific capability, and numeric properties return the maximum value exposed by any one digitizer.\n\n \n\nThe following code uses a series of [**TextBlock**](https://msdn.microsoft.com/library/windows/apps/br209652) elements to display the touch properties and values.\n\n```CSharp\nprivate void GetTouchProperties()\n{\n    TouchCapabilities touchCapabilities = new Windows.Devices.Input.TouchCapabilities();\n    TouchPresent.Text = touchCapabilities.TouchPresent != 0 ? \"Yes\" : \"No\";\n    Contacts.Text = touchCapabilities.Contacts.ToString();\n}\n```\n\n## <span id=\"Retrieve_pointer_properties\"></span><span id=\"retrieve_pointer_properties\"></span><span id=\"RETRIEVE_POINTER_PROPERTIES\"></span>Retrieve pointer properties\n\n\nThe [**Windows.Devices.Input**](https://msdn.microsoft.com/library/windows/apps/br225648) namespace contains the [**PointerDevice**](https://msdn.microsoft.com/library/windows/apps/br225633) class used to retrieve whether any detected devices support pointer input (touch, touchpad, mouse, or pen). Just create a new **PointerDevice** object and get the properties you're interested in.\n\n**Note**  The values returned by the properties discussed here are based on all detected pointer devices: Boolean properties return non-zero if at least one device supports a specific capability, and numeric properties return the maximum value exposed by any one pointer device.\n\n \n\nThe following code uses a table to display the properties and values for each pointer device.\n\n```CSharp\nprivate void GetPointerDevices()\n{\n    IReadOnlyList<PointerDevice> pointerDevices = Windows.Devices.Input.PointerDevice.GetPointerDevices();\n    int gridRow = 0;\n    int gridColumn = 0;\n\n    for (int i = 0; i < pointerDevices.Count; i++)\n    {\n        // Pointer device type.\n        TextBlock textBlock1 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock1);\n        textBlock1.Text = (i + 1).ToString() + \" Pointer Device Type:\";\n        Grid.SetRow(textBlock1, gridRow);\n        Grid.SetColumn(textBlock1, gridColumn);\n\n        TextBlock textBlock2 = new TextBlock();\n        textBlock2.Text = pointerDevices[i].PointerDeviceType.ToString();\n        Grid_PointerProps.Children.Add(textBlock2);\n        Grid.SetRow(textBlock2, gridRow++);\n        Grid.SetColumn(textBlock2, gridColumn + 1);\n\n        // Is external?\n        TextBlock textBlock3 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock3);\n        textBlock3.Text = (i + 1).ToString() + \" Is External?\";\n        Grid.SetRow(textBlock3, gridRow);\n        Grid.SetColumn(textBlock3, gridColumn);\n\n        TextBlock textBlock4 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock4);\n        textBlock4.Text = pointerDevices[i].IsIntegrated.ToString();\n        Grid.SetRow(textBlock4, gridRow++);\n        Grid.SetColumn(textBlock4, gridColumn + 1);\n\n        // Maximum contacts.\n        TextBlock textBlock5 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock5);\n        textBlock5.Text = (i + 1).ToString() + \" Max Contacts:\";\n        Grid.SetRow(textBlock5, gridRow);\n        Grid.SetColumn(textBlock5, gridColumn);\n\n        TextBlock textBlock6 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock6);\n        textBlock6.Text = pointerDevices[i].MaxContacts.ToString();\n        Grid.SetRow(textBlock6, gridRow++);\n        Grid.SetColumn(textBlock6, gridColumn + 1);\n\n        // Physical device rectangle.\n        TextBlock textBlock7 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock7);\n        textBlock7.Text = (i + 1).ToString() + \" Physical Device Rect:\";\n        Grid.SetRow(textBlock7, gridRow);\n        Grid.SetColumn(textBlock7, gridColumn);\n\n        TextBlock textBlock8 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock8);\n        textBlock8.Text = pointerDevices[i].PhysicalDeviceRect.X.ToString() + \",\" +\n            pointerDevices[i].PhysicalDeviceRect.Y.ToString() + \",\" +\n            pointerDevices[i].PhysicalDeviceRect.Width.ToString() + \",\" +\n            pointerDevices[i].PhysicalDeviceRect.Height.ToString();\n        Grid.SetRow(textBlock8, gridRow++);\n        Grid.SetColumn(textBlock8, gridColumn + 1);\n\n        // Screen rectangle.\n        TextBlock textBlock9 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock9);\n        textBlock9.Text = (i + 1).ToString() + \" Screen Rect:\";\n        Grid.SetRow(textBlock9, gridRow);\n        Grid.SetColumn(textBlock9, gridColumn);\n\n        TextBlock textBlock10 = new TextBlock();\n        Grid_PointerProps.Children.Add(textBlock10);\n        textBlock10.Text = pointerDevices[i].ScreenRect.X.ToString() + \",\" +\n            pointerDevices[i].ScreenRect.Y.ToString() + \",\" +\n            pointerDevices[i].ScreenRect.Width.ToString() + \",\" +\n            pointerDevices[i].ScreenRect.Height.ToString();\n        Grid.SetRow(textBlock10, gridRow++);\n        Grid.SetColumn(textBlock10, gridColumn + 1);\n\n        gridColumn += 2;\n        gridRow = 0;\n    }\n```\n\n## <span id=\"related_topics\"></span>Related articles\n\n\n**Samples**\n* [Basic input sample](http://go.microsoft.com/fwlink/p/?LinkID=620302)\n* [Low latency input sample](http://go.microsoft.com/fwlink/p/?LinkID=620304)\n* [User interaction mode sample](http://go.microsoft.com/fwlink/p/?LinkID=619894)\n**Archive samples**\n* [Input: Device capabilities sample](http://go.microsoft.com/fwlink/p/?linkid=231530)\n \n\n \n\n\n\n\n"}