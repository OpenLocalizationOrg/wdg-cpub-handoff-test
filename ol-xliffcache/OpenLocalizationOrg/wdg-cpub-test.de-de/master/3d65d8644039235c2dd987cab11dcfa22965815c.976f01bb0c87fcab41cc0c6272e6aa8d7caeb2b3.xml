{"nodes":[{"pos":[17,66],"content":"Behind your UI are your business and data layers.","needQuote":true,"needEscape":true,"nodes":[{"content":"Behind your UI are your business and data layers.","pos":[0,49]}]},{"pos":[74,139],"content":"Porting Windows Phone Silverlight business and data layers to UWP","needQuote":true,"needEscape":true,"nodes":[{"content":"Porting Windows Phone Silverlight business and data layers to UWP","pos":[0,65]}]},{"content":"Porting Windows Phone Silverlight business and data layers to UWP","pos":[197,262]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[264,302]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[303,398],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"pos":[400,498],"content":"The previous topic was <bpt id=\"p1\">[</bpt>Porting for I/O, device, and app model<ept id=\"p1\">](wpsl-to-uwp-input-and-sensors.md)</ept>.","source":"The previous topic was [Porting for I/O, device, and app model](wpsl-to-uwp-input-and-sensors.md)."},{"content":"Behind your UI are your business and data layers.","pos":[500,549]},{"content":"The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).","pos":[550,730]},{"content":"The vast majority of those are <bpt id=\"p1\">[</bpt>available to a Universal Windows Platform (UWP) app<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so you can expect to be able to port much of this code without change.","pos":[731,945],"source":" The vast majority of those are [available to a Universal Windows Platform (UWP) app](https://msdn.microsoft.com/library/windows/apps/br211369), so you can expect to be able to port much of this code without change."},{"content":"Asynchronous methods","pos":[950,970]},{"content":"One of the priorities of the Universal Windows Platform (UWP) is to enable you to build apps that are truly, and consistently, responsive.","pos":[972,1110]},{"content":"Animations are always smooth, and touch interactions such as panning and swiping are instantaneous and free of lag, making it feel like the UI is glued to your finger.","pos":[1111,1278]},{"content":"To achieve this, any UWP API that can't guarantee to complete within 50ms has been made asynchronous and its name suffixed with <bpt id=\"p1\">**</bpt>Async<ept id=\"p1\">**</ept>.","pos":[1279,1417],"source":" To achieve this, any UWP API that can't guarantee to complete within 50ms has been made asynchronous and its name suffixed with **Async**."},{"content":"Your UI thread will return immediately from calling an <bpt id=\"p1\">**</bpt>Async<ept id=\"p1\">**</ept> method, and the work will take place on another thread.","pos":[1418,1538],"source":" Your UI thread will return immediately from calling an **Async** method, and the work will take place on another thread."},{"content":"Consuming an <bpt id=\"p1\">**</bpt>Async<ept id=\"p1\">**</ept> method is made very easy, syntactically, using the C# <bpt id=\"p2\">**</bpt>await<ept id=\"p2\">**</ept> operator, JavaScript promise objects, and C++ continuations.","pos":[1539,1686],"source":" Consuming an **Async** method is made very easy, syntactically, using the C# **await** operator, JavaScript promise objects, and C++ continuations."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Asynchronous programming<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187335)</ept>.","pos":[1687,1791],"source":" For more info, see [Asynchronous programming](https://msdn.microsoft.com/library/windows/apps/mt187335)."},{"content":"Background processing","pos":[1796,1817]},{"content":"A Windows Phone Silverlight app can use a managed <bpt id=\"p1\">**</bpt>ScheduledTaskAgent<ept id=\"p1\">**</ept> object to perform a task while the app is not in the foreground.","pos":[1819,1956],"source":"A Windows Phone Silverlight app can use a managed **ScheduledTaskAgent** object to perform a task while the app is not in the foreground."},{"content":"A UWP app uses the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskBuilder<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> class to create and register a background task in a similar way.","pos":[1957,2126],"source":" A UWP app uses the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) class to create and register a background task in a similar way."},{"content":"You define a class that implements the work of your background task.","pos":[2127,2195]},{"content":"The system runs your background task periodically, calling the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Run<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224811)</ept> method of your class to execute the work.","pos":[2196,2368],"source":" The system runs your background task periodically, calling the [**Run**](https://msdn.microsoft.com/library/windows/apps/br224811) method of your class to execute the work."},{"content":"In a UWP app, remember to set the <bpt id=\"p1\">**</bpt>Background Tasks<ept id=\"p1\">**</ept> declaration in the app package manifest.","pos":[2369,2464],"source":" In a UWP app, remember to set the **Background Tasks** declaration in the app package manifest."},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Support your app with background tasks<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt299103)</ept>.","pos":[2465,2583],"source":" For more info, see [Support your app with background tasks](https://msdn.microsoft.com/library/windows/apps/mt299103)."},{"content":"To transfer large data files in the background, a Windows Phone Silverlight app uses the <bpt id=\"p1\">**</bpt>BackgroundTransferService<ept id=\"p1\">**</ept> class.","pos":[2585,2710],"source":"To transfer large data files in the background, a Windows Phone Silverlight app uses the **BackgroundTransferService** class."},{"content":"A UWP app uses APIs in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Networking.BackgroundTransfer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207242)</ept> namespace to do this.","pos":[2711,2861],"source":" A UWP app uses APIs in the [**Windows.Networking.BackgroundTransfer**](https://msdn.microsoft.com/library/windows/apps/br207242) namespace to do this."},{"content":"The features use a similar pattern to initiate transfers, but the new API has improved capabilities and performance.","pos":[2862,2978]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Transferring data in the background<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh452975)</ept>.","pos":[2979,3099],"source":" For more info, see [Transferring data in the background](https://msdn.microsoft.com/library/windows/apps/xaml/hh452975)."},{"content":"A Windows Phone Silverlight app uses the managed classes in the <bpt id=\"p1\">**</bpt>Microsoft.Phone.BackgroundAudio<ept id=\"p1\">**</ept> namespace to play audio while the app is not in the foreground.","pos":[3101,3264],"source":"A Windows Phone Silverlight app uses the managed classes in the **Microsoft.Phone.BackgroundAudio** namespace to play audio while the app is not in the foreground."},{"content":"The UWP uses the Windows Phone Store app model, see <bpt id=\"p1\">[</bpt>Background Audio<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt282140)</ept> and the <bpt id=\"p2\">[</bpt>Background audio<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619997)</ept> sample.","pos":[3265,3477],"source":" The UWP uses the Windows Phone Store app model, see [Background Audio](https://msdn.microsoft.com/library/windows/apps/mt282140) and the [Background audio](http://go.microsoft.com/fwlink/p/?linkid=619997) sample."},{"content":"Cloud services, networking, and databases","pos":[3482,3523]},{"content":"Hosting data and app services in the cloud is possible using Azure.","pos":[3525,3592]},{"content":"See <bpt id=\"p1\">[</bpt>Getting Started with Mobile Services<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=403138)</ept>.","pos":[3593,3685],"source":" See [Getting Started with Mobile Services](http://go.microsoft.com/fwlink/p/?LinkID=403138)."},{"content":"For solutions that require both online and offline data see: <bpt id=\"p1\">[</bpt>Using offline data sync in Mobile Services<ept id=\"p1\">](http://azure.microsoft.com/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/)</ept>.","pos":[3686,3906],"source":" For solutions that require both online and offline data see: [Using offline data sync in Mobile Services](http://azure.microsoft.com/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/)."},{"content":"The UWP has partial support for the <bpt id=\"p1\">**</bpt>System.Net.HttpWebRequest<ept id=\"p1\">**</ept> class, but the <bpt id=\"p2\">**</bpt>System.Net.WebClient<ept id=\"p2\">**</ept> class is not supported.","pos":[3908,4037],"source":"The UWP has partial support for the **System.Net.HttpWebRequest** class, but the **System.Net.WebClient** class is not supported."},{"content":"The recommended, forward-looking alternative is the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Web.Http.HttpClient<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn298639)</ept> class (or <bpt id=\"p3\">[</bpt>System.Net.Http.HttpClient<ept id=\"p3\">](https://msdn.microsoft.com/library/system.net.http.httpclient(v=vs.118).aspx)</ept> if you need your code to be portable to other platforms that support .NET).","pos":[4038,4374],"source":" The recommended, forward-looking alternative is the [**Windows.Web.Http.HttpClient**](https://msdn.microsoft.com/library/windows/apps/dn298639) class (or [System.Net.Http.HttpClient](https://msdn.microsoft.com/library/system.net.http.httpclient(v=vs.118).aspx) if you need your code to be portable to other platforms that support .NET)."},{"content":"These APIs use <bpt id=\"p1\">[</bpt>System.Net.Http.HttpRequestMessage<ept id=\"p1\">](https://msdn.microsoft.com/library/system.net.http.httprequestmessage.aspx)</ept> to represent an HTTP request.","pos":[4375,4532],"source":" These APIs use [System.Net.Http.HttpRequestMessage](https://msdn.microsoft.com/library/system.net.http.httprequestmessage.aspx) to represent an HTTP request."},{"content":"UWP apps do not currently include built-in support for data-intensive scenarios such as line of business (LOB) scenarios.","pos":[4534,4655]},{"content":"However, you can make use SQLite for local transactional database services.","pos":[4656,4731]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>SQLite<ept id=\"p1\">](https://visualstudiogallery.msdn.microsoft.com/4913e7d5-96c9-4dde-a1a1-69820d615936)</ept>.","pos":[4732,4845],"source":" For more info, see [SQLite](https://visualstudiogallery.msdn.microsoft.com/4913e7d5-96c9-4dde-a1a1-69820d615936)."},{"content":"Pass absolute URIs, not relative URIs, to Windows Runtime types.","pos":[4847,4911]},{"content":"See <bpt id=\"p1\">[</bpt>Passing a URI to the Windows Runtime<ept id=\"p1\">](https://msdn.microsoft.com/library/hh763341.aspx)</ept>.","pos":[4912,5005],"source":" See [Passing a URI to the Windows Runtime](https://msdn.microsoft.com/library/hh763341.aspx)."},{"content":"Launchers and Choosers","pos":[5010,5032]},{"content":"With Launchers and Choosers (found in the <bpt id=\"p1\">**</bpt>Microsoft.Phone.Tasks<ept id=\"p1\">**</ept> namespace), a Windows Phone Silverlight app can interact with the operating system to perform common operations such as composing an email, choosing a photo, or sharing certain kinds of data with another app.","pos":[5034,5310],"source":"With Launchers and Choosers (found in the **Microsoft.Phone.Tasks** namespace), a Windows Phone Silverlight app can interact with the operating system to perform common operations such as composing an email, choosing a photo, or sharing certain kinds of data with another app."},{"content":"Search for <bpt id=\"p1\">**</bpt>Microsoft.Phone.Tasks<ept id=\"p1\">**</ept> in the topic <bpt id=\"p2\">[</bpt>Windows Phone Silverlight to Windows 10 namespace and class mappings<ept id=\"p2\">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept> to find the equivalent UWP type.","pos":[5311,5509],"source":" Search for **Microsoft.Phone.Tasks** in the topic [Windows Phone Silverlight to Windows 10 namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md) to find the equivalent UWP type."},{"content":"These range from similar mechanisms, called launchers and pickers, to implementing a contract for sharing data between apps.","pos":[5510,5634]},{"content":"A Windows Phone Silverlight app can be put into a dormant state or even tombstoned when using, for example, the photo Chooser task.","pos":[5636,5767]},{"content":"A UWP app remains active and running while using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FileOpenPicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept> class.","pos":[5768,5906],"source":" A UWP app remains active and running while using the [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847) class."},{"content":"Monetization (trial mode and in-app purchases)","pos":[5911,5957]},{"content":"A Windows Phone Silverlight app can use the UWP<bpt id=\"p1\"> [</bpt><bpt id=\"p2\">**</bpt>CurrentApp<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh779765)</ept> class for most of its trial mode and in-app purchase functionality, so that code doesn't need to be ported.","pos":[5959,6189],"source":"A Windows Phone Silverlight app can use the UWP [**CurrentApp**](https://msdn.microsoft.com/library/windows/apps/hh779765) class for most of its trial mode and in-app purchase functionality, so that code doesn't need to be ported."},{"content":"But, a Windows Phone Silverlight app calls <bpt id=\"p1\">**</bpt>MarketplaceDetailTask.Show<ept id=\"p1\">**</ept> to offer the app for purchase:","pos":[6190,6294],"source":" But, a Windows Phone Silverlight app calls **MarketplaceDetailTask.Show** to offer the app for purchase:"},{"pos":[6548,6674],"content":"Port that code to call the UWP<bpt id=\"p1\"> [</bpt><bpt id=\"p2\">**</bpt>RequestAppPurchaseAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh967813)</ept> method:","source":"Port that code to call the UWP [**RequestAppPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/hh967813) method:"},{"pos":[6820,7053],"content":"If you have code that simulates your app purchase and in-app purchase features for testing purposes, then you can port that to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CurrentAppSimulator<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh779766)</ept> class instead.","source":"If you have code that simulates your app purchase and in-app purchase features for testing purposes, then you can port that to use the [**CurrentAppSimulator**](https://msdn.microsoft.com/library/windows/apps/hh779766) class instead."},{"content":"Notifications for tile or toast updates","pos":[7058,7097]},{"content":"Notifications are an extension of the push notification model for Windows Phone Silverlight apps.","pos":[7099,7196]},{"content":"When you receive a notification from the Windows Push Notification Service (WNS), you can surface the info to the UI with a tile update or with a toast.","pos":[7197,7349]},{"content":"For porting the UI side of your notification features, see <bpt id=\"p1\">[</bpt>Tiles and toasts<ept id=\"p1\">](w8x-to-uwp-porting-xaml-and-ui.md#tiles-and-toasts)</ept>.","pos":[7350,7480],"source":" For porting the UI side of your notification features, see [Tiles and toasts](w8x-to-uwp-porting-xaml-and-ui.md#tiles-and-toasts)."},{"pos":[7482,7638],"content":"For more details on the use of notifications in a UWP app, see <bpt id=\"p1\">[</bpt>Sending toast notifications<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868266)</ept>.","source":"For more details on the use of notifications in a UWP app, see [Sending toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868266)."},{"pos":[7640,7900],"content":"For info and tutorials on using tiles, toasts, badges, banners, and notifications in a Windows Runtime app using C++, C#, or Visual Basic, see <bpt id=\"p1\">[</bpt>Working with tiles, badges, and toast notifications<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)</ept>.","source":"For info and tutorials on using tiles, toasts, badges, banners, and notifications in a Windows Runtime app using C++, C#, or Visual Basic, see [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259)."},{"content":"Storage (file access)","pos":[7905,7926]},{"content":"Windows Phone Silverlight code that stores app settings as key-value pairs in isolated storage is easily ported.","pos":[7928,8040]},{"content":"Here is a before-and-after example, first the Windows Phone Silverlight version:","pos":[8041,8121]},{"content":"And the UWP equivalent:","pos":[8407,8430]},{"content":"Although a subset of the <bpt id=\"p1\">**</bpt>Windows.Storage<ept id=\"p1\">**</ept> namespace is available to them, many Windows Phone Silverlight apps perform file i/o with the <bpt id=\"p2\">**</bpt>IsolatedStorageFile<ept id=\"p2\">**</ept> class because it has been supported for longer.","pos":[8712,8922],"source":"Although a subset of the **Windows.Storage** namespace is available to them, many Windows Phone Silverlight apps perform file i/o with the **IsolatedStorageFile** class because it has been supported for longer."},{"content":"Assuming that <bpt id=\"p1\">**</bpt>IsolatedStorageFile<ept id=\"p1\">**</ept> is being used, here's a before-and-after example of writing and reading a file, first the Windows Phone Silverlight version:","pos":[8923,9085],"source":" Assuming that **IsolatedStorageFile** is being used, here's a before-and-after example of writing and reading a file, first the Windows Phone Silverlight version:"},{"content":"And the same functionality using the UWP:","pos":[9582,9623]},{"content":"A Windows Phone Silverlight app has read-only access to the optional SD card.","pos":[10095,10172]},{"content":"A UWP app has read-write access to the SD card.","pos":[10173,10220]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Access the SD card<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt188699)</ept>.","pos":[10221,10319],"source":" For more info, see [Access the SD card](https://msdn.microsoft.com/library/windows/apps/mt188699)."},{"pos":[10321,10518],"content":"For info about accessing photos, music, and video files in a UWP app, see <bpt id=\"p1\">[</bpt>Files and folders in the Music, Pictures, and Videos libraries<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt188703)</ept>.","source":"For info about accessing photos, music, and video files in a UWP app, see [Files and folders in the Music, Pictures, and Videos libraries](https://msdn.microsoft.com/library/windows/apps/mt188703)."},{"pos":[10520,10629],"content":"For more info, see <bpt id=\"p1\">[</bpt>Files, folders, and libraries<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt185399)</ept>.","source":"For more info, see [Files, folders, and libraries](https://msdn.microsoft.com/library/windows/apps/mt185399)."},{"pos":[10631,10718],"content":"The next topic is <bpt id=\"p1\">[</bpt>Porting for form factor and UX<ept id=\"p1\">](wpsl-to-uwp-form-factors-and-ux.md)</ept>.","source":"The next topic is [Porting for form factor and UX](wpsl-to-uwp-form-factors-and-ux.md)."},{"content":"Related topics","pos":[10723,10737]},{"content":"Namespace and class mappings","pos":[10742,10770]}],"content":"---\ndescription: Behind your UI are your business and data layers.\ntitle: Porting Windows Phone Silverlight business and data layers to UWP\nms.assetid: 27c66759-2b35-41f5-9f7a-ceb97f4a0e3f\n---\n\n#  Porting Windows Phone Silverlight business and data layers to UWP\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nThe previous topic was [Porting for I/O, device, and app model](wpsl-to-uwp-input-and-sensors.md).\n\nBehind your UI are your business and data layers. The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access). The vast majority of those are [available to a Universal Windows Platform (UWP) app](https://msdn.microsoft.com/library/windows/apps/br211369), so you can expect to be able to port much of this code without change.\n\n## Asynchronous methods\n\nOne of the priorities of the Universal Windows Platform (UWP) is to enable you to build apps that are truly, and consistently, responsive. Animations are always smooth, and touch interactions such as panning and swiping are instantaneous and free of lag, making it feel like the UI is glued to your finger. To achieve this, any UWP API that can't guarantee to complete within 50ms has been made asynchronous and its name suffixed with **Async**. Your UI thread will return immediately from calling an **Async** method, and the work will take place on another thread. Consuming an **Async** method is made very easy, syntactically, using the C# **await** operator, JavaScript promise objects, and C++ continuations. For more info, see [Asynchronous programming](https://msdn.microsoft.com/library/windows/apps/mt187335).\n\n## Background processing\n\nA Windows Phone Silverlight app can use a managed **ScheduledTaskAgent** object to perform a task while the app is not in the foreground. A UWP app uses the [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) class to create and register a background task in a similar way. You define a class that implements the work of your background task. The system runs your background task periodically, calling the [**Run**](https://msdn.microsoft.com/library/windows/apps/br224811) method of your class to execute the work. In a UWP app, remember to set the **Background Tasks** declaration in the app package manifest. For more info, see [Support your app with background tasks](https://msdn.microsoft.com/library/windows/apps/mt299103).\n\nTo transfer large data files in the background, a Windows Phone Silverlight app uses the **BackgroundTransferService** class. A UWP app uses APIs in the [**Windows.Networking.BackgroundTransfer**](https://msdn.microsoft.com/library/windows/apps/br207242) namespace to do this. The features use a similar pattern to initiate transfers, but the new API has improved capabilities and performance. For more info, see [Transferring data in the background](https://msdn.microsoft.com/library/windows/apps/xaml/hh452975).\n\nA Windows Phone Silverlight app uses the managed classes in the **Microsoft.Phone.BackgroundAudio** namespace to play audio while the app is not in the foreground. The UWP uses the Windows Phone Store app model, see [Background Audio](https://msdn.microsoft.com/library/windows/apps/mt282140) and the [Background audio](http://go.microsoft.com/fwlink/p/?linkid=619997) sample.\n\n## Cloud services, networking, and databases\n\nHosting data and app services in the cloud is possible using Azure. See [Getting Started with Mobile Services](http://go.microsoft.com/fwlink/p/?LinkID=403138). For solutions that require both online and offline data see: [Using offline data sync in Mobile Services](http://azure.microsoft.com/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/).\n\nThe UWP has partial support for the **System.Net.HttpWebRequest** class, but the **System.Net.WebClient** class is not supported. The recommended, forward-looking alternative is the [**Windows.Web.Http.HttpClient**](https://msdn.microsoft.com/library/windows/apps/dn298639) class (or [System.Net.Http.HttpClient](https://msdn.microsoft.com/library/system.net.http.httpclient(v=vs.118).aspx) if you need your code to be portable to other platforms that support .NET). These APIs use [System.Net.Http.HttpRequestMessage](https://msdn.microsoft.com/library/system.net.http.httprequestmessage.aspx) to represent an HTTP request.\n\nUWP apps do not currently include built-in support for data-intensive scenarios such as line of business (LOB) scenarios. However, you can make use SQLite for local transactional database services. For more info, see [SQLite](https://visualstudiogallery.msdn.microsoft.com/4913e7d5-96c9-4dde-a1a1-69820d615936).\n\nPass absolute URIs, not relative URIs, to Windows Runtime types. See [Passing a URI to the Windows Runtime](https://msdn.microsoft.com/library/hh763341.aspx).\n\n## Launchers and Choosers\n\nWith Launchers and Choosers (found in the **Microsoft.Phone.Tasks** namespace), a Windows Phone Silverlight app can interact with the operating system to perform common operations such as composing an email, choosing a photo, or sharing certain kinds of data with another app. Search for **Microsoft.Phone.Tasks** in the topic [Windows Phone Silverlight to Windows 10 namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md) to find the equivalent UWP type. These range from similar mechanisms, called launchers and pickers, to implementing a contract for sharing data between apps.\n\nA Windows Phone Silverlight app can be put into a dormant state or even tombstoned when using, for example, the photo Chooser task. A UWP app remains active and running while using the [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847) class.\n\n## Monetization (trial mode and in-app purchases)\n\nA Windows Phone Silverlight app can use the UWP [**CurrentApp**](https://msdn.microsoft.com/library/windows/apps/hh779765) class for most of its trial mode and in-app purchase functionality, so that code doesn't need to be ported. But, a Windows Phone Silverlight app calls **MarketplaceDetailTask.Show** to offer the app for purchase:\n\n```csharp\n    private void Buy()\n    {\n        MarketplaceDetailTask marketplaceDetailTask = new MarketplaceDetailTask();\n        marketplaceDetailTask.ContentType = MarketplaceContentType.Applications;\n        marketplaceDetailTask.Show();\n    }\n```\n\nPort that code to call the UWP [**RequestAppPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/hh967813) method:\n\n```csharp\n    private async void Buy()\n    {\n        await Windows.ApplicationModel.Store.CurrentApp.RequestAppPurchaseAsync(false);\n    }\n```\n\nIf you have code that simulates your app purchase and in-app purchase features for testing purposes, then you can port that to use the [**CurrentAppSimulator**](https://msdn.microsoft.com/library/windows/apps/hh779766) class instead.\n\n## Notifications for tile or toast updates\n\nNotifications are an extension of the push notification model for Windows Phone Silverlight apps. When you receive a notification from the Windows Push Notification Service (WNS), you can surface the info to the UI with a tile update or with a toast. For porting the UI side of your notification features, see [Tiles and toasts](w8x-to-uwp-porting-xaml-and-ui.md#tiles-and-toasts).\n\nFor more details on the use of notifications in a UWP app, see [Sending toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868266).\n\nFor info and tutorials on using tiles, toasts, badges, banners, and notifications in a Windows Runtime app using C++, C#, or Visual Basic, see [Working with tiles, badges, and toast notifications](https://msdn.microsoft.com/library/windows/apps/xaml/hh868259).\n\n## Storage (file access)\n\nWindows Phone Silverlight code that stores app settings as key-value pairs in isolated storage is easily ported. Here is a before-and-after example, first the Windows Phone Silverlight version:\n\n```csharp\n    var propertySet = IsolatedStorageSettings.ApplicationSettings;\n    const string key = \"favoriteAuthor\";\n    propertySet[key] = \"Charles Dickens\";\n    propertySet.Save();\n    string myFavoriteAuthor = propertySet.Contains(key) ? (string)propertySet[key] : \"<none>\";\n```\n\nAnd the UWP equivalent:\n\n```csharp\n    var propertySet = Windows.Storage.ApplicationData.Current.LocalSettings.Values;\n    const string key = \"favoriteAuthor\";\n    propertySet[key] = \"Charles Dickens\";\n    string myFavoriteAuthor = propertySet.ContainsKey(key) ? (string)propertySet[key] : \"<none>\";\n```\n\nAlthough a subset of the **Windows.Storage** namespace is available to them, many Windows Phone Silverlight apps perform file i/o with the **IsolatedStorageFile** class because it has been supported for longer. Assuming that **IsolatedStorageFile** is being used, here's a before-and-after example of writing and reading a file, first the Windows Phone Silverlight version:\n\n```csharp\n    const string filename = \"FavoriteAuthor.txt\";\n    using (var store = IsolatedStorageFile.GetUserStoreForApplication())\n    {\n        using (var streamWriter = new StreamWriter(store.CreateFile(filename)))\n        {\n            streamWriter.Write(\"Charles Dickens\");\n        }\n        using (var StreamReader = new StreamReader(store.OpenFile(filename, FileMode.Open, FileAccess.Read)))\n        {\n            string myFavoriteAuthor = StreamReader.ReadToEnd();\n        }\n    }\n```\n\nAnd the same functionality using the UWP:\n\n```csharp\n    const string filename = \"FavoriteAuthor.txt\";\n    var store = Windows.Storage.ApplicationData.Current.LocalFolder;\n    Windows.Storage.StorageFile file = await store.CreateFileAsync(filename, Windows.Storage.CreationCollisionOption.ReplaceExisting);\n    await Windows.Storage.FileIO.WriteTextAsync(file, \"Charles Dickens\");\n    file = await store.GetFileAsync(filename);\n    string myFavoriteAuthor = await Windows.Storage.FileIO.ReadTextAsync(file);\n```\n\nA Windows Phone Silverlight app has read-only access to the optional SD card. A UWP app has read-write access to the SD card. For more info, see [Access the SD card](https://msdn.microsoft.com/library/windows/apps/mt188699).\n\nFor info about accessing photos, music, and video files in a UWP app, see [Files and folders in the Music, Pictures, and Videos libraries](https://msdn.microsoft.com/library/windows/apps/mt188703).\n\nFor more info, see [Files, folders, and libraries](https://msdn.microsoft.com/library/windows/apps/mt185399).\n\nThe next topic is [Porting for form factor and UX](wpsl-to-uwp-form-factors-and-ux.md).\n\n## Related topics\n\n* [Namespace and class mappings](wpsl-to-uwp-namespace-and-class-mappings.md)\n \n\n"}