{"nodes":[{"pos":[60,78],"content":"Scan from your app","needQuote":true,"needEscape":true,"nodes":[{"content":"Scan from your app","pos":[0,18]}]},{"pos":[92,196],"content":"Learn here how to scan content from your app by using a flatbed, feeder, or auto-configured scan source.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn here how to scan content from your app by using a flatbed, feeder, or auto-configured scan source.","pos":[0,104]}]},{"content":"Scan from your app","pos":[203,221]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[223,261]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[262,357],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"** Important APIs **","pos":[359,379]},{"content":"Windows.Devices.Scanners","pos":[388,412]},{"content":"DeviceInformation","pos":[481,498]},{"content":"DeviceClass","pos":[567,578]},{"content":"Learn here how to scan content from your app by using a flatbed, feeder, or auto-configured scan source.","pos":[641,745]},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  The <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Windows.Devices.Scanners<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Dn264250)</ept> APIs are part of the desktop <bpt id=\"p4\">[</bpt>device family<ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/Dn894631)</ept>.","pos":[747,958],"source":"**Important**  The [**Windows.Devices.Scanners**](https://msdn.microsoft.com/library/windows/apps/Dn264250) APIs are part of the desktop [device family](https://msdn.microsoft.com/library/windows/apps/Dn894631)."},{"content":"Apps can use these APIs only on the desktop version of Windows 10.","pos":[959,1025]},{"content":"To scan from your app, you must first list the available scanners by declaring a new <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeviceInformation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225393)</ept> object and getting the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DeviceClass<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR225381)</ept> type.","pos":[1027,1298],"source":"To scan from your app, you must first list the available scanners by declaring a new [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/BR225393) object and getting the [**DeviceClass**](https://msdn.microsoft.com/library/windows/apps/BR225381) type."},{"content":"Only scanners that are installed locally with WIA drivers are listed and available to your app.","pos":[1299,1394]},{"content":"After your app has listed available scanners, it can use the auto-configured scan settings based on the scanner type, or just scan using the available flatbed or feeder scan source.","pos":[1396,1577]},{"content":"To use auto-configured settings, the scanner must be enabled for auto-configuration must not be equipped with both a flatbed and a feeder scanner.","pos":[1578,1724]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Auto-Configured Scanning<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/Ff539393)</ept>.","pos":[1725,1833],"source":" For more info, see [Auto-Configured Scanning](https://msdn.microsoft.com/library/windows/hardware/Ff539393)."},{"content":"Enumerate available scanners","pos":[1838,1866]},{"content":"Windows does not detect scanners automatically.","pos":[1868,1915]},{"content":"You must perform this step in order for your app to communicate with the scanner.","pos":[1916,1997]},{"content":"In this example, the scanner device enumeration is done using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Enumeration<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225459)</ept> namespace.","pos":[1998,2166],"source":" In this example, the scanner device enumeration is done using the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/BR225459) namespace."},{"content":"First, add these using statements to your class definition file.","pos":[2172,2236]},{"content":"Next, implement a device watcher to start enumerating scanners.","pos":[2333,2396]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Enumerate devices<ept id=\"p1\">](enumerate-devices.md)</ept>.","pos":[2397,2458],"source":" For more info, see [Enumerate devices](enumerate-devices.md)."},{"content":"Create an event handler for when a scanner is added.","pos":[2866,2918]},{"content":"Scan","pos":[3857,3861]},{"content":"Get an ImageScanner object","pos":[3869,3895]},{"pos":[3899,4359],"content":"For each <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ImageScannerScanSource<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn264238)</ept> enumeration type, whether it's <bpt id=\"p3\">**</bpt>Default<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>AutoConfigured<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>Flatbed<ept id=\"p5\">**</ept>, or <bpt id=\"p6\">**</bpt>Feeder<ept id=\"p6\">**</ept>, you must first create an <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>ImageScanner<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/Dn263806)</ept> object by calling the <bpt id=\"p9\">[</bpt><bpt id=\"p10\">**</bpt>ImageScanner.FromIdAsync<ept id=\"p10\">**</ept><ept id=\"p9\">](https://msdn.microsoft.com/library/windows/apps/windows.devices.scanners.imagescanner.fromidasync)</ept> method, like this.","source":"For each [**ImageScannerScanSource**](https://msdn.microsoft.com/library/windows/apps/Dn264238) enumeration type, whether it's **Default**, **AutoConfigured**, **Flatbed**, or **Feeder**, you must first create an [**ImageScanner**](https://msdn.microsoft.com/library/windows/apps/Dn263806) object by calling the [**ImageScanner.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/windows.devices.scanners.imagescanner.fromidasync) method, like this."},{"content":"Just scan","pos":[4455,4464]},{"content":"To scan with the default settings, your app relies on the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Devices.Scanners<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Dn264250)</ept> namespace to select a scanner and scans from that source.","pos":[4468,4672],"source":"To scan with the default settings, your app relies on the [**Windows.Devices.Scanners**](https://msdn.microsoft.com/library/windows/apps/Dn264250) namespace to select a scanner and scans from that source."},{"content":"No scan settings are changed.","pos":[4673,4702]},{"content":"The possible scanners are auto-configure, flatbed, or feeder.","pos":[4703,4764]},{"content":"This type of scan will most likely produce a successful scan operation, even if it scans from the wrong source, like flatbed instead of feeder.","pos":[4765,4908]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  If the user places the document to scan in the feeder, the scanner will scan from the flatbed instead.","pos":[4910,5022],"source":"**Note**  If the user places the document to scan in the feeder, the scanner will scan from the flatbed instead."},{"content":"If the user tries to scan from an empty feeder, the scan job won't produce any scanned files.","pos":[5023,5116]},{"content":"Scan from Auto-configured, Flatbed, or Feeder source","pos":[5288,5340]},{"content":"Your app can use the device's <bpt id=\"p1\">[</bpt>Auto-Configured Scanning<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/Ff539393)</ept> to scan with the most optimal scan settings.","pos":[5344,5507],"source":"Your app can use the device's [Auto-Configured Scanning](https://msdn.microsoft.com/library/windows/hardware/Ff539393) to scan with the most optimal scan settings."},{"content":"With this option, the device itself can determine the best scan settings, like color mode and scan resolution, based on the content being scanned.","pos":[5508,5654]},{"content":"The device selects the scan settings at run time for each new scan job.","pos":[5655,5726]},{"pos":[5728,5862],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Not all scanners support this feature, so the app must check if the scanner supports this feature before using this setting.","source":"**Note**  Not all scanners support this feature, so the app must check if the scanner supports this feature before using this setting."},{"content":"In this example, the app first checks if the scanner is capable of auto-configuration and then scans.","pos":[5864,5965]},{"content":"To specify either flatbed or feeder scanner, simply replace <bpt id=\"p1\">**</bpt>AutoConfigured<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>Flatbed<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Feeder<ept id=\"p3\">**</ept>.","pos":[5966,6076],"source":" To specify either flatbed or feeder scanner, simply replace **AutoConfigured** with **Flatbed** or **Feeder**."},{"content":"Preview the scan","pos":[6450,6466]},{"content":"You can add code to preview the scan before scanning to a folder.","pos":[6468,6533]},{"content":"In the example below, the app checks if the <bpt id=\"p1\">**</bpt>Flatbed<ept id=\"p1\">**</ept> scanner supports preview, then previews the scan.","pos":[6534,6639],"source":" In the example below, the app checks if the **Flatbed** scanner supports preview, then previews the scan."},{"content":"Cancel the scan","pos":[6998,7013]},{"content":"You can let users cancel the scan job midway through a scan, like this.","pos":[7015,7086]},{"content":"Scan with progress","pos":[7429,7447]},{"pos":[7453,7514],"content":"Create a <bpt id=\"p1\">**</bpt>System.Threading.CancellationTokenSource<ept id=\"p1\">**</ept> object.","source":"Create a **System.Threading.CancellationTokenSource** object."},{"content":"Set up the progress event handler and get the progress of the scan.","pos":[7586,7653]},{"content":"Scanning to the pictures library","pos":[7807,7839]},{"content":"Users can scan to any folder dynamically using the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FolderPicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR207881)</ept> class, but you must declare the <bpt id=\"p3\">*</bpt>Pictures Library<ept id=\"p3\">*</ept> capability in the manifest to allow users to scan to that folder.","pos":[7841,8085],"source":"Users can scan to any folder dynamically using the [**FolderPicker**](https://msdn.microsoft.com/library/windows/apps/BR207881) class, but you must declare the *Pictures Library* capability in the manifest to allow users to scan to that folder."},{"content":"For more info on app capabilities, see <bpt id=\"p1\">[</bpt>App capability declarations<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Mt270968)</ept>.","pos":[8086,8213],"source":" For more info on app capabilities, see [App capability declarations](https://msdn.microsoft.com/library/windows/apps/Mt270968)."}],"content":"---\nms.assetid: 374D1983-60E0-4E18-ABBB-04775BAA0F0D\ntitle: Scan from your app\ndescription: Learn here how to scan content from your app by using a flatbed, feeder, or auto-configured scan source.\n---\n# Scan from your app\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**Windows.Devices.Scanners**](https://msdn.microsoft.com/library/windows/apps/Dn264250)\n-   [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/BR225393)\n-   [**DeviceClass**](https://msdn.microsoft.com/library/windows/apps/BR225381)\n\nLearn here how to scan content from your app by using a flatbed, feeder, or auto-configured scan source.\n\n**Important**  The [**Windows.Devices.Scanners**](https://msdn.microsoft.com/library/windows/apps/Dn264250) APIs are part of the desktop [device family](https://msdn.microsoft.com/library/windows/apps/Dn894631). Apps can use these APIs only on the desktop version of Windows 10.\n\nTo scan from your app, you must first list the available scanners by declaring a new [**DeviceInformation**](https://msdn.microsoft.com/library/windows/apps/BR225393) object and getting the [**DeviceClass**](https://msdn.microsoft.com/library/windows/apps/BR225381) type. Only scanners that are installed locally with WIA drivers are listed and available to your app.\n\nAfter your app has listed available scanners, it can use the auto-configured scan settings based on the scanner type, or just scan using the available flatbed or feeder scan source. To use auto-configured settings, the scanner must be enabled for auto-configuration must not be equipped with both a flatbed and a feeder scanner. For more info, see [Auto-Configured Scanning](https://msdn.microsoft.com/library/windows/hardware/Ff539393).\n\n## Enumerate available scanners\n\nWindows does not detect scanners automatically. You must perform this step in order for your app to communicate with the scanner. In this example, the scanner device enumeration is done using the [**Windows.Devices.Enumeration**](https://msdn.microsoft.com/library/windows/apps/BR225459) namespace.\n\n1.  First, add these using statements to your class definition file.\n\n``` csharp\n    using Windows.Devices.Enumeration;\n    using Windows.Devices.Scanners;\n```\n\n2.  Next, implement a device watcher to start enumerating scanners. For more info, see [Enumerate devices](enumerate-devices.md).\n\n```csharp\n    void InitDeviceWatcher()\n    {\n       // Create a Device Watcher class for type Image Scanner for enumerating scanners\n       scannerWatcher = DeviceInformation.CreateWatcher(DeviceClass.ImageScanner);\n\n       scannerWatcher.Added += OnScannerAdded;\n       scannerWatcher.Removed += OnScannerRemoved;\n       scannerWatcher.EnumerationCompleted += OnScannerEnumerationComplete;\n    }\n```\n\n3.  Create an event handler for when a scanner is added.\n\n```csharp\n    private async void OnScannerAdded(DeviceWatcher sender,  DeviceInformation deviceInfo)\n    {\n       await\n       MainPage.Current.Dispatcher.RunAsync(\n             Windows.UI.Core.CoreDispatcherPriority.Normal,\n             () =&gt;\n             {\n                MainPage.Current.NotifyUser(String.Format(&quot;Scanner with device id {0} has been added&quot;, deviceInfo.Id), NotifyType.StatusMessage);\n\n                // search the device list for a device with a matching device id\n                ScannerDataItem match = FindInList(deviceInfo.Id);\n\n                // If we found a match then mark it as verified and return\n                if (match != null)\n                {\n                   match.Matched = true;\n                   return;\n                }\n\n                // Add the new element to the end of the list of devices\n                AppendToList(deviceInfo);\n             }\n       );\n    }\n```\n\n## Scan\n\n1.  **Get an ImageScanner object**\n\nFor each [**ImageScannerScanSource**](https://msdn.microsoft.com/library/windows/apps/Dn264238) enumeration type, whether it's **Default**, **AutoConfigured**, **Flatbed**, or **Feeder**, you must first create an [**ImageScanner**](https://msdn.microsoft.com/library/windows/apps/Dn263806) object by calling the [**ImageScanner.FromIdAsync**](https://msdn.microsoft.com/library/windows/apps/windows.devices.scanners.imagescanner.fromidasync) method, like this.\n\n ```csharp\n    ImageScanner myScanner = await ImageScanner.FromIdAsync(deviceId);\n ```\n\n2.  **Just scan**\n\nTo scan with the default settings, your app relies on the [**Windows.Devices.Scanners**](https://msdn.microsoft.com/library/windows/apps/Dn264250) namespace to select a scanner and scans from that source. No scan settings are changed. The possible scanners are auto-configure, flatbed, or feeder. This type of scan will most likely produce a successful scan operation, even if it scans from the wrong source, like flatbed instead of feeder.\n\n**Note**  If the user places the document to scan in the feeder, the scanner will scan from the flatbed instead. If the user tries to scan from an empty feeder, the scan job won't produce any scanned files.\n \n```csharp\n    var result = await myScanner.ScanFilesToFolderAsync(ImageScannerScanSource.Default, \n        folder).AsTask(cancellationToken.Token, progress);\n```\n\n3.  **Scan from Auto-configured, Flatbed, or Feeder source**\n\nYour app can use the device's [Auto-Configured Scanning](https://msdn.microsoft.com/library/windows/hardware/Ff539393) to scan with the most optimal scan settings. With this option, the device itself can determine the best scan settings, like color mode and scan resolution, based on the content being scanned. The device selects the scan settings at run time for each new scan job.\n\n**Note**  Not all scanners support this feature, so the app must check if the scanner supports this feature before using this setting.\n\nIn this example, the app first checks if the scanner is capable of auto-configuration and then scans. To specify either flatbed or feeder scanner, simply replace **AutoConfigured** with **Flatbed** or **Feeder**.\n\n```csharp\n    if (myScanner.IsScanSourceSupported(ImageScannerScanSource.AutoConfigured))\n    {\n        ...\n        // Scan API call to start scanning with Auto-Configured settings. \n        var result = await myScanner.ScanFilesToFolderAsync(\n            ImageScannerScanSource.AutoConfigured, folder).AsTask(cancellationToken.Token, progress);\n        ...\n    }\n```\n\n## Preview the scan\n\nYou can add code to preview the scan before scanning to a folder. In the example below, the app checks if the **Flatbed** scanner supports preview, then previews the scan.\n\n```csharp\nif (myScanner.IsPreviewSupported(ImageScannerScanSource.Flatbed))\n{\n    rootPage.NotifyUser(&quot;Scanning&quot;, NotifyType.StatusMessage);\n                // Scan API call to get preview from the flatbed.\n                var result = await myScanner.ScanPreviewToStreamAsync(\n                    ImageScannerScanSource.Flatbed, stream);\n```\n\n## Cancel the scan\n\nYou can let users cancel the scan job midway through a scan, like this.\n\n```csharp\nvoid CancelScanning()\n{\n    if (ModelDataContext.ScenarioRunning)\n    {\n        if (cancellationToken != null)\n        {\n            cancellationToken.Cancel();\n        }                \n        DisplayImage.Source = null;\n        ModelDataContext.ScenarioRunning = false;\n        ModelDataContext.ClearFileList();\n    }\n}\n```\n\n## Scan with progress\n\n1.  Create a **System.Threading.CancellationTokenSource** object.\n\n```csharp\ncancellationToken = new CancellationTokenSource();\n```\n\n2.  Set up the progress event handler and get the progress of the scan.\n\n```csharp\n    rootPage.NotifyUser(&quot;Scanning&quot;, NotifyType.StatusMessage);\n    var progress = new Progress&lt;UInt32&gt;(ScanProgress);\n```\n\n## Scanning to the pictures library\n\nUsers can scan to any folder dynamically using the [**FolderPicker**](https://msdn.microsoft.com/library/windows/apps/BR207881) class, but you must declare the *Pictures Library* capability in the manifest to allow users to scan to that folder. For more info on app capabilities, see [App capability declarations](https://msdn.microsoft.com/library/windows/apps/Mt270968).\n\n"}