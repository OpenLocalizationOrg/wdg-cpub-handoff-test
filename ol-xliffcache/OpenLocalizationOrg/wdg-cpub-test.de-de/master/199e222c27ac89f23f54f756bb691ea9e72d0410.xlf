<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">199e222c27ac89f23f54f756bb691ea9e72d0410</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\text-box.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">6f7af8039e2044104e2536044f5c267a7ed278f4</mda:meta><mda:meta type="olxliffhash">395e0ffc8de6c154282fdd45bfac6306b50dd21e</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Text box</source>
					<target>Text box</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>The TextBox control lets a user type text into an app.</source>
					<target>The TextBox control lets a user type text into an app.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>It's typically used to capture a single line of text, but can be configured to capture multiple lines of text.</source>
					<target>It's typically used to capture a single line of text, but can be configured to capture multiple lines of text.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>The text displays on the screen in a simple, uniform, plaintext format.</source>
					<target>The text displays on the screen in a simple, uniform, plaintext format.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>TextBox has a number of features that can simplify text entry.</source>
					<target>TextBox has a number of features that can simplify text entry.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>It comes with a familiar, built-in context menu with support for copying and pasting text.</source>
					<target>It comes with a familiar, built-in context menu with support for copying and pasting text.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The "clear all" button lets a user quickly delete all text that has been entered.</source>
					<target>The "clear all" button lets a user quickly delete all text that has been entered.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>It also has spell checking capabilities built in and enabled by default.</source>
					<target>It also has spell checking capabilities built in and enabled by default.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>TextBox class</source>
					<target>TextBox class</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Text property</source>
					<target>Text property</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Is this the right control?</source>
					<target>Is this the right control?</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> control to let a user enter and edit unformatted text, such as in a form.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBox</pc> control to let a user enter and edit unformatted text, such as in a form.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.text.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get and set the text in a TextBox.</source>
					<target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get and set the text in a TextBox.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>You can make a TextBox read-only, but this should be a temporary, conditional state.</source>
					<target>You can make a TextBox read-only, but this should be a temporary, conditional state.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](text-block.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If the text is never editable, consider using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> instead.</source>
					<target>If the text is never editable, consider using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> instead.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](password-box.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordBox</pc></pc> control to collect a password or other private data, such as a Social Security number.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordBox</pc></pc> control to collect a password or other private data, such as a Social Security number.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>A password box looks like a text input box, except that it renders bullets in place of the text that has been entered.</source>
					<target>A password box looks like a text input box, except that it renders bullets in place of the text that has been entered.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](auto-suggest-box.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoSuggestBox</pc></pc> control to let the user enter search terms or to show the user a list of suggestions to choose from as they type.</source>
					<target>Use an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoSuggestBox</pc></pc> control to let the user enter search terms or to show the user a list of suggestions to choose from as they type.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](rich-edit-box.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RichEditBox</pc></pc> to display and edit rich text files.</source>
					<target>Use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RichEditBox</pc></pc> to display and edit rich text files.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](text-controls.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about choosing the right text control, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text controls</pc> article.</source>
					<target>For more info about choosing the right text control, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text controls</pc> article.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Examples</source>
					<target>Examples</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>A text box</source>
					<target>A text box</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Create a text box</source>
					<target>Create a text box</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Here's the XAML for a simple text box with a header and placeholder text.</source>
					<target>Here's the XAML for a simple text box with a header and placeholder text.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Here's the text box that results from this XAML.</source>
					<target>Here's the text box that results from this XAML.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>A simple text box</source>
					<target>A simple text box</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Use a text box for data input in a form</source>
					<target>Use a text box for data input in a form</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.text.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>It’s common to use a text box to accept data input on a form, and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get the complete text string from the text box.</source>
					<target>It’s common to use a text box to accept data input on a form, and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> property to get the complete text string from the text box.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.textchanged.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.textchanging.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You typically use an event like a submit button click to access the Text property, but you can handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextChanging</pc> event if you need to do something when the text changes.</source>
					<target>You typically use an event like a submit button click to access the Text property, but you can handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextChanged</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextChanging</pc> event if you need to do something when the text changes.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.header.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.placeholdertext.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header</pc> (or label) and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PlaceholderText</pc> (or watermark) to the text box to give the user an indication of what the text box is for.</source>
					<target>You can add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header</pc> (or label) and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">PlaceholderText</pc> (or watermark) to the text box to give the user an indication of what the text box is for.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.headertemplate.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>To customize the look of the header, you can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HeaderTemplate</pc> property instead of Header.</source>
					<target>To customize the look of the header, you can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HeaderTemplate</pc> property instead of Header.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">For design info, see Guidelines for labels</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">For design info, see Guidelines for labels</pc>.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.maxlength.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can restrict the number of characters the user can type by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaxLength</pc> property.</source>
					<target>You can restrict the number of characters the user can type by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaxLength</pc> property.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>However, MaxLength does not restrict the length of pasted text.</source>
					<target>However, MaxLength does not restrict the length of pasted text.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.paste.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event to modify pasted text if this is important for your app.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event to modify pasted text if this is important for your app.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The text box includes a clear all button ("X") that appears when text is entered in the box.</source>
					<target>The text box includes a clear all button ("X") that appears when text is entered in the box.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>When a user clicks the "X", the text in the text box is cleared.</source>
					<target>When a user clicks the "X", the text in the text box is cleared.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>It looks like this.</source>
					<target>It looks like this.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>A text box with a clear all button</source>
					<target>A text box with a clear all button</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>The clear all button is shown only for editable, single-line text boxes that contain text and have focus.</source>
					<target>The clear all button is shown only for editable, single-line text boxes that contain text and have focus.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The clear all button is not shown in any of these cases:</source>
					<target>The clear all button is not shown in any of these cases:</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsReadOnly</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsReadOnly</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc></target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AcceptsReturn</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AcceptsReturn</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc></target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextWrap</pc> has a value other than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NoWrap</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextWrap</pc> has a value other than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NoWrap</pc></target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Make a text box read-only</source>
					<target>Make a text box read-only</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.isreadonly.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can make a text box read-only by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsReadOnly</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>.</source>
					<target>You can make a text box read-only by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsReadOnly</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>You typically toggle this property in your app code based on conditions in your app.</source>
					<target>You typically toggle this property in your app code based on conditions in your app.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>If need text that is always read-only, consider using a TextBlock instead.</source>
					<target>If need text that is always read-only, consider using a TextBlock instead.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>You can make a TextBox read-only by setting the IsReadOnly property to true.</source>
					<target>You can make a TextBox read-only by setting the IsReadOnly property to true.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>For example, you might have a TextBox for a user to enter comments that is enabled only under certain conditions.</source>
					<target>For example, you might have a TextBox for a user to enter comments that is enabled only under certain conditions.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>You can make the TextBox read-only until the conditions are met.</source>
					<target>You can make the TextBox read-only until the conditions are met.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If you need only to display text, consider using a TextBlock or RichTextBlock instead.</source>
					<target>If you need only to display text, consider using a TextBlock or RichTextBlock instead.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>A read-only text box looks the same as a read/write text box, so it might be confusing to a user.</source>
					<target>A read-only text box looks the same as a read/write text box, so it might be confusing to a user.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>A user can select and copy text.</source>
					<target>A user can select and copy text.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>IsEnabled</source>
					<target>IsEnabled</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Enable multi-line input</source>
					<target>Enable multi-line input</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>There are two properties that you can use to control whether the TextBox displays text on more than one line.</source>
					<target>There are two properties that you can use to control whether the TextBox displays text on more than one line.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>You typically set both properties to make a multi-line text box.</source>
					<target>You typically set both properties to make a multi-line text box.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.acceptsreturn.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To let the text box allow and display the newline or return characters, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AcceptsReturn</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>.</source>
					<target>To let the text box allow and display the newline or return characters, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AcceptsReturn</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">true</pc>.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.textwrapping.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To enable text wrapping, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextWrapping</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Wrap</pc>.</source>
					<target>To enable text wrapping, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextWrapping</pc></pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Wrap</pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>This causes the text to wrap when it reaches the  edge of the text box, independent of line separator characters.</source>
					<target>This causes the text to wrap when it reaches the  edge of the text box, independent of line separator characters.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />TextBox and RichEditBox don't support the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">WrapWholeWords</pc> value for their TextWrapping properties.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />TextBox and RichEditBox don't support the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">WrapWholeWords</pc> value for their TextWrapping properties.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>If you try to use WrapWholeWords as a value for TextBox.TextWrapping or RichEditBox.TextWrapping an invalid argument exception is thrown.</source>
					<target>If you try to use WrapWholeWords as a value for TextBox.TextWrapping or RichEditBox.TextWrapping an invalid argument exception is thrown.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxheight.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>A multi-line TextBox will continue to grow vertically as text is entered unless it’s constrained by its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Height</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MaxHeight</pc> property, or by a parent container.</source>
					<target>A multi-line TextBox will continue to grow vertically as text is entered unless it’s constrained by its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Height</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MaxHeight</pc> property, or by a parent container.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>You should test that a multi-line text box doesn’t grow beyond its visible area, and constrain its growth if it does.</source>
					<target>You should test that a multi-line text box doesn’t grow beyond its visible area, and constrain its growth if it does.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>We recommend that you always specify an appropriate height for a multi-line text box, and not let it grow in height as the user types.</source>
					<target>We recommend that you always specify an appropriate height for a multi-line text box, and not let it grow in height as the user types.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Scrolling using a scroll-wheel or touch is automatically enabled when needed.</source>
					<target>Scrolling using a scroll-wheel or touch is automatically enabled when needed.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>However, the vertical scrollbars are not visible by default.</source>
					<target>However, the vertical scrollbars are not visible by default.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.scrollviewer.verticalscrollbarvisibility.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can show the vertical scrollbars by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc> on the embedded ScrollViewer, as shown here.</source>
					<target>You can show the vertical scrollbars by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScrollViewer.VerticalScrollBarVisibility</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc> on the embedded ScrollViewer, as shown here.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Here's what the text box looks like after text is added.</source>
					<target>Here's what the text box looks like after text is added.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>A multi line text box</source>
					<target>A multi line text box</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Format the text display</source>
					<target>Format the text display</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextAlignment</pc> property to align text within a text box.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextAlignment</pc> property to align text within a text box.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>To align the text box within the layout of the page, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HorizontalAlignment</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">VerticalAlignment</pc> properties.</source>
					<target>To align the text box within the layout of the page, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HorizontalAlignment</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">VerticalAlignment</pc> properties.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>While the text bBox supports only unformatted text, you can customize how the text is displayed in the text box to match your branding.</source>
					<target>While the text bBox supports only unformatted text, you can customize how the text is displayed in the text box to match your branding.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.fontfamily.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.fontsize.aspx)</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.fontstyle.aspx)</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.background.aspx)</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.foreground.aspx)</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.characterspacing.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can set standard <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control</pc> properties like <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FontFamily</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FontSize</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">FontStyle</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Background</pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Foreground</pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">CharacterSpacing</pc> to change the look of the text.</source>
					<target>You can set standard <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Control</pc> properties like <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FontFamily</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">FontSize</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">FontStyle</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Background</pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Foreground</pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7">CharacterSpacing</pc> to change the look of the text.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>These properties affect only how the text box displays the text locally, so if you were to copy and paste the text into a rich text control, for example, no formatting would be applied.</source>
					<target>These properties affect only how the text box displays the text locally, so if you were to copy and paste the text into a rich text control, for example, no formatting would be applied.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>This example shows a read-only TextBox with several properties set to customize the appearance of the text.</source>
					<target>This example shows a read-only TextBox with several properties set to customize the appearance of the text.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>The resulting text box looks like this.</source>
					<target>The resulting text box looks like this.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>A formatted text box</source>
					<target>A formatted text box</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Modify the context menu</source>
					<target>Modify the context menu</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>By default, the commands shown in the text box context menu depend on the state of the text box.</source>
					<target>By default, the commands shown in the text box context menu depend on the state of the text box.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>For example, the following commands can be shown when the text box is editable.</source>
					<target>For example, the following commands can be shown when the text box is editable.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Command</source>
					<target>Command</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Shown when...</source>
					<target>Shown when...</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Copy</source>
					<target>Copy</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>text is selected.</source>
					<target>text is selected.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Cut</source>
					<target>Cut</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>text is selected.</source>
					<target>text is selected.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Paste</source>
					<target>Paste</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>the clipboard contains text.</source>
					<target>the clipboard contains text.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Select all</source>
					<target>Select all</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>the TextBox contains text.</source>
					<target>the TextBox contains text.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Undo</source>
					<target>Undo</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>text has been changed.</source>
					<target>text has been changed.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.contextmenuopening.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>To modify the commands shown in the context menu, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContextMenuOpening</pc> event.</source>
					<target>To modify the commands shown in the context menu, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContextMenuOpening</pc> event.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=234891)</data>
				</originalData>
				<segment state="initial">
					<source>For an example of this, see Scenario 2 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContextMenu sample</pc>.</source>
					<target>For an example of this, see Scenario 2 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContextMenu sample</pc>.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>For design info, see Guidelines for context menus.</source>
					<target>For design info, see Guidelines for context menus.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Select, copy, and paste</source>
					<target>Select, copy, and paste</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectedtext.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can get or set the selected text in a TextBox using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedText</pc> property.</source>
					<target>You can get or set the selected text in a TextBox using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectedText</pc> property.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionstart.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionlength.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.select.aspx)</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectall.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionStart</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionLength</pc> properties, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Select</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectAll</pc> methods, to manipulate the text selection.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionStart</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionLength</pc> properties, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Select</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SelectAll</pc> methods, to manipulate the text selection.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionchanged.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event to do something when the user selects or de-selects text.</source>
					<target>Handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event to do something when the user selects or de-selects text.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionhighlightcolor.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can change the color used to highlight the selected text by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionHighlightColor</pc> property.</source>
					<target>You can change the color used to highlight the selected text by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionHighlightColor</pc> property.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>TextBox supports copy and paste by default.</source>
					<target>TextBox supports copy and paste by default.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.paste.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can provide custom handling of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event on editable text controls in your app.</source>
					<target>You can provide custom handling of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event on editable text controls in your app.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>For example, you might remove the line breaks from a multi-line address when pasting it into a single-line search box.</source>
					<target>For example, you might remove the line breaks from a multi-line address when pasting it into a single-line search box.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Or, you might check the length of the pasted text and warn the user if it exceeds the maximum length that can be saved to a database.</source>
					<target>Or, you might check the length of the pasted text and warn the user if it exceeds the maximum length that can be saved to a database.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.paste.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>For more info and examples, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event.</source>
					<target>For more info and examples, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Paste</pc> event.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Here, we have an example of these properties and methods in use.</source>
					<target>Here, we have an example of these properties and methods in use.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>When you select text in the first text box, the selected text is displayed in the second text box, which is read-only.</source>
					<target>When you select text in the first text box, the selected text is displayed in the second text box, which is read-only.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionlength.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionstart.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionLength</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionStart</pc> properties are shown in two text blocks.</source>
					<target>The values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionLength</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SelectionStart</pc> properties are shown in two text blocks.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.selectionchanged.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>This is done using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event.</source>
					<target>This is done using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SelectionChanged</pc> event.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Here's the result of this code.</source>
					<target>Here's the result of this code.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Selected text in a text box</source>
					<target>Selected text in a text box</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Choose the right keyboard for your text control</source>
					<target>Choose the right keyboard for your text control</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>To help users to enter data using the touch keyboard, or Soft Input Panel (SIP), you can set the input scope of the text control to match the kind of data the user is expected to enter.</source>
					<target>To help users to enter data using the touch keyboard, or Soft Input Panel (SIP), you can set the input scope of the text control to match the kind of data the user is expected to enter.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>The touch keyboard can be used for text entry when your app runs on a device with a touch screen.</source>
					<target>The touch keyboard can be used for text entry when your app runs on a device with a touch screen.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>The touch keyboard is invoked when the user taps on an editable input field, such as a TextBox or RichEditBox.</source>
					<target>The touch keyboard is invoked when the user taps on an editable input field, such as a TextBox or RichEditBox.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</source>
					<target>You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>The input scope provides a hint to the system about the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</source>
					<target>The input scope provides a hint to the system about the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.inputscope.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, if a text box is used only to enter a 4-digit PIN, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InputScope</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Number</pc>.</source>
					<target>For example, if a text box is used only to enter a 4-digit PIN, set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InputScope</pc> property to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Number</pc>.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>This tells the system to show the number keypad layout, which makes it easier for the user to enter the PIN.</source>
					<target>This tells the system to show the number keypad layout, which makes it easier for the user to enter the PIN.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />The input scope does not cause any input validation to be performed, and does not prevent the user from providing any input through a hardware keyboard or other input device.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />The input scope does not cause any input validation to be performed, and does not prevent the user from providing any input through a hardware keyboard or other input device.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>You are still responsible for validating the input in your code as needed.</source>
					<target>You are still responsible for validating the input in your code as needed.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.isspellcheckenabled.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.istextpredictionenabled.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.preventkeyboarddisplayonprogrammaticfocus.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Other properties that affect the touch keyboard are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsSpellCheckEnabled</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsTextPredictionEnabled</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PreventKeyboardDisplayOnProgrammaticFocus</pc>.</source>
					<target>Other properties that affect the touch keyboard are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsSpellCheckEnabled</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsTextPredictionEnabled</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">PreventKeyboardDisplayOnProgrammaticFocus</pc>.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>(IsSpellCheckEnabled also affects the TextBox when a hardware keyboard is used.)</source>
					<target>(IsSpellCheckEnabled also affects the TextBox when a hardware keyboard is used.)</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
				</originalData>
				<segment state="initial">
					<source>For more info and examples, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use input scope to change the touch keyboard</pc> and the property documentation.</source>
					<target>For more info and examples, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use input scope to change the touch keyboard</pc> and the property documentation.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Recommendations</source>
					<target>Recommendations</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Use a label or placeholder text if the purpose of the text box isn't clear.</source>
					<target>Use a label or placeholder text if the purpose of the text box isn't clear.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>A label is visible whether or not the text input box has a value.</source>
					<target>A label is visible whether or not the text input box has a value.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Placeholder text is displayed inside the text input box and disappears once a value has been entered.</source>
					<target>Placeholder text is displayed inside the text input box and disappears once a value has been entered.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>Give the text box an appropriate width for the range of values that can be entered.</source>
					<target>Give the text box an appropriate width for the range of values that can be entered.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>Word length varies between languages, so take localization into account if you want your app to be world-ready.</source>
					<target>Word length varies between languages, so take localization into account if you want your app to be world-ready.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<originalData>
					<data id="id1">`TextWrap = "NoWrap"`</data>
				</originalData>
				<segment state="initial">
					<source>A text input box is typically single-line (<ph dataRef="id1" id="ph1" />).</source>
					<target>A text input box is typically single-line (<ph dataRef="id1" id="ph1" />).</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<originalData>
					<data id="id1">`TextWrap = "Wrap"`</data>
				</originalData>
				<segment state="initial">
					<source>When users need to enter or edit a long string, set the text input box to multi-line (<ph dataRef="id1" id="ph1" />).</source>
					<target>When users need to enter or edit a long string, set the text input box to multi-line (<ph dataRef="id1" id="ph1" />).</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>Generally, a text input box is used for editable text.</source>
					<target>Generally, a text input box is used for editable text.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>But you can make a text input box read-only so that its content can be read, selected, and copied, but not edited.</source>
					<target>But you can make a text input box read-only so that its content can be read, selected, and copied, but not edited.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>If you need to reduce clutter in a view, consider making a set of text input boxes appear only when a controlling checkbox is checked.</source>
					<target>If you need to reduce clutter in a view, consider making a set of text input boxes appear only when a controlling checkbox is checked.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>You can also bind the enabled state of a text input box to a control such as a checkbox.</source>
					<target>You can also bind the enabled state of a text input box to a control such as a checkbox.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>Consider how you want a text input box to behave when it contains a value and the user taps it.</source>
					<target>Consider how you want a text input box to behave when it contains a value and the user taps it.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>The default behavior is appropriate for editing the value rather than replacing it; the insertion point is placed between words and nothing is selected.</source>
					<target>The default behavior is appropriate for editing the value rather than replacing it; the insertion point is placed between words and nothing is selected.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>If replacing is the most common use case for a given text input box, you can select all the text in the field whenever the control receives focus, and typing replaces the selection.</source>
					<target>If replacing is the most common use case for a given text input box, you can select all the text in the field whenever the control receives focus, and typing replaces the selection.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Single-line input boxes</source>
					<target>Single-line input boxes</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Use several single-line text boxes to capture many small pieces of text information.</source>
					<target>Use several single-line text boxes to capture many small pieces of text information.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>If the text boxes are related in nature, group those together.</source>
					<target>If the text boxes are related in nature, group those together.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>Make the size of single-line text boxes slightly wider than the longest anticipated input.</source>
					<target>Make the size of single-line text boxes slightly wider than the longest anticipated input.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>If doing so makes the control too wide, separate it into two controls.</source>
					<target>If doing so makes the control too wide, separate it into two controls.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>For example, you could split a single address input into "Address line 1" and "Address line 2".</source>
					<target>For example, you could split a single address input into "Address line 1" and "Address line 2".</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Set a maximum length for characters that can be entered.</source>
					<target>Set a maximum length for characters that can be entered.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>If the backing data source doesn't allow a long input string, limit the input and use a validation popup to let users know when they reach the limit.</source>
					<target>If the backing data source doesn't allow a long input string, limit the input and use a validation popup to let users know when they reach the limit.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>Use single-line text input controls to gather small pieces of text from users.</source>
					<target>Use single-line text input controls to gather small pieces of text from users.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>The following example shows a single-line text box to capture an answer to a security question.</source>
					<target>The following example shows a single-line text box to capture an answer to a security question.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>The answer is expected to be short, and so a single-line text box is appropriate here.</source>
					<target>The answer is expected to be short, and so a single-line text box is appropriate here.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>Basic data input</source>
					<target>Basic data input</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>Use a set of short, fixed-sized, single-line text input controls to enter data with a specific format.</source>
					<target>Use a set of short, fixed-sized, single-line text input controls to enter data with a specific format.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>Formatted data input</source>
					<target>Formatted data input</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>Use a single-line, unconstrained text input control to enter or edit strings, combined with a command button that helps users select valid values.</source>
					<target>Use a single-line, unconstrained text input control to enter or edit strings, combined with a command button that helps users select valid values.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>Assisted data input</source>
					<target>Assisted data input</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>Multi-line text input controls</source>
					<target>Multi-line text input controls</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>When you create a rich text box, provide styling buttons and implement their actions.</source>
					<target>When you create a rich text box, provide styling buttons and implement their actions.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>Use a font that's consistent with the style of your app.</source>
					<target>Use a font that's consistent with the style of your app.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>Make the height of the text control tall enough to accommodate typical entries.</source>
					<target>Make the height of the text control tall enough to accommodate typical entries.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>When capturing long spans of text with a maximum character or word count, use a plain text box and provide a live-running counter to show the user how many characters or words they have left before they reach the limit.</source>
					<target>When capturing long spans of text with a maximum character or word count, use a plain text box and provide a live-running counter to show the user how many characters or words they have left before they reach the limit.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>You'll need to create the counter yourself; place it below the text box and dynamically update it as the user enters each character or word.</source>
					<target>You'll need to create the counter yourself; place it below the text box and dynamically update it as the user enters each character or word.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>A long span of text</source>
					<target>A long span of text</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>Don't let your text input controls grow in height while users type.</source>
					<target>Don't let your text input controls grow in height while users type.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>Don't use a multi-line text box when users only need a single line.</source>
					<target>Don't use a multi-line text box when users only need a single line.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>Don't use a rich text control if a plain text control is adequate.</source>
					<target>Don't use a rich text control if a plain text control is adequate.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
					<target>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://go.microsoft.com/fwlink/p/?linkid=258743)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</source>
					<target>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>Text controls</source>
					<target>Text controls</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>For designers</source>
					<target>For designers</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>Guidelines for spell checking</source>
					<target>Guidelines for spell checking</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>Adding search</source>
					<target>Adding search</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>Guidelines for text input</source>
					<target>Guidelines for text input</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>For developers (XAML)</source>
					<target>For developers (XAML)</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>TextBox class</source>
					<target>TextBox class</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Xaml.Controls PasswordBox class</source>
					<target>Windows.UI.Xaml.Controls PasswordBox class</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>For developers (other)</source>
					<target>For developers (other)</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>String.Length property</source>
					<target>String.Length property</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>