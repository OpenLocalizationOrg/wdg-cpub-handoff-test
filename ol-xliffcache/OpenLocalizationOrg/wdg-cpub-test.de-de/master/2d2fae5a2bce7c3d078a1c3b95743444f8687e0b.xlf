<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">2d2fae5a2bce7c3d078a1c3b95743444f8687e0b</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\input-and-devices\save-and-load-ink.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">2f5c5aaedc6061c382206052195ed884d76fc840</mda:meta><mda:meta type="olxliffhash">736dbf9e4176f9542332911439a5a514a4578498</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Store ink stroke data in a Graphics Interchange Format (GIF) file using embedded Ink Serialized Format (ISF) metadata.</source>
					<target>Store ink stroke data in a Graphics Interchange Format (GIF) file using embedded Ink Serialized Format (ISF) metadata.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Store and retrieve ink strokes</source>
					<target>Store and retrieve ink strokes</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Store and retrieve ink strokes</source>
					<target>Store and retrieve ink strokes</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Apps that support ink input can serialize and deserialize the ink metadata with full fidelity, maintaining all properties and behaviors.</source>
					<target>Apps that support ink input can serialize and deserialize the ink metadata with full fidelity, maintaining all properties and behaviors.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.</source>
					<target>Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>InkCanvas</source>
					<target>InkCanvas</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Windows.UI.Input.Inking</source>
					<target>Windows.UI.Input.Inking</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>ISF is the most compact persistent representation of ink.</source>
					<target>ISF is the most compact persistent representation of ink.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.</source>
					<target>It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Save ink strokes to a file</source>
					<target>Save ink strokes to a file</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Here, we demonstrate how to save ink strokes drawn on an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> control.</source>
					<target>Here, we demonstrate how to save ink strokes drawn on an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> control.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>First, we set up the UI.</source>
					<target>First, we set up the UI.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The UI includes "Save", "Load", and "Clear" buttons, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc>.</source>
					<target>The UI includes "Save", "Load", and "Clear" buttons, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>We then set some basic ink input behaviors.</source>
					<target>We then set some basic ink input behaviors.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn899081)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn922019)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>), and listeners for the click events on the buttons are declared.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>), and listeners for the click events on the buttons are declared.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, we save the ink in the click event handler of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Save</pc> button.</source>
					<target>Finally, we save the ink in the click event handler of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Save</pc> button.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207871)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileSavePicker</pc></pc> lets the user select both the file and the location where the ink data is saved.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileSavePicker</pc></pc> lets the user select both the file and the location where the ink data is saved.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241731)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br241635)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Once a file is selected, we open an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IRandomAccessStream</pc></pc> stream set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ReadWrite</pc></pc>.</source>
					<target>Once a file is selected, we open an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IRandomAccessStream</pc></pc> stream set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ReadWrite</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242114)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208492)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SaveAsync</pc></pc> to serialize the ink strokes managed by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc> to the stream.</source>
					<target>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SaveAsync</pc></pc> to serialize the ink strokes managed by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc> to the stream.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>GIF is the only supported format for saving ink data.</source>
					<target>GIF is the only supported format for saving ink data.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701607)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> method (demonstrated in the next section) does support additional formats for backward compatibility.</source>
					<target>However, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> method (demonstrated in the next section) does support additional formats for backward compatibility.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Load ink strokes from a file</source>
					<target>Load ink strokes from a file</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Here, we demonstrate how to load ink strokes from a file and render them on an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> control.</source>
					<target>Here, we demonstrate how to load ink strokes from a file and render them on an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> control.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>First, we set up the UI.</source>
					<target>First, we set up the UI.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The UI includes "Save", "Load", and "Clear" buttons, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc>.</source>
					<target>The UI includes "Save", "Load", and "Clear" buttons, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>We then set some basic ink input behaviors.</source>
					<target>We then set some basic ink input behaviors.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn899081)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn922019)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>), and listeners for the click events on the buttons are declared.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>), and listeners for the click events on the buttons are declared.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, we load the ink in the click event handler of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Load</pc> button.</source>
					<target>Finally, we load the ink in the click event handler of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Load</pc> button.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207847)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc> lets the user select both the file and the location from where to retrieve the saved ink data.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc> lets the user select both the file and the location from where to retrieve the saved ink data.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br241731)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br241635)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Once a file is selected, we open an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IRandomAccessStream</pc></pc> stream set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Read</pc></pc>.</source>
					<target>Once a file is selected, we open an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IRandomAccessStream</pc></pc> stream set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Read</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701607)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208492)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> to read, de-serialize, and load the saved ink strokes into the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc>.</source>
					<target>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> to read, de-serialize, and load the saved ink strokes into the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn899081)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Loading the strokes into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InkStrokeContainer</pc> causes the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">InkPresenter</pc></pc> to immediately render them to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">InkCanvas</pc></pc>.</source>
					<target>Loading the strokes into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InkStrokeContainer</pc> causes the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">InkPresenter</pc></pc> to immediately render them to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">InkCanvas</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>GIF is the only supported format for saving ink data.</source>
					<target>GIF is the only supported format for saving ink data.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701607)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> method does support the following formats for backward compatibility.</source>
					<target>However, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadAsync</pc></pc> method does support the following formats for backward compatibility.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Format</source>
					<target>Format</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>InkSerializedFormat</source>
					<target>InkSerializedFormat</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Specifies ink that is persisted using ISF.</source>
					<target>Specifies ink that is persisted using ISF.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This is the most compact persistent representation of ink.</source>
					<target>This is the most compact persistent representation of ink.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>It can be embedded within a binary document format or placed directly on the Clipboard.</source>
					<target>It can be embedded within a binary document format or placed directly on the Clipboard.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Base64InkSerializedFormat</source>
					<target>Base64InkSerializedFormat</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Specifies ink that is persisted by encoding the ISF as a base64 stream.</source>
					<target>Specifies ink that is persisted by encoding the ISF as a base64 stream.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>This format is provided so ink can be encoded directly in an XML or HTML file.</source>
					<target>This format is provided so ink can be encoded directly in an XML or HTML file.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Gif</source>
					<target>Gif</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file.</source>
					<target>Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application.</source>
					<target>This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications.</source>
					<target>This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Base64Gif</source>
					<target>Base64Gif</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Specifies ink that is persisted by using a base64-encoded fortified GIF.</source>
					<target>Specifies ink that is persisted by using a base64-encoded fortified GIF.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image.</source>
					<target>This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT).</source>
					<target>A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT).</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Copy and paste ink strokes with the clipboard</source>
					<target>Copy and paste ink strokes with the clipboard</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Here, we demonstrate how to use the clipboard to transfer ink strokes between apps.</source>
					<target>Here, we demonstrate how to use the clipboard to transfer ink strokes between apps.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208492)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To support clipboard functionality, the built-in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkStrokeContainer</pc></pc> cut and copy commands require one or more ink strokes be selected.</source>
					<target>To support clipboard functionality, the built-in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkStrokeContainer</pc></pc> cut and copy commands require one or more ink strokes be selected.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>For this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button).</source>
					<target>For this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button).</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](pen-and-stylus-interactions.md#passthrough)</data>
					<data id="id3">[</data>
					<data id="id4">](pen-and-stylus-interactions.md)</data>
				</originalData>
				<segment state="initial">
					<source>For a complete example of how to implement stroke selection, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pass-through input for advanced processing</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pen and stylus interactions</pc>.</source>
					<target>For a complete example of how to implement stroke selection, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pass-through input for advanced processing</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pen and stylus interactions</pc>.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>First, we set up the UI.</source>
					<target>First, we set up the UI.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn858535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The UI includes "Cut", "Copy", "Paste", and "Clear" buttons, along with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> and a selection canvas.</source>
					<target>The UI includes "Cut", "Copy", "Paste", and "Clear" buttons, along with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkCanvas</pc></pc> and a selection canvas.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>We then set some basic ink input behaviors.</source>
					<target>We then set some basic ink input behaviors.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn899081)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn922019)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>).</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">InkPresenter</pc></pc> is configured to interpret input data from both pen and mouse as ink strokes (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InputDeviceTypes</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.</source>
					<target>Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](pen-and-stylus-interactions.md#passthrough)</data>
					<data id="id3">[</data>
					<data id="id4">](pen-and-stylus-interactions.md)</data>
				</originalData>
				<segment state="initial">
					<source>For a complete example of how to implement stroke selection, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pass-through input for advanced processing</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pen and stylus interactions</pc> .</source>
					<target>For a complete example of how to implement stroke selection, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pass-through input for advanced processing</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pen and stylus interactions</pc> .</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cut</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Copy</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Paste</pc> buttons.</source>
					<target>Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cut</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Copy</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Paste</pc> buttons.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244232)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208492)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn922011)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>For cut, we first call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CopySelectedToClipboard</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc> of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">InkPresenter</pc></pc>.</source>
					<target>For cut, we first call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CopySelectedToClipboard</pc></pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">InkStrokeContainer</pc></pc> of the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">InkPresenter</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br244233)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeleteSelected</pc></pc> to remove the strokes from the ink canvas.</source>
					<target>We then call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeleteSelected</pc></pc> to remove the strokes from the ink canvas.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Finally, we delete all selection strokes from the selection canvas.</source>
					<target>Finally, we delete all selection strokes from the selection canvas.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](pen-and-stylus-interactions.md)</data>
					<data id="id3">
</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pen and stylus interactions</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Samples</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pen and stylus interactions</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Samples</pc></target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Ink sample</source>
					<target>Ink sample</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Simple ink sample</source>
					<target>Simple ink sample</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Complex ink sample</source>
					<target>Complex ink sample</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>