{"nodes":[{"pos":[17,241],"content":"Offer consumable in-app products&\\#8212;items that can be purchased, used, and purchased again&\\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.","needQuote":true,"needEscape":true,"nodes":[{"content":"Offer consumable in-app products&amp;\\#8212;items that can be purchased, used, and purchased again&amp;\\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.","pos":[0,224],"source":"Offer consumable in-app products&\\#8212;items that can be purchased, used, and purchased again&\\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable."}]},{"pos":[249,291],"content":"Enable consumable in-app product purchases","needQuote":true,"needEscape":true,"nodes":[{"content":"Enable consumable in-app product purchases","pos":[0,42]}]},{"pos":[516,540],"content":"in-app offer code sample","needQuote":true,"needEscape":true,"nodes":[{"content":"in-app offer code sample","pos":[0,24]}]},{"content":"Enable consumable in-app product purchases","pos":[548,590]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[593,631]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[632,727],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Offer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.","pos":[729,939]},{"content":"This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.","pos":[940,1086]},{"content":"Prerequisites","pos":[1091,1104]},{"content":"This topic covers the purchase and fulfillment reporting of consumable in-app products.","pos":[1110,1197]},{"content":"If you are unfamiliar with in-app products, please review <bpt id=\"p1\">[</bpt>Enable in-app product purchases<ept id=\"p1\">](enable-in-app-product-purchases.md)</ept> to learn about license information, and how to properly list in-app products in the Store.","pos":[1198,1416],"source":" If you are unfamiliar with in-app products, please review [Enable in-app product purchases](enable-in-app-product-purchases.md) to learn about license information, and how to properly list in-app products in the Store."},{"content":"When you code and test new in-app products for the first time, you must use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CurrentAppSimulator<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh779766)</ept> object instead of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CurrentApp<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh779765)</ept> object.","pos":[1421,1689],"source":"When you code and test new in-app products for the first time, you must use the [**CurrentAppSimulator**](https://msdn.microsoft.com/library/windows/apps/hh779766) object instead of the [**CurrentApp**](https://msdn.microsoft.com/library/windows/apps/hh779765) object."},{"content":"This way you can verify your license logic using simulated calls to the license server instead of calling the live server.","pos":[1690,1812]},{"content":"To do this, you need to customize the file named \"WindowsStoreProxy.xml\" in %userprofile%\\\\AppData\\\\local\\\\packages\\\\<ph id=\"ph1\">&amp;lt;</ph>package name<ph id=\"ph2\">&amp;gt;</ph>\\\\LocalState\\\\Microsoft\\\\Windows Store\\\\ApiData.","pos":[1813,1998],"source":" To do this, you need to customize the file named \"WindowsStoreProxy.xml\" in %userprofile%\\\\AppData\\\\local\\\\packages\\\\&lt;package name&gt;\\\\LocalState\\\\Microsoft\\\\Windows Store\\\\ApiData."},{"content":"The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime.","pos":[1999,2141]},{"content":"For more info, see <bpt id=\"p1\">**</bpt>CurrentAppSimulator<ept id=\"p1\">**</ept>.","pos":[2142,2185],"source":" For more info, see **CurrentAppSimulator**."},{"content":"This topic also references code examples provided in the <bpt id=\"p1\">[</bpt>Store sample<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkID=627610)</ept>.","pos":[2190,2311],"source":"This topic also references code examples provided in the [Store sample](http://go.microsoft.com/fwlink/p/?LinkID=627610)."},{"content":"This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.","pos":[2312,2457]},{"content":"Step 1: Making the purchase request","pos":[2462,2497]},{"content":"The initial purchase request is made with <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>RequestProductPurchaseAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263381)</ept> like any other purchase made through the Store.","pos":[2499,2680],"source":"The initial purchase request is made with [**RequestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) like any other purchase made through the Store."},{"content":"The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled.","pos":[2681,2905]},{"content":"It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.","pos":[2906,3010]},{"content":"The following example shows a consumable in-app product purchase request.","pos":[3012,3085]},{"content":"You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.","pos":[3086,3364]},{"content":"Step 2: Tracking local fulfillment of the consumable","pos":[4290,4342]},{"pos":[4344,4563],"content":"When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (<bpt id=\"p1\">*</bpt>productId<ept id=\"p1\">*</ept>), and which transaction that fulfillment is associated with (<bpt id=\"p2\">*</bpt>transactionId<ept id=\"p2\">*</ept>).","source":"When granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (*productId*), and which transaction that fulfillment is associated with (*transactionId*)."},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  Your app is responsible for the accurately reporting fulfillment to the Store.","pos":[4565,4658],"source":"**Important**  Your app is responsible for the accurately reporting fulfillment to the Store."},{"content":"This step is essential to maintaining a fair and reliable purchase experience for your customers.","pos":[4659,4756]},{"content":"The following example demonstrates use of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PurchaseResults<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263392)</ept> properties from the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>RequestProductPurchaseAsync<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn263381)</ept> call in the previous step to identify the purchased product for fulfillment.","pos":[4758,5072],"source":"The following example demonstrates use of the [**PurchaseResults**](https://msdn.microsoft.com/library/windows/apps/dn263392) properties from the [**RequestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) call in the previous step to identify the purchased product for fulfillment."},{"content":"An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.","pos":[5073,5215]},{"content":"This next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.","pos":[5636,5809]},{"pos":[5811,6013],"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.","source":"**Important**  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received."},{"content":"Step 3: Reporting product fulfillment to the Store","pos":[6255,6305]},{"pos":[6307,6554],"content":"After local fulfillment is completed, your app must make a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>ReportConsumableFulfillmentAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263380)</ept> call that includes the <bpt id=\"p3\">*</bpt>productId<ept id=\"p3\">*</ept> and the transaction the product purchase is included in.","source":"After local fulfillment is completed, your app must make a [**ReportConsumableFulfillmentAsync**](https://msdn.microsoft.com/library/windows/apps/dn263380) call that includes the *productId* and the transaction the product purchase is included in."},{"pos":[6556,6763],"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.","source":"**Important**  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported."},{"content":"Step 4: Identifying unfulfilled purchases","pos":[6909,6950]},{"content":"Your app can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetUnfulfilledConsumablesAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263379)</ept> method to check for unfulfilled consumable in-app products at any time.","pos":[6952,7139],"source":"Your app can use the [**GetUnfulfilledConsumablesAsync**](https://msdn.microsoft.com/library/windows/apps/dn263379) method to check for unfulfilled consumable in-app products at any time."},{"content":"This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.","pos":[7140,7332]},{"pos":[7334,7595],"content":"The following example demonstrates how <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetUnfulfilledConsumablesAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn263379)</ept> can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.","source":"The following example demonstrates how [**GetUnfulfilledConsumablesAsync**](https://msdn.microsoft.com/library/windows/apps/dn263379) can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment."},{"content":"Related topics","pos":[8091,8105]},{"content":"Enable in-app product purchases","pos":[8110,8141]},{"content":"Store sample (demonstrates trials and in-app purchases)","pos":[8182,8237]},{"content":"Windows.ApplicationModel.Store","pos":[8293,8323]}],"content":"---\nDescription: Offer consumable in-app products&\\#8212;items that can be purchased, used, and purchased again&\\#8212;through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable.\ntitle: Enable consumable in-app product purchases\nms.assetid: F79EE369-ACFC-4156-AF6A-72D1C7D3BDA4\nkeywords: in-app offer\nkeywords: consumable\nkeywords: in-app purchase\nkeywords: in-app product\nkeywords: how to support in-app\nkeywords: in-app purchase code sample\nkeywords: in-app offer code sample\n---\n\n# Enable consumable in-app product purchases\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nOffer consumable in-app products—items that can be purchased, used, and purchased again—through the Store commerce platform to provide your customers with a purchase experience that is both robust and reliable. This is especially useful for things like in-game currency (gold, coins, etc.) that can be purchased and then used to purchase specific power-ups.\n\n## Prerequisites\n\n-   This topic covers the purchase and fulfillment reporting of consumable in-app products. If you are unfamiliar with in-app products, please review [Enable in-app product purchases](enable-in-app-product-purchases.md) to learn about license information, and how to properly list in-app products in the Store.\n-   When you code and test new in-app products for the first time, you must use the [**CurrentAppSimulator**](https://msdn.microsoft.com/library/windows/apps/hh779766) object instead of the [**CurrentApp**](https://msdn.microsoft.com/library/windows/apps/hh779765) object. This way you can verify your license logic using simulated calls to the license server instead of calling the live server. To do this, you need to customize the file named \"WindowsStoreProxy.xml\" in %userprofile%\\\\AppData\\\\local\\\\packages\\\\&lt;package name&gt;\\\\LocalState\\\\Microsoft\\\\Windows Store\\\\ApiData. The Microsoft Visual Studio simulator creates this file when you run your app for the first time—or you can also load a custom one at runtime. For more info, see **CurrentAppSimulator**.\n-   This topic also references code examples provided in the [Store sample](http://go.microsoft.com/fwlink/p/?LinkID=627610). This sample is a great way to get hands-on experience with the different monetization options provided for Universal Windows Platform (UWP) apps.\n\n## Step 1: Making the purchase request\n\nThe initial purchase request is made with [**RequestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) like any other purchase made through the Store. The difference for consumable in-app products is that after a successful purchase, a customer cannot purchase the same product again until the app has notified the Store that the previous purchase was successfully fulfilled. It's your app's responsibility to fulfill purchased consumables and notify the Store of the fulfillment.\n\nThe following example shows a consumable in-app product purchase request. You'll notice code comments indicating when your app should conduct its local fulfillment of the consumable in-app product for two different scenarios—when the request is successful, and when the request is not successful because of an unfulfilled purchase of that same product.\n\n```CSharp\nPurchaseResults purchaseResults = await CurrentAppSimulator.RequestProductPurchaseAsync(\"product1\");\nswitch (purchaseResults.Status)\n{\n    case ProductPurchaseStatus.Succeeded:\n        product1TempTransactionId = purchaseResults.TransactionId;\n\n        // Grant the user their purchase here, and then pass the product ID and transaction ID to currentAppSimulator.reportConsumableFulfillment\n        // To indicate local fulfillment to the Windows Store.\n        break;\n\n    case ProductPurchaseStatus.NotFulfilled:\n        product1TempTransactionId = purchaseResults.TransactionId;\n\n        // First check for unfulfilled purchases and grant any unfulfilled purchases from an earlier transaction.\n        // Once products are fulfilled pass the product ID and transaction ID to currentAppSimulator.reportConsumableFulfillment\n        // To indicate local fulfillment to the Windows Store.\n        break;\n}\n```\n\n## Step 2: Tracking local fulfillment of the consumable\n\nWhen granting your customer access to the consumable in-app product, it's important to keep track of which product is fulfilled (*productId*), and which transaction that fulfillment is associated with (*transactionId*).\n\n**Important**  Your app is responsible for the accurately reporting fulfillment to the Store. This step is essential to maintaining a fair and reliable purchase experience for your customers.\n\nThe following example demonstrates use of the [**PurchaseResults**](https://msdn.microsoft.com/library/windows/apps/dn263392) properties from the [**RequestProductPurchaseAsync**](https://msdn.microsoft.com/library/windows/apps/dn263381) call in the previous step to identify the purchased product for fulfillment. An array is used to store the product information in a location that can later be referenced to confirm that local fulfillment was successful.\n\n```CSharp\nprivate void GrantFeatureLocally(string productId, Guid transactionId)\n{\n    if (!grantedConsumableTransactionIds.ContainsKey(productId))\n    {\n        grantedConsumableTransactionIds.Add(productId, new List<Guid>());\n    }\n    grantedConsumableTransactionIds[productId].Add(transactionId);\n\n    // Grant the user their content. You will likely increase some kind of gold/coins/some other asset count.\n}\n```\n\nThis next example shows how to use the array from the previous example to access product ID/transaction ID pairs that are later used when reporting fulfillment to the Store.\n\n**Important**  Whatever methodology your app uses to track and confirm fulfillment, your app must demonstrate due diligence to ensure that your customers are not charged for items they haven't received.\n\n```CSharp\nprivate Boolean IsLocallyFulfilled(string productId, Guid transactionId)\n{\n    return grantedConsumableTransactionIds.ContainsKey(productId) &amp;&amp; grantedConsumableTransactionIds[productId].Contains(transactionId);\n}\n```\n\n## Step 3: Reporting product fulfillment to the Store\n\nAfter local fulfillment is completed, your app must make a [**ReportConsumableFulfillmentAsync**](https://msdn.microsoft.com/library/windows/apps/dn263380) call that includes the *productId* and the transaction the product purchase is included in.\n\n**Important**  Failure to report fulfilled consumable in-app products to the Store will result in the user being unable to purchase that product again until fulfillment for the previous purchase is reported.\n\n```CSharp\nFulfillmentResult result = await CurrentAppSimulator.ReportConsumableFulfillmentAsync(\"product2\", product2TempTransactionId);\n```\n\n## Step 4: Identifying unfulfilled purchases\n\nYour app can use the [**GetUnfulfilledConsumablesAsync**](https://msdn.microsoft.com/library/windows/apps/dn263379) method to check for unfulfilled consumable in-app products at any time. This method should be called on a regular basis to check for unfulfilled consumables that exist due to unanticipated app events like an interruption in network connectivity or app termination.\n\nThe following example demonstrates how [**GetUnfulfilledConsumablesAsync**](https://msdn.microsoft.com/library/windows/apps/dn263379) can be used to enumerate unfulfilled consumables, and how your app can iterate through this list to complete local fulfillment.\n\n```CSharp\nprivate async void GetUnfulfilledConsumables()\n{\n    products = await CurrentApp.GetUnfulfilledConsumablesAsync();\n\n    foreach (UnfulfilledConsumable product in products)\n    {\n        logMessage += \"\\nProduct Id: \" + product.ProductId + \" Transaction Id: \" + product.TransactionId;\n        // This is where you would pass the product ID and transaction ID to currentAppSimulator.reportConsumableFulfillment\n    // To indicate local fulfillment to the Windows Store.\n    }\n}\n```\n\n## Related topics\n\n* [Enable in-app product purchases](enable-in-app-product-purchases.md)\n* [Store sample (demonstrates trials and in-app purchases)](http://go.microsoft.com/fwlink/p/?LinkID=627610)\n* [**Windows.ApplicationModel.Store**](https://msdn.microsoft.com/library/windows/apps/br225197)\n \n\n \n\n\n\n\n"}