{"nodes":[{"pos":[11,52],"content":"Update a live tile from a background task","needQuote":true,"needEscape":true,"nodes":[{"content":"Update a live tile from a background task","pos":[0,41]}]},{"pos":[66,138],"content":"Use a background task to update your app's live tile with fresh content.","needQuote":true,"needEscape":true,"nodes":[{"content":"Use a background task to update your app's live tile with fresh content.","pos":[0,72]}]},{"content":"Update a live tile from a background task","pos":[221,262]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[265,303]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[304,399],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[404,418]},{"content":"IBackgroundTask","pos":[429,444]},{"content":"BackgroundTaskBuilder","pos":[513,534]},{"content":"Use a background task to update your app's live tile with fresh content.","pos":[597,669]},{"content":"Here's a video that shows how to add live tiles to your apps.","pos":[671,732]},{"content":"One Dev Minute - Updating a live tile from a background task","pos":[1071,1131]},{"content":"Create the background task project","pos":[1145,1179]},{"content":"To enable a live tile for your app, add a new Windows Runtime Component project to your solution.","pos":[1182,1279]},{"content":"This is a separate assembly that the OS loads and runs in the background when a user installs your app.","pos":[1280,1383]},{"pos":[1389,1488],"content":"In Solution Explorer, right-click the solution, point to <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept>, and click or tap <bpt id=\"p2\">**</bpt>New Project<ept id=\"p2\">**</ept>.","source":"In Solution Explorer, right-click the solution, point to **Add**, and click or tap **New Project**."},{"pos":[1493,1626],"content":"In the <bpt id=\"p1\">**</bpt>Add New Project<ept id=\"p1\">**</ept> dialog, select the <bpt id=\"p2\">**</bpt>Windows Runtime Component<ept id=\"p2\">**</ept> template in the <bpt id=\"p3\">**</bpt>Visual C# <ph id=\"ph1\">&amp;gt;</ph> Windows Store<ept id=\"p3\">**</ept> section.","source":"In the **Add New Project** dialog, select the **Windows Runtime Component** template in the **Visual C# &gt; Windows Store** section."},{"content":"Name the project BackgroundTasks and click or tap <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","pos":[1631,1688],"source":"Name the project BackgroundTasks and click or tap **OK**."},{"content":"Microsoft Visual Studio adds the new project to the solution.","pos":[1689,1750]},{"content":"In the main project, add a reference to the BackgroundTasks project.","pos":[1755,1823]},{"content":"Implement the background task","pos":[1828,1857]},{"content":"Implement the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IBackgroundTask<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224794)</ept> interface to create a class that updates your app's live tile.","pos":[1860,2016],"source":"Implement the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface to create a class that updates your app's live tile."},{"content":"Your background work goes in the Run method.","pos":[2017,2061]},{"content":"In this case, the task gets a syndication feed for the MSDN blogs.","pos":[2062,2128]},{"content":"To prevent the task from closing prematurely while asynchronous code is still running, get a deferral.","pos":[2129,2231]},{"content":"In Solution Explorer, rename the automatically generated file, Class1.cs, to BlogFeedBackgroundTask.cs.","pos":[2237,2340]},{"pos":[2345,2476],"content":"In BlogFeedBackgroundTask.cs, replace the automatically generated code with the stub code for the <bpt id=\"p1\">**</bpt>BlogFeedBackgroundTask<ept id=\"p1\">**</ept> class.","source":"In BlogFeedBackgroundTask.cs, replace the automatically generated code with the stub code for the **BlogFeedBackgroundTask** class."},{"pos":[2481,2579],"content":"In the Run method implementation, add code for the <bpt id=\"p1\">**</bpt>GetMSDNBlogFeed<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>UpdateTile<ept id=\"p2\">**</ept> methods.","source":"In the Run method implementation, add code for the **GetMSDNBlogFeed** and **UpdateTile** methods."},{"content":"Set up the package manifest","pos":[5935,5962]},{"content":"To set up the package manifest, open it and add a new background task declaration.","pos":[5965,6047]},{"content":"Set the entry point for the task to the class name, including its namespace.","pos":[6048,6124]},{"content":"In Solution Explorer, open Package.appxmanifest.","pos":[6130,6178]},{"pos":[6183,6221],"content":"Click or tap the <bpt id=\"p1\">**</bpt>Declarations<ept id=\"p1\">**</ept> tab.","source":"Click or tap the **Declarations** tab."},{"content":"Under <bpt id=\"p1\">**</bpt>Available Declarations<ept id=\"p1\">**</ept>, select <bpt id=\"p2\">**</bpt>BackgroundTasks<ept id=\"p2\">**</ept> and click <bpt id=\"p3\">**</bpt>Add<ept id=\"p3\">**</ept>.","pos":[6226,6305],"source":"Under **Available Declarations**, select **BackgroundTasks** and click **Add**."},{"content":"Visual Studio adds <bpt id=\"p1\">**</bpt>BackgroundTasks<ept id=\"p1\">**</ept> under <bpt id=\"p2\">**</bpt>Supported Declarations<ept id=\"p2\">**</ept>.","pos":[6306,6378],"source":" Visual Studio adds **BackgroundTasks** under **Supported Declarations**."},{"pos":[6383,6448],"content":"Under <bpt id=\"p1\">**</bpt>Supported task types<ept id=\"p1\">**</ept>, ensure that <bpt id=\"p2\">**</bpt>Timer<ept id=\"p2\">**</ept> is checked.","source":"Under **Supported task types**, ensure that **Timer** is checked."},{"pos":[6453,6543],"content":"Under <bpt id=\"p1\">**</bpt>App settings<ept id=\"p1\">**</ept>, set the entry point to <bpt id=\"p2\">**</bpt>BackgroundTasks.BlogFeedBackgroundTask<ept id=\"p2\">**</ept>.","source":"Under **App settings**, set the entry point to **BackgroundTasks.BlogFeedBackgroundTask**."},{"pos":[6548,6588],"content":"Click or tap the <bpt id=\"p1\">**</bpt>Application UI<ept id=\"p1\">**</ept> tab.","source":"Click or tap the **Application UI** tab."},{"pos":[6593,6654],"content":"Set <bpt id=\"p1\">**</bpt>Lock screen notifications<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Badge and Tile Text<ept id=\"p2\">**</ept>.","source":"Set **Lock screen notifications** to **Badge and Tile Text**."},{"pos":[6659,6798],"content":"Set a path to a 24x24 pixel icon in the **Badge logo** field.\n**Important**  This icon must use monochrome and transparent pixels only.","leadings":["","    "],"nodes":[{"content":"Set a path to a 24x24 pixel icon in the <bpt id=\"p1\">**</bpt>Badge logo<ept id=\"p1\">**</ept> field.","pos":[0,61],"source":"Set a path to a 24x24 pixel icon in the **Badge logo** field."},{"content":"<bpt id=\"p1\">**</bpt>Important<ept id=\"p1\">**</ept>  This icon must use monochrome and transparent pixels only.","pos":[62,135],"source":"**Important**  This icon must use monochrome and transparent pixels only."}]},{"pos":[6803,6865],"content":"In the <bpt id=\"p1\">**</bpt>Small logo<ept id=\"p1\">**</ept> field, set a path to a 30x30 pixel icon.","source":"In the **Small logo** field, set a path to a 30x30 pixel icon."},{"pos":[6870,6933],"content":"In the <bpt id=\"p1\">**</bpt>Wide logo<ept id=\"p1\">**</ept> field, set a path to a 310x150 pixel icon.","source":"In the **Wide logo** field, set a path to a 310x150 pixel icon."},{"content":"Register the background task","pos":[6938,6966]},{"pos":[6969,7086],"content":"Create a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>BackgroundTaskBuilder<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224768)</ept> to register your task.","source":"Create a [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) to register your task."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Starting in Windows 8.1, background task registration parameters are validated at the time of registration.","pos":[7090,7207],"source":"**Note**  Starting in Windows 8.1, background task registration parameters are validated at the time of registration."},{"content":"An error is returned if any of the registration parameters are invalid.","pos":[7208,7279]},{"content":"Your app must be able to handle scenarios where background task registration fails - for example, use a conditional statement to check for registration errors and then retry failed registration using different parameter values.","pos":[7280,7507]},{"pos":[7511,7629],"content":"In your app's main page, add the <bpt id=\"p1\">**</bpt>RegisterBackgroundTask<ept id=\"p1\">**</ept> method and call it in the <bpt id=\"p2\">**</bpt>OnNavigatedTo<ept id=\"p2\">**</ept> event handler.","source":"In your app's main page, add the **RegisterBackgroundTask** method and call it in the **OnNavigatedTo** event handler."},{"content":"Debug the background task","pos":[10101,10126]},{"content":"To debug the background task, set a breakpoint in the task’s Run method.","pos":[10129,10201]},{"content":"In the <bpt id=\"p1\">**</bpt>Debug Location<ept id=\"p1\">**</ept> toolbar, select your background task.","pos":[10202,10265],"source":" In the **Debug Location** toolbar, select your background task."},{"content":"This causes the system to call the Run method immediately.","pos":[10266,10324]},{"content":"Set a breakpoint in the task’s Run method.","pos":[10330,10372]},{"pos":[10377,10450],"content":"Press F5 or tap <bpt id=\"p1\">**</bpt>Debug <ph id=\"ph1\">&amp;gt;</ph> Start Debugging<ept id=\"p1\">**</ept> to deploy and run the app.","source":"Press F5 or tap **Debug &gt; Start Debugging** to deploy and run the app."},{"content":"After the app launches, switch back to Visual Studio.","pos":[10455,10508]},{"content":"Ensure that the <bpt id=\"p1\">**</bpt>Debug Location<ept id=\"p1\">**</ept> toolbar is visible.","pos":[10513,10567],"source":"Ensure that the **Debug Location** toolbar is visible."},{"content":"It's on the <bpt id=\"p1\">**</bpt>View <ph id=\"ph1\">&amp;gt;</ph> Toolbars<ept id=\"p1\">**</ept> menu.","pos":[10568,10608],"source":" It's on the **View &gt; Toolbars** menu."},{"pos":[10613,10717],"content":"On the <bpt id=\"p1\">**</bpt>Debug Location<ept id=\"p1\">**</ept> toolbar, click the <bpt id=\"p2\">**</bpt>Suspend<ept id=\"p2\">**</ept> dropdown and select <bpt id=\"p3\">**</bpt>BlogFeedBackgroundTask<ept id=\"p3\">**</ept>.","source":"On the **Debug Location** toolbar, click the **Suspend** dropdown and select **BlogFeedBackgroundTask**."},{"content":"Visual Studio suspends execution at the breakpoint.","pos":[10722,10773]},{"pos":[10778,10846],"content":"Press F5 or tap <bpt id=\"p1\">**</bpt>Debug <ph id=\"ph1\">&amp;gt;</ph> Continue<ept id=\"p1\">**</ept> to continue running the app.","source":"Press F5 or tap **Debug &gt; Continue** to continue running the app."},{"pos":[10851,10921],"content":"Press Shift+F5 or tap <bpt id=\"p1\">**</bpt>Debug <ph id=\"ph1\">&amp;gt;</ph> Stop Debugging<ept id=\"p1\">**</ept> to stop debugging.","source":"Press Shift+F5 or tap **Debug &gt; Stop Debugging** to stop debugging."},{"content":"Return to the app's tile on the Start screen.","pos":[10926,10971]},{"content":"After a few seconds, tile notifications appear on your app's tile.","pos":[10972,11038]},{"content":"Related topics","pos":[11043,11057]},{"content":"BackgroundTaskBuilder","pos":[11065,11086]},{"content":"TileUpdateManager","pos":[11153,11170]},{"content":"TileNotification","pos":[11237,11253]},{"content":"Support your app with background tasks","pos":[11318,11356]},{"content":"Guidelines and checklist for tiles and badges","pos":[11404,11449]}],"content":"---\ntitle: Update a live tile from a background task\ndescription: Use a background task to update your app's live tile with fresh content.\nSearch.SourceType: Video\nms.assetid: 9237A5BD-F9DE-4B8C-B689-601201BA8B9A\n---\n\n\n# Update a live tile from a background task\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794)\n-   [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768)\n\nUse a background task to update your app's live tile with fresh content.\n\nHere's a video that shows how to add live tiles to your apps.\n\n<iframe src=\"https://hubs-video.ssl.catalog.video.msn.com/embed/afb47cc5-edd3-4262-ae45-8f0e3ae664ac/IA?csid=ux-en-us&MsnPlayerLeadsWith=html&PlaybackMode=Inline&MsnPlayerDisplayShareBar=false&MsnPlayerDisplayInfoButton=false&iframe=true&QualityOverride=HD\" width=\"720\" height=\"405\" allowFullScreen=\"true\" frameBorder=\"0\" scrolling=\"no\">One Dev Minute - Updating a live tile from a background task</iframe>\n\n## Create the background task project\n\n\nTo enable a live tile for your app, add a new Windows Runtime Component project to your solution. This is a separate assembly that the OS loads and runs in the background when a user installs your app.\n\n1.  In Solution Explorer, right-click the solution, point to **Add**, and click or tap **New Project**.\n2.  In the **Add New Project** dialog, select the **Windows Runtime Component** template in the **Visual C# &gt; Windows Store** section.\n3.  Name the project BackgroundTasks and click or tap **OK**. Microsoft Visual Studio adds the new project to the solution.\n4.  In the main project, add a reference to the BackgroundTasks project.\n\n## Implement the background task\n\n\nImplement the [**IBackgroundTask**](https://msdn.microsoft.com/library/windows/apps/br224794) interface to create a class that updates your app's live tile. Your background work goes in the Run method. In this case, the task gets a syndication feed for the MSDN blogs. To prevent the task from closing prematurely while asynchronous code is still running, get a deferral.\n\n1.  In Solution Explorer, rename the automatically generated file, Class1.cs, to BlogFeedBackgroundTask.cs.\n2.  In BlogFeedBackgroundTask.cs, replace the automatically generated code with the stub code for the **BlogFeedBackgroundTask** class.\n3.  In the Run method implementation, add code for the **GetMSDNBlogFeed** and **UpdateTile** methods.\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\n// Added during quickstart\nusing Windows.ApplicationModel.Background;\nusing Windows.Data.Xml.Dom;\nusing Windows.UI.Notifications;\nusing Windows.Web.Syndication;\n\nnamespace BackgroundTasks\n{\n    public sealed class BlogFeedBackgroundTask  : IBackgroundTask\n    {\n        public async void Run( IBackgroundTaskInstance taskInstance )\n        {\n            // Get a deferral, to prevent the task from closing prematurely \n            // while asynchronous code is still running.\n            BackgroundTaskDeferral deferral = taskInstance.GetDeferral();\n\n            // Download the feed.\n            var feed = await GetMSDNBlogFeed();\n\n            // Update the live tile with the feed items.\n            UpdateTile( feed );\n\n            // Inform the system that the task is finished.\n            deferral.Complete();\n        }\n\n        private static async Task<SyndicationFeed> GetMSDNBlogFeed()\n        {\n            SyndicationFeed feed = null;\n\n            try\n            {\n                // Create a syndication client that downloads the feed.  \n                SyndicationClient client = new SyndicationClient();\n                client.BypassCacheOnRetrieve = true;\n                client.SetRequestHeader( customHeaderName, customHeaderValue );\n\n                // Download the feed. \n                feed = await client.RetrieveFeedAsync( new Uri( feedUrl ) );\n            }\n            catch( Exception ex )\n            {\n                Debug.WriteLine( ex.ToString() );\n            }\n\n            return feed;\n        }\n\n        private static void UpdateTile( SyndicationFeed feed )\n        {\n            // Create a tile update manager for the specified syndication feed.\n            var updater = TileUpdateManager.CreateTileUpdaterForApplication();\n            updater.EnableNotificationQueue( true );\n            updater.Clear();\n\n            // Keep track of the number feed items that get tile notifications. \n            int itemCount = 0;\n\n            // Create a tile notification for each feed item.\n            foreach( var item in feed.Items )\n            {\n                XmlDocument tileXml = TileUpdateManager.GetTemplateContent( TileTemplateType.TileWideText03 );\n\n                var title = item.Title;\n                string titleText = title.Text == null ? String.Empty : title.Text;\n                tileXml.GetElementsByTagName( textElementName )[0].InnerText = titleText;\n\n                // Create a new tile notification. \n                updater.Update( new TileNotification( tileXml ) );\n\n                // Don't create more than 5 notifications.\n                if( itemCount++ > 5 ) break;\n            }\n        }\n\n        // Although most HTTP servers do not require User-Agent header, others will reject the request or return \n        // a different response if this header is missing. Use SetRequestHeader() to add custom headers. \n        static string customHeaderName = \"User-Agent\";\n        static string customHeaderValue = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)\";\n\n        static string textElementName = \"text\";\n        static string feedUrl = @\"http://blogs.msdn.com/b/MainFeed.aspx?Type=BlogsOnly\";\n    }\n}\n```\n\n## Set up the package manifest\n\n\nTo set up the package manifest, open it and add a new background task declaration. Set the entry point for the task to the class name, including its namespace.\n\n1.  In Solution Explorer, open Package.appxmanifest.\n2.  Click or tap the **Declarations** tab.\n3.  Under **Available Declarations**, select **BackgroundTasks** and click **Add**. Visual Studio adds **BackgroundTasks** under **Supported Declarations**.\n4.  Under **Supported task types**, ensure that **Timer** is checked.\n5.  Under **App settings**, set the entry point to **BackgroundTasks.BlogFeedBackgroundTask**.\n6.  Click or tap the **Application UI** tab.\n7.  Set **Lock screen notifications** to **Badge and Tile Text**.\n8.  Set a path to a 24x24 pixel icon in the **Badge logo** field.\n    **Important**  This icon must use monochrome and transparent pixels only.\n9.  In the **Small logo** field, set a path to a 30x30 pixel icon.\n10. In the **Wide logo** field, set a path to a 310x150 pixel icon.\n\n## Register the background task\n\n\nCreate a [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768) to register your task.\n\n> **Note**  Starting in Windows 8.1, background task registration parameters are validated at the time of registration. An error is returned if any of the registration parameters are invalid. Your app must be able to handle scenarios where background task registration fails - for example, use a conditional statement to check for registration errors and then retry failed registration using different parameter values.\n \n\nIn your app's main page, add the **RegisterBackgroundTask** method and call it in the **OnNavigatedTo** event handler.\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Windows.ApplicationModel.Background;\nusing Windows.Data.Xml.Dom;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Navigation;\nusing Windows.Web.Syndication;\n\n// The Blank Page item template is documented at http://go.microsoft.com/fwlink/p/?LinkID=234238\n\nnamespace ContosoApp\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n\n        /// <summary>\n        /// Invoked when this page is about to be displayed in a Frame.\n        /// </summary>\n        /// <param name=\"e\">Event data that describes how this page was reached.  The Parameter\n        /// property is typically used to configure the page.</param>\n        protected override void OnNavigatedTo( NavigationEventArgs e )\n        {\n            this.RegisterBackgroundTask();\n        }\n\n\n        private async void RegisterBackgroundTask()\n        {\n            var backgroundAccessStatus = await BackgroundExecutionManager.RequestAccessAsync();\n            if( backgroundAccessStatus == BackgroundAccessStatus.AllowedMayUseActiveRealTimeConnectivity ||\n                backgroundAccessStatus == BackgroundAccessStatus.AllowedWithAlwaysOnRealTimeConnectivity )\n            {\n                foreach( var task in BackgroundTaskRegistration.AllTasks )\n                {\n                    if( task.Value.Name == taskName )\n                    {\n                        task.Value.Unregister( true );\n                    }\n                }\n\n                BackgroundTaskBuilder taskBuilder = new BackgroundTaskBuilder();\n                taskBuilder.Name = taskName;\n                taskBuilder.TaskEntryPoint = taskEntryPoint;\n                taskBuilder.SetTrigger( new TimeTrigger( 15, false ) );\n                var registration = taskBuilder.Register();\n            }\n        }\n\n        private const string taskName = \"BlogFeedBackgroundTask\";\n        private const string taskEntryPoint = \"BackgroundTasks.BlogFeedBackgroundTask\";\n    }\n}\n```\n\n## Debug the background task\n\n\nTo debug the background task, set a breakpoint in the task’s Run method. In the **Debug Location** toolbar, select your background task. This causes the system to call the Run method immediately.\n\n1.  Set a breakpoint in the task’s Run method.\n2.  Press F5 or tap **Debug &gt; Start Debugging** to deploy and run the app.\n3.  After the app launches, switch back to Visual Studio.\n4.  Ensure that the **Debug Location** toolbar is visible. It's on the **View &gt; Toolbars** menu.\n5.  On the **Debug Location** toolbar, click the **Suspend** dropdown and select **BlogFeedBackgroundTask**.\n6.  Visual Studio suspends execution at the breakpoint.\n7.  Press F5 or tap **Debug &gt; Continue** to continue running the app.\n8.  Press Shift+F5 or tap **Debug &gt; Stop Debugging** to stop debugging.\n9.  Return to the app's tile on the Start screen. After a few seconds, tile notifications appear on your app's tile.\n\n## Related topics\n\n\n* [**BackgroundTaskBuilder**](https://msdn.microsoft.com/library/windows/apps/br224768)\n* [**TileUpdateManager**](https://msdn.microsoft.com/library/windows/apps/br208622)\n* [**TileNotification**](https://msdn.microsoft.com/library/windows/apps/br208616)\n* [Support your app with background tasks](support-your-app-with-background-tasks.md)\n* [Guidelines and checklist for tiles and badges](https://msdn.microsoft.com/library/windows/apps/hh465403)\n\n \n\n \n\n\n\n"}