{"nodes":[{"pos":[60,97],"content":"Enumerate and query files and folders","needQuote":true,"needEscape":true,"nodes":[{"content":"Enumerate and query files and folders","pos":[0,37]}]},{"pos":[111,289],"content":"Access files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.","needQuote":true,"needEscape":true,"nodes":[{"content":"Access files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.","pos":[0,178],"nodes":[{"content":"Access files and folders in either a folder, library, device, or network location.","pos":[0,82]},{"content":"You can also query the files and folders in a location by constructing file and folder queries.","pos":[83,178]}]}]},{"content":"Enumerate and query files and folders","pos":[296,333]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[336,374]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[375,470],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Access files and folders in either a folder, library, device, or network location.","pos":[473,555]},{"content":"You can also query the files and folders in a location by constructing file and folder queries.","pos":[556,651]},{"pos":[653,753],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Also see the <bpt id=\"p2\">[</bpt>Folder enumeration sample<ept id=\"p2\">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.","source":"**Note**  Also see the [Folder enumeration sample](http://go.microsoft.com/fwlink/p/?linkid=619993)."},{"content":"Prerequisites","pos":[760,773]},{"content":"Understand async programming for Universal Windows Platform (UWP) apps","pos":[781,851]},{"content":"You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id=\"p1\">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.","pos":[859,1036],"source":"You can learn how to write asynchronous apps in C# or Visual Basic, see [Call asynchronous APIs in C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/mt187337)."},{"content":"To learn how to write asynchronous apps in C++, see <bpt id=\"p1\">[</bpt>Asynchronous programming in C++<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.","pos":[1037,1181],"source":" To learn how to write asynchronous apps in C++, see [Asynchronous programming in C++](https://msdn.microsoft.com/library/windows/apps/mt187334)."},{"content":"Access permissions to the location","pos":[1189,1223]},{"content":"For example, the code in these examples require the <bpt id=\"p1\">**</bpt>picturesLibrary<ept id=\"p1\">**</ept> capability, but your location may require a different capability or no capability at all.","pos":[1231,1392],"source":"For example, the code in these examples require the **picturesLibrary** capability, but your location may require a different capability or no capability at all."},{"content":"To learn more, see <bpt id=\"p1\">[</bpt>File access permissions<ept id=\"p1\">](file-access-permissions.md)</ept>.","pos":[1393,1466],"source":" To learn more, see [File access permissions](file-access-permissions.md)."},{"content":"Enumerate files and folders in a location","pos":[1471,1512]},{"pos":[1514,1579],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Remember to declare the <bpt id=\"p2\">**</bpt>picturesLibrary<ept id=\"p2\">**</ept> capability.","source":"**Note**  Remember to declare the **picturesLibrary** capability."},{"content":"In this example we first use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolder.GetFilesAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>PicturesLibrary<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.","pos":[1581,1891],"source":"In this example we first use the [**StorageFolder.GetFilesAsync**](https://msdn.microsoft.com/library/windows/apps/br227276) method to get all the files in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders) and list the name of each file."},{"content":"Next, we use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetFoldersAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id=\"p3\">**</bpt>PicturesLibrary<ept id=\"p3\">**</ept> and list the name of each subfolder.","pos":[1892,2085],"source":" Next, we use the [**GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br227280) method to get all the subfolders in the **PicturesLibrary** and list the name of each subfolder."},{"pos":[5084,5235],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  In C# or Visual Basic, remember to put the <bpt id=\"p2\">**</bpt>async<ept id=\"p2\">**</ept> keyword in the method declaration of any method in which you use the <bpt id=\"p3\">**</bpt>await<ept id=\"p3\">**</ept> operator.","source":"**Note**  In C# or Visual Basic, remember to put the **async** keyword in the method declaration of any method in which you use the **await** operator."},{"content":"Alternatively, you can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetItemsAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.","pos":[5239,5425],"source":"Alternatively, you can use the [**GetItemsAsync**](https://msdn.microsoft.com/library/windows/apps/br227286) method to get all items (both files and subfolders) in a particular location."},{"content":"The following example uses the <bpt id=\"p1\">**</bpt>GetItemsAsync<ept id=\"p1\">**</ept> method to get all files and subfolders in the root folder of the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>PicturesLibrary<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).","pos":[5426,5640],"source":" The following example uses the **GetItemsAsync** method to get all files and subfolders in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders)."},{"content":"Then the example lists the name of each file and subfolder.","pos":[5641,5700]},{"content":"If the item is a subfolder, the example appends <ph id=\"ph1\">`\"folder\"`</ph> to the name.","pos":[5701,5772],"source":" If the item is a subfolder, the example appends `\"folder\"` to the name."},{"content":"Query files in a location and enumerate matching files","pos":[7354,7408]},{"content":"In this example we query for all the files in the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>PicturesLibrary<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.","pos":[7410,7613],"source":"In this example we query for all the files in the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) grouped by the month, and this time the example recurses into subfolders."},{"content":"First, we call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolder.CreateFolderQuery<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>CommonFolderQuery.GroupByMonth<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.","pos":[7614,7853],"source":" First, we call [**StorageFolder.CreateFolderQuery**](https://msdn.microsoft.com/library/windows/apps/br227262) and pass the [**CommonFolderQuery.GroupByMonth**](https://msdn.microsoft.com/library/windows/apps/br207957) value to the method."},{"content":"That gives us a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolderQueryResult<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.","pos":[7854,7966],"source":" That gives us a [**StorageFolderQueryResult**](https://msdn.microsoft.com/library/windows/apps/br208066) object."},{"content":"Next we call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StorageFolder<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.","pos":[7968,8215],"source":"Next we call [**StorageFolderQueryResult.GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br208074) which returns [**StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) objects representing virtual folders."},{"content":"In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.","pos":[8216,8329]},{"content":"The output of the example looks similar to the following.","pos":[11385,11442]}],"content":"---\nms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD\ntitle: Enumerate and query files and folders\ndescription: Access files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.\n---\n# Enumerate and query files and folders\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\nAccess files and folders in either a folder, library, device, or network location. You can also query the files and folders in a location by constructing file and folder queries.\n\n**Note**  Also see the [Folder enumeration sample](http://go.microsoft.com/fwlink/p/?linkid=619993).\n\n \n## Prerequisites\n\n-   **Understand async programming for Universal Windows Platform (UWP) apps**\n\n    You can learn how to write asynchronous apps in C# or Visual Basic, see [Call asynchronous APIs in C# or Visual Basic](https://msdn.microsoft.com/library/windows/apps/mt187337). To learn how to write asynchronous apps in C++, see [Asynchronous programming in C++](https://msdn.microsoft.com/library/windows/apps/mt187334).\n\n-   **Access permissions to the location**\n\n    For example, the code in these examples require the **picturesLibrary** capability, but your location may require a different capability or no capability at all. To learn more, see [File access permissions](file-access-permissions.md).\n\n## Enumerate files and folders in a location\n\n**Note**  Remember to declare the **picturesLibrary** capability.\n\nIn this example we first use the [**StorageFolder.GetFilesAsync**](https://msdn.microsoft.com/library/windows/apps/br227276) method to get all the files in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders) and list the name of each file. Next, we use the [**GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br227280) method to get all the subfolders in the **PicturesLibrary** and list the name of each subfolder.\n\n<!--BUGBUG: OP can't handle snippets with < or > presently in the TabbedCodeSnippets form. Commenting out for now -->\n<!-- > [!div class=\"tabbedCodeSnippets\"] -->\n```cpp\n//#include <ppltasks.h>\n//#include <string>\n//#include <memory>\nusing namespace Windows::Storage;\nusing namespace Platform::Collections;\nusing namespace concurrency;\nusing namespace std;\n\n// Be sure to specify the Pictures Folder capability in the appxmanifext file.\nStorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n\n// Use a shared_ptr so that the string stays in memory\n// until the last task is complete.\nauto outputString = make_shared<wstring>();\n*outputString += L\"Files:\\n\";\n\n// Get a read-only vector of the file objects\n// and pass it to the continuation. \ncreate_task(picturesFolder->GetFilesAsync())        \n    // outputString is captured by value, which creates a copy \n    // of the shared_ptr and increments its reference count.\n    .then ([outputString] (IVectorView<StorageFile^>^ files)\n{        \n    for ( unsigned int i = 0 ; i < files->Size; i++)\n    {\n        *outputString += files->GetAt(i)->Name->Data();\n        *outputString += L\"\\n\";\n    }\n})\n    // We need to explicitly state the return type \n    // here: -> IAsyncOperation<...>\n    .then([picturesFolder]() -> IAsyncOperation<IVectorView<StorageFolder^>^>^ \n{\n    return picturesFolder->GetFoldersAsync();\n})\n    // Capture \"this\" to access m_OutputTextBlock from within the lambda.\n    .then([this, outputString](IVectorView<StorageFolder^>^ folders)\n{        \n    *outputString += L\"Folders:\\n\";\n\n    for ( unsigned int i = 0; i < folders->Size; i++)\n    {\n        *outputString += folders->GetAt(i)->Name->Data();\n        *outputString += L\"\\n\";\n    }\n\n    // Assume m_OutputTextBlock is a TextBlock defined in the XAML.\n    m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n});\n```\n```csharp\nStorageFolder picturesFolder = KnownFolders.PicturesLibrary;\nStringBuilder outputText = new StringBuilder();\n\nIReadOnlyList<StorageFile> fileList = \n    await picturesFolder.GetFilesAsync();\n\noutputText.AppendLine(\"Files:\");\nforeach (StorageFile file in fileList)\n{\n    outputText.Append(file.Name + \"\\n\");\n}\n\nIReadOnlyList<StorageFolder> folderList = \n    await picturesFolder.GetFoldersAsync();\n           \noutputText.AppendLine(\"Folders:\");\nforeach (StorageFolder folder in folderList)\n{\n    outputText.Append(folder.DisplayName + \"\\n\");\n}\n```\n```vb\nDim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\nDim outputText As New StringBuilder\n\nDim fileList As IReadOnlyList(Of StorageFile) =\n    Await picturesFolder.GetFilesAsync()\n\noutputText.AppendLine(\"Files:\")\nFor Each file As StorageFile In fileList\n\n    outputText.Append(file.Name & vbLf)\n\nNext file\n\nDim folderList As IReadOnlyList(Of StorageFolder) =\n    Await picturesFolder.GetFoldersAsync()\n\noutputText.AppendLine(\"Folders:\")\nFor Each folder As StorageFolder In folderList\n\n    outputText.Append(folder.DisplayName & vbLf)\n\nNext folder\n```\n\n**Note**  In C# or Visual Basic, remember to put the **async** keyword in the method declaration of any method in which you use the **await** operator.\n \n\nAlternatively, you can use the [**GetItemsAsync**](https://msdn.microsoft.com/library/windows/apps/br227286) method to get all items (both files and subfolders) in a particular location. The following example uses the **GetItemsAsync** method to get all files and subfolders in the root folder of the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) (not in subfolders). Then the example lists the name of each file and subfolder. If the item is a subfolder, the example appends `\"folder\"` to the name.\n\n<!-- > [!div class=\"tabbedCodeSnippets\"] -->\n```cpp\n// See previous example for comments, namespace and #include info.\nStorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\nauto outputString = make_shared<wstring>();\n\ncreate_task(picturesFolder->GetItemsAsync())        \n    .then ([this, outputString] (IVectorView<IStorageItem^>^ items)\n{        \n    for ( unsigned int i = 0 ; i < items->Size; i++)\n    {\n        *outputString += items->GetAt(i)->Name->Data();\n        if(items->GetAt(i)->IsOfType(StorageItemTypes::Folder))\n        {\n            *outputString += L\"  folder\\n\";\n        }\n        else\n        {\n            *outputString += L\"\\n\";\n        }\n        m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n    }\n});\n```\n```csharp\nStorageFolder picturesFolder = KnownFolders.PicturesLibrary;\nStringBuilder outputText = new StringBuilder();\n\nIReadOnlyList<IStorageItem> itemsList = \n    await picturesFolder.GetItemsAsync();\n\nforeach (var item in itemsList)\n{\n    if (item is StorageFolder)\n    {\n        outputText.Append(item.Name + \" folder\\n\");\n\n    }\n    else\n    {\n        outputText.Append(item.Name + \"\\n\");\n\n    }\n}\n```\n```vb\nDim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\nDim outputText As New StringBuilder\n\nDim itemsList As IReadOnlyList(Of IStorageItem) =\n    Await picturesFolder.GetItemsAsync()\n\nFor Each item In itemsList\n\n    If TypeOf item Is StorageFolder Then\n\n        outputText.Append(item.Name & \" folder\" & vbLf)\n\n    Else\n\n        outputText.Append(item.Name & vbLf)\n\n    End If\n\nNext item\n```\n\n## Query files in a location and enumerate matching files\n\nIn this example we query for all the files in the [**PicturesLibrary**](https://msdn.microsoft.com/library/windows/apps/br227156) grouped by the month, and this time the example recurses into subfolders. First, we call [**StorageFolder.CreateFolderQuery**](https://msdn.microsoft.com/library/windows/apps/br227262) and pass the [**CommonFolderQuery.GroupByMonth**](https://msdn.microsoft.com/library/windows/apps/br207957) value to the method. That gives us a [**StorageFolderQueryResult**](https://msdn.microsoft.com/library/windows/apps/br208066) object.\n\nNext we call [**StorageFolderQueryResult.GetFoldersAsync**](https://msdn.microsoft.com/library/windows/apps/br208074) which returns [**StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) objects representing virtual folders. In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.\n\n<!--> [!div class=\"tabbedCodeSnippets\"] -->\n```cpp\n//#include <ppltasks.h>\n//#include <string>\n//#include <memory>\nusing namespace Windows::Storage;\nusing namespace Windows::Storage::Search;\nusing namespace concurrency;\nusing namespace Platform::Collections;\nusing namespace Windows::Foundation::Collections;\nusing namespace std;\n\nStorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;\n\nStorageFolderQueryResult^ queryResult = \n    picturesFolder->CreateFolderQuery(CommonFolderQuery::GroupByMonth);\n\n// Use shared_ptr so that outputString remains in memory\n// until the task completes, which is after the function goes out of scope.\nauto outputString = std::make_shared<wstring>();\n\ncreate_task( queryResult->GetFoldersAsync()).then([this, outputString] (IVectorView<StorageFolder^>^ view) \n{        \n    for ( unsigned int i = 0; i < view->Size; i++)\n    {\n        create_task(view->GetAt(i)->GetFilesAsync()).then([this, i, view, outputString](IVectorView<StorageFile^>^ files)\n        {\n            *outputString += view->GetAt(i)->Name->Data();\n            *outputString += L\"(\";\n            *outputString += to_wstring(files->Size);\n            *outputString += L\")\\r\\n\";\n            for (unsigned int j = 0; j < files->Size; j++)\n            {\n                *outputString += L\"     \";\n                *outputString += files->GetAt(j)->Name->Data();\n                *outputString += L\"\\r\\n\";\n            }\n        }).then([this, outputString]()\n        {\n            m_OutputTextBlock->Text = ref new String((*outputString).c_str());\n        });\n    }    \n});\n```\n```csharp\nStorageFolder picturesFolder = KnownFolders.PicturesLibrary;\n\nStorageFolderQueryResult queryResult = \n    picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth);\n        \nIReadOnlyList<StorageFolder> folderList = \n    await queryResult.GetFoldersAsync();\n\nStringBuilder outputText = new StringBuilder();\n\nforeach (StorageFolder folder in folderList)\n{\n    IReadOnlyList<StorageFile> fileList = await folder.GetFilesAsync();\n\n    // Print the month and number of files in this group.\n    outputText.AppendLine(folder.Name + \" (\" + fileList.Count + \")\");\n\n    foreach (StorageFile file in fileList)\n    {\n        // Print the name of the file.\n        outputText.AppendLine(\"   \" + file.Name);\n    }\n}\n```\n```vb\nDim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary\nDim outputText As New StringBuilder\n\nDim queryResult As StorageFolderQueryResult =\n    picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth)\n\nDim folderList As IReadOnlyList(Of StorageFolder) =\n    Await queryResult.GetFoldersAsync()\n\nFor Each folder As StorageFolder In folderList\n\n    Dim fileList As IReadOnlyList(Of StorageFile) =\n        Await folder.GetFilesAsync()\n\n    ' Print the month and number of files in this group.\n    outputText.AppendLine(folder.Name & \" (\" & fileList.Count & \")\")\n\n    For Each file As StorageFile In fileList\n\n        ' Print the name of the file.\n        outputText.AppendLine(\"   \" & file.Name)\n\n    Next file\n\nNext folder\n```\n\nThe output of the example looks similar to the following.\n\n``` syntax\nJuly ‎2015 (2)\n   MyImage3.png\n   MyImage4.png\n‎December ‎2014 (2)\n   MyImage1.png\n   MyImage2.png\n```\n\n"}