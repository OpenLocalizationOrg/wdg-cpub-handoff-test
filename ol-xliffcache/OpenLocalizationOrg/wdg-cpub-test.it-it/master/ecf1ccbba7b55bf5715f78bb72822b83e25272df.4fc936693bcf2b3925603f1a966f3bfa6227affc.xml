{"nodes":[{"pos":[60,87],"content":"Create a periodic work item","needQuote":true,"needEscape":true,"nodes":[{"content":"Create a periodic work item","pos":[0,27]}]},{"pos":[101,159],"content":"Learn how to create a work item that repeats periodically.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to create a work item that repeats periodically.","pos":[0,58]}]},{"content":"Create a periodic work item","pos":[166,193]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[195,233]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[234,329],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[334,348]},{"content":"CreatePeriodicTimer","pos":[360,379]},{"content":"ThreadPoolTimer","pos":[448,463]},{"content":"Learn how to create a work item that repeats periodically.","pos":[526,584]},{"content":"Create the periodic work item","pos":[589,618]},{"content":"Use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreatePeriodicTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967915)</ept> method to create a periodic work item.","pos":[620,750],"source":"Use the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) method to create a periodic work item."},{"content":"Supply a lambda that accomplishes the work, and use the <bpt id=\"p1\">*</bpt>period<ept id=\"p1\">*</ept> parameter to specify the interval between submissions.","pos":[751,870],"source":" Supply a lambda that accomplishes the work, and use the *period* parameter to specify the interval between submissions."},{"content":"The period is specified using a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimeSpan<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/BR225996)</ept> structure.","pos":[871,986],"source":" The period is specified using a [**TimeSpan**](https://msdn.microsoft.com/library/windows/apps/BR225996) structure."},{"content":"The work item will be resubmitted every time the period elapses, so make sure the period is long enough for work to complete.","pos":[987,1112]},{"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreateTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.createtimer.aspx)</ept> returns a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ThreadPoolTimer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/BR230587)</ept> object.","pos":[1114,1342],"source":"[**CreateTimer**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.createtimer.aspx) returns a [**ThreadPoolTimer**](https://msdn.microsoft.com/library/windows/apps/BR230587) object."},{"content":"Store this object in case the timer needs to be canceled.","pos":[1343,1400]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Avoid specifying a value of zero (or any value less than one millisecond) for the interval.","pos":[1402,1503],"source":"**Note**  Avoid specifying a value of zero (or any value less than one millisecond) for the interval."},{"content":"This causes the periodic timer to behave as a single-shot timer instead.","pos":[1504,1576]},{"pos":[1578,1742],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  You can use <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>CoreDispatcher.RunAsync<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to access the UI and show progress from the work item.","source":"**Note**  You can use [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/Hh750317) to access the UI and show progress from the work item."},{"content":"The following example creates a work item that runs once every 60 seconds:","pos":[1744,1818]},{"content":"Handle cancellation of the periodic work item (optional)","pos":[3125,3181]},{"content":"If needed, you can handle cancellation of the periodic timer with a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimerDestroyedHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967926)</ept>.","pos":[3183,3337],"source":"If needed, you can handle cancellation of the periodic timer with a [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926)."},{"content":"Use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CreatePeriodicTimer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967915)</ept> overload to supply an additional lambda that handles cancellation of the periodic work item.","pos":[3338,3522],"source":" Use the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) overload to supply an additional lambda that handles cancellation of the periodic work item."},{"content":"The following example creates a periodic work item that repeats every 60 seconds and it also supplies a cancellation handler:","pos":[3524,3649]},{"content":"Cancel the timer","pos":[6062,6078]},{"content":"When necessary, call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.cancel.aspx)</ept> method to stop the periodic work item from repeating.","pos":[6080,6279],"source":"When necessary, call the [**Cancel**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.cancel.aspx) method to stop the periodic work item from repeating."},{"content":"If the work item is running when the periodic timer is cancelled it is allowed to complete.","pos":[6280,6371]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>TimerDestroyedHandler<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/Hh967926)</ept> (if provided) is called when all instances of the periodic work item have completed.","pos":[6372,6546],"source":" The [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926) (if provided) is called when all instances of the periodic work item have completed."},{"content":"Remarks","pos":[6667,6674]},{"pos":[6676,6795],"content":"For information about single-use timers, see <bpt id=\"p1\">[</bpt>Use a timer to submit a work item<ept id=\"p1\">](use-a-timer-to-submit-a-work-item.md)</ept>.","source":"For information about single-use timers, see [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md)."},{"content":"Related topics","pos":[6800,6814]},{"content":"Submit a work item to the thread pool","pos":[6819,6856]},{"content":"Best practices for using the thread pool","pos":[6903,6943]},{"content":"Use a timer to submit a work item","pos":[6993,7026]}],"content":"---\nms.assetid: 1B077801-0A58-4A34-887C-F1E85E9A37B0\ntitle: Create a periodic work item\ndescription: Learn how to create a work item that repeats periodically.\n---\n# Create a periodic work item\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n** Important APIs **\n\n-   [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915)\n-   [**ThreadPoolTimer**](https://msdn.microsoft.com/library/windows/apps/BR230587)\n\nLearn how to create a work item that repeats periodically.\n\n## Create the periodic work item\n\nUse the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) method to create a periodic work item. Supply a lambda that accomplishes the work, and use the *period* parameter to specify the interval between submissions. The period is specified using a [**TimeSpan**](https://msdn.microsoft.com/library/windows/apps/BR225996) structure. The work item will be resubmitted every time the period elapses, so make sure the period is long enough for work to complete.\n\n[**CreateTimer**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.createtimer.aspx) returns a [**ThreadPoolTimer**](https://msdn.microsoft.com/library/windows/apps/BR230587) object. Store this object in case the timer needs to be canceled.\n\n**Note**  Avoid specifying a value of zero (or any value less than one millisecond) for the interval. This causes the periodic timer to behave as a single-shot timer instead.\n\n**Note**  You can use [**CoreDispatcher.RunAsync**](https://msdn.microsoft.com/library/windows/apps/Hh750317) to access the UI and show progress from the work item.\n\nThe following example creates a work item that runs once every 60 seconds:\n\n> [!div class=\"tabbedCodeSnippets\"]\n```csharp\nTimeSpan period = TimeSpan.FromSeconds(60);\n\nThreadPoolTimer PeriodicTimer = ThreadPoolTimer.CreatePeriodicTimer((source) =&gt;\n    {\n        // \n        // TODO: Work\n        // \n        \n        // \n        // Update the UI thread by using the UI core dispatcher.\n        // \n        Dispatcher.RunAsync(CoreDispatcherPriority.High,\n            () =&gt;\n            {\n                // \n                // UI components can be accessed within this scope.\n                // \n\n            });\n\n    }, period);\n```\n``` cpp\nTimeSpan period;\nperiod.Duration = 60 * 10000000; // 10,000,000 ticks per second\n\nThreadPoolTimer ^ PeriodicTimer = ThreadPoolTimer::CreatePeriodicTimer(\n        ref new TimerElapsedHandler([this](ThreadPoolTimer^ source)\n        {\n            // \n            // TODO: Work\n            // \n            \n            // \n            // Update the UI thread by using the UI core dispatcher.\n            // \n            Dispatcher-&gt;RunAsync(CoreDispatcherPriority::High,\n                ref new DispatchedHandler([this]()\n                {\n                    // \n                    // UI components can be accessed within this scope.\n                    // \n                        \n                }));\n\n        }), period);\n```\n\n## Handle cancellation of the periodic work item (optional)\n\nIf needed, you can handle cancellation of the periodic timer with a [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926). Use the [**CreatePeriodicTimer**](https://msdn.microsoft.com/library/windows/apps/Hh967915) overload to supply an additional lambda that handles cancellation of the periodic work item.\n\nThe following example creates a periodic work item that repeats every 60 seconds and it also supplies a cancellation handler:\n\n> [!div class=\"tabbedCodeSnippets\"]\n``` csharp\nusing Windows.System.Threading;\n\n    TimeSpan period = TimeSpan.FromSeconds(60);\n\n    ThreadPoolTimer PeriodicTimer = ThreadPoolTimer.CreatePeriodicTimer((source) =&gt;\n    {\n        // \n        // TODO: Work\n        // \n        \n        // \n        // Update the UI thread by using the UI core dispatcher.\n        // \n        Dispatcher.RunAsync(CoreDispatcherPriority.High,\n            () =&gt;\n            {\n                // \n                // UI components can be accessed within this scope.\n                // \n\n            });\n    },\n    period,\n    (source) =&gt;\n    {\n        // \n        // TODO: Handle periodic timer cancellation.\n        // \n\n        // \n        // Update the UI thread by using the UI core dispatcher.\n        // \n        Dispatcher-&gt;RunAsync(CoreDispatcherPriority.High,\n            ()=&gt;\n            {\n                // \n                // UI components can be accessed within this scope.\n                //                 \n\n                // Periodic timer cancelled.\n\n            }));\n    });\n```\n``` cpp\nusing namespace Windows::System::Threading;\nusing namespace Windows::UI::Core;\n\nTimeSpan period;\nperiod.Duration = 60 * 10000000; // 10,000,000 ticks per second\n\nThreadPoolTimer ^ PeriodicTimer = ThreadPoolTimer::CreatePeriodicTimer(\n        ref new TimerElapsedHandler([this](ThreadPoolTimer^ source)\n        {\n            // \n            // TODO: Work\n            // \n                \n            // \n            // Update the UI thread by using the UI core dispatcher.\n            // \n            Dispatcher-&gt;RunAsync(CoreDispatcherPriority::High,\n                ref new DispatchedHandler([this]()\n                {\n                    // \n                    // UI components can be accessed within this scope.\n                    // \n\n                }));\n\n        }),\n        period,\n        ref new TimerDestroyedHandler([&amp;](ThreadPoolTimer ^ source)\n        {\n            // \n            // TODO: Handle periodic timer cancellation.\n            // \n\n            Dispatcher-&gt;RunAsync(CoreDispatcherPriority::High,\n                ref new DispatchedHandler([&amp;]()\n                {\n                    // \n                    // UI components can be accessed within this scope.\n                    // \n\n                    // Periodic timer cancelled.\n\n                }));\n        }));\n```\n## Cancel the timer\n\nWhen necessary, call the [**Cancel**](https://msdn.microsoft.com/en-us/library/windows/apps/windows.system.threading.threadpooltimer.cancel.aspx) method to stop the periodic work item from repeating. If the work item is running when the periodic timer is cancelled it is allowed to complete. The [**TimerDestroyedHandler**](https://msdn.microsoft.com/library/windows/apps/Hh967926) (if provided) is called when all instances of the periodic work item have completed.\n\n> [!div class=\"tabbedCodeSnippets\"]\n``` csharp\nPeriodicTimer.Cancel();\n```\n``` cpp\nPeriodicTimer-&gt;Cancel();\n```\n\n## Remarks\n\nFor information about single-use timers, see [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md).\n\n## Related topics\n\n* [Submit a work item to the thread pool](submit-a-work-item-to-the-thread-pool.md)\n* [Best practices for using the thread pool](best-practices-for-using-the-thread-pool.md)\n* [Use a timer to submit a work item](use-a-timer-to-submit-a-work-item.md)\n \n\n"}