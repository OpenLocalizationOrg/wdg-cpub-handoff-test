{"nodes":[{"pos":[17,135],"content":"Store ink stroke data in a Graphics Interchange Format (GIF) file using embedded Ink Serialized Format (ISF) metadata.","needQuote":true,"needEscape":true,"nodes":[{"content":"Store ink stroke data in a Graphics Interchange Format (GIF) file using embedded Ink Serialized Format (ISF) metadata.","pos":[0,118]}]},{"pos":[143,173],"content":"Store and retrieve ink strokes","needQuote":true,"needEscape":true,"nodes":[{"content":"Store and retrieve ink strokes","pos":[0,30]}]},{"content":"Store and retrieve ink strokes","pos":[289,319]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[320,358]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[359,454],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Apps that support ink input can serialize and deserialize the ink metadata with full fidelity, maintaining all properties and behaviors.","pos":[456,592]},{"content":"Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.","pos":[593,703]},{"content":"Important APIs","pos":[708,722]},{"content":"InkCanvas","pos":[733,742]},{"content":"Windows.UI.Input.Inking","pos":[811,834]},{"content":"Note","pos":[901,905]},{"content":"ISF is the most compact persistent representation of ink.","pos":[910,967]},{"content":"It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.","pos":[968,1076]},{"pos":[1219,1245],"content":"Save ink strokes to a file"},{"pos":[1248,1387],"content":"Here, we demonstrate how to save ink strokes drawn on an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> control.","source":"Here, we demonstrate how to save ink strokes drawn on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control."},{"content":"First, we set up the UI.","pos":[1393,1417]},{"pos":[1423,1558],"content":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>.","source":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535)."},{"content":"We then set some basic ink input behaviors.","pos":[2554,2597]},{"pos":[2603,2908],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>), and listeners for the click events on the buttons are declared.","source":"The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared."},{"pos":[3492,3567],"content":"Finally, we save the ink in the click event handler of the <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept> button.","source":"Finally, we save the ink in the click event handler of the **Save** button."},{"pos":[3573,3734],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FileSavePicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207871)</ept> lets the user select both the file and the location where the ink data is saved.","source":"A [**FileSavePicker**](https://msdn.microsoft.com/library/windows/apps/br207871) lets the user select both the file and the location where the ink data is saved."},{"pos":[3740,3948],"content":"Once a file is selected, we open an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IRandomAccessStream<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept> stream set to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>ReadWrite<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241635)</ept>.","source":"Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**ReadWrite**](https://msdn.microsoft.com/library/windows/apps/br241635)."},{"pos":[3954,4182],"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SaveAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242114)</ept> to serialize the ink strokes managed by the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> to the stream.","source":"We then call [**SaveAsync**](https://msdn.microsoft.com/library/windows/apps/br242114) to serialize the ink strokes managed by the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) to the stream."},{"content":"Note","pos":[6786,6790]},{"content":"GIF is the only supported format for saving ink data.","pos":[6795,6848]},{"content":"However, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> method (demonstrated in the next section) does support additional formats for backward compatibility.","pos":[6849,7037],"source":" However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method (demonstrated in the next section) does support additional formats for backward compatibility."},{"pos":[7186,7214],"content":"Load ink strokes from a file"},{"pos":[7217,7378],"content":"Here, we demonstrate how to load ink strokes from a file and render them on an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> control.","source":"Here, we demonstrate how to load ink strokes from a file and render them on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control."},{"content":"First, we set up the UI.","pos":[7384,7408]},{"pos":[7414,7549],"content":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>.","source":"The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535)."},{"content":"We then set some basic ink input behaviors.","pos":[8545,8588]},{"pos":[8594,8899],"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>), and listeners for the click events on the buttons are declared.","source":"The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared."},{"pos":[9483,9558],"content":"Finally, we load the ink in the click event handler of the <bpt id=\"p1\">**</bpt>Load<ept id=\"p1\">**</ept> button.","source":"Finally, we load the ink in the click event handler of the **Load** button."},{"pos":[9564,9739],"content":"A <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>FileOpenPicker<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br207847)</ept> lets the user select both the file and the location from where to retrieve the saved ink data.","source":"A [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847) lets the user select both the file and the location from where to retrieve the saved ink data."},{"pos":[9745,9948],"content":"Once a file is selected, we open an <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>IRandomAccessStream<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241731)</ept> stream set to <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Read<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br241635)</ept>.","source":"Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**Read**](https://msdn.microsoft.com/library/windows/apps/br241635)."},{"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> to read, de-serialize, and load the saved ink strokes into the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept>.","pos":[9954,10187],"source":"We then call [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) to read, de-serialize, and load the saved ink strokes into the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492)."},{"content":"Loading the strokes into the <bpt id=\"p1\">**</bpt>InkStrokeContainer<ept id=\"p1\">**</ept> causes the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>InkPresenter<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> to immediately render them to the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>InkCanvas<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept>.","pos":[10188,10436],"source":" Loading the strokes into the **InkStrokeContainer** causes the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) to immediately render them to the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535)."},{"content":"Note","pos":[13040,13044]},{"content":"GIF is the only supported format for saving ink data.","pos":[13049,13102]},{"content":"However, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LoadAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701607)</ept> method does support the following formats for backward compatibility.","pos":[13103,13259],"source":" However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method does support the following formats for backward compatibility."},{"content":"Format","pos":[13263,13269]},{"content":"Description","pos":[13291,13302]},{"content":"InkSerializedFormat","pos":[14107,14126]},{"content":"Specifies ink that is persisted using ISF.","pos":[14135,14177]},{"content":"This is the most compact persistent representation of ink.","pos":[14178,14236]},{"content":"It can be embedded within a binary document format or placed directly on the Clipboard.","pos":[14237,14324]},{"content":"Base64InkSerializedFormat","pos":[14529,14554]},{"content":"Specifies ink that is persisted by encoding the ISF as a base64 stream.","pos":[14557,14628]},{"content":"This format is provided so ink can be encoded directly in an XML or HTML file.","pos":[14629,14707]},{"content":"Gif","pos":[14951,14954]},{"content":"Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file.","pos":[14979,15086]},{"content":"This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application.","pos":[15087,15239]},{"content":"This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications.","pos":[15240,15368]},{"content":"Base64Gif","pos":[15373,15382]},{"content":"Specifies ink that is persisted by using a base64-encoded fortified GIF.","pos":[15401,15473]},{"content":"This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image.","pos":[15474,15591]},{"content":"A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT).","pos":[15592,15764]},{"pos":[15995,16040],"content":"Copy and paste ink strokes with the clipboard"},{"content":"Here, we demonstrate how to use the clipboard to transfer ink strokes between apps.","pos":[16043,16126]},{"pos":[16128,16326],"content":"To support clipboard functionality, the built-in <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkStrokeContainer<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> cut and copy commands require one or more ink strokes be selected.","source":"To support clipboard functionality, the built-in [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) cut and copy commands require one or more ink strokes be selected."},{"content":"For this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button).","pos":[16328,16445]},{"content":"For a complete example of how to implement stroke selection, see <bpt id=\"p1\">[</bpt>Pass-through input for advanced processing<ept id=\"p1\">](pen-and-stylus-interactions.md#passthrough)</ept> in <bpt id=\"p2\">[</bpt>Pen and stylus interactions<ept id=\"p2\">](pen-and-stylus-interactions.md)</ept>.","pos":[16446,16665],"source":" For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md)."},{"content":"First, we set up the UI.","pos":[16671,16695]},{"pos":[16701,16874],"content":"The UI includes \"Cut\", \"Copy\", \"Paste\", and \"Clear\" buttons, along with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkCanvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn858535)</ept> and a selection canvas.","source":"The UI includes \"Cut\", \"Copy\", \"Paste\", and \"Clear\" buttons, along with the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) and a selection canvas."},{"content":"We then set some basic ink input behaviors.","pos":[18143,18186]},{"content":"The <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>InkPresenter<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn899081)</ept> is configured to interpret input data from both pen and mouse as ink strokes (<bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InputDeviceTypes<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/dn922019)</ept>).","pos":[18192,18433],"source":"The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019))."},{"content":"Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.","pos":[18434,18568]},{"pos":[18574,18794],"content":"For a complete example of how to implement stroke selection, see <bpt id=\"p1\">[</bpt>Pass-through input for advanced processing<ept id=\"p1\">](pen-and-stylus-interactions.md#passthrough)</ept> in <bpt id=\"p2\">[</bpt>Pen and stylus interactions<ept id=\"p2\">](pen-and-stylus-interactions.md)</ept> .","source":"For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md) ."},{"pos":[20744,20905],"content":"Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the <bpt id=\"p1\">**</bpt>Cut<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Copy<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Paste<ept id=\"p3\">**</ept> buttons.","source":"Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the **Cut**, **Copy**, and **Paste** buttons."},{"pos":[20911,21196],"content":"For cut, we first call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CopySelectedToClipboard<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244232)</ept> on the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>InkStrokeContainer<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br208492)</ept> of the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>InkPresenter<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/dn922011)</ept>.","source":"For cut, we first call [**CopySelectedToClipboard**](https://msdn.microsoft.com/library/windows/apps/br244232) on the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011)."},{"pos":[21202,21336],"content":"We then call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DeleteSelected<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br244233)</ept> to remove the strokes from the ink canvas.","source":"We then call [**DeleteSelected**](https://msdn.microsoft.com/library/windows/apps/br244233) to remove the strokes from the ink canvas."},{"content":"Finally, we delete all selection strokes from the selection canvas.","pos":[21342,21409]},{"pos":[23587,23603],"content":"Related articles"},{"pos":[23608,23681],"content":"<bpt id=\"p1\">[</bpt>Pen and stylus interactions<ept id=\"p1\">](pen-and-stylus-interactions.md)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>Samples<ept id=\"p2\">**</ept>","source":"[Pen and stylus interactions](pen-and-stylus-interactions.md)\n**Samples**"},{"content":"Ink sample","pos":[23685,23695]},{"content":"Simple ink sample","pos":[23749,23766]},{"content":"Complex ink sample","pos":[23820,23838]}],"content":"---\nDescription: Store ink stroke data in a Graphics Interchange Format (GIF) file using embedded Ink Serialized Format (ISF) metadata.\ntitle: Store and retrieve ink strokes\nms.assetid: C96C9D2F-DB69-4883-9809-4A0DF7CEC506\nlabel: Store and retrieve ink strokes\ntemplate: detail.hbs\n---\n\n# Store and retrieve ink strokes\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nApps that support ink input can serialize and deserialize the ink metadata with full fidelity, maintaining all properties and behaviors. Apps that are not ink-enabled, can view the static GIF image, including alpha-channel background transparency.\n\n\n**Important APIs**\n\n-   [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535)\n-   [**Windows.UI.Input.Inking**](https://msdn.microsoft.com/library/windows/apps/br208524)\n\n\n\n**Note**  \nISF is the most compact persistent representation of ink. It can be embedded within a binary document format, such as a GIF file, or placed directly on the Clipboard.\n\n \n\n## <span id=\"Save_ink_strokes_to_a_file\"></span><span id=\"save_ink_strokes_to_a_file\"></span><span id=\"SAVE_INK_STROKES_TO_A_FILE\"></span>Save ink strokes to a file\n\n\nHere, we demonstrate how to save ink strokes drawn on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control.\n\n1.  First, we set up the UI.\n\n    The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"Header\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnSave\" \n                    Content=\"Save\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnLoad\" \n                    Content=\"Load\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"50,0,10,0\"/>\n        </StackPanel>\n        <Grid Grid.Row=\"1\">\n            <InkCanvas x:Name=\"inkCanvas\" />\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared.\n\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to initiate save.\n        btnSave.Click += btnSave_Click;\n        // Listen for button click to initiate load.\n        btnLoad.Click += btnLoad_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n    }\n```\n\n3.  Finally, we save the ink in the click event handler of the **Save** button.\n\n    A [**FileSavePicker**](https://msdn.microsoft.com/library/windows/apps/br207871) lets the user select both the file and the location where the ink data is saved.\n\n    Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**ReadWrite**](https://msdn.microsoft.com/library/windows/apps/br241635).\n\n    We then call [**SaveAsync**](https://msdn.microsoft.com/library/windows/apps/br242114) to serialize the ink strokes managed by the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) to the stream.\n\n```    CSharp\n// Save ink data to a file.\n    private async void btnSave_Click(object sender, RoutedEventArgs e)\n    {\n        // Get all strokes on the InkCanvas.\n        IReadOnlyList<InkStroke> currentStrokes = inkCanvas.InkPresenter.StrokeContainer.GetStrokes();\n\n        // Strokes present on ink canvas.\n        if (currentStrokes.Count > 0)\n        {\n            // Let users choose their ink file using a file picker.\n            // Initialize the picker.\n            Windows.Storage.Pickers.FileSavePicker savePicker = \n                new Windows.Storage.Pickers.FileSavePicker();\n            savePicker.SuggestedStartLocation = \n                Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;\n            savePicker.FileTypeChoices.Add(\n                \"GIF with embedded ISF\", \n                new List<string>() { \".gif\" });\n            savePicker.DefaultFileExtension = \".gif\";\n            savePicker.SuggestedFileName = \"InkSample\";\n\n            // Show the file picker.\n            Windows.Storage.StorageFile file = \n                await savePicker.PickSaveFileAsync();\n            // When chosen, picker returns a reference to the selected file.\n            if (file != null)\n            {\n                // Prevent updates to the file until updates are \n                // finalized with call to CompleteUpdatesAsync.\n                Windows.Storage.CachedFileManager.DeferUpdates(file);\n                // Open a file stream for writing.\n                IRandomAccessStream stream = await file.OpenAsync(Windows.Storage.FileAccessMode.ReadWrite);\n                // Write the ink strokes to the output stream.\n                using (IOutputStream outputStream = stream.GetOutputStreamAt(0))\n                {\n                    await inkCanvas.InkPresenter.StrokeContainer.SaveAsync(outputStream);\n                    await outputStream.FlushAsync();\n                }\n                stream.Dispose();\n\n                // Finalize write so other apps can update file.\n                Windows.Storage.Provider.FileUpdateStatus status =\n                    await Windows.Storage.CachedFileManager.CompleteUpdatesAsync(file);\n\n                if (status == Windows.Storage.Provider.FileUpdateStatus.Complete)\n                {\n                    // File saved.\n                }\n                else\n                {\n                    // File couldn&#39;t be saved.\n                }\n            }\n            // User selects Cancel and picker returns null.\n            else\n            {\n                // Operation cancelled.\n            }\n        }\n    }\n```\n\n**Note**  \nGIF is the only supported format for saving ink data. However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method (demonstrated in the next section) does support additional formats for backward compatibility.\n\n \n\n## <span id=\"Load_ink_strokes_from_a_file\"></span><span id=\"load_ink_strokes_from_a_file\"></span><span id=\"LOAD_INK_STROKES_FROM_A_FILE\"></span>Load ink strokes from a file\n\n\nHere, we demonstrate how to load ink strokes from a file and render them on an [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) control.\n\n1.  First, we set up the UI.\n\n    The UI includes \"Save\", \"Load\", and \"Clear\" buttons, and the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"Header\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnSave\" \n                    Content=\"Save\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnLoad\" \n                    Content=\"Load\" \n                    Margin=\"50,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"50,0,10,0\"/>\n        </StackPanel>\n        <Grid Grid.Row=\"1\">\n            <InkCanvas x:Name=\"inkCanvas\" />\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)), and listeners for the click events on the buttons are declared.\n\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to initiate save.\n        btnSave.Click += btnSave_Click;\n        // Listen for button click to initiate load.\n        btnLoad.Click += btnLoad_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n    }\n```\n\n3.  Finally, we load the ink in the click event handler of the **Load** button.\n\n    A [**FileOpenPicker**](https://msdn.microsoft.com/library/windows/apps/br207847) lets the user select both the file and the location from where to retrieve the saved ink data.\n\n    Once a file is selected, we open an [**IRandomAccessStream**](https://msdn.microsoft.com/library/windows/apps/br241731) stream set to [**Read**](https://msdn.microsoft.com/library/windows/apps/br241635).\n\n    We then call [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) to read, de-serialize, and load the saved ink strokes into the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492). Loading the strokes into the **InkStrokeContainer** causes the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) to immediately render them to the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535).\n\n```    CSharp\n// Save ink data to a file.\n    private async void btnSave_Click(object sender, RoutedEventArgs e)\n    {\n        // Get all strokes on the InkCanvas.\n        IReadOnlyList<InkStroke> currentStrokes = inkCanvas.InkPresenter.StrokeContainer.GetStrokes();\n\n        // Strokes present on ink canvas.\n        if (currentStrokes.Count > 0)\n        {\n            // Let users choose their ink file using a file picker.\n            // Initialize the picker.\n            Windows.Storage.Pickers.FileSavePicker savePicker = \n                new Windows.Storage.Pickers.FileSavePicker();\n            savePicker.SuggestedStartLocation = \n                Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary;\n            savePicker.FileTypeChoices.Add(\n                \"GIF with embedded ISF\", \n                new List<string>() { \".gif\" });\n            savePicker.DefaultFileExtension = \".gif\";\n            savePicker.SuggestedFileName = \"InkSample\";\n\n            // Show the file picker.\n            Windows.Storage.StorageFile file = \n                await savePicker.PickSaveFileAsync();\n            // When chosen, picker returns a reference to the selected file.\n            if (file != null)\n            {\n                // Prevent updates to the file until updates are \n                // finalized with call to CompleteUpdatesAsync.\n                Windows.Storage.CachedFileManager.DeferUpdates(file);\n                // Open a file stream for writing.\n                IRandomAccessStream stream = await file.OpenAsync(Windows.Storage.FileAccessMode.ReadWrite);\n                // Write the ink strokes to the output stream.\n                using (IOutputStream outputStream = stream.GetOutputStreamAt(0))\n                {\n                    await inkCanvas.InkPresenter.StrokeContainer.SaveAsync(outputStream);\n                    await outputStream.FlushAsync();\n                }\n                stream.Dispose();\n\n                // Finalize write so other apps can update file.\n                Windows.Storage.Provider.FileUpdateStatus status =\n                    await Windows.Storage.CachedFileManager.CompleteUpdatesAsync(file);\n\n                if (status == Windows.Storage.Provider.FileUpdateStatus.Complete)\n                {\n                    // File saved.\n                }\n                else\n                {\n                    // File couldn&#39;t be saved.\n                }\n            }\n            // User selects Cancel and picker returns null.\n            else\n            {\n                // Operation cancelled.\n            }\n        }\n    }\n```\n\n**Note**  \nGIF is the only supported format for saving ink data. However, the [**LoadAsync**](https://msdn.microsoft.com/library/windows/apps/hh701607) method does support the following formats for backward compatibility.\n\n| Format                    | Description                                                                                                                                                                                                                                                                                                                                                                                           |\n|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| InkSerializedFormat       | Specifies ink that is persisted using ISF. This is the most compact persistent representation of ink. It can be embedded within a binary document format or placed directly on the Clipboard.                                                                                                                                                                                                         |\n| Base64InkSerializedFormat | Specifies ink that is persisted by encoding the ISF as a base64 stream. This format is provided so ink can be encoded directly in an XML or HTML file.                                                                                                                                                                                                                                                |\n| Gif                       | Specifies ink that is persisted by using a GIF file that contains ISF as metadata embedded within the file. This enables ink to be viewed in applications that are not ink-enabled and maintain its full ink fidelity when it returns to an ink-enabled application. This format is ideal when transporting ink content within an HTML file and for making it usable by ink and non-ink applications. |\n| Base64Gif                 | Specifies ink that is persisted by using a base64-encoded fortified GIF. This format is provided when ink is to be encoded directly in an XML or HTML file for later conversion into an image. A possible use of this is in an XML format generated to contain all ink information and used to generate HTML through Extensible Stylesheet Language Transformations (XSLT).                           |\n\n \n\n \n\n## <span id=\"Copy_and_paste_ink_strokes_with_the_clipboard\"></span><span id=\"copy_and_paste_ink_strokes_with_the_clipboard\"></span><span id=\"COPY_AND_PASTE_INK_STROKES_WITH_THE_CLIPBOARD\"></span>Copy and paste ink strokes with the clipboard\n\n\nHere, we demonstrate how to use the clipboard to transfer ink strokes between apps.\n\nTo support clipboard functionality, the built-in [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) cut and copy commands require one or more ink strokes be selected.\n\nFor this example, we enable stroke selection when input is modified with a pen barrel button (or right mouse button). For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md).\n\n1.  First, we set up the UI.\n\n    The UI includes \"Cut\", \"Copy\", \"Paste\", and \"Clear\" buttons, along with the [**InkCanvas**](https://msdn.microsoft.com/library/windows/apps/dn858535) and a selection canvas.\n\n```    XAML\n<Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <StackPanel x:Name=\"HeaderPanel\" Orientation=\"Horizontal\" Grid.Row=\"0\">\n            <TextBlock x:Name=\"tbHeader\" \n                       Text=\"Basic ink store sample\" \n                       Style=\"{ThemeResource HeaderTextBlockStyle}\" \n                       Margin=\"10,0,0,0\" />\n            <Button x:Name=\"btnCut\" \n                    Content=\"Cut\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnCopy\" \n                    Content=\"Copy\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnPaste\" \n                    Content=\"Paste\" \n                    Margin=\"20,0,10,0\"/>\n            <Button x:Name=\"btnClear\" \n                    Content=\"Clear\" \n                    Margin=\"20,0,10,0\"/>\n        </StackPanel>\n        <Grid x:Name=\"gridCanvas\" Grid.Row=\"1\">\n            <!-- Canvas for displaying selection UI. -->\n            <Canvas x:Name=\"selectionCanvas\"/>\n            <!-- Inking area -->\n            <InkCanvas x:Name=\"inkCanvas\"/>\n        </Grid>\n    </Grid>\n```\n\n2.  We then set some basic ink input behaviors.\n\n    The [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn899081) is configured to interpret input data from both pen and mouse as ink strokes ([**InputDeviceTypes**](https://msdn.microsoft.com/library/windows/apps/dn922019)). Listeners for the click events on the buttons as well as pointer and stroke events for selection functionality are also declared here.\n\n    For a complete example of how to implement stroke selection, see [Pass-through input for advanced processing](pen-and-stylus-interactions.md#passthrough) in [Pen and stylus interactions](pen-and-stylus-interactions.md) .\n\n```    CSharp\npublic MainPage()\n    {\n        this.InitializeComponent();\n\n        // Set supported inking device types.\n        inkCanvas.InkPresenter.InputDeviceTypes =\n            Windows.UI.Core.CoreInputDeviceTypes.Mouse |\n            Windows.UI.Core.CoreInputDeviceTypes.Pen;\n\n        // Listen for button click to cut ink strokes.\n        btnCut.Click += btnCut_Click;\n        // Listen for button click to copy ink strokes.\n        btnCopy.Click += btnCopy_Click;\n        // Listen for button click to paste ink strokes.\n        btnPaste.Click += btnPaste_Click;\n        // Listen for button click to clear ink canvas.\n        btnClear.Click += btnClear_Click;\n\n        // By default, the InkPresenter processes input modified by \n        // a secondary affordance (pen barrel button, right mouse \n        // button, or similar) as ink.\n        // To pass through modified input to the app for custom processing \n        // on the app UI thread instead of the background ink thread, set \n        // InputProcessingConfiguration.RightDragAction to LeaveUnprocessed.\n        inkCanvas.InkPresenter.InputProcessingConfiguration.RightDragAction =\n            InkInputRightDragAction.LeaveUnprocessed;\n\n        // Listen for unprocessed pointer events from modified input.\n        // The input is used to provide selection functionality.\n        inkCanvas.InkPresenter.UnprocessedInput.PointerPressed +=\n            UnprocessedInput_PointerPressed;\n        inkCanvas.InkPresenter.UnprocessedInput.PointerMoved +=\n            UnprocessedInput_PointerMoved;\n        inkCanvas.InkPresenter.UnprocessedInput.PointerReleased +=\n            UnprocessedInput_PointerReleased;\n\n        // Listen for new ink or erase strokes to clean up selection UI.\n        inkCanvas.InkPresenter.StrokeInput.StrokeStarted +=\n            StrokeInput_StrokeStarted;\n        inkCanvas.InkPresenter.StrokesErased +=\n            InkPresenter_StrokesErased;\n    }\n```\n\n3.  Finally, after adding stroke selection support, we implement clipboard functionality in the click event handlers of the **Cut**, **Copy**, and **Paste** buttons.\n\n    For cut, we first call [**CopySelectedToClipboard**](https://msdn.microsoft.com/library/windows/apps/br244232) on the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011).\n\n    We then call [**DeleteSelected**](https://msdn.microsoft.com/library/windows/apps/br244233) to remove the strokes from the ink canvas.\n\n    Finally, we delete all selection strokes from the selection canvas.\n\n```    CSharp\nprivate void btnCut_Click(object sender, RoutedEventArgs e)\n    {\n        inkCanvas.InkPresenter.StrokeContainer.CopySelectedToClipboard();\n        inkCanvas.InkPresenter.StrokeContainer.DeleteSelected();\n        ClearSelection();\n    }\n```\n\n```    CSharp\n// Clean up selection UI.\n    private void ClearSelection()\n    {\n        var strokes = inkCanvas.InkPresenter.StrokeContainer.GetStrokes();\n        foreach (var stroke in strokes)\n        {\n            stroke.Selected = false;\n        }\n        ClearDrawnBoundingRect();\n    }\n\n    private void ClearDrawnBoundingRect()\n    {\n        if (selectionCanvas.Children.Any())\n        {\n            selectionCanvas.Children.Clear();\n            boundingRect = Rect.Empty;\n        }\n    }\n```\n\n    For copy, we simply call [**CopySelectedToClipboard**](https://msdn.microsoft.com/library/windows/apps/br244232) on the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011).\n\n```    CSharp\nprivate void btnCopy_Click(object sender, RoutedEventArgs e)\n    {\n        inkCanvas.InkPresenter.StrokeContainer.CopySelectedToClipboard();\n    }\n```\n\n    For paste, we call [**CanPasteFromClipboard**](https://msdn.microsoft.com/library/windows/apps/br208495) to ensure that the content on the clipboard can be pasted to the ink canvas.\n\n    If so, we call [**PasteFromClipboard**](https://msdn.microsoft.com/library/windows/apps/br208503) to insert the clipboard ink strokes into the [**InkStrokeContainer**](https://msdn.microsoft.com/library/windows/apps/br208492) of the [**InkPresenter**](https://msdn.microsoft.com/library/windows/apps/dn922011), which then renders the strokes to the ink canvas.\n\n```    CSharp\nprivate void btnPaste_Click(object sender, RoutedEventArgs e)\n    {\n        if (inkCanvas.InkPresenter.StrokeContainer.CanPasteFromClipboard())\n        {\n            inkCanvas.InkPresenter.StrokeContainer.PasteFromClipboard(\n                new Point(0, 0));\n        }\n        else\n        {\n            // Cannot paste from clipboard.\n        }\n    }\n```\n\n## <span id=\"related_topics\"></span>Related articles\n\n\n* [Pen and stylus interactions](pen-and-stylus-interactions.md)\n**Samples**\n* [Ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620308)\n* [Simple ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620312)\n* [Complex ink sample](http://go.microsoft.com/fwlink/p/?LinkID=620314)\n \n\n \n\n\n\n\n"}