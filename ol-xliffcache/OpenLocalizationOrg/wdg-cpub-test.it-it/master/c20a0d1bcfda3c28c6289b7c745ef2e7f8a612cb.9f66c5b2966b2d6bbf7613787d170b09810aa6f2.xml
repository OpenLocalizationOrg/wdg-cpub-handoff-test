{"nodes":[{"pos":[17,98],"content":"Explains the concept of an attached property in XAML, and provides some examples.","needQuote":true,"needEscape":true,"nodes":[{"content":"Explains the concept of an attached property in XAML, and provides some examples.","pos":[0,81]}]},{"pos":[106,134],"content":"Attached properties overview","needQuote":true,"needEscape":true,"nodes":[{"content":"Attached properties overview","pos":[0,28]}]},{"content":"Attached properties overview","pos":[191,219]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[221,259]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[260,355],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"An <bpt id=\"p1\">*</bpt>attached property<ept id=\"p1\">*</ept> is a XAML concept.","pos":[357,398],"source":"An *attached property* is a XAML concept."},{"content":"It is conceptually similar to a global property that can be set on any object element in XAML.","pos":[399,493]},{"content":"Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.","pos":[494,664]},{"content":"Prerequisites","pos":[669,682]},{"pos":[684,840],"content":"We assume that you understand the basic concept of dependency properties, and have read <bpt id=\"p1\">[</bpt>Dependency properties overview<ept id=\"p1\">](dependency-properties-overview.md)</ept>.","source":"We assume that you understand the basic concept of dependency properties, and have read [Dependency properties overview](dependency-properties-overview.md)."},{"content":"Attached properties in XAML","pos":[845,872]},{"content":"Attached properties exist mostly because they enabled a XAML syntax.","pos":[874,942]},{"content":"In XAML, you set attached properties by using the syntax <bpt id=\"p1\">_</bpt>AttachedPropertyProvider.PropertyName<ept id=\"p1\">_</ept>.","pos":[943,1040],"source":" In XAML, you set attached properties by using the syntax _AttachedPropertyProvider.PropertyName_."},{"content":"Here is an example of how you can set <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.Left<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> in XAML.","pos":[1041,1163],"source":" Here is an example of how you can set [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) in XAML."},{"pos":[1239,1435],"content":"Note that the usage is somewhat similar to a static property; you always reference the type <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> that owns and registers the attached property, rather than referring to any instance by name.","source":"Note that the usage is somewhat similar to a static property; you always reference the type **Canvas** that owns and registers the attached property, rather than referring to any instance by name."},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  We're just using <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Canvas.Left<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> as an example attached property without fully explaining why you'd use it.","pos":[1437,1614],"source":"**Note**  We're just using [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) as an example attached property without fully explaining why you'd use it."},{"content":"If you want to know more about what <bpt id=\"p1\">**</bpt>Canvas.Left<ept id=\"p1\">**</ept> is for and how <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Canvas<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> handles its layout children, see the <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>Canvas<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> reference topic or <bpt id=\"p6\">[</bpt>Define layouts with XAML<ept id=\"p6\">](https://msdn.microsoft.com/library/windows/apps/mt228350)</ept>.","pos":[1615,1965],"source":" If you want to know more about what **Canvas.Left** is for and how [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) handles its layout children, see the [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) reference topic or [Define layouts with XAML](https://msdn.microsoft.com/library/windows/apps/mt228350)."},{"content":"Why use attached properties?","pos":[1970,1998]},{"content":"Attached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time.","pos":[2000,2175]},{"content":"It's certainly possible to put properties on a common base class so that each object could just get and set that property.","pos":[2176,2298]},{"content":"But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties.","pos":[2299,2431]},{"content":"It might even introduce cases where there might just be two of hundreds of descendants trying to use a property.","pos":[2432,2544]},{"content":"That's not good class design.","pos":[2545,2574]},{"content":"To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define.","pos":[2575,2717]},{"content":"The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.","pos":[2718,2860]},{"content":"For example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI.","pos":[2862,2991]},{"content":"This is the case with the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas.Left<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh759771)</ept> attached property.","pos":[2992,3112],"source":" This is the case with the [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) attached property."},{"content":"<bpt id=\"p1\">**</bpt>Canvas.Left<ept id=\"p1\">**</ept> is created as an attached property because it is set on elements that are contained within a <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Canvas<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> element, rather than on the <bpt id=\"p4\">**</bpt>Canvas<ept id=\"p4\">**</ept> itself.","pos":[3113,3339],"source":"**Canvas.Left** is created as an attached property because it is set on elements that are contained within a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) element, rather than on the **Canvas** itself."},{"content":"Any possible child element then uses <bpt id=\"p1\">**</bpt>Canvas.Left<ept id=\"p1\">**</ept> and <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>Canvas.Top<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/hh759772)</ept> to specify its layout offset within the <bpt id=\"p4\">**</bpt>Canvas<ept id=\"p4\">**</ept> layout container parent.","pos":[3340,3547],"source":" Any possible child element then uses **Canvas.Left** and [**Canvas.Top**](https://msdn.microsoft.com/library/windows/apps/hh759772) to specify its layout offset within the **Canvas** layout container parent."},{"content":"Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers.","pos":[3548,3744]},{"content":"Instead, many of the layout containers implement their own attached property set.","pos":[3745,3826]},{"content":"To implement the attached property, the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Canvas<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> class defines a static <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DependencyProperty<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field named <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Canvas.LeftProperty<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br209272)</ept>.","pos":[3828,4141],"source":"To implement the attached property, the [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) class defines a static [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field named [**Canvas.LeftProperty**](https://msdn.microsoft.com/library/windows/apps/br209272)."},{"content":"Then, <bpt id=\"p1\">**</bpt>Canvas<ept id=\"p1\">**</ept> provides the <bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>SetLeft<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/br209273)</ept> and <bpt id=\"p4\">[</bpt><bpt id=\"p5\">**</bpt>GetLeft<ept id=\"p5\">**</ept><ept id=\"p4\">](https://msdn.microsoft.com/library/windows/apps/br209269)</ept> methods as public accessors for the attached property, to enable both XAML setting and run-time value access.","pos":[4142,4429],"source":" Then, **Canvas** provides the [**SetLeft**](https://msdn.microsoft.com/library/windows/apps/br209273) and [**GetLeft**](https://msdn.microsoft.com/library/windows/apps/br209269) methods as public accessors for the attached property, to enable both XAML setting and run-time value access."},{"content":"For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.","pos":[4430,4631]},{"content":"How the owning type uses attached properties","pos":[4636,4680]},{"content":"Although attached properties can be set on any XAML element (or any underlying <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DependencyObject<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242356)</ept>), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed.","pos":[4682,4965],"source":"Although attached properties can be set on any XAML element (or any underlying [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/br242356)), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed."},{"content":"The type that defines the attached property typically follows one of these scenarios:","pos":[4966,5051]},{"content":"The type that defines the attached property is the parent in a relationship of other objects.","pos":[5057,5150]},{"content":"The child objects will set values for the attached property.","pos":[5151,5211]},{"content":"The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SizeChanged<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br208742)</ept>, etc.)","pos":[5212,5490],"source":" The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, [**SizeChanged**](https://msdn.microsoft.com/library/windows/apps/br208742), etc.)"},{"content":"The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.","pos":[5495,5673]},{"content":"The attached property reports info to a service, not to another UI element.","pos":[5678,5753]},{"pos":[5755,5910],"content":"For more info on these scenarios and owning types, see the \"More about Canvas.Left\" section of <bpt id=\"p1\">[</bpt>Custom attached properties<ept id=\"p1\">](custom-attached-properties.md)</ept>.","source":"For more info on these scenarios and owning types, see the \"More about Canvas.Left\" section of [Custom attached properties](custom-attached-properties.md)."},{"content":"Attached properties in code","pos":[5915,5942]},{"content":"Attached properties don't have the typical property wrappers for easy get and set access like other dependency properties do.","pos":[5944,6069]},{"content":"This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set.","pos":[6070,6206]},{"content":"(It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)","pos":[6207,6407]},{"content":"There are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors.","pos":[6409,6529]},{"content":"These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.","pos":[6530,6659]},{"content":"Using the property system","pos":[6665,6690]},{"content":"Attached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored.","pos":[6692,6932]},{"content":"Therefore attached properties expose a dependency property identifier on the owning class.","pos":[6933,7023]},{"content":"To set an attached property in code, you call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>SetValue<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242361)</ept> method, and pass the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DependencyProperty<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier for that attached property.","pos":[7025,7315],"source":"To set an attached property in code, you call the [**SetValue**](https://msdn.microsoft.com/library/windows/apps/br242361) method, and pass the [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field that serves as the identifier for that attached property."},{"content":"(You also pass the value to set.)","pos":[7316,7349]},{"pos":[7351,7632],"content":"To get the value of an attached property in code, you call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>GetValue<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br242359)</ept> method, again passing the <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>DependencyProperty<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br242362)</ept> field that serves as the identifier.","source":"To get the value of an attached property in code, you call the [**GetValue**](https://msdn.microsoft.com/library/windows/apps/br242359) method, again passing the [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field that serves as the identifier."},{"content":"Using the XAML accessor pattern","pos":[7638,7669]},{"content":"A XAML processor must be able to set attached property values when XAML is parsed into an object tree.","pos":[7671,7773]},{"content":"The owner type of the attached property must implement dedicated accessor methods named in the form <bpt id=\"p1\">**</bpt>Get<ept id=\"p1\">**</ept><bpt id=\"p2\">*</bpt>PropertyName<ept id=\"p2\">*</ept> and <bpt id=\"p3\">**</bpt>Set<ept id=\"p3\">**</ept><bpt id=\"p4\">*</bpt>PropertyName<ept id=\"p4\">*</ept>.","pos":[7774,7922],"source":" The owner type of the attached property must implement dedicated accessor methods named in the form **Get***PropertyName* and **Set***PropertyName*."},{"content":"These dedicated accessor methods are also one way to get or set the attached property in code.","pos":[7923,8017]},{"content":"From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.","pos":[8018,8244]},{"content":"The next example shows how you can set an attached property in code via the XAML accessor API.","pos":[8246,8340]},{"content":"In this example, <ph id=\"ph1\">`myCheckBox`</ph> is an instance of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>CheckBox<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br209316)</ept> class.","pos":[8341,8472],"source":" In this example, `myCheckBox` is an instance of the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) class."},{"content":"The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship.","pos":[8473,8616]},{"content":"The uncommented last line is the syntax if you use the property system.","pos":[8617,8688]},{"content":"The commented last line is the syntax if you use the XAML accessor pattern.","pos":[8689,8764]},{"content":"Custom attached properties","pos":[9543,9569]},{"pos":[9571,9764],"content":"For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see <bpt id=\"p1\">[</bpt>Custom attached properties<ept id=\"p1\">](custom-attached-properties.md)</ept>.","source":"For code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see [Custom attached properties](custom-attached-properties.md)."},{"content":"Special syntax for attached property references","pos":[9769,9816]},{"content":"The dot in an attached property name is a key part of the identification pattern.","pos":[9818,9899]},{"content":"Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning.","pos":[9900,10013]},{"content":"For example, a dot is treated as an object-model traversal for a binding path.","pos":[10014,10092]},{"content":"In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the <bpt id=\"p1\">*</bpt>owner<ept id=\"p1\">*</ept><bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept><bpt id=\"p3\">*</bpt>property<ept id=\"p3\">*</ept> separator of an attached property.","pos":[10093,10294],"source":" In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the *owner***.***property* separator of an attached property."},{"content":"To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses (\"()\")—for example, \"(Canvas.Left)\".","pos":[10298,10459]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Property-path syntax<ept id=\"p1\">](property-path-syntax.md)</ept>.","pos":[10460,10527],"source":" For more info, see [Property-path syntax](property-path-syntax.md)."},{"pos":[10529,10662],"content":"<bpt id=\"p1\">**</bpt>Caution<ept id=\"p1\">**</ept>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.","source":"**Caution**  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property."},{"content":"To specify an attached property as the target property for a resource reference from a resource file to <bpt id=\"p1\">**</bpt>x:Uid<ept id=\"p1\">**</ept>, use a special syntax that injects a code-style, fully qualified <bpt id=\"p2\">**</bpt>using:<ept id=\"p2\">**</ept> declaration inside square brackets (\"\\[\\]\"), to create a deliberate scope break.","pos":[10667,10937],"source":"To specify an attached property as the target property for a resource reference from a resource file to **x:Uid**, use a special syntax that injects a code-style, fully qualified **using:** declaration inside square brackets (\"\\[\\]\"), to create a deliberate scope break."},{"content":"For example, assuming there exists an element '<ph id=\"ph1\">&lt;TextBlock x:Uid=\"Title\" /&gt;</ph>', the resource key in the resource file that targets the <bpt id=\"p1\">**</bpt>Canvas.Top<ept id=\"p1\">**</ept> value on that instance is \"Title.\\[using:Windows.UI.Xaml.Controls\\]Canvas.Top\".","pos":[10938,11164],"source":" For example, assuming there exists an element '<TextBlock x:Uid=\"Title\" />', the resource key in the resource file that targets the **Canvas.Top** value on that instance is \"Title.\\[using:Windows.UI.Xaml.Controls\\]Canvas.Top\"."},{"content":"For more info on resource files and XAML, see <bpt id=\"p1\">[</bpt>Quickstart: Translating UI resources<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)</ept>.","pos":[11165,11313],"source":" For more info on resource files and XAML, see [Quickstart: Translating UI resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329)."},{"content":"Related topics","pos":[11318,11332]},{"content":"Custom attached properties","pos":[11337,11363]},{"content":"Dependency properties overview","pos":[11399,11429]},{"content":"Define layouts with XAML","pos":[11469,11493]},{"content":"Quickstart: Translating UI resources","pos":[11556,11592]},{"content":"SetValue","pos":[11657,11665]},{"content":"GetValue","pos":[11732,11740]}],"content":"---\ndescription: Explains the concept of an attached property in XAML, and provides some examples.\ntitle: Attached properties overview\nms.assetid: 098C1DE0-D640-48B1-9961-D0ADF33266E2\n---\n\n# Attached properties overview\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\nAn *attached property* is a XAML concept. It is conceptually similar to a global property that can be set on any object element in XAML. Attached properties are typically defined as a specialized form of dependency property that doesn't have a conventional property wrapper in the owner type's object model.\n\n## Prerequisites\n\nWe assume that you understand the basic concept of dependency properties, and have read [Dependency properties overview](dependency-properties-overview.md).\n\n## Attached properties in XAML\n\nAttached properties exist mostly because they enabled a XAML syntax. In XAML, you set attached properties by using the syntax _AttachedPropertyProvider.PropertyName_. Here is an example of how you can set [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) in XAML.\n\n```XAML\n<Canvas>\n  <Button Canvas.Left=\"50\">Hello</Button>\n</Canvas>\n```\n\nNote that the usage is somewhat similar to a static property; you always reference the type **Canvas** that owns and registers the attached property, rather than referring to any instance by name.\n\n**Note**  We're just using [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) as an example attached property without fully explaining why you'd use it. If you want to know more about what **Canvas.Left** is for and how [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) handles its layout children, see the [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) reference topic or [Define layouts with XAML](https://msdn.microsoft.com/library/windows/apps/mt228350).\n\n## Why use attached properties?\n\nAttached properties are a way to escape the coding conventions that might prevent different objects in a relationship from communicating information to each other at run time. It's certainly possible to put properties on a common base class so that each object could just get and set that property. But eventually the sheer number of scenarios where you might want to do this will bloat your base classes with shareable properties. It might even introduce cases where there might just be two of hundreds of descendants trying to use a property. That's not good class design. To address this, the attached property concept enables an object to assign a value for a property that its own class structure doesn't define. The defining class can read the value from child objects at run time after the various objects are created in relationships in an object tree.\n\nFor example, child elements can use attached properties to inform their parent element of how they are to be presented in the UI. This is the case with the [**Canvas.Left**](https://msdn.microsoft.com/library/windows/apps/hh759771) attached property. **Canvas.Left** is created as an attached property because it is set on elements that are contained within a [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) element, rather than on the **Canvas** itself. Any possible child element then uses **Canvas.Left** and [**Canvas.Top**](https://msdn.microsoft.com/library/windows/apps/hh759772) to specify its layout offset within the **Canvas** layout container parent. Attached properties make it possible for this to work without cluttering the base element's object model with lots of properties that each apply to only one of the many possible layout containers. Instead, many of the layout containers implement their own attached property set.\n\nTo implement the attached property, the [**Canvas**](https://msdn.microsoft.com/library/windows/apps/br209267) class defines a static [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field named [**Canvas.LeftProperty**](https://msdn.microsoft.com/library/windows/apps/br209272). Then, **Canvas** provides the [**SetLeft**](https://msdn.microsoft.com/library/windows/apps/br209273) and [**GetLeft**](https://msdn.microsoft.com/library/windows/apps/br209269) methods as public accessors for the attached property, to enable both XAML setting and run-time value access. For XAML and for the dependency property system, this set of APIs satisfies a pattern that enables a specific XAML syntax for attached properties, and stores the value in the dependency property store.\n\n## How the owning type uses attached properties\n\nAlthough attached properties can be set on any XAML element (or any underlying [**DependencyObject**](https://msdn.microsoft.com/library/windows/apps/br242356)), that doesn't automatically mean that setting the property produces a tangible result, or that the value is ever accessed. The type that defines the attached property typically follows one of these scenarios:\n\n-   The type that defines the attached property is the parent in a relationship of other objects. The child objects will set values for the attached property. The attached property owner type has some innate behavior that iterates through its child elements, obtains the values, and acts on those values at some point in object lifetime (a layout action, [**SizeChanged**](https://msdn.microsoft.com/library/windows/apps/br208742), etc.)\n-   The type that defines the attached property is used as the child element for a variety of possible parent elements and content models, but the info isn't necessarily layout info.\n-   The attached property reports info to a service, not to another UI element.\n\nFor more info on these scenarios and owning types, see the \"More about Canvas.Left\" section of [Custom attached properties](custom-attached-properties.md).\n\n## Attached properties in code\n\nAttached properties don't have the typical property wrappers for easy get and set access like other dependency properties do. This is because the attached property is not necessarily part of the code-centered object model for instances where the property is set. (It is permissible, though uncommon, to define a property that is both an attached property that other types can set on themselves, and that also has a conventional property usage on the owning type.)\n\nThere are two ways to set an attached property in code: use the property-system APIs, or use the XAML pattern accessors. These techniques are pretty much equivalent in terms of their end result, so which one to use is mostly a matter of coding style.\n\n### Using the property system\n\nAttached properties for the Windows Runtime are implemented as dependency properties, so that the values can be stored in the shared dependency-property store by the property system, just as many conventional instance properties are stored. Therefore attached properties expose a dependency property identifier on the owning class.\n\nTo set an attached property in code, you call the [**SetValue**](https://msdn.microsoft.com/library/windows/apps/br242361) method, and pass the [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field that serves as the identifier for that attached property. (You also pass the value to set.)\n\nTo get the value of an attached property in code, you call the [**GetValue**](https://msdn.microsoft.com/library/windows/apps/br242359) method, again passing the [**DependencyProperty**](https://msdn.microsoft.com/library/windows/apps/br242362) field that serves as the identifier.\n\n### Using the XAML accessor pattern\n\nA XAML processor must be able to set attached property values when XAML is parsed into an object tree. The owner type of the attached property must implement dedicated accessor methods named in the form **Get***PropertyName* and **Set***PropertyName*. These dedicated accessor methods are also one way to get or set the attached property in code. From a code perspective, an attached property is similar to a backing field that has method accessors instead of property accessors, and that backing field can exist on any object rather than having to be specifically defined.\n\nThe next example shows how you can set an attached property in code via the XAML accessor API. In this example, `myCheckBox` is an instance of the [**CheckBox**](https://msdn.microsoft.com/library/windows/apps/br209316) class. The last line is the code that actually sets the value; the lines before that just establish the instances and their parent-child relationship. The uncommented last line is the syntax if you use the property system. The commented last line is the syntax if you use the XAML accessor pattern.\n\n> [!div class=\"tabbedCodeSnippets\"]\n```csharp\n    Canvas myC = new Canvas();\n    CheckBox myCheckBox = new CheckBox();\n    myCheckBox.Content = \"Hello\";\n    myC.Children.Add(myCheckBox);\n    myCheckBox.SetValue(Canvas.TopProperty,75);\n    //Canvas.SetTop(myCheckBox, 75);\n```\n```vb\n    Dim myC As Canvas = New Canvas()\n    Dim myCheckBox As CheckBox= New CheckBox()\n    myCheckBox.Content = \"Hello\"\n    myC.Children.Add(myCheckBox)\n    myCheckBox.SetValue(Canvas.TopProperty,75)\n    ' Canvas.SetTop(myCheckBox, 75)\n```\n```cpp\n    Canvas^ myC = ref new Canvas();\n    CheckBox^ myCheckBox = ref new CheckBox();\n    myCheckBox->Content=\"Hello\";\n    myC->Children->Append(myCheckBox);\n    myCheckBox->SetValue(Canvas::TopProperty,75);\n    //Canvas::SetTop(myCheckBox, 75);\n```\n\n## Custom attached properties\n\nFor code examples of how to define custom attached properties, and more info about the scenarios for using an attached property, see [Custom attached properties](custom-attached-properties.md).\n\n## Special syntax for attached property references\n\nThe dot in an attached property name is a key part of the identification pattern. Sometimes there are sometimes ambiguities when a syntax or situation treats the dot as having some other meaning. For example, a dot is treated as an object-model traversal for a binding path. In most cases involving such ambiguity, there is a special syntax for an attached property that enables the inner dot still to be parsed as the *owner***.***property* separator of an attached property.\n\n- To specify an attached property as part of a target path for an animation, enclose the attached property name in parentheses (\"()\")—for example, \"(Canvas.Left)\". For more info, see [Property-path syntax](property-path-syntax.md).\n\n**Caution**  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate a custom attached property.\n \n- To specify an attached property as the target property for a resource reference from a resource file to **x:Uid**, use a special syntax that injects a code-style, fully qualified **using:** declaration inside square brackets (\"\\[\\]\"), to create a deliberate scope break. For example, assuming there exists an element '<TextBlock x:Uid=\"Title\" />', the resource key in the resource file that targets the **Canvas.Top** value on that instance is \"Title.\\[using:Windows.UI.Xaml.Controls\\]Canvas.Top\". For more info on resource files and XAML, see [Quickstart: Translating UI resources](https://msdn.microsoft.com/library/windows/apps/xaml/hh965329).\n\n## Related topics\n\n* [Custom attached properties](custom-attached-properties.md)\n* [Dependency properties overview](dependency-properties-overview.md)\n* [Define layouts with XAML](https://msdn.microsoft.com/library/windows/apps/mt228350)\n* [Quickstart: Translating UI resources](https://msdn.microsoft.com/library/windows/apps/hh943060)\n* [**SetValue**](https://msdn.microsoft.com/library/windows/apps/br242361)\n* [**GetValue**](https://msdn.microsoft.com/library/windows/apps/br242359)\n\n"}