<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">d57f93a1c6fa011441f493b9707698bf16639fe0</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\xaml-platform\customresource-markup-extension.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">426ddccab28cc8a09efe61e57a549dd7eb7da703</mda:meta><mda:meta type="olxliffhash">8cc81a77c61e8ab811c61150217e9c9270ae2c60</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</source>
					<target>Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Resource lookup is performed by a CustomXamlResourceLoader class implementation.</source>
					<target>Resource lookup is performed by a CustomXamlResourceLoader class implementation.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>CustomResource markup extension</source>
					<target>CustomResource markup extension</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>{CustomResource} markup extension</source>
					<target>{CustomResource} markup extension</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</source>
					<target>Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Resource lookup is performed by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class implementation.</source>
					<target>Resource lookup is performed by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class implementation.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>XAML attribute usage</source>
					<target>XAML attribute usage</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>XAML values</source>
					<target>XAML values</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Term</source>
					<target>Term</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>key</source>
					<target>key</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The key for the requested resource.</source>
					<target>The key for the requested resource.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>How the key is initially assigned is specific to the implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class that is currently registered for use.</source>
					<target>How the key is initially assigned is specific to the implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class that is currently registered for use.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Remarks</source>
					<target>Remarks</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a technique for obtaining values that are defined elsewhere in a custom resource repository.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a technique for obtaining values that are defined elsewhere in a custom resource repository.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This technique is relatively advanced and isn't used by most Windows Runtime app scenarios.</source>
					<target>This technique is relatively advanced and isn't used by most Windows Runtime app scenarios.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>How a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> resolves to a resource dictionary is not described in this topic, because that can vary widely depending on how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CustomXamlResourceLoader</pc></pc> is implemented.</source>
					<target>How a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> resolves to a resource dictionary is not described in this topic, because that can vary widely depending on how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CustomXamlResourceLoader</pc></pc> is implemented.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">`{CustomResource}`</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CustomXamlResourceLoader</pc></pc> implementation is called by the Windows Runtime XAML parser whenever it encounters a <ph dataRef="id9" id="ph1" /> usage in markup.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CustomXamlResourceLoader</pc></pc> implementation is called by the Windows Runtime XAML parser whenever it encounters a <ph dataRef="id9" id="ph1" /> usage in markup.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">resourceId</pc> that is passed to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc> comes from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">key</pc> argument, and the other input parameters come from context, such as which property the usage is applied to.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">resourceId</pc> that is passed to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc> comes from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">key</pc> argument, and the other input parameters come from context, such as which property the usage is applied to.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">`{CustomResource}`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>A <ph dataRef="id1" id="ph1" /> usage doesn't work by default (the base implementation of <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">GetResource</pc></pc> is incomplete).</source>
					<target>A <ph dataRef="id1" id="ph1" /> usage doesn't work by default (the base implementation of <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">GetResource</pc></pc> is incomplete).</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">`{CustomResource}`</data>
				</originalData>
				<segment state="initial">
					<source>To make a valid <ph dataRef="id1" id="ph1" /> reference, you must perform each of these steps:</source>
					<target>To make a valid <ph dataRef="id1" id="ph1" /> reference, you must perform each of these steps:</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Derive a custom class from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> and override <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetResource</pc></pc> method.</source>
					<target>Derive a custom class from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> and override <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetResource</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Do not call base in the implementation.</source>
					<target>Do not call base in the implementation.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243328)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader.Current</pc></pc> to reference your class in initialization logic.</source>
					<target>Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader.Current</pc></pc> to reference your class in initialization logic.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">`{CustomResource}`</data>
				</originalData>
				<segment state="initial">
					<source>This must happen before any page-level XAML that includes the <ph dataRef="id1" id="ph1" /> extension usage is loaded.</source>
					<target>This must happen before any page-level XAML that includes the <ph dataRef="id1" id="ph1" /> extension usage is loaded.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242324)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>One place to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomXamlResourceLoader.Current</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> subclass constructor that's generated for you in the App.xaml code-behind templates.</source>
					<target>One place to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomXamlResourceLoader.Current</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> subclass constructor that's generated for you in the App.xaml code-behind templates.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">`{CustomResource}`</data>
				</originalData>
				<segment state="initial">
					<source>Now you can use <ph dataRef="id1" id="ph1" /> extensions in the XAML that your app loads as pages, or from within XAML resource dictionaries.</source>
					<target>Now you can use <ph dataRef="id1" id="ph1" /> extensions in the XAML that your app loads as pages, or from within XAML resource dictionaries.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a markup extension.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a markup extension.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
					<target>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</source>
					<target>All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>ResourceDictionary and XAML resource references</source>
					<target>ResourceDictionary and XAML resource references</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>CustomXamlResourceLoader</source>
					<target>CustomXamlResourceLoader</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>GetResource</source>
					<target>GetResource</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>