{"nodes":[{"pos":[11,44],"content":"Launch the default app for a file","needQuote":true,"needEscape":true,"nodes":[{"content":"Launch the default app for a file","pos":[0,33]}]},{"pos":[58,105],"content":"Learn how to launch the default app for a file.","needQuote":true,"needEscape":true,"nodes":[{"content":"Learn how to launch the default app for a file.","pos":[0,47]}]},{"content":"Launch the default app for a file","pos":[162,195]},{"content":"\\[ Updated for UWP apps on Windows 10.","pos":[198,236]},{"content":"For Windows 8.x articles, see the <bpt id=\"p1\">[</bpt>archive<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \\]","pos":[237,332],"source":" For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]"},{"content":"Important APIs","pos":[337,351]},{"content":"Windows.System.Launcher.LaunchFileAsync","pos":[362,401]},{"content":"Learn how to launch the default app for a file.","pos":[464,511]},{"content":"Many apps need to work with files that they can't handle themselves.","pos":[512,580]},{"content":"For example, e-mail apps receive a variety of file types and need a way to launch these files in their default handlers.","pos":[581,701]},{"content":"These steps show how to use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.System.Launcher<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br241801)</ept> API to launch the default handler for a file that your app can't handle itself.","pos":[702,901],"source":" These steps show how to use the [**Windows.System.Launcher**](https://msdn.microsoft.com/library/windows/apps/br241801) API to launch the default handler for a file that your app can't handle itself."},{"content":"Get the file object","pos":[906,925]},{"pos":[928,1053],"content":"First, get a <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Storage.StorageFile<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object for the file.","source":"First, get a [**Windows.Storage.StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object for the file."},{"pos":[1055,1549],"content":"If the file is included in the package for your app, you can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Package.InstalledLocation<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br224681)</ept> property to get a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>Windows.Storage.StorageFolder<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> object and the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>Windows.Storage.StorageFolder.GetFileAsync<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br227272)</ept> method to get the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>StorageFile<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object.","source":"If the file is included in the package for your app, you can use the [**Package.InstalledLocation**](https://msdn.microsoft.com/library/windows/apps/br224681) property to get a [**Windows.Storage.StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) object and the [**Windows.Storage.StorageFolder.GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to get the [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object."},{"pos":[1551,1991],"content":"If the file is in a known folder, you can use the properties of the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Storage.KnownFolders<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227151)</ept> class to get a <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>StorageFolder<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> and the <bpt id=\"p5\">[</bpt><bpt id=\"p6\">**</bpt>GetFileAsync<ept id=\"p6\">**</ept><ept id=\"p5\">](https://msdn.microsoft.com/library/windows/apps/br227272)</ept> method to get the <bpt id=\"p7\">[</bpt><bpt id=\"p8\">**</bpt>StorageFile<ept id=\"p8\">**</ept><ept id=\"p7\">](https://msdn.microsoft.com/library/windows/apps/br227171)</ept> object.","source":"If the file is in a known folder, you can use the properties of the [**Windows.Storage.KnownFolders**](https://msdn.microsoft.com/library/windows/apps/br227151) class to get a [**StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) and the [**GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to get the [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object."},{"content":"Launch the file","pos":[1996,2011]},{"content":"Windows provides several different options for launching the default handler for a file.","pos":[2014,2102]},{"content":"These options are described in this chart and in the sections that follow.","pos":[2103,2177]},{"content":"Option","pos":[2181,2187]},{"content":"Method","pos":[2190,2196]},{"content":"Description","pos":[2199,2210]},{"content":"Default launch","pos":[2561,2575]},{"content":"LaunchFileAsync(IStorageFile)","pos":[2581,2610]},{"content":"Launch the specified file with the default handler.","pos":[2674,2725]},{"content":"Open With launch","pos":[2730,2746]},{"content":"LaunchFileAsync(IStorageFile, LauncherOptions)","pos":[2752,2798]},{"content":"Launch the specified file letting the user pick the handler through the Open With dialog.","pos":[2862,2951]},{"content":"Launch with a recommended app fallback","pos":[2956,2994]},{"content":"LaunchFileAsync(IStorageFile, LauncherOptions)","pos":[3000,3046]},{"content":"Launch the specified file with the default handler.","pos":[3110,3161]},{"content":"If no handler is installed on the system, recommend an app in the store to the user.","pos":[3162,3246]},{"content":"Launch with a desired remaining view","pos":[3251,3287]},{"pos":[3290,3415],"content":"<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchFileAsync(IStorageFile, LauncherOptions)<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701465)</ept> (Windows-only)","source":"[**LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) (Windows-only)"},{"content":"Launch the specified file with the default handler.","pos":[3418,3469]},{"content":"Specify a preference to stay on screen after the launch and request a specific window size.","pos":[3470,3561]},{"pos":[3583,3755],"content":"<bpt id=\"p1\">**</bpt>Mobile device family:  <ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>LauncherOptions.DesiredRemainingView<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn298314)</ept> isn't supported on the mobile device family.","source":"**Mobile device family:  **[**LauncherOptions.DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) isn't supported on the mobile device family."},{"content":"Default launch","pos":[3765,3779]},{"content":"Call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.System.Launcher.LaunchFileAsync(IStorageFile)<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701471)</ept> method to launch the default app.","pos":[3781,3941],"source":"Call the [**Windows.System.Launcher.LaunchFileAsync(IStorageFile)**](https://msdn.microsoft.com/library/windows/apps/hh701471) method to launch the default app."},{"content":"This example uses the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.Storage.StorageFolder.GetFileAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/br227272)</ept> method to launch an image file, test.png, that is included in the app package.","pos":[3942,4149],"source":" This example uses the [**Windows.Storage.StorageFolder.GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to launch an image file, test.png, that is included in the app package."},{"content":"Open With launch","pos":[6245,6261]},{"pos":[6263,6614],"content":"Call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.System.Launcher.LaunchFileAsync(IStorageFile, LauncherOptions)<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701465)</ept> method with <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>LauncherOptions.DisplayApplicationPicker<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh701438)</ept> set to <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept> to launch the app that the user selects from the <bpt id=\"p6\">**</bpt>Open With<ept id=\"p6\">**</ept> dialog box.","source":"Call the [**Windows.System.Launcher.LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) method with [**LauncherOptions.DisplayApplicationPicker**](https://msdn.microsoft.com/library/windows/apps/hh701438) set to **true** to launch the app that the user selects from the **Open With** dialog box."},{"content":"We recommend that you use the <bpt id=\"p1\">**</bpt>Open With<ept id=\"p1\">**</ept> dialog box when the user may want to select an app other than the default for a particular file.","pos":[6616,6756],"source":"We recommend that you use the **Open With** dialog box when the user may want to select an app other than the default for a particular file."},{"content":"For example, if your app allows the user to launch an image file, the default handler will likely be a viewer app.","pos":[6757,6871]},{"content":"In some cases, the user may want to edit the image instead of viewing it.","pos":[6872,6945]},{"content":"Use the <bpt id=\"p1\">**</bpt>Open With<ept id=\"p1\">**</ept> option along with an alternative command in the <bpt id=\"p2\">**</bpt>AppBar<ept id=\"p2\">**</ept> or in a context menu to let the user bring up the <bpt id=\"p3\">**</bpt>Open With<ept id=\"p3\">**</ept> dialog and select the editor app in these types of scenarios.","pos":[6946,7152],"source":" Use the **Open With** option along with an alternative command in the **AppBar** or in a context menu to let the user bring up the **Open With** dialog and select the editor app in these types of scenarios."},{"content":"the open with dialog for a .png file launch.","pos":[7156,7200]},{"content":"the dialog contains a checkbox which specifies if the user’s choice should be used for all .png files or just this one .png file.","pos":[7201,7330]},{"content":"the dialog contains four app options for launching the file and a ‘more options’ link.","pos":[7331,7417]},{"content":"Launch with a recommended app fallback","pos":[10067,10105]},{"content":"In some cases the user may not have an app installed to handle the file that you are launching.","pos":[10109,10204]},{"content":"By default, Windows will handle these cases by providing the user with a link to search for an appropriate app on the store.","pos":[10205,10329]},{"content":"If you would like to give the user a specific recommendation for which app to acquire in this scenario, you may do so by passing that recommendation along with the file that you are launching.","pos":[10330,10522]},{"content":"To do this, call the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Windows.System.Launcher.launchFileAsync(IStorageFile, LauncherOptions)<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701465)</ept> method with <bpt id=\"p3\">[</bpt><bpt id=\"p4\">**</bpt>LauncherOptions.PreferredApplicationPackageFamilyName<ept id=\"p4\">**</ept><ept id=\"p3\">](https://msdn.microsoft.com/library/windows/apps/hh965482)</ept> set to the package family name of the app in the Store that you want to recommend.","pos":[10523,10891],"source":" To do this, call the [**Windows.System.Launcher.launchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) method with [**LauncherOptions.PreferredApplicationPackageFamilyName**](https://msdn.microsoft.com/library/windows/apps/hh965482) set to the package family name of the app in the Store that you want to recommend."},{"content":"Then, set the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LauncherOptions.PreferredApplicationDisplayName<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh965481)</ept> to the name of that app.","pos":[10892,11042],"source":" Then, set the [**LauncherOptions.PreferredApplicationDisplayName**](https://msdn.microsoft.com/library/windows/apps/hh965481) to the name of that app."},{"content":"Windows will use this information to replace the general option to search for an app in the store with a specific option to acquire the recommended app from the Store.","pos":[11043,11210]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  You must set both of these options to recommend an app.","pos":[11214,11279],"source":"**Note**  You must set both of these options to recommend an app."},{"content":"Setting one without the other will result in a failure.","pos":[11280,11335]},{"content":"the open with dialog for a .contoso file launch.","pos":[11339,11387]},{"content":"since .contoso does not have a handler installed on the machine the dialog contains an option with the store icon and text which points the user to the correct handler on the store.","pos":[11388,11569]},{"content":"the dialog also contains a ‘more options’ link'.","pos":[11570,11618]},{"content":"Launch with a Desired Remaining View (Windows-only)","pos":[15008,15059]},{"content":"Source apps that call <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>LaunchFileAsync<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/hh701461)</ept> can request that they remain on screen after a file launch.","pos":[15061,15222],"source":"Source apps that call [**LaunchFileAsync**](https://msdn.microsoft.com/library/windows/apps/hh701461) can request that they remain on screen after a file launch."},{"content":"By default, Windows attempts to share all available space equally between the source app and the target app that handles the file.","pos":[15223,15353]},{"content":"Source apps can use the <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DesiredRemainingView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn298314)</ept> property to indicate to the operating system that they prefer their app window to take up more or less of the available space.","pos":[15354,15589],"source":" Source apps can use the [**DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) property to indicate to the operating system that they prefer their app window to take up more or less of the available space."},{"content":"<bpt id=\"p1\">**</bpt>DesiredRemainingView<ept id=\"p1\">**</ept> can also be used to indicate that the source app does not need to remain on screen after the file launch and can be completely replaced by the target app.","pos":[15590,15769],"source":"**DesiredRemainingView** can also be used to indicate that the source app does not need to remain on screen after the file launch and can be completely replaced by the target app."},{"content":"This property only specifies the preferred window size of the calling app.","pos":[15770,15844]},{"content":"It doesn't specify the behavior of other apps that may happen to also be on screen at the same time.","pos":[15845,15945]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Windows takes into account multiple different factors when it determines the source app's final window size, for example, the preference of the source app, the number of apps on screen, the screen orientation, and so on.","pos":[15949,16179],"source":"**Note**  Windows takes into account multiple different factors when it determines the source app's final window size, for example, the preference of the source app, the number of apps on screen, the screen orientation, and so on."},{"content":"By setting <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>DesiredRemainingView<ept id=\"p2\">**</ept><ept id=\"p1\">](https://msdn.microsoft.com/library/windows/apps/dn298314)</ept>, you aren't guaranteed a specific windowing behavior for the source app.","pos":[16180,16348],"source":" By setting [**DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314), you aren't guaranteed a specific windowing behavior for the source app."},{"pos":[16350,16522],"content":"<bpt id=\"p1\">**</bpt>Mobile device family:  <ept id=\"p1\">**</ept><bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>LauncherOptions.DesiredRemainingView<ept id=\"p3\">**</ept><ept id=\"p2\">](https://msdn.microsoft.com/library/windows/apps/dn298314)</ept> isn't supported on the mobile device family.","source":"**Mobile device family:  **[**LauncherOptions.DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) isn't supported on the mobile device family."},{"content":"Remarks","pos":[18497,18504]},{"content":"Your app can't select the app that is launched.","pos":[18506,18553]},{"content":"The user determines which app is launched.","pos":[18554,18596]},{"content":"The user can select either a Universal Windows Platform (UWP) app or a Classic Windows Platform (CWP) app.","pos":[18597,18703]},{"content":"When launching a file, your app must be the foreground app, that is, it must be visible to the user.","pos":[18705,18805]},{"content":"This requirement helps ensure that the user remains in control.","pos":[18806,18869]},{"content":"To meet this requirement, make sure that you tie all file launches directly to the UI of your app.","pos":[18870,18968]},{"content":"Most likely, the user must always take some action to initiate a file launch.","pos":[18969,19046]},{"content":"You can't launch file types that contain code or script if they are executed automatically by the operating system, such as, .exe, .msi, and .js files.","pos":[19048,19199]},{"content":"This restriction protects users from potentially malicious files that could modify the operating system.","pos":[19200,19304]},{"content":"You can use this method to launch file types that can contain script if they are executed by an app that isolates the script, such as, .docx files.","pos":[19305,19452]},{"content":"Apps like Microsoft Word keep the script in .docx files from modifying the operating system.","pos":[19453,19545]},{"content":"If you try to launch a restricted file type, the launch will fail and your error callback will be invoked.","pos":[19547,19653]},{"content":"If your app handles many different types of files and you expect that you will hit this error, we recommend that you provide a fallback experience to your user.","pos":[19654,19814]},{"content":"For example, you could give the user an option to save the file to the desktop, and they could open it there.","pos":[19815,19924]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.","pos":[19928,20026],"source":"**Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps."},{"content":"If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id=\"p1\">[</bpt>archived documentation<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.","pos":[20027,20168],"source":" If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132)."},{"content":"Related topics","pos":[20175,20189]},{"content":"Tasks","pos":[20194,20199]},{"content":"Launch the default app for a URI","pos":[20206,20238]},{"content":"Handle file activation","pos":[20266,20288]},{"content":"Guidelines","pos":[20320,20330]},{"content":"Guidelines for file types and URIs","pos":[20337,20371]},{"content":"Reference","pos":[20434,20443]},{"content":"Windows.Storage.StorageFile","pos":[20452,20479]},{"content":"Windows.System.Launcher.LaunchFileAsync","pos":[20546,20585]}],"content":"---\ntitle: Launch the default app for a file\ndescription: Learn how to launch the default app for a file.\nms.assetid: BB45FCAF-DF93-4C99-A8B5-59B799C7BD98\n---\n\n# Launch the default app for a file\n\n\n\\[ Updated for UWP apps on Windows 10. For Windows 8.x articles, see the [archive](http://go.microsoft.com/fwlink/p/?linkid=619132) \\]\n\n\n**Important APIs**\n\n-   [**Windows.System.Launcher.LaunchFileAsync**](https://msdn.microsoft.com/library/windows/apps/hh701461)\n\nLearn how to launch the default app for a file. Many apps need to work with files that they can't handle themselves. For example, e-mail apps receive a variety of file types and need a way to launch these files in their default handlers. These steps show how to use the [**Windows.System.Launcher**](https://msdn.microsoft.com/library/windows/apps/br241801) API to launch the default handler for a file that your app can't handle itself.\n\n## Get the file object\n\n\nFirst, get a [**Windows.Storage.StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object for the file.\n\nIf the file is included in the package for your app, you can use the [**Package.InstalledLocation**](https://msdn.microsoft.com/library/windows/apps/br224681) property to get a [**Windows.Storage.StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) object and the [**Windows.Storage.StorageFolder.GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to get the [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object.\n\nIf the file is in a known folder, you can use the properties of the [**Windows.Storage.KnownFolders**](https://msdn.microsoft.com/library/windows/apps/br227151) class to get a [**StorageFolder**](https://msdn.microsoft.com/library/windows/apps/br227230) and the [**GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to get the [**StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171) object.\n\n## Launch the file\n\n\nWindows provides several different options for launching the default handler for a file. These options are described in this chart and in the sections that follow.\n\n| Option | Method | Description |\n|----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Default launch | [**LaunchFileAsync(IStorageFile)**](https://msdn.microsoft.com/library/windows/apps/hh701471) | Launch the specified file with the default handler. |\n| Open With launch | [**LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) | Launch the specified file letting the user pick the handler through the Open With dialog. |\n| Launch with a recommended app fallback | [**LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) | Launch the specified file with the default handler. If no handler is installed on the system, recommend an app in the store to the user. |\n| Launch with a desired remaining view | [**LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) (Windows-only) | Launch the specified file with the default handler. Specify a preference to stay on screen after the launch and request a specific window size. |\n|  |  |  |\n|  |  | **Mobile device family:  **[**LauncherOptions.DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) isn't supported on the mobile device family. |\n\n \n### Default launch\n\nCall the [**Windows.System.Launcher.LaunchFileAsync(IStorageFile)**](https://msdn.microsoft.com/library/windows/apps/hh701471) method to launch the default app. This example uses the [**Windows.Storage.StorageFolder.GetFileAsync**](https://msdn.microsoft.com/library/windows/apps/br227272) method to launch an image file, test.png, that is included in the app package.\n\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```vb\n> async Sub DefaultLaunch()\n>    ' Path to the file in the app package to launch\n>    Dim imageFile = \"images\\test.png\"\n>    Dim file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile)\n>    \n>    If file IsNot Nothing Then\n>       ' Launch the retrieved file\n>       Dim success = await Windows.System.Launcher.LaunchFileAsync(file)\n> \n>       If success Then\n>          ' File launched\n>       Else\n>          ' File launch failed\n>       End If\n>    Else\n>       ' Could not find file\n>    End If\n> End Sub\n> ```\n> ```cpp\n> void MainPage::DefaultLaunch()\n> {\n>    auto installFolder = Windows::ApplicationModel::Package::Current->InstalledLocation;\n> \n>    concurrency::task<Windows::Storage::StorageFile^> getFileOperation(installFolder->GetFileAsync(\"images\\\\test.png\"));\n>    getFileOperation.then([](Windows::Storage::StorageFile^ file)\n>    {\n>       if (file != nullptr)\n>       {\n>          // Launch the retrieved file\n>          concurrency::task<bool> launchFileOperation(Windows::System::Launcher::LaunchFileAsync(file));\n>          launchFileOperation.then([](bool success)\n>          {\n>             if (success)\n>             {\n>                // File launched\n>             }\n>             else\n>             {\n>                // File launch failed\n>             }\n>          });\n>       }\n>       else\n>       {\n>          // Could not find file\n>       }\n>    });\n> }\n> ```\n> ```cs\n> async void DefaultLaunch()\n> {\n>    // Path to the file in the app package to launch\n>    string imageFile = @\"images\\test.png\";\n>    \n>    var file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile);\n>    \n>    if (file != null)\n>    {\n>       // Launch the retrieved file\n>       var success = await Windows.System.Launcher.LaunchFileAsync(file);\n> \n>       if (success)\n>       {\n>          // File launched\n>       }\n>       else\n>       {\n>          // File launch failed\n>       }\n>    }\n>    else\n>    {\n>       // Could not find file\n>    }\n> }\n> ```\n\n### Open With launch\n\nCall the [**Windows.System.Launcher.LaunchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) method with [**LauncherOptions.DisplayApplicationPicker**](https://msdn.microsoft.com/library/windows/apps/hh701438) set to **true** to launch the app that the user selects from the **Open With** dialog box.\n\nWe recommend that you use the **Open With** dialog box when the user may want to select an app other than the default for a particular file. For example, if your app allows the user to launch an image file, the default handler will likely be a viewer app. In some cases, the user may want to edit the image instead of viewing it. Use the **Open With** option along with an alternative command in the **AppBar** or in a context menu to let the user bring up the **Open With** dialog and select the editor app in these types of scenarios.\n\n![the open with dialog for a .png file launch. the dialog contains a checkbox which specifies if the user’s choice should be used for all .png files or just this one .png file. the dialog contains four app options for launching the file and a ‘more options’ link.](images/checkboxopenwithdialog.png)\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```vb\n> async Sub DefaultLaunch()\n> \n>    ' Path to the file in the app package to launch\n>    Dim imageFile = \"images\\test.png\"\n> \n>    Dim file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile)\n> \n>    If file IsNot Nothing Then\n>       ' Set the option to show the picker\n>       Dim options = Windows.System.LauncherOptions()\n>       options.DisplayApplicationPicker = True\n> \n>       ' Launch the retrieved file\n>       Dim success = await Windows.System.Launcher.LaunchFileAsync(file)\n> \n>       If success Then\n>          ' File launched\n>       Else\n>          ' File launch failed\n>       End If\n>    Else\n>       ' Could not find file\n>    End If\n> End Sub\n> ```\n> ```cpp\n> void MainPage::DefaultLaunch()\n> {\n>    auto installFolder = Windows::ApplicationModel::Package::Current->InstalledLocation;\n> \n>    concurrency::task<Windows::Storage::StorageFile^> getFileOperation(installFolder->GetFileAsync(\"images\\\\test.png\"));\n>    getFileOperation.then([](Windows::Storage::StorageFile^ file)\n>    {\n>       if (file != nullptr)\n>       {\n>          // Set the option to show the picker\n>          auto launchOptions = ref new Windows::System::LauncherOptions();\n>          launchOptions->DisplayApplicationPicker = true;\n> \n>          // Launch the retrieved file\n>          concurrency::task<bool> launchFileOperation(Windows::System::Launcher::LaunchFileAsync(file, launchOptions));\n>          launchFileOperation.then([](bool success)\n>          {\n>             if (success)\n>             {\n>                // File launched\n>             }\n>             else\n>             {\n>                // File launch failed\n>             }\n>          });\n>       }\n>       else\n>       {\n>          // Could not find file\n>       }\n>    });\n> }\n> ```\n> ```cs\n> async void DefaultLaunch()\n> {\n>    // Path to the file in the app package to launch\n>       string imageFile = @\"images\\test.png\";\n>       \n>    var file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile);\n> \n>    if (file != null)\n>    {\n>       // Set the option to show the picker\n>       var options = new Windows.System.LauncherOptions();\n>       options.DisplayApplicationPicker = true;\n> \n>       // Launch the retrieved file\n>       bool success = await Windows.System.Launcher.LaunchFileAsync(file, options);\n>       if (success)\n>       {\n>          // File launched\n>       }\n>       else\n>       {\n>          // File launch failed\n>       }\n>    }\n>    else\n>    {\n>       // Could not find file\n>    }\n> }\n> ```\n\n**Launch with a recommended app fallback**\n\nIn some cases the user may not have an app installed to handle the file that you are launching. By default, Windows will handle these cases by providing the user with a link to search for an appropriate app on the store. If you would like to give the user a specific recommendation for which app to acquire in this scenario, you may do so by passing that recommendation along with the file that you are launching. To do this, call the [**Windows.System.Launcher.launchFileAsync(IStorageFile, LauncherOptions)**](https://msdn.microsoft.com/library/windows/apps/hh701465) method with [**LauncherOptions.PreferredApplicationPackageFamilyName**](https://msdn.microsoft.com/library/windows/apps/hh965482) set to the package family name of the app in the Store that you want to recommend. Then, set the [**LauncherOptions.PreferredApplicationDisplayName**](https://msdn.microsoft.com/library/windows/apps/hh965481) to the name of that app. Windows will use this information to replace the general option to search for an app in the store with a specific option to acquire the recommended app from the Store.\n\n> **Note**  You must set both of these options to recommend an app. Setting one without the other will result in a failure.\n\n![the open with dialog for a .contoso file launch. since .contoso does not have a handler installed on the machine the dialog contains an option with the store icon and text which points the user to the correct handler on the store. the dialog also contains a ‘more options’ link'.](images/howdoyouwanttoopen.png)\n\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```vb\n> async Sub DefaultLaunch()\n> \n>    ' Path to the file in the app package to launch\n>    Dim imageFile = \"images\\test.contoso\"\n> \n>    ' Get the image file from the package's image directory\n>    Dim file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile)\n> \n>    If file IsNot Nothing Then\n>       ' Set the recommended app\n>       Dim options = Windows.System.LauncherOptions()\n>       options.PreferredApplicationPackageFamilyName = \"Contoso.FileApp_8wknc82po1e\";\n>       options.PreferredApplicationDisplayName = \"Contoso File App\";\n> \n>       ' Launch the retrieved file pass in the recommended app \n>       ' in case the user has no apps installed to handle the file\n>       Dim success = await Windows.System.Launcher.LaunchFileAsync(file)\n> \n>       If success Then\n>          ' File launched\n>       Else\n>          ' File launch failed\n>       End If\n>    Else\n>       ' Could not find file\n>    End If\n> End Sub\n> ```\n> ```cpp\n> void MainPage::DefaultLaunch()\n> {\n>    auto installFolder = Windows::ApplicationModel::Package::Current->InstalledLocation;\n> \n>    concurrency::task<Windows::Storage::StorageFile^> getFileOperation(installFolder->GetFileAsync(\"images\\\\test.contoso\"));\n>    getFileOperation.then([](Windows::Storage::StorageFile^ file)\n>    {\n>       if (file != nullptr)\n>       {\n>          // Set the recommended app\n>          auto launchOptions = ref new Windows::System::LauncherOptions();\n>          launchOptions-> preferredApplicationPackageFamilyName = \"Contoso.FileApp_8wknc82po1e\";\n>          launchOptions-> preferredApplicationDisplayName = \"Contoso File App\";\n>          \n>          // Launch the retrieved file pass in the recommended app \n>          // in case the user has no apps installed to handle the file\n>          concurrency::task<bool> launchFileOperation(Windows::System::Launcher::LaunchFileAsync(file, launchOptions));\n>          launchFileOperation.then([](bool success)\n>          {\n>             if (success)\n>             {\n>                // File launched\n>             }\n>             else\n>             {\n>                // File launch failed\n>             }\n>          });\n>       }\n>       else\n>       {\n>          // Could not find file\n>       }\n>    });\n> }\n> ```\n> ```cs\n> async void DefaultLaunch()\n> {\n>    // Path to the file in the app package to launch\n>    string imageFile = @\"images\\test.contoso\";\n> \n>    // Get the image file from the package's image directory\n>    var file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile);\n> \n>    if (file != null)\n>    {\n>       // Set the recommended app\n>       var options = new Windows.System.LauncherOptions();\n>       options.PreferredApplicationPackageFamilyName = \"Contoso.FileApp_8wknc82po1e\";\n>       options.PreferredApplicationDisplayName = \"Contoso File App\";\n> \n> \n>       // Launch the retrieved file pass in the recommended app \n>       // in case the user has no apps installed to handle the file\n>       bool success = await Windows.System.Launcher.LaunchFileAsync(file, options);\n>       if (success)\n>       {\n>          // File launched\n>       }\n>       else\n>       {\n>          // File launch failed\n>       }\n>    }\n>    else\n>    {\n>       // Could not find file\n>    }\n> }\n> ```\n\n### Launch with a Desired Remaining View (Windows-only)\n\nSource apps that call [**LaunchFileAsync**](https://msdn.microsoft.com/library/windows/apps/hh701461) can request that they remain on screen after a file launch. By default, Windows attempts to share all available space equally between the source app and the target app that handles the file. Source apps can use the [**DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) property to indicate to the operating system that they prefer their app window to take up more or less of the available space. **DesiredRemainingView** can also be used to indicate that the source app does not need to remain on screen after the file launch and can be completely replaced by the target app. This property only specifies the preferred window size of the calling app. It doesn't specify the behavior of other apps that may happen to also be on screen at the same time.\n\n> **Note**  Windows takes into account multiple different factors when it determines the source app's final window size, for example, the preference of the source app, the number of apps on screen, the screen orientation, and so on. By setting [**DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314), you aren't guaranteed a specific windowing behavior for the source app.\n\n**Mobile device family:  **[**LauncherOptions.DesiredRemainingView**](https://msdn.microsoft.com/library/windows/apps/dn298314) isn't supported on the mobile device family.\n\n> [!div class=\"tabbedCodeSnippets\"]\n> ```cpp\n> void MainPage::DefaultLaunch()\n> {\n>    auto installFolder = Windows::ApplicationModel::Package::Current->InstalledLocation;\n> \n>    concurrency::task<Windows::Storage::StorageFile^> getFileOperation(installFolder->GetFileAsync(\"images\\\\test.png\"));\n>    getFileOperation.then([](Windows::Storage::StorageFile^ file)\n>    {\n>       if (file != nullptr)\n>       {\n>          // Set the desired remaining view\n>          auto launchOptions = ref new Windows::System::LauncherOptions();\n>          launchOptions->DesiredRemainingView = Windows.UI.ViewManagement.ViewSizePreference.UseLess;\n> \n>          // Launch the retrieved file\n>          concurrency::task<bool> launchFileOperation(Windows::System::Launcher::LaunchFileAsync(file, launchOptions));\n>          launchFileOperation.then([](bool success)\n>          {\n>             if (success)\n>             {\n>                // File launched\n>             }\n>             else\n>             {\n>                // File launch failed\n>             }\n>          });\n>       }\n>       else\n>       {\n>          // Could not find file\n>       }\n>    });\n> }\n> ```\n> ```cs\n> async void DefaultLaunch()\n> {\n>    // Path to the file in the app package to launch\n>    string imageFile = @\"images\\test.png\";\n>    \n>    var file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(imageFile);\n> \n>    if (file != null)\n>    {\n>       // Set the desired remaining view\n>       var options = new Windows.System.LauncherOptions();\n>       options.DesiredRemainingView = Windows.UI.ViewManagement.ViewSizePreference.UseLess;\n> \n>       // Launch the retrieved file\n>       bool success = await Windows.System.Launcher.LaunchFileAsync(file, options);\n>       if (success)\n>       {\n>          // File launched\n>       }\n>       else\n>       {\n>          // File launch failed\n>       }\n>    }\n>    else\n>    {\n>       // Could not find file\n>    }\n> }\n> ```\n\n## Remarks\n\nYour app can't select the app that is launched. The user determines which app is launched. The user can select either a Universal Windows Platform (UWP) app or a Classic Windows Platform (CWP) app.\n\nWhen launching a file, your app must be the foreground app, that is, it must be visible to the user. This requirement helps ensure that the user remains in control. To meet this requirement, make sure that you tie all file launches directly to the UI of your app. Most likely, the user must always take some action to initiate a file launch.\n\nYou can't launch file types that contain code or script if they are executed automatically by the operating system, such as, .exe, .msi, and .js files. This restriction protects users from potentially malicious files that could modify the operating system. You can use this method to launch file types that can contain script if they are executed by an app that isolates the script, such as, .docx files. Apps like Microsoft Word keep the script in .docx files from modifying the operating system.\n\nIf you try to launch a restricted file type, the launch will fail and your error callback will be invoked. If your app handles many different types of files and you expect that you will hit this error, we recommend that you provide a fallback experience to your user. For example, you could give the user an option to save the file to the desktop, and they could open it there.\n\n> **Note**  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps. If you’re developing for Windows 8.x or Windows Phone 8.x, see the [archived documentation](http://go.microsoft.com/fwlink/p/?linkid=619132).\n\n \n## Related topics\n\n\n**Tasks**\n\n* [Launch the default app for a URI](launch-default-app.md)\n* [Handle file activation](handle-file-activation.md)\n\n**Guidelines**\n\n* [Guidelines for file types and URIs](https://msdn.microsoft.com/library/windows/apps/hh700321)\n\n**Reference**\n\n* [**Windows.Storage.StorageFile**](https://msdn.microsoft.com/library/windows/apps/br227171)\n* [**Windows.System.Launcher.LaunchFileAsync**](https://msdn.microsoft.com/library/windows/apps/hh701461)\n\n \n\n \n\n\n\n"}