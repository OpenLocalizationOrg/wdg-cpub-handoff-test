<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">6988cf265ff97e37f2a250e438416fdaeeed568a</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\w8x-to-uwp-root.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">8e8e21f9fd1c7b6627697316b00276c526bc40a4</mda:meta><mda:meta type="olxliffhash">d53144a15b77f4d20805b878779d4f15c93dd908</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>If you have a Universal 8.1 app&amp;\#8212;whether it's targeting Windows 8.1, Windows Phone 8.1, or both&amp;\#8212;then you'll find that your source code and skills will port smoothly to Windows 10.</source>
					<target>If you have a Universal 8.1 app&amp;\#8212;whether it's targeting Windows 8.1, Windows Phone 8.1, or both&amp;\#8212;then you'll find that your source code and skills will port smoothly to Windows 10.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Move from Windows Runtime 8.x to UWP'</source>
					<target>Move from Windows Runtime 8.x to UWP'</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Move from Windows Runtime 8.x to UWP</source>
					<target>Move from Windows Runtime 8.x to UWP</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>If you have a Universal 8.1 app—whether it's targeting Windows 8.1, Windows Phone 8.1, or both—then you'll find that your source code and skills will port smoothly to Windows 10.</source>
					<target>If you have a Universal 8.1 app—whether it's targeting Windows 8.1, Windows Phone 8.1, or both—then you'll find that your source code and skills will port smoothly to Windows 10.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</source>
					<target>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</source>
					<target>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>While porting, you'll find that Windows 10 shares the majority of APIs with the previous platforms, as well as XAML markup, UI framework, and tooling, and you'll find it all reassuringly familiar.</source>
					<target>While porting, you'll find that Windows 10 shares the majority of APIs with the previous platforms, as well as XAML markup, UI framework, and tooling, and you'll find it all reassuringly familiar.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Just as before, you can still choose between C++, C#, and Visual Basic for the programming language to use along with the XAML UI framework.</source>
					<target>Just as before, you can still choose between C++, C#, and Visual Basic for the programming language to use along with the XAML UI framework.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Your first steps in planning exactly what to do with your current app or apps will depend on the kinds of apps and projects you have.</source>
					<target>Your first steps in planning exactly what to do with your current app or apps will depend on the kinds of apps and projects you have.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>That's explained in the following sections.</source>
					<target>That's explained in the following sections.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>If you have a Universal 8.1 app</source>
					<target>If you have a Universal 8.1 app</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>A Universal 8.1 app is built from an 8.1 Universal App project.</source>
					<target>A Universal 8.1 app is built from an 8.1 Universal App project.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Let's say the project's name is AppName\_81.</source>
					<target>Let's say the project's name is AppName\_81.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>It contains these sub-projects.</source>
					<target>It contains these sub-projects.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>AppName\_81.Windows.</source>
					<target>AppName\_81.Windows.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>This is the project that builds the app package for Windows 8.1.</source>
					<target>This is the project that builds the app package for Windows 8.1.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>AppName\_81.WindowsPhone.</source>
					<target>AppName\_81.WindowsPhone.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>This is the project that builds the app package for Windows Phone 8.1.</source>
					<target>This is the project that builds the app package for Windows Phone 8.1.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>AppName\_81.Shared.</source>
					<target>AppName\_81.Shared.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>This is the project that contains source code, markup files, and other assets and resources that are used by both of the other two projects.</source>
					<target>This is the project that contains source code, markup files, and other assets and resources that are used by both of the other two projects.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Often, an 8.1 Universal Windows app offers the same features—and does so using the same code and markup—in both its Windows 8.1 and Windows Phone 8.1 forms.</source>
					<target>Often, an 8.1 Universal Windows app offers the same features—and does so using the same code and markup—in both its Windows 8.1 and Windows Phone 8.1 forms.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>An app like that is an ideal candidate for porting to a single Windows 10 app that targets the Universal device family (and that you can install onto the widest range of devices).</source>
					<target>An app like that is an ideal candidate for porting to a single Windows 10 app that targets the Universal device family (and that you can install onto the widest range of devices).</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>You'll essentially port the contents of the Shared project and you'll need to use little or nothing from the other two projects because there'll be little or nothing in them.</source>
					<target>You'll essentially port the contents of the Shared project and you'll need to use little or nothing from the other two projects because there'll be little or nothing in them.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Other times, the Windows 8.1 and/or the Windows Phone 8.1 form of the app contain unique features.</source>
					<target>Other times, the Windows 8.1 and/or the Windows Phone 8.1 form of the app contain unique features.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Or they contain the same features but they implement those features using different techniques or different technology.</source>
					<target>Or they contain the same features but they implement those features using different techniques or different technology.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>With an app like that, you can choose to port it to a single app that targets the Universal device family (in which case you will want the app to adapt itself to different devices), or you can choose to port it as more than one app, perhaps one targeting the Desktop device family and another targeting the Mobile device family.</source>
					<target>With an app like that, you can choose to port it to a single app that targets the Universal device family (in which case you will want the app to adapt itself to different devices), or you can choose to port it as more than one app, perhaps one targeting the Desktop device family and another targeting the Mobile device family.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The nature of the Universal 8.1 app will determine which of these options is best for your case.</source>
					<target>The nature of the Universal 8.1 app will determine which of these options is best for your case.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Port the contents of the Shared project to an app targeting the Universal device family.</source>
					<target>Port the contents of the Shared project to an app targeting the Universal device family.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>If applicable, salvage any other content from the Windows and WindowsPhone projects, and use that content either unconditionally in the app or conditional on the device that your app happens to be running on at the time (the latter behavior is known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">adaptive</pc>).</source>
					<target>If applicable, salvage any other content from the Windows and WindowsPhone projects, and use that content either unconditionally in the app or conditional on the device that your app happens to be running on at the time (the latter behavior is known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">adaptive</pc>).</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Port the contents of the WindowsPhone project to an app targeting the Universal device family.</source>
					<target>Port the contents of the WindowsPhone project to an app targeting the Universal device family.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>If applicable, salvage any other content from the Windows project, using it either unconditionally or adaptively.</source>
					<target>If applicable, salvage any other content from the Windows project, using it either unconditionally or adaptively.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Port the contents of the Windows project to an app targeting the Universal device family.</source>
					<target>Port the contents of the Windows project to an app targeting the Universal device family.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>If applicable, salvage any other content from the WindowsPhone project, using it either unconditionally or adaptively.</source>
					<target>If applicable, salvage any other content from the WindowsPhone project, using it either unconditionally or adaptively.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Port the contents of the Windows project to an app targeting the Universal or the Desktop device family and also port the contents of the WindowsPhone project to an app targeting the Universal or the Mobile device family.</source>
					<target>Port the contents of the Windows project to an app targeting the Universal or the Desktop device family and also port the contents of the WindowsPhone project to an app targeting the Universal or the Mobile device family.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>You can create a solution with a Shared project, and continue to share source code, markup files, and other assets and resources between the two projects.</source>
					<target>You can create a solution with a Shared project, and continue to share source code, markup files, and other assets and resources between the two projects.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>Or, you can create different solutions and still share the same items using links.</source>
					<target>Or, you can create different solutions and still share the same items using links.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>If you have a Windows 8.1 app</source>
					<target>If you have a Windows 8.1 app</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Port the project to an app targeting the Universal or the Desktop device family.</source>
					<target>Port the project to an app targeting the Universal or the Desktop device family.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>If you choose the Universal device family, and your app calls APIs that are implemented only in the Desktop device family, then you can guard those calls with adaptive code.</source>
					<target>If you choose the Universal device family, and your app calls APIs that are implemented only in the Desktop device family, then you can guard those calls with adaptive code.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>If you have a Windows Phone 8.1 app</source>
					<target>If you have a Windows Phone 8.1 app</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Port the project to an app targeting the Universal or the Mobile device family.</source>
					<target>Port the project to an app targeting the Universal or the Mobile device family.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>If you choose the Universal device family, and your app calls APIs that are implemented only in the Mobile device family, then you can guard those calls with adaptive code.</source>
					<target>If you choose the Universal device family, and your app calls APIs that are implemented only in the Mobile device family, then you can guard those calls with adaptive code.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Adapting your app to multiple form factors</source>
					<target>Adapting your app to multiple form factors</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>The option you choose from the previous sections will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</source>
					<target>The option you choose from the previous sections will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Even limiting your app to the Mobile device family still leaves you with a wide range of screen sizes to support.</source>
					<target>Even limiting your app to the Mobile device family still leaves you with a wide range of screen sizes to support.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>So, if your app will be running on form factors that it didn't formerly support, then test your UI on those form factors and make any change necessary, so that your UI adapts appropriately on each.</source>
					<target>So, if your app will be running on form factors that it didn't formerly support, then test your UI on those form factors and make any change necessary, so that your UI adapts appropriately on each.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-case-study-bookstore2.md)</data>
					<data id="id3">[</data>
					<data id="id4">](w8x-to-uwp-case-study-quizgame.md)</data>
				</originalData>
				<segment state="initial">
					<source>You can think of this is a post-porting task, or a porting stretch-goal, and there are some examples of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuizGame</pc> case studies.</source>
					<target>You can think of this is a post-porting task, or a porting stretch-goal, and there are some examples of it in practice in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuizGame</pc> case studies.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Approaching porting layer-by-layer</source>
					<target>Approaching porting layer-by-layer</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>When porting a Universal 8.1 app to the model for UWP apps, virtually all of your knowledge and experience will transfer, as will most of your source code and markup and the software patterns you use.</source>
					<target>When porting a Universal 8.1 app to the model for UWP apps, virtually all of your knowledge and experience will transfer, as will most of your source code and markup and the software patterns you use.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View</pc>.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>The view (together with the view model) makes up your app's UI.</source>
					<target>The view (together with the view model) makes up your app's UI.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Ideally, the view consists of markup bound to observable properties of a view model.</source>
					<target>Ideally, the view consists of markup bound to observable properties of a view model.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</source>
					<target>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>In either case, your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</source>
					<target>In either case, your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">View models and data models</pc>.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</source>
					<target>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>View model code makes use of types in the UI framework namespaces.</source>
					<target>View model code makes use of types in the UI framework namespaces.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Both view model and data model code also use non-visual operating system and .NET Framework APIs (including APIs for data-access).</source>
					<target>Both view model and data model code also use non-visual operating system and .NET Framework APIs (including APIs for data-access).</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211369)</data>
				</originalData>
				<segment state="initial">
					<source>And those APIs are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available for UWP apps, too</pc>, so most if not all of this code will port without change.</source>
					<target>And those APIs are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">available for UWP apps, too</pc>, so most if not all of this code will port without change.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Cloud services</pc>.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</source>
					<target>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>The part of the app running on the client device connects to those.</source>
					<target>The part of the app running on the client device connects to those.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>This is the part of a distributed app most likely to remain unchanged when porting the client part.</source>
					<target>This is the part of a distributed app most likely to remain unchanged when porting the client part.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://azure.microsoft.com/services/mobile-services/)</data>
				</originalData>
				<segment state="initial">
					<source>If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that your app can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</source>
					<target>If you don't already have one, a good cloud services option for your UWP app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Azure Mobile Services</pc>, which provides powerful back-end components that your app can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</source>
					<target>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Factoring your app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</source>
					<target>Factoring your app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://msdn.microsoft.com/magazine/dd419663.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can make functionality more reusable by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</source>
					<target>You can make functionality more reusable by following the Model-View-ViewModel (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">MVVM</pc>) pattern.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>This pattern keeps the data, business, and UI parts of your app separate from one another.</source>
					<target>This pattern keeps the data, business, and UI parts of your app separate from one another.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</source>
					<target>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</source>
					<target>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</source>
					<target>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>If you have a Microsoft Visual Studio 2015 RC project</source>
					<target>If you have a Microsoft Visual Studio 2015 RC project</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](update-your-visual-studio-2015-rc-project-to-rtm.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you have a Windows 10 project that you created with Microsoft Visual Studio 2015 RC, then see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update your UWP Microsoft Visual Studio 2015 RC project to RTM</pc>.</source>
					<target>If you have a Windows 10 project that you created with Microsoft Visual Studio 2015 RC, then see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update your UWP Microsoft Visual Studio 2015 RC project to RTM</pc>.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Topic</source>
					<target>Topic</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Porting the project</source>
					<target>Porting the project</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>You have two options when you begin the porting process.</source>
					<target>You have two options when you begin the porting process.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/mt148501.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>One is to edit a copy of your existing project files, including the app package manifest (for that option, see the info about updating your project files in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Migrate apps to the Universal Windows Platform (UWP)</pc>).</source>
					<target>One is to edit a copy of your existing project files, including the app package manifest (for that option, see the info about updating your project files in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Migrate apps to the Universal Windows Platform (UWP)</pc>).</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>The other option is to create a new Windows 10 project in Visual Studio and copy your files into it.</source>
					<target>The other option is to create a new Windows 10 project in Visual Studio and copy your files into it.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Troubleshooting</source>
					<target>Troubleshooting</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</source>
					<target>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</source>
					<target>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</source>
					<target>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>You can always refer back to the table as you progress through the later topics.</source>
					<target>You can always refer back to the table as you progress through the later topics.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Porting XAML and UI</source>
					<target>Porting XAML and UI</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Universal 8.1 apps to UWP apps.</source>
					<target>The practice of defining UI in the form of declarative XAML markup translates extremely well from Universal 8.1 apps to UWP apps.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>You'll find that most of your markup is compatible, although you may need to make some adjustments to the system Resource keys or custom templates that you're using.</source>
					<target>You'll find that most of your markup is compatible, although you may need to make some adjustments to the system Resource keys or custom templates that you're using.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Porting for I/O, device, and app model</source>
					<target>Porting for I/O, device, and app model</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
					<target>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>It can also involve processing data.</source>
					<target>It can also involve processing data.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>But, this code is not generally thought of as either the UI layer or the data layer.</source>
					<target>But, this code is not generally thought of as either the UI layer or the data layer.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
					<target>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Case study: Bookstore1</source>
					<target>Case study: Bookstore1</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 UWP app.</source>
					<target>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 UWP app.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</source>
					<target>A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
					<target>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Case study: Bookstore2</source>
					<target>Case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
				</originalData>
				<segment state="initial">
					<source>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom</pc> control.</source>
					<target>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom</pc> control.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>In the view model, each instance of the class Author represents the group of the books written by that author, and in the SemanticZoom, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
					<target>In the view model, each instance of the class Author represents the group of the books written by that author, and in the SemanticZoom, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Case study: QuizGame</source>
					<target>Case study: QuizGame</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 UWP app.</source>
					<target>This topic presents a case study of porting a functioning peer-to-peer quiz game WinRT 8.1 sample app to a Windows 10 UWP app.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Documentation</source>
					<target>Documentation</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Windows Runtime reference</source>
					<target>Windows Runtime reference</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Building Universal Windows apps for all Windows devices</source>
					<target>Building Universal Windows apps for all Windows devices</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Designing UX for apps</source>
					<target>Designing UX for apps</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>