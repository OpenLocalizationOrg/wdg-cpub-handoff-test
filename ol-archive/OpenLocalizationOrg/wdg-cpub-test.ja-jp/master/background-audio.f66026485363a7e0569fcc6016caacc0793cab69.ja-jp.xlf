<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">34d58800e3ae3889589fa4fc264111069e5e0d16</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\audio-video-camera\background-audio.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">89bd3705b4adab62908ff2fb106fdd38bc550371</mda:meta><mda:meta type="olxliffhash">421d5aef0524896f50b0da20a6312069d0e811c8</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</source>
					<target>This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Background Audio</source>
					<target>Background Audio</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Background Audio</source>
					<target>Background Audio</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</source>
					<target>This article describes how to create Universal Windows Platform (UWP) apps that play audio in the background.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>This means that even after the user has minimized your app, returned to the home screen, or has navigated away from your app in some other way, your app can continue to play audio.</source>
					<target>This means that even after the user has minimized your app, returned to the home screen, or has navigated away from your app in some other way, your app can continue to play audio.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This article discusses the components of a background audio app and how they work together.</source>
					<target>This article discusses the components of a background audio app and how they work together.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Scenarios for background audio playback include:</source>
					<target>Scenarios for background audio playback include:</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Long-running playlists:</pc> The user briefly brings up a foreground app to select and start a playlist, after which the user expects the playlist to continue playing in the background.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Long-running playlists:</pc> The user briefly brings up a foreground app to select and start a playlist, after which the user expects the playlist to continue playing in the background.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using task switcher:</pc> The user briefly brings up a foreground app to start playing audio, then switches to another open app using the task switcher.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Using task switcher:</pc> The user briefly brings up a foreground app to start playing audio, then switches to another open app using the task switcher.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>The user expects the audio to continue playing in the background.</source>
					<target>The user expects the audio to continue playing in the background.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>The background audio implementation described in this article will allow your app to run universally on all Windows devices including Mobile, Desktop, and Xbox.</source>
					<target>The background audio implementation described in this article will allow your app to run universally on all Windows devices including Mobile, Desktop, and Xbox.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?LinkId=619485)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background audio UWP sample</pc> implements the code discussed in this overview.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Background audio UWP sample</pc> implements the code discussed in this overview.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>You can download the sample to see the code in context or to use as a starting point for your own app.</source>
					<target>You can download the sample to see the code in context or to use as a starting point for your own app.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Background audio architecture</source>
					<target>Background audio architecture</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>An app performing background playback consists of two processes.</source>
					<target>An app performing background playback consists of two processes.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The first process is the main app, which contains the app UI and client logic, running in the foreground.</source>
					<target>The first process is the main app, which contains the app UI and client logic, running in the foreground.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The second process is the background playback task, which implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask</pc></pc> like all UWP app background tasks.</source>
					<target>The second process is the background playback task, which implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask</pc></pc> like all UWP app background tasks.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>The background task contains the audio playback logic and background services.</source>
					<target>The background task contains the audio playback logic and background services.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>The background task communicates with the system through the System Media Transport Controls.</source>
					<target>The background task communicates with the system through the System Media Transport Controls.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>The following diagram is an overview of how the system is designed.</source>
					<target>The following diagram is an overview of how the system is designed.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>windows 10 background audio architecture</source>
					<target>windows 10 background audio architecture</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>MediaPlayer</source>
					<target>MediaPlayer</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn640562)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Playback</pc></pc> namespace contains APIs used to play audio in the background.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Playback</pc></pc> namespace contains APIs used to play audio in the background.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652535)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>There is a single instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc></pc> per app through which playback occurs.</source>
					<target>There is a single instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc></pc> per app through which playback occurs.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Your background audio app calls methods and sets properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> class to set the current track, start playback, pause, fast forward, rewind, and so on.</source>
					<target>Your background audio app calls methods and sets properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> class to set the current track, start playback, pause, fast forward, rewind, and so on.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652528)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The media player object instance is always accessed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundMediaPlayer.Current</pc></pc> property.</source>
					<target>The media player object instance is always accessed through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundMediaPlayer.Current</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>MediaPlayer Proxy and Stub</source>
					<target>MediaPlayer Proxy and Stub</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from your app's background process, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance is activated in the background task host and can be manipulated directly.</source>
					<target>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from your app's background process, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance is activated in the background task host and can be manipulated directly.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from the foreground application, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance that is returned is actually a proxy that communicates with a stub in the background process.</source>
					<target>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> is accessed from the foreground application, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlayer</pc> instance that is returned is actually a proxy that communicates with a stub in the background process.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This stub communicates with the actual <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, which is also hosted in the background process.</source>
					<target>This stub communicates with the actual <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, which is also hosted in the background process.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn987010)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn926635)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Both the foreground and background process can access most of the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, with the exception of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.Source</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.SystemMediaTransportControls</pc></pc> which can only be accessed from the background process.</source>
					<target>Both the foreground and background process can access most of the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlayer</pc> instance, with the exception of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.Source</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.SystemMediaTransportControls</pc></pc> which can only be accessed from the background process.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652609)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652603)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn652606)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The foreground app and the background process can both receive notifications of media-specific events like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaEnded</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaFailed</pc></pc>.</source>
					<target>The foreground app and the background process can both receive notifications of media-specific events like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MediaEnded</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MediaFailed</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Playback Lists</source>
					<target>Playback Lists</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>A common scenario for background audio applications is to play multiple items in a row.</source>
					<target>A common scenario for background audio applications is to play multiple items in a row.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930955)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn987010)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>This is most easily accomplished in your background process by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> object, which can be set as a source on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer</pc> by assigning it to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.Source</pc></pc> property.</source>
					<target>This is most easily accomplished in your background process by using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaPlaybackList</pc></pc> object, which can be set as a source on the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer</pc> by assigning it to the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">MediaPlayer.Source</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It is not possible to access a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> from the foreground process that was set in the background process.</source>
					<target>It is not possible to access a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaPlaybackList</pc> from the foreground process that was set in the background process.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>System Media Transport Controls</source>
					<target>System Media Transport Controls</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>A user may control audio playback without directly using your app's UI through means such as Bluetooth devices, SmartGlass, and the System Media Transport Controls.</source>
					<target>A user may control audio playback without directly using your app's UI through means such as Bluetooth devices, SmartGlass, and the System Media Transport Controls.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn278677)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your background task uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls</pc></pc> class to subscribe to these user-initiated system events.</source>
					<target>Your background task uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls</pc></pc> class to subscribe to these user-initiated system events.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn926635)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To get a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemMediaTransportControls</pc> instance from within the background process, use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.SystemMediaTransportControls</pc></pc> property.</source>
					<target>To get a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemMediaTransportControls</pc> instance from within the background process, use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MediaPlayer.SystemMediaTransportControls</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn278708)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Foreground apps get an instance of the class by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls.GetForCurrentView</pc></pc>, but the instance returned is a foreground-only instance that does not relate to the background task.</source>
					<target>Foreground apps get an instance of the class by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemMediaTransportControls.GetForCurrentView</pc></pc>, but the instance returned is a foreground-only instance that does not relate to the background task.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Sending Messages Between Tasks</source>
					<target>Sending Messages Between Tasks</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>There are times when you will want to communicate between the two processes of a background audio app.</source>
					<target>There are times when you will want to communicate between the two processes of a background audio app.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>For example, you might want the background task to notify the foreground task when a new track starts playing, and then send the new song title to the foreground task to display on the screen.</source>
					<target>For example, you might want the background task to notify the foreground task when a new track starts playing, and then send the new song title to the foreground task to display on the screen.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>A simple communication mechanism raises events in both the foreground and background processes.</source>
					<target>A simple communication mechanism raises events in both the foreground and background processes.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652533)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652532)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageToForeground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendMessageToBackground</pc></pc> methods each invoke events in the corresponding process.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SendMessageToForeground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SendMessageToBackground</pc></pc> methods each invoke events in the corresponding process.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn652530)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652531)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Messages can be received by subscribing to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceivedFromBackground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MessageReceivedFromForeground</pc></pc> events.</source>
					<target>Messages can be received by subscribing to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MessageReceivedFromBackground</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">MessageReceivedFromForeground</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Data can be passed as an argument to the send message methods that are then passed into the message received event handlers.</source>
					<target>Data can be passed as an argument to the send message methods that are then passed into the message received event handlers.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn636131)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Pass data using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> class.</source>
					<target>Pass data using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ValueSet</pc></pc> class.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>This class is a dictionary that contains a string as a key and other value types as values.</source>
					<target>This class is a dictionary that contains a string as a key and other value types as values.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>You can pass simple value types such as integers, strings, and booleans.</source>
					<target>You can pass simple value types such as integers, strings, and booleans.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Background Task Life Cycle</source>
					<target>Background Task Life Cycle</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>The lifetime of a background task is closely tied to your app's current playback status.</source>
					<target>The lifetime of a background task is closely tied to your app's current playback status.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>For example, when the user pauses audio playback, the system may terminate or cancel your app depending on the circumstances.</source>
					<target>For example, when the user pauses audio playback, the system may terminate or cancel your app depending on the circumstances.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>After a period of time without audio playback, the system may automatically shut down the background task.</source>
					<target>After a period of time without audio playback, the system may automatically shut down the background task.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224811)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn652528)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn652530)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask.Run</pc></pc> method is called the first time your app accesses either <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundMediaPlayer.Current</pc></pc> from code running in the foreground app or when you register a handler for the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MessageReceivedFromBackground</pc></pc> event, whichever occurs first.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTask.Run</pc></pc> method is called the first time your app accesses either <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundMediaPlayer.Current</pc></pc> from code running in the foreground app or when you register a handler for the <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">MessageReceivedFromBackground</pc></pc> event, whichever occurs first.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It is recommended that you register for the message received handler before calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> for the first time so that the foreground app doesn't miss any messages sent from the background process.</source>
					<target>It is recommended that you register for the message received handler before calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BackgroundMediaPlayer.Current</pc> for the first time so that the foreground app doesn't miss any messages sent from the background process.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh700499)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh700504)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/br224798)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/br224788)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>To keep the background task alive, your app must request a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskDeferral</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run</pc> method and call <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTaskDeferral.Complete</pc></pc> when the task instance receives the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Canceled</pc></pc> or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Completed</pc></pc> events.</source>
					<target>To keep the background task alive, your app must request a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskDeferral</pc></pc> from within the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run</pc> method and call <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTaskDeferral.Complete</pc></pc> when the task instance receives the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Canceled</pc></pc> or <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">Completed</pc></pc> events.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Do not loop or wait in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> method because this consumes resources and may cause your app's background task to be terminated by the system.</source>
					<target>Do not loop or wait in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> method because this consumes resources and may cause your app's background task to be terminated by the system.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your background task gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Completed</pc> event when the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> method is completed and deferral is not requested.</source>
					<target>Your background task gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Completed</pc> event when the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> method is completed and deferral is not requested.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In some cases, when your app gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event, it can be also followed by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Completed</pc> event.</source>
					<target>In some cases, when your app gets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event, it can be also followed by the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Completed</pc> event.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Your task may receive a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event while <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> is executing, so be sure to manage this potential concurrence.</source>
					<target>Your task may receive a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canceled</pc> event while <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc> is executing, so be sure to manage this potential concurrence.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Situations in which the background task can be cancelled include:</source>
					<target>Situations in which the background task can be cancelled include:</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>A new app with audio playback capabilities starts on systems that enforce the exclusivity sub-policy.</source>
					<target>A new app with audio playback capabilities starts on systems that enforce the exclusivity sub-policy.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#system-policies-for-background-audio-task-lifetime)</data>
				</originalData>
				<segment state="initial">
					<source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System policies for background audio task lifetime</pc> section below.</source>
					<target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System policies for background audio task lifetime</pc> section below.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>A background task has been launched but music is not yet playing, and then the foreground app is suspended.</source>
					<target>A background task has been launched but music is not yet playing, and then the foreground app is suspended.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Other media interruptions, such as incoming phone calls or VoIP calls.</source>
					<target>Other media interruptions, such as incoming phone calls or VoIP calls.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Situations in which the background task can be terminated without notice include:</source>
					<target>Situations in which the background task can be terminated without notice include:</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>A VoIP call comes in and there is not enough available memory on the system to keep the background task alive.</source>
					<target>A VoIP call comes in and there is not enough available memory on the system to keep the background task alive.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>A resource policy is violated.</source>
					<target>A resource policy is violated.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Task cancellation or completion does not end gracefully.</source>
					<target>Task cancellation or completion does not end gracefully.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>System policies for background audio task lifetime</source>
					<target>System policies for background audio task lifetime</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>The following policies help determine how the system manages the lifetime of background audio tasks.</source>
					<target>The following policies help determine how the system manages the lifetime of background audio tasks.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Exclusivity</source>
					<target>Exclusivity</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>If enabled, this sub-policy limits the number of background audio tasks to be at most 1 at any given time.</source>
					<target>If enabled, this sub-policy limits the number of background audio tasks to be at most 1 at any given time.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>It is enabled on Mobile and other non-Desktop SKUs.</source>
					<target>It is enabled on Mobile and other non-Desktop SKUs.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Inactivity Timeout</source>
					<target>Inactivity Timeout</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Due to resource constraints, the system may terminate your background task after a period of inactivity.</source>
					<target>Due to resource constraints, the system may terminate your background task after a period of inactivity.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>A background task is considered “inactive” if both of the following conditions are met:</source>
					<target>A background task is considered “inactive” if both of the following conditions are met:</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>The foreground app is not visible (it is suspended or terminated).</source>
					<target>The foreground app is not visible (it is suspended or terminated).</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>The background media player is not in the playing state.</source>
					<target>The background media player is not in the playing state.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>If both of these conditions are satisfied, the background media system policy will start a timer.</source>
					<target>If both of these conditions are satisfied, the background media system policy will start a timer.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>If neither condition has changed when the timer expires, the background media system policy will terminate the background task.</source>
					<target>If neither condition has changed when the timer expires, the background media system policy will terminate the background task.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Shared Lifetime</source>
					<target>Shared Lifetime</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>If enabled, this sub-policy forces the background task to be dependent on the lifetime of the foreground task.</source>
					<target>If enabled, this sub-policy forces the background task to be dependent on the lifetime of the foreground task.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>If the foreground task is shut down, either by the user or the system, the background task will also shut down.</source>
					<target>If the foreground task is shut down, either by the user or the system, the background task will also shut down.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>However, note that this does not mean that the foreground is dependent on the background.</source>
					<target>However, note that this does not mean that the foreground is dependent on the background.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>If the background task is shut down, this does not force the foreground task to shut down.</source>
					<target>If the background task is shut down, this does not force the foreground task to shut down.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>The following table lists the which policies are enforced on which device types.</source>
					<target>The following table lists the which policies are enforced on which device types.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Sub-policy</source>
					<target>Sub-policy</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Desktop</source>
					<target>Desktop</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Mobile</source>
					<target>Mobile</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>Other</source>
					<target>Other</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Exclusivity</source>
					<target>Exclusivity</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
					<target>Disabled</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Enabled</source>
					<target>Enabled</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Enabled</source>
					<target>Enabled</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Inactivity Timeout</source>
					<target>Inactivity Timeout</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
					<target>Disabled</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Enabled</source>
					<target>Enabled</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
					<target>Disabled</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Shared Lifetime</source>
					<target>Shared Lifetime</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Enabled</source>
					<target>Enabled</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
					<target>Disabled</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Disabled</source>
					<target>Disabled</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>