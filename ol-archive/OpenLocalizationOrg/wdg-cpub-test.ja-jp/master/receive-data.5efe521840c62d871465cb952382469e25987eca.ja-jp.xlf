<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">3f6a4ce84f8dbfba2c16de1acdb4fe5289778848</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\app-to-app\receive-data.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">b836615f10df734d5024331927231274fe6e6894</mda:meta><mda:meta type="olxliffhash">1591db2a19e00957b2f52e34d8515a7c58b5fbf1</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</source>
					<target>This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This Share contract allows your app to be presented as an option when the user invokes Share.</source>
					<target>This Share contract allows your app to be presented as an option when the user invokes Share.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Receive data</source>
					<target>Receive data</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Receive data</source>
					<target>Receive data</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</source>
					<target>This article explains how to receive content in your Universal Windows Platform (UWP) app shared from another app using Share contract.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This Share contract allows your app to be presented as an option when the user invokes Share.</source>
					<target>This Share contract allows your app to be presented as an option when the user invokes Share.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Declare your app as a share target</source>
					<target>Declare your app as a share target</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The system displays a list of possible target apps when a user invokes Share.</source>
					<target>The system displays a list of possible target apps when a user invokes Share.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>In order to appear on the list, your app need to declare that it supports the Share contract.</source>
					<target>In order to appear on the list, your app need to declare that it supports the Share contract.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This lets the system know that your app is available to receive content.</source>
					<target>This lets the system know that your app is available to receive content.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Open the manifest file.</source>
					<target>Open the manifest file.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">package.appxmanifest</pc>.</source>
					<target>It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">package.appxmanifest</pc>.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</source>
					<target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Declarations</pc> tab.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Share Target</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Available Declarations</pc> list and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
					<target>Choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Share Target</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Available Declarations</pc> list and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Choose file types and formats</source>
					<target>Choose file types and formats</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Next, decide what file types and data formats you support.</source>
					<target>Next, decide what file types and data formats you support.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The Share APIs support several standard formats, such as Text, HTML, and Bitmap.</source>
					<target>The Share APIs support several standard formats, such as Text, HTML, and Bitmap.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>You can also specify custom file types and data formats.</source>
					<target>You can also specify custom file types and data formats.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>If you do, remember that source apps have to know what those types and formats are, otherwise those apps can't use the formats to share data.</source>
					<target>If you do, remember that source apps have to know what those types and formats are, otherwise those apps can't use the formats to share data.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Only register for formats your app can handle.</source>
					<target>Only register for formats your app can handle.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Only target apps that support the data being shared appear when the user invokes share.</source>
					<target>Only target apps that support the data being shared appear when the user invokes share.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>To set file types:</source>
					<target>To set file types:</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Open the manifest file.</source>
					<target>Open the manifest file.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">package.appxmanifest</pc>.</source>
					<target>It should be called something like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">package.appxmanifest</pc>.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Declarations</pc> page, click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New</pc>.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supported File Types</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Declarations</pc> page, click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Type the file name extension that you want to support.</source>
					<target>Type the file name extension that you want to support.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>For example, .docx.</source>
					<target>For example, .docx.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>You need to include the period.</source>
					<target>You need to include the period.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want to support all file types, check the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SupportsAnyFileType</pc> box.</source>
					<target>If you want to support all file types, check the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SupportsAnyFileType</pc> box.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>To set data formats:</source>
					<target>To set data formats:</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Open the manifest file.</source>
					<target>Open the manifest file.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data Formats</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Declarations</pc> page and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New</pc>.</source>
					<target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data Formats</pc> section of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Declarations</pc> page and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New</pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Type the name of the data format you support.</source>
					<target>Type the name of the data format you support.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>For example, "Text".</source>
					<target>For example, "Text".</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Handle share activation</source>
					<target>Handle share activation</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When a user selects your app (usually by selecting it from a list of available target apps in the share UI), an [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application.OnShareTargetActivated</pc>][OnShareTargetActivated] event is raised.</source>
					<target>When a user selects your app (usually by selecting it from a list of available target apps in the share UI), an [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application.OnShareTargetActivated</pc>][OnShareTargetActivated] event is raised.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Your app needs to handle this event to process the data the user wants to share.</source>
					<target>Your app needs to handle this event to process the data the user wants to share.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Note that if your app is running when it is activated as a Share target, the existing instance of your app is terminated and a new instance of your app is launched to handle the contract.</source>
					<target>Note that if your app is running when it is activated as a Share target, the existing instance of your app is terminated and a new instance of your app is launched to handle the contract.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>The data that the user wants to share is contained in a ShareOperation object.</source>
					<target>The data that the user wants to share is contained in a ShareOperation object.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>You can use this object to check the format of the data it contains.</source>
					<target>You can use this object to check the format of the data it contains.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Report sharing status</source>
					<target>Report sharing status</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>In some cases, it can take time for your app to process the data it wants to share.</source>
					<target>In some cases, it can take time for your app to process the data it wants to share.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Examples include users sharing collections of files or images.</source>
					<target>Examples include users sharing collections of files or images.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>These items are larger than a simple text string, so they take longer to process.</source>
					<target>These items are larger than a simple text string, so they take longer to process.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>After calling [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportStarted</pc>][ReportStarted], don't expect any more user interaction with your app.</source>
					<target>After calling [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportStarted</pc>][ReportStarted], don't expect any more user interaction with your app.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>As a result, you shouldn't call it unless your app is at a point where it can be dismissed by the user.</source>
					<target>As a result, you shouldn't call it unless your app is at a point where it can be dismissed by the user.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>With an extended share, it's possible that the user might dismiss the source app before your app has all the data from the DataPackage object.</source>
					<target>With an extended share, it's possible that the user might dismiss the source app before your app has all the data from the DataPackage object.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>As a result, we recommend that you let the system know when your app has acquired the data it needs.</source>
					<target>As a result, we recommend that you let the system know when your app has acquired the data it needs.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>This way, the system can suspend or terminate the source app as necessary.</source>
					<target>This way, the system can suspend or terminate the source app as necessary.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If something goes wrong, call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportError</pc>][ReportError] to send an error message to the system.</source>
					<target>If something goes wrong, call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportError</pc>][ReportError] to send an error message to the system.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>The user will see the message when they check on the status of the share.</source>
					<target>The user will see the message when they check on the status of the share.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>At that point, your app is shut down and the share is ended.</source>
					<target>At that point, your app is shut down and the share is ended.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>The user will need to start again to share the content to your app.</source>
					<target>The user will need to start again to share the content to your app.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Depending on your scenario, you may decide that a particular error isn't serious enough to end the share operation.</source>
					<target>Depending on your scenario, you may decide that a particular error isn't serious enough to end the share operation.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In that case, you can choose to not call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportError</pc> and to continue with the share.</source>
					<target>In that case, you can choose to not call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportError</pc> and to continue with the share.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, when your app has successfully processed the shared content, you should call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportCompleted</pc>][ReportCompleted] to let the system know.</source>
					<target>Finally, when your app has successfully processed the shared content, you should call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportCompleted</pc>][ReportCompleted] to let the system know.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>When you use these methods, you usually call them in the order just described, and you don't call them more than once.</source>
					<target>When you use these methods, you usually call them in the order just described, and you don't call them more than once.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, there are times when a target app can call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportDataRetrieved</pc>][ReportDataRetrieved] before [<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportStarted</pc>][ReportStarted].</source>
					<target>However, there are times when a target app can call [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportDataRetrieved</pc>][ReportDataRetrieved] before [<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReportStarted</pc>][ReportStarted].</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, the app might retrieve the data as part of a task in the activation handler, but not call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportStarted</pc> until the user clicks a Share button.</source>
					<target>For example, the app might retrieve the data as part of a task in the activation handler, but not call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ReportStarted</pc> until the user clicks a Share button.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Return a QuickLink if sharing was successful</source>
					<target>Return a QuickLink if sharing was successful</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When a user selects your app to receive content, we recommend that you create a [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>][QuickLink].</source>
					<target>When a user selects your app to receive content, we recommend that you create a [<pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>][QuickLink].</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> is like a shortcut that makes it easier for users to share information with your app.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> is like a shortcut that makes it easier for users to share information with your app.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, you could create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> that opens a new mail message pre-configured with a friend's email address.</source>
					<target>For example, you could create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> that opens a new mail message pre-configured with a friend's email address.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> must have a title, an icon, and an Id.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> must have a title, an icon, and an Id.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>The title (like "Email Mom") and icon appear when the user taps the Share charm.</source>
					<target>The title (like "Email Mom") and icon appear when the user taps the Share charm.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The Id is what your app uses to access any custom information, such as an email address or login credentials.</source>
					<target>The Id is what your app uses to access any custom information, such as an email address or login credentials.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>When your app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>, the app returns the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuickLink</pc> to the system by calling [<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ReportCompleted</pc>][ReportCompleted].</source>
					<target>When your app creates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>, the app returns the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuickLink</pc> to the system by calling [<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ReportCompleted</pc>][ReportCompleted].</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> does not actually store data.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> does not actually store data.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Instead, it contains an identifier that, when selected, is sent to your app.</source>
					<target>Instead, it contains an identifier that, when selected, is sent to your app.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Your app is responsible for storing the Id of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> and the corresponding user data.</source>
					<target>Your app is responsible for storing the Id of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc> and the corresponding user data.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When the user taps the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>, you can get its Id through the [<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShareOperation.QuickLinkId</pc>][QuickLInkId] property.</source>
					<target>When the user taps the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuickLink</pc>, you can get its Id through the [<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShareOperation.QuickLinkId</pc>][QuickLInkId] property.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Share data</source>
					<target>Share data</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>OnShareTargetActivated</source>
					<target>OnShareTargetActivated</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>ReportStarted</source>
					<target>ReportStarted</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>ReportError</source>
					<target>ReportError</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>ReportCompleted</source>
					<target>ReportCompleted</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>ReportDataRetrieved</source>
					<target>ReportDataRetrieved</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>ReportStarted</source>
					<target>ReportStarted</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>QuickLink</source>
					<target>QuickLink</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>QuickLInkId</source>
					<target>QuickLInkId</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>