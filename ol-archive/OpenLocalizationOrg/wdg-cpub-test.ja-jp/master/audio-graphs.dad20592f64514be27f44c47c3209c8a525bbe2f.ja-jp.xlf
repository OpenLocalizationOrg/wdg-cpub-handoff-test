<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">78a88cfc48d10aa7fe99b85eee7daa1a0984d9eb</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\audio-video-camera\audio-graphs.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">4fe81ee0cf9139ecec81cd58dbd5b32ae076e24c</mda:meta><mda:meta type="olxliffhash">702d302882ed788c6d60f409a685923e313d4b16</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This article shows how to use the APIs in the Windows.Media.Audio namespace to create audio graphs for audio routing, mixing, and processing scenarios.</source>
					<target>This article shows how to use the APIs in the Windows.Media.Audio namespace to create audio graphs for audio routing, mixing, and processing scenarios.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Audio Graphs</source>
					<target>Audio Graphs</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Audio Graphs</source>
					<target>Audio Graphs</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914341)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This article shows how to use the APIs in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Audio</pc></pc> namespace to create audio graphs for audio routing, mixing, and processing scenarios.</source>
					<target>This article shows how to use the APIs in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Media.Audio</pc></pc> namespace to create audio graphs for audio routing, mixing, and processing scenarios.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>An audio graph is a set of interconnected audio nodes through which audio data flows.</source>
					<target>An audio graph is a set of interconnected audio nodes through which audio data flows.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Audio input nodes supply audio data to the graph from audio input devices, audio files, or from custom code.</source>
					<target>Audio input nodes supply audio data to the graph from audio input devices, audio files, or from custom code.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Audio output nodes are the destination for audio processed by the graph.</source>
					<target>Audio output nodes are the destination for audio processed by the graph.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Audio can be routed out of the graph to audio output devices, audio files, or custom code.</source>
					<target>Audio can be routed out of the graph to audio output devices, audio files, or custom code.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The last type of node is a submix node which takes audio from one or more nodes and combines them into a single output that can be routed to other nodes in the graph.</source>
					<target>The last type of node is a submix node which takes audio from one or more nodes and combines them into a single output that can be routed to other nodes in the graph.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>After all of the nodes have been created and the connections between them set up, you simply start the audio graph and the audio data flows from the input nodes, through any submix nodes, to the output nodes.</source>
					<target>After all of the nodes have been created and the connections between them set up, you simply start the audio graph and the audio data flows from the input nodes, through any submix nodes, to the output nodes.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This model makes scenarios like recording from a device's microphone to an audio file, playing audio from a file to a device's speaker, or mixing audio from multiple sources quick and easy to implement.</source>
					<target>This model makes scenarios like recording from a device's microphone to an audio file, playing audio from a file to a device's speaker, or mixing audio from multiple sources quick and easy to implement.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Additional scenarios are enabled with the addition of audio effects to the audio graph.</source>
					<target>Additional scenarios are enabled with the addition of audio effects to the audio graph.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Every node in an audio graph can be populated with zero or more audio effects that perform audio processing on the audio passing through the node.</source>
					<target>Every node in an audio graph can be populated with zero or more audio effects that perform audio processing on the audio passing through the node.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>There are several built-in effects such as echo, equalizer, limiting, and reverb that can be attached to an audio node with just a few lines of code.</source>
					<target>There are several built-in effects such as echo, equalizer, limiting, and reverb that can be attached to an audio node with just a few lines of code.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>You can also create your own custom audio effects that work exactly the same as the built-in effects.</source>
					<target>You can also create your own custom audio effects that work exactly the same as the built-in effects.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?LinkId=619481)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph UWP sample</pc> implements the code discussed in this overview.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph UWP sample</pc> implements the code discussed in this overview.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>You can download the sample to see the code in context or to use as a starting point for your own app.</source>
					<target>You can download the sample to see the code in context or to use as a starting point for your own app.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Choosing Windows Runtime AudioGraph or XAudio2</source>
					<target>Choosing Windows Runtime AudioGraph or XAudio2</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh405049)</data>
				</originalData>
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs offer functionality that can also be implemented using the COM-based <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAudio2 APIs</pc>.</source>
					<target>The Windows Runtime audio graph APIs offer functionality that can also be implemented using the COM-based <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAudio2 APIs</pc>.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>The following are features of the Windows Runtime audio graph framework that differ from XAudio2.</source>
					<target>The following are features of the Windows Runtime audio graph framework that differ from XAudio2.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs are significantly easier to use than XAudio2.</source>
					<target>The Windows Runtime audio graph APIs are significantly easier to use than XAudio2.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs can be used from C# - in addition to being supported for C++.</source>
					<target>The Windows Runtime audio graph APIs can be used from C# - in addition to being supported for C++.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs can use audio files, including compressed file formats, directly.</source>
					<target>The Windows Runtime audio graph APIs can use audio files, including compressed file formats, directly.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>XAudio2 only operates on audio buffers and does not provide any file I/O capabilities.</source>
					<target>XAudio2 only operates on audio buffers and does not provide any file I/O capabilities.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs can use the low-latency audio pipeline in Windows 10.</source>
					<target>The Windows Runtime audio graph APIs can use the low-latency audio pipeline in Windows 10.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The Windows Runtime audio graph APIs supports automatic endpoint switching when default endpoint parameters are used.</source>
					<target>The Windows Runtime audio graph APIs supports automatic endpoint switching when default endpoint parameters are used.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>For example, if the user switches from a device's speaker to a headset, the audio is automatically redirected to the new input.</source>
					<target>For example, if the user switches from a device's speaker to a headset, the audio is automatically redirected to the new input.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>AudioGraph class</source>
					<target>AudioGraph class</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914176)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph</pc></pc> class is the parent of all nodes that make up the graph.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph</pc></pc> class is the parent of all nodes that make up the graph.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Use this object to create instances of all of the audio node types.</source>
					<target>Use this object to create instances of all of the audio node types.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn914185)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn914216)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph</pc> class by initializing an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioGraphSettings</pc></pc> object, containing configuration settings for the graph, and then calling <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">AudioGraph.CreateAsync</pc></pc>.</source>
					<target>Create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph</pc> class by initializing an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioGraphSettings</pc></pc> object, containing configuration settings for the graph, and then calling <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">AudioGraph.CreateAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914273)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateAudioGraphResult</pc></pc> gives access to the created audio graph or provides an error value if audio graph creation fails.</source>
					<target>The returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateAudioGraphResult</pc></pc> gives access to the created audio graph or provides an error value if audio graph creation fails.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>DeclareAudioGraph</source>
					<target>DeclareAudioGraph</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>InitAudioGraph</source>
					<target>InitAudioGraph</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>All audio node types are created by using the Create\* methods of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph</pc> class.</source>
					<target>All audio node types are created by using the Create\* methods of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioGraph</pc> class.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914244)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc></pc> method causes the audio graph to start processing audio data.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc></pc> method causes the audio graph to start processing audio data.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914245)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Stop</pc></pc> method stops audio processing.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Stop</pc></pc> method stops audio processing.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Each node in the graph can be started and stopped independently while the graph is running, but no nodes are active when the graph is stopped.</source>
					<target>Each node in the graph can be started and stopped independently while the graph is running, but no nodes are active when the graph is stopped.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914242)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResetAllNodes</pc></pc> causes all nodes in the graph to discard any data currently in their audio buffers.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResetAllNodes</pc></pc> causes all nodes in the graph to discard any data currently in their audio buffers.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914241)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumStarted</pc></pc> event occurs when the graph is starting the processing of a new quantum of audio data.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumStarted</pc></pc> event occurs when the graph is starting the processing of a new quantum of audio data.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914240)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumProcessed</pc></pc> event occurs when the processing of a quantum is completed.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumProcessed</pc></pc> event occurs when the processing of a quantum is completed.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914185)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn297724)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraphSettings</pc></pc> property that is required is <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioRenderCategory</pc></pc>.</source>
					<target>The only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraphSettings</pc></pc> property that is required is <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioRenderCategory</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Specifying this value allows the system to optimize the audio pipeline for the specified category.</source>
					<target>Specifying this value allows the system to optimize the audio pipeline for the specified category.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>The quantum size of the audio graph determines the number of samples that are processed at one time.</source>
					<target>The quantum size of the audio graph determines the number of samples that are processed at one time.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>By default, the quantum size is 10 ms based at the default sample rate.</source>
					<target>By default, the quantum size is 10 ms based at the default sample rate.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914205)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914208)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>If you specify a custom quantum size by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredSamplesPerQuantum</pc></pc> property, you must also set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuantumSizeSelectionMode</pc></pc> property to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ClosestToDesired</pc> or the supplied value is ignored.</source>
					<target>If you specify a custom quantum size by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredSamplesPerQuantum</pc></pc> property, you must also set the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">QuantumSizeSelectionMode</pc></pc> property to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">ClosestToDesired</pc> or the supplied value is ignored.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>If this value is used, the system will choose a quantum size as close as possible to the one you specify.</source>
					<target>If this value is used, the system will choose a quantum size as close as possible to the one you specify.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914243)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To determine the actual quantum size, check the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SamplesPerQuantum</pc></pc> of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioGraph</pc> after it has been created.</source>
					<target>To determine the actual quantum size, check the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SamplesPerQuantum</pc></pc> of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioGraph</pc> after it has been created.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914205)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you only plan to use the audio graph with files and don't plan to output to an audio device, it is recommended that you use the default quantum size by not setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredSamplesPerQuantum</pc></pc> property.</source>
					<target>If you only plan to use the audio graph with files and don't plan to output to an audio device, it is recommended that you use the default quantum size by not setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredSamplesPerQuantum</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958522)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredRenderDeviceAudioProcessing</pc></pc> property determines the amount of processing the primary render device performs on the output of the audio graph.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DesiredRenderDeviceAudioProcessing</pc></pc> property determines the amount of processing the primary render device performs on the output of the audio graph.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc> setting allows the system to use the default audio processing for the specified audio render category.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc> setting allows the system to use the default audio processing for the specified audio render category.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>This processing can significantly improve the sound of audio on some devices, particularly mobile devices with small speakers.</source>
					<target>This processing can significantly improve the sound of audio on some devices, particularly mobile devices with small speakers.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw</pc> setting can improve performance by minimizing the amount of signal processing performed, but can result in inferior sound quality on some devices.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Raw</pc> setting can improve performance by minimizing the amount of signal processing performed, but can result in inferior sound quality on some devices.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914208)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/dn958522)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumSizeSelectionMode</pc></pc> is set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LowestLatency</pc>, the audio graph will automatically use <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Raw</pc> for <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DesiredRenderDeviceAudioProcessing</pc></pc>.</source>
					<target>If the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuantumSizeSelectionMode</pc></pc> is set to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">LowestLatency</pc>, the audio graph will automatically use <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Raw</pc> for <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">DesiredRenderDeviceAudioProcessing</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958523)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodingProperties</pc></pc> determines the audio format used by the graph.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodingProperties</pc></pc> determines the audio format used by the graph.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Only 32-bit float formats are supported.</source>
					<target>Only 32-bit float formats are supported.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958524)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryRenderDevice</pc></pc> sets the primary render device for the audio graph.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryRenderDevice</pc></pc> sets the primary render device for the audio graph.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>If you don't set this, the default system device is used.</source>
					<target>If you don't set this, the default system device is used.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>The primary render device is used to calculate the quantum sizes for other nodes in the graph.</source>
					<target>The primary render device is used to calculate the quantum sizes for other nodes in the graph.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>If there are no audio render devices present on the system, audio graph creation will fail.</source>
					<target>If there are no audio render devices present on the system, audio graph creation will fail.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225393)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225432)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br226817)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>You can let the audio graph use the default audio render device or use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration.DeviceInformation</pc></pc> class to get a list of the system's available audio render devices by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FindAllAsync</pc></pc> and passing in the audio render device selector returned by <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Media.Devices.MediaDevice.GetAudioRenderSelector</pc></pc>.</source>
					<target>You can let the audio graph use the default audio render device or use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration.DeviceInformation</pc></pc> class to get a list of the system's available audio render devices by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FindAllAsync</pc></pc> and passing in the audio render device selector returned by <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Media.Devices.MediaDevice.GetAudioRenderSelector</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn958524)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You can choose one of the returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects programatically or show UI to allow the user to select a device and then use it to set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PrimaryRenderDevice</pc></pc> property.</source>
					<target>You can choose one of the returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects programatically or show UI to allow the user to select a device and then use it to set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PrimaryRenderDevice</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>EnumerateAudioRenderDevices</source>
					<target>EnumerateAudioRenderDevices</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Device input node</source>
					<target>Device input node</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>A device input node feeds audio into the graph from an audio capture device connected to the system, such as a microphone.</source>
					<target>A device input node feeds audio into the graph from an audio capture device connected to the system, such as a microphone.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914082)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914218)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInputNode</pc></pc> object that uses the system's default audio capture device by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateDeviceInputNodeAsync</pc></pc>.</source>
					<target>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceInputNode</pc></pc> object that uses the system's default audio capture device by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateDeviceInputNodeAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn297724)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Provide an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioRenderCategory</pc></pc> to allow the system to optimize the audio pipeline for the specified category.</source>
					<target>Provide an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioRenderCategory</pc></pc> to allow the system to optimize the audio pipeline for the specified category.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>DeclareDeviceInputNode</source>
					<target>DeclareDeviceInputNode</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>CreateDeviceInputNode</source>
					<target>CreateDeviceInputNode</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225393)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br225432)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br226817)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want to specify a specific audio capture device for the device input node, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration.DeviceInformation</pc></pc> class to get a list of the system's available audio capture devices by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FindAllAsync</pc></pc> and passing in the audio render device selector returned by <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Media.Devices.MediaDevice.GetAudioRenderSelector</pc></pc>.</source>
					<target>If you want to specify a specific audio capture device for the device input node, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.Devices.Enumeration.DeviceInformation</pc></pc> class to get a list of the system's available audio capture devices by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FindAllAsync</pc></pc> and passing in the audio render device selector returned by <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Windows.Media.Devices.MediaDevice.GetAudioRenderSelector</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn914218)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You can choose one of the returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects programmatically or show UI to allow the user to select a device and then pass it into <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateDeviceInputNodeAsync</pc></pc>.</source>
					<target>You can choose one of the returned <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceInformation</pc> objects programmatically or show UI to allow the user to select a device and then pass it into <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateDeviceInputNodeAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>EnumerateAudioCaptureDevices</source>
					<target>EnumerateAudioCaptureDevices</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Device output node</source>
					<target>Device output node</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>A device output node pushes audio from the graph to an audio render device, such as speakers or a headset.</source>
					<target>A device output node pushes audio from the graph to an audio render device, such as speakers or a headset.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914098)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn958525)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateDeviceOutputNodeAsync</pc></pc>.</source>
					<target>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateDeviceOutputNodeAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958524)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The output node uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryRenderDevice</pc></pc> of the audio graph.</source>
					<target>The output node uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryRenderDevice</pc></pc> of the audio graph.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>DeclareDeviceOutputNode</source>
					<target>DeclareDeviceOutputNode</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>CreateDeviceOutputNode</source>
					<target>CreateDeviceOutputNode</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>File input node</source>
					<target>File input node</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>A file input node allows you to feed data from an audio file into the graph.</source>
					<target>A file input node allows you to feed data from an audio file into the graph.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914108)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914226)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFileInputNodeAsync</pc></pc>.</source>
					<target>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFileInputNodeAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>DeclareFileInputNode</source>
					<target>DeclareFileInputNode</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>CreateFileInputNode</source>
					<target>CreateFileInputNode</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>File input nodes support the following file formats: mp3, wav, wma, m4a</source>
					<target>File input nodes support the following file formats: mp3, wav, wma, m4a</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914130)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartTime</pc></pc> property to specify the time offset into the file where playback should begin.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartTime</pc></pc> property to specify the time offset into the file where playback should begin.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>If this property is null, the beginning of the file is used.</source>
					<target>If this property is null, the beginning of the file is used.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914118)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EndTime</pc></pc> property to specify the time offset into the file where playback should end.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EndTime</pc></pc> property to specify the time offset into the file where playback should end.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>If this property is null, the end of the file is used.</source>
					<target>If this property is null, the end of the file is used.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914116)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The start time value must be lower than the end time value, and the end time value must be less than or equal to the duration of the audio file, which can be determined by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> property value.</source>
					<target>The start time value must be lower than the end time value, and the end time value must be less than or equal to the duration of the audio file, which can be determined by checking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> property value.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914127)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Seek to a position in the audio file by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Seek</pc></pc> and specifying the time offset into the file to which the playback position should be moved.</source>
					<target>Seek to a position in the audio file by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Seek</pc></pc> and specifying the time offset into the file to which the playback position should be moved.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914130)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914118)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The specified value must be within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartTime</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EndTime</pc></pc> range.</source>
					<target>The specified value must be within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StartTime</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EndTime</pc></pc> range.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914124)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Get the current playback position of the node with the read-only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Position</pc></pc> property.</source>
					<target>Get the current playback position of the node with the read-only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Position</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914120)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Enable looping of the audio file by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoopCount</pc></pc> property.</source>
					<target>Enable looping of the audio file by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoopCount</pc></pc> property.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>When non-null, this value indicates the number of times the file will be played in after the initial playback.</source>
					<target>When non-null, this value indicates the number of times the file will be played in after the initial playback.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So, for example, setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoopCount</pc> to 1 will cause the file to be played 2 times in total, and setting it to 5 will cause the file to be played 6 times in total.</source>
					<target>So, for example, setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoopCount</pc> to 1 will cause the file to be played 2 times in total, and setting it to 5 will cause the file to be played 6 times in total.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoopCount</pc> to null causes the file to be looped indefinitely.</source>
					<target>Setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoopCount</pc> to null causes the file to be looped indefinitely.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>To stop looping, set the value to 0.</source>
					<target>To stop looping, set the value to 0.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914123)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Adjust the speed at which the audio file is played back by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PlaybackSpeedFactor</pc></pc>.</source>
					<target>Adjust the speed at which the audio file is played back by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PlaybackSpeedFactor</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>A value of 1 indicates the original speed of the file, .5 is half-speed, and 2 is double speed.</source>
					<target>A value of 1 indicates the original speed of the file, .5 is half-speed, and 2 is double speed.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>File output node</source>
					<target>File output node</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>A file output node lets you direct audio data from the graph into an audio file.</source>
					<target>A file output node lets you direct audio data from the graph into an audio file.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914133)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914227)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFileOutputNodeAsync</pc></pc>.</source>
					<target>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFileOutputNodeAsync</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>DeclareFileOutputNode</source>
					<target>DeclareFileOutputNode</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>CreateFileOutputNode</source>
					<target>CreateFileOutputNode</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>File output nodes support the following file formats: mp3, wav, wma, m4a</source>
					<target>File output nodes support the following file formats: mp3, wav, wma, m4a</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914144)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914140)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>You must call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileOutputNode.Stop</pc></pc> to stop the node's processing before calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFileOutputNode.FinalizeAsync</pc></pc> or an exception will be thrown.</source>
					<target>You must call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileOutputNode.Stop</pc></pc> to stop the node's processing before calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFileOutputNode.FinalizeAsync</pc></pc> or an exception will be thrown.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Audio frame input node</source>
					<target>Audio frame input node</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>An audio frame input node allows you to push audio data that you generate in your own code into the audio graph.</source>
					<target>An audio frame input node allows you to push audio data that you generate in your own code into the audio graph.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>This enables scenarios like creating a custom software synthesizer.</source>
					<target>This enables scenarios like creating a custom software synthesizer.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914147)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914230)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameInputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFrameInputNode</pc></pc>.</source>
					<target>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameInputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFrameInputNode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>DeclareFrameInputNode</source>
					<target>DeclareFrameInputNode</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>CreateFrameInputNode</source>
					<target>CreateFrameInputNode</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958507)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameInputNode.QuantumStarted</pc></pc> event is raised when the audio graph is ready to begin processing the next quantum of audio data.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameInputNode.QuantumStarted</pc></pc> event is raised when the audio graph is ready to begin processing the next quantum of audio data.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>You supply your custom generated audio data from within the handler to this event.</source>
					<target>You supply your custom generated audio data from within the handler to this event.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>QuantumStarted</source>
					<target>QuantumStarted</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958533)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/dn958534)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameInputNodeQuantumStartedEventArgs</pc></pc> object passed into the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">QuantumStarted</pc> event handler exposes the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">RequiredSamples</pc></pc> property that indicates how many samples the audio graph needs to fill up the quantum to be processed.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameInputNodeQuantumStartedEventArgs</pc></pc> object passed into the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">QuantumStarted</pc> event handler exposes the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">RequiredSamples</pc></pc> property that indicates how many samples the audio graph needs to fill up the quantum to be processed.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914148)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameInputNode.AddFrame</pc></pc> to pass an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFrame</pc></pc> object filled with audio data into the graph.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameInputNode.AddFrame</pc></pc> to pass an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFrame</pc></pc> object filled with audio data into the graph.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An example implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateAudioData</pc> helper method is shown below.</source>
					<target>An example implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateAudioData</pc> helper method is shown below.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To populate an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc> with audio data, you must get access to the underlying memory buffer of the audio frame.</source>
					<target>To populate an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc> with audio data, you must get access to the underlying memory buffer of the audio frame.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To do this you must initialize the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface by adding the following code within your namespace.</source>
					<target>To do this you must initialize the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface by adding the following code within your namespace.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>ComImportIMemoryBufferByteAccess</source>
					<target>ComImportIMemoryBufferByteAccess</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The following code shows an example implementation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateAudioData</pc> helper method that creates an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioFrame</pc></pc> and populates it with audio data.</source>
					<target>The following code shows an example implementation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateAudioData</pc> helper method that creates an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">AudioFrame</pc></pc> and populates it with audio data.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>GenerateAudioData</source>
					<target>GenerateAudioData</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Because this method accesses the raw buffer underlying the Windows Runtime types, it must be declared using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">unsafe</pc> keyword.</source>
					<target>Because this method accesses the raw buffer underlying the Windows Runtime types, it must be declared using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">unsafe</pc> keyword.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>You must also configure your project in Microsoft Visual Studio to allow the compilation of unsafe code by opening the project's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> page, clicking the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Build</pc> property page, and selecting the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Allow Unsafe Code</pc> checkbox.</source>
					<target>You must also configure your project in Microsoft Visual Studio to allow the compilation of unsafe code by opening the project's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc> page, clicking the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Build</pc> property page, and selecting the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Allow Unsafe Code</pc> checkbox.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Initialize a new instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc>, in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.Media</pc> namespace, by passing in the desired buffer size to the constructor.</source>
					<target>Initialize a new instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc>, in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows.Media</pc> namespace, by passing in the desired buffer size to the constructor.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>The buffer size is the number of samples multiplied by the size of each sample.</source>
					<target>The buffer size is the number of samples multiplied by the size of each sample.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958454)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930878)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioBuffer</pc></pc> of the audio frame by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LockBuffer</pc></pc>.</source>
					<target>Get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioBuffer</pc></pc> of the audio frame by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LockBuffer</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/mt297505)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn958457)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Get an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMemoryBufferByteAccess</pc></pc> COM interface from the audio buffer by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateReference</pc></pc>.</source>
					<target>Get an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMemoryBufferByteAccess</pc></pc> COM interface from the audio buffer by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateReference</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/mt297506)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Get a pointer to raw audio buffer data by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMemoryBufferByteAccess.GetBuffer</pc></pc> and cast it to the sample data type of the audio data.</source>
					<target>Get a pointer to raw audio buffer data by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IMemoryBufferByteAccess.GetBuffer</pc></pc> and cast it to the sample data type of the audio data.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Fill the buffer with data and return the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc> for submission into the audio graph.</source>
					<target>Fill the buffer with data and return the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrame</pc></pc> for submission into the audio graph.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>Audio frame output node</source>
					<target>Audio frame output node</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>An audio frame output node allows you to receive and process audio data output from the audio graph with custom code that you create.</source>
					<target>An audio frame output node allows you to receive and process audio data output from the audio graph with custom code that you create.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>An example scenario for this is performing signal analysis on the audio output.</source>
					<target>An example scenario for this is performing signal analysis on the audio output.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914166)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914233)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFrameOutputNode</pc></pc>.</source>
					<target>Create an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFrameOutputNode</pc></pc> by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CreateFrameOutputNode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>DeclareFrameOutputNode</source>
					<target>DeclareFrameOutputNode</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>CreateFrameOutputNode</source>
					<target>CreateFrameOutputNode</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914240)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.QuantumProcessed</pc></pc> event is raised when the audio graph has completed processing a quantum of audio data.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.QuantumProcessed</pc></pc> event is raised when the audio graph has completed processing a quantum of audio data.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>You can access the audio data from within the handler for this event.</source>
					<target>You can access the audio data from within the handler for this event.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>QuantumProcessed</source>
					<target>QuantumProcessed</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914171)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930871)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetFrame</pc></pc> to get an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFrame</pc></pc> object filled with audio data from the graph.</source>
					<target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetFrame</pc></pc> to get an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFrame</pc></pc> object filled with audio data from the graph.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>An example implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProcessFrameOutput</pc> helper method is shown below.</source>
					<target>An example implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ProcessFrameOutput</pc> helper method is shown below.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>ProcessFrameOutput</source>
					<target>ProcessFrameOutput</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Like the audio frame input node example above, you will need to declare the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface and configure your project to allow unsafe code in order to access the underlying audio buffer.</source>
					<target>Like the audio frame input node example above, you will need to declare the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface and configure your project to allow unsafe code in order to access the underlying audio buffer.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958454)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn930878)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioBuffer</pc></pc> of the audio frame by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LockBuffer</pc></pc>.</source>
					<target>Get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioBuffer</pc></pc> of the audio frame by calling <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">LockBuffer</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn958457)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Get an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface from the audio buffer by calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateReference</pc></pc>.</source>
					<target>Get an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess</pc> COM interface from the audio buffer by calling <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CreateReference</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Get a pointer to raw audio buffer data by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess.GetBuffer</pc> and cast it to the sample data type of the audio data.</source>
					<target>Get a pointer to raw audio buffer data by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IMemoryBufferByteAccess.GetBuffer</pc> and cast it to the sample data type of the audio data.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>Node connections and submix nodes</source>
					<target>Node connections and submix nodes</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>All input nodes types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AddOutgoingConnection</pc> method that routes the audio produced by the node to the node that is passed into the method.</source>
					<target>All input nodes types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AddOutgoingConnection</pc> method that routes the audio produced by the node to the node that is passed into the method.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914108)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914098)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The following example connects an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> to an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioDeviceOutputNode</pc></pc>, which is a simple setup for playing an audio file on the device's speaker.</source>
					<target>The following example connects an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> to an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioDeviceOutputNode</pc></pc>, which is a simple setup for playing an audio file on the device's speaker.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>AddOutgoingConnection1</source>
					<target>AddOutgoingConnection1</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>You can create more than one connection from an input node to other nodes.</source>
					<target>You can create more than one connection from an input node to other nodes.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914108)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914133)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The following example adds another connection from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> to an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFileOutputNode</pc></pc>.</source>
					<target>The following example adds another connection from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioFileInputNode</pc></pc> to an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioFileOutputNode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>Now, the audio from the audio file is played to the device's speaker and is also written out to an audio file.</source>
					<target>Now, the audio from the audio file is played to the device's speaker and is also written out to an audio file.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>AddOutgoingConnection2</source>
					<target>AddOutgoingConnection2</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>Output nodes can also receive more than one connection from other nodes.</source>
					<target>Output nodes can also receive more than one connection from other nodes.</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914082)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn914098)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In the following example a connection is made from a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioDeviceInputNode</pc></pc> to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioDeviceOutput</pc></pc> node.</source>
					<target>In the following example a connection is made from a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioDeviceInputNode</pc></pc> to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">AudioDeviceOutput</pc></pc> node.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>Because the output node has connections from the file input node and the device input node, the output will contain a mix of audio from both sources.</source>
					<target>Because the output node has connections from the file input node and the device input node, the output will contain a mix of audio from both sources.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AddOutgoingConnection</pc> provides an overload that lets you specify a gain value for the signal passing through the connection.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">AddOutgoingConnection</pc> provides an overload that lets you specify a gain value for the signal passing through the connection.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>AddOutgoingConnection3</source>
					<target>AddOutgoingConnection3</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>Although output nodes can accept connections from multiple nodes, you may want to create an intermediate mix of signals from one or more nodes before passing the mix to an output.</source>
					<target>Although output nodes can accept connections from multiple nodes, you may want to create an intermediate mix of signals from one or more nodes before passing the mix to an output.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>For example, you may want to set the level or apply effects to a subset of the audio signals in a graph.</source>
					<target>For example, you may want to set the level or apply effects to a subset of the audio signals in a graph.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914247)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To do this, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioSubmixNode</pc></pc>.</source>
					<target>To do this, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioSubmixNode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>You can connect to a submix node from one or more input nodes or other submix nodes.</source>
					<target>You can connect to a submix node from one or more input nodes or other submix nodes.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914236)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the following example, a new submix node is created with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.CreateSubmixNode</pc></pc>.</source>
					<target>In the following example, a new submix node is created with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.CreateSubmixNode</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>Then, connections are added from a file input node and a frame output node to the submix node.</source>
					<target>Then, connections are added from a file input node and a frame output node to the submix node.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>Finally, the submix node is connected to a file output node.</source>
					<target>Finally, the submix node is connected to a file output node.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>CreateSubmixNode</source>
					<target>CreateSubmixNode</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>Starting and stopping audio graph nodes</source>
					<target>Starting and stopping audio graph nodes</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914244)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc></pc> is called, the audio graph begins processing audio data.</source>
					<target>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc></pc> is called, the audio graph begins processing audio data.</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Every node type provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop</pc> methods that cause the individual node to start or stop processing data.</source>
					<target>Every node type provides <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop</pc> methods that cause the individual node to start or stop processing data.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn914245)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Stop</pc></pc> is called, all audio processing in the all nodes is stopped regardless of the state of individual nodes, but the state of each node can be set while the audio graph is stopped.</source>
					<target>When <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Stop</pc></pc> is called, all audio processing in the all nodes is stopped regardless of the state of individual nodes, but the state of each node can be set while the audio graph is stopped.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, you could call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop</pc> on an individual node while the graph is stopped and then call <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc>, and the individual node will remain in the stopped state.</source>
					<target>For example, you could call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop</pc> on an individual node while the graph is stopped and then call <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioGraph.Start</pc>, and the individual node will remain in the stopped state.</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>All node types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConsumeInput</pc> property that, when set to false, allows the node to continue audio processing but stops it from consuming any audio data being input from other nodes.</source>
					<target>All node types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConsumeInput</pc> property that, when set to false, allows the node to continue audio processing but stops it from consuming any audio data being input from other nodes.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>All node types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Reset</pc> method that causes the node to discard any audio data currently in its buffer.</source>
					<target>All node types expose the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Reset</pc> method that causes the node to discard any audio data currently in its buffer.</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>Adding audio effects</source>
					<target>Adding audio effects</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>The audio graph API allows you to add audio effects to every type of node in a graph.</source>
					<target>The audio graph API allows you to add audio effects to every type of node in a graph.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>Output nodes, input nodes, and submix nodes can each have an unlimited number of audio effects, limited only by the capabilities of the hardware.The following example demonstrates adding the built-in echo effect to a submix node.</source>
					<target>Output nodes, input nodes, and submix nodes can each have an unlimited number of audio effects, limited only by the capabilities of the hardware.The following example demonstrates adding the built-in echo effect to a submix node.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>AddEffect</source>
					<target>AddEffect</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn608044)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>All audio effects implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAudioEffectDefinition</pc></pc>.</source>
					<target>All audio effects implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAudioEffectDefinition</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Every node exposes an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EffectDefinitions</pc> property representing the list of effects applied to that node.</source>
					<target>Every node exposes an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EffectDefinitions</pc> property representing the list of effects applied to that node.</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>Add an effect by adding it's definition object to the list.</source>
					<target>Add an effect by adding it's definition object to the list.</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>There are several effect definition classes that are provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Media.Audio</pc> namespace.</source>
					<target>There are several effect definition classes that are provided in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.Media.Audio</pc> namespace.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<segment state="initial">
					<source>These include:</source>
					<target>These include:</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>EchoEffectDefinition</source>
					<target>EchoEffectDefinition</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>EqualizerEffectDefinition</source>
					<target>EqualizerEffectDefinition</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>LimiterEffectDefinition</source>
					<target>LimiterEffectDefinition</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<segment state="initial">
					<source>ReverbEffectDefinition</source>
					<target>ReverbEffectDefinition</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn608044)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can create your own audio effects that implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAudioEffectDefinition</pc></pc> and apply them to any node in an audio graph.</source>
					<target>You can create your own audio effects that implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAudioEffectDefinition</pc></pc> and apply them to any node in an audio graph.</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Every node type exposes a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DisableEffectsByDefinition</pc> method that disables all effects in the node's <pc dataRefEnd="id4" dataRefStart="id3" id="p2">EffectDefinitions</pc> list that were added using the specified definition.</source>
					<target>Every node type exposes a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DisableEffectsByDefinition</pc> method that disables all effects in the node's <pc dataRefEnd="id4" dataRefStart="id3" id="p2">EffectDefinitions</pc> list that were added using the specified definition.</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnableEffectsByDefinition</pc> enables the effects with the specified definition.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnableEffectsByDefinition</pc> enables the effects with the specified definition.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>