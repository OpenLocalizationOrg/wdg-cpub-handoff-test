<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">fe8c385a9f94116e69011245b666c706a07ec806</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\debug-test-perf\mvvm-performance-tips.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">d5994e2cde0fab99f5007f350b94fbc62a27bf84</mda:meta><mda:meta type="olxliffhash">88568e09ac232b036c68cc230babe243b518b64e</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>MVVM and language performance tips</source>
					<target>MVVM and language performance tips</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</source>
					<target>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>MVVM and language performance tips</source>
					<target>MVVM and language performance tips</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</source>
					<target>This topic discusses some performance considerations related to your choice of software design patterns, and programming language.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>The Model-View-ViewModel (MVVM) pattern</source>
					<target>The Model-View-ViewModel (MVVM) pattern</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The Model-View-ViewModel (MVVM) pattern is common in a lot of XAML apps.</source>
					<target>The Model-View-ViewModel (MVVM) pattern is common in a lot of XAML apps.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>(MVVM is very similar to Fowler’s description of the Model-View-Presenter pattern, but it is tailored to XAML).</source>
					<target>(MVVM is very similar to Fowler’s description of the Model-View-Presenter pattern, but it is tailored to XAML).</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The issue with the MVVM pattern is that it can inadvertently lead to apps that have too many layers and too many allocations.</source>
					<target>The issue with the MVVM pattern is that it can inadvertently lead to apps that have too many layers and too many allocations.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The motivations for MVVM are these.</source>
					<target>The motivations for MVVM are these.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separation of concerns</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separation of concerns</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>It’s always helpful to divide a problem into smaller pieces, and a pattern like MVVM or MVC is a way to divide an app (or even a single control) into smaller pieces: the actual view, a logical model of the view (view-model), and the view-independent app logic (the model).</source>
					<target>It’s always helpful to divide a problem into smaller pieces, and a pattern like MVVM or MVC is a way to divide an app (or even a single control) into smaller pieces: the actual view, a logical model of the view (view-model), and the view-independent app logic (the model).</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>In particular, it’s a popular workflow to have designers own the view using one tool, developers own the model using another tool, and design integrators own the view-model using both tools.</source>
					<target>In particular, it’s a popular workflow to have designers own the view using one tool, developers own the model using another tool, and design integrators own the view-model using both tools.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Unit testing</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Unit testing</pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>You can unit test the view-model (and consequently the model) independent of the view, thereby not relying on creating windows, driving input, and so on.</source>
					<target>You can unit test the view-model (and consequently the model) independent of the view, thereby not relying on creating windows, driving input, and so on.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>By keeping the view small, you can test a large portion of your app without ever having to create a window.</source>
					<target>By keeping the view small, you can test a large portion of your app without ever having to create a window.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Agility to user experience changes</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Agility to user experience changes</pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The view tends to see the most frequent changes, and the most late changes, as the user experience is tweaked based on end-user feedback.</source>
					<target>The view tends to see the most frequent changes, and the most late changes, as the user experience is tweaked based on end-user feedback.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>By keeping the view separate, these changes can be accommodated more quickly and with less churn to the app.</source>
					<target>By keeping the view separate, these changes can be accommodated more quickly and with less churn to the app.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>There are multiple concrete definitions of the MVVM pattern, and 3rd party frameworks that help implement it.</source>
					<target>There are multiple concrete definitions of the MVVM pattern, and 3rd party frameworks that help implement it.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>But strict adherence to any variation of the pattern can lead to apps with a lot more overhead than can be justified.</source>
					<target>But strict adherence to any variation of the pattern can lead to apps with a lot more overhead than can be justified.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>XAML data binding (the {Binding} markup extension) was designed in part to enable model/view patterns.</source>
					<target>XAML data binding (the {Binding} markup extension) was designed in part to enable model/view patterns.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>But {Binding} brings with it non-trivial working set and CPU overhead.</source>
					<target>But {Binding} brings with it non-trivial working set and CPU overhead.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Creating a {Binding} causes a series of allocations, and updating a binding target can cause reflection and boxing.</source>
					<target>Creating a {Binding} causes a series of allocations, and updating a binding target can cause reflection and boxing.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>These problems are being addressed with the {x:Bind} markup extension, which compiles the bindings at build time.</source>
					<target>These problems are being addressed with the {x:Bind} markup extension, which compiles the bindings at build time.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendation:</pc> use {x:Bind}.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendation:</pc> use {x:Bind}.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>It’s popular in MVVM to connect Button.Click to the view-model using an ICommand, such as the common DelegateCommand or RelayCommand helpers.</source>
					<target>It’s popular in MVVM to connect Button.Click to the view-model using an ICommand, such as the common DelegateCommand or RelayCommand helpers.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Those commands are extra allocations, though, including the CanExecuteChanged event listener, adding to the working set, and adding to the startup/navigation time for the page.</source>
					<target>Those commands are extra allocations, though, including the CanExecuteChanged event listener, adding to the working set, and adding to the startup/navigation time for the page.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendation:</pc> As an alternative to using the convenient ICommand interface, consider putting event handlers in your code-behind and attaching them to the view events and call a command on your view-model when those events are raised.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendation:</pc> As an alternative to using the convenient ICommand interface, consider putting event handlers in your code-behind and attaching them to the view events and call a command on your view-model when those events are raised.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>You'll also need to add extra code to disable the Button when the command is unavailable.</source>
					<target>You'll also need to add extra code to disable the Button when the command is unavailable.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>It’s popular in MVVM to create a Page with all possible configurations of the UI, then collapse parts of the tree by binding the Visibility property to properties in the VM.</source>
					<target>It’s popular in MVVM to create a Page with all possible configurations of the UI, then collapse parts of the tree by binding the Visibility property to properties in the VM.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>This adds unnecessarily to startup time and possibly to working set (because some parts of the tree may never become visible).</source>
					<target>This adds unnecessarily to startup time and possibly to working set (because some parts of the tree may never become visible).</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendations:</pc> Use the x:DeferLoadStrategy feature to defer unnecessary portions of the tree out of startup.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Recommendations:</pc> Use the x:DeferLoadStrategy feature to defer unnecessary portions of the tree out of startup.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Also, create separate user controls for the different modes of the page and use code-behind to keep only the necessary controls loaded.</source>
					<target>Also, create separate user controls for the different modes of the page and use code-behind to keep only the necessary controls loaded.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>C++/CX recommendations</source>
					<target>C++/CX recommendations</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use the latest version</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use the latest version</pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>There are continual performance improvements made to the C++/CX compiler.</source>
					<target>There are continual performance improvements made to the C++/CX compiler.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Ensure your app is building using the latest toolset.</source>
					<target>Ensure your app is building using the latest toolset.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable RTTI (/GR-)</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable RTTI (/GR-)</pc>.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>RTTI is on by default in the compiler so, unless your build environment switches it off, you’re probably using it.</source>
					<target>RTTI is on by default in the compiler so, unless your build environment switches it off, you’re probably using it.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>RTTI has significant overhead, and unless your code has a deep dependency on it, you should turn it off.</source>
					<target>RTTI has significant overhead, and unless your code has a deep dependency on it, you should turn it off.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>The XAML framework has no requirement that your code use RTTI.</source>
					<target>The XAML framework has no requirement that your code use RTTI.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Avoid heavy use of ppltasks</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Avoid heavy use of ppltasks</pc>.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Ppltasks are very convenient when calling async WinRT APIs, but they come with significant code size overhead.</source>
					<target>Ppltasks are very convenient when calling async WinRT APIs, but they come with significant code size overhead.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>The C++/CX team is working on a language feature – await – that will provide much better performance.</source>
					<target>The C++/CX team is working on a language feature – await – that will provide much better performance.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>In the meantime, balance your use of ppltasks in the hot paths of your code.</source>
					<target>In the meantime, balance your use of ppltasks in the hot paths of your code.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Avoid use of C++/CX in the “business logic” of your app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Avoid use of C++/CX in the “business logic” of your app</pc>.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>C++/CX is designed to be a convenient way to access WinRT APIs from C++ apps.</source>
					<target>C++/CX is designed to be a convenient way to access WinRT APIs from C++ apps.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>It makes use of wrappers that have overhead.</source>
					<target>It makes use of wrappers that have overhead.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>You should avoid C++/CX inside the business logic/model of your class, and reserve it for use at the boundaries between your code and WinRT.</source>
					<target>You should avoid C++/CX inside the business logic/model of your class, and reserve it for use at the boundaries between your code and WinRT.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>