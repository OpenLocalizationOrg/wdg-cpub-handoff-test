<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="ja-jp" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">c90ab2e265a02e42262c86460aa75b087c2f1cfe</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\v-paulj\Windows-driver-docs_develop\message_compiler_properties_for_driver_projects.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">3db22eff654aaaebbb08d6515483e04acd7de6f8</mda:meta><mda:meta type="olxliffhash">e351c962bc7d9948fc649f2fa082210381e8a294</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Message Compiler Properties for Driver Projects</source>
					<target>Message Compiler Properties for Driver Projects</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/Library/Windows/Hardware/Aa385638)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Sets the properties for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Message Compiler (MC.exe)</pc></pc> tool.</source>
					<target>Sets the properties for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Message Compiler (MC.exe)</pc></pc> tool.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>The compiler generates the message resource files that you can add to your project.</source>
					<target>The compiler generates the message resource files that you can add to your project.</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/Library/Windows/Hardware/Ff545699)</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you are using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Event Tracing for Windows (ETW)</pc> kernel-mode API to add event tracing to a kernel-mode driver, you could use the message compiler to create a header file that contains definitions for the event provider, event attributes, channels, and events.</source>
					<target>For example, if you are using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Event Tracing for Windows (ETW)</pc> kernel-mode API to add event tracing to a kernel-mode driver, you could use the message compiler to create a header file that contains definitions for the event provider, event attributes, channels, and events.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>You must include this header file in your source code.</source>
					<target>You must include this header file in your source code.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>The message compiler creates a resource compiler script (\*.rc) that you add to your project file.</source>
					<target>The message compiler creates a resource compiler script (\*.rc) that you add to your project file.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Setting Message Compiler properties for driver projects</source>
					<target>Setting Message Compiler properties for driver projects</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Open the property pages for your driver project.</source>
					<target>Open the property pages for your driver project.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the driver project in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Properties</pc>.</source>
					<target>Right-click the driver project in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc> and select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Properties</pc>.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the property pages for the driver project, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configuration Properties</pc> and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Message Compiler</pc>.</source>
					<target>In the property pages for the driver project, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configuration Properties</pc> and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Message Compiler</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Set the properties for the project.</source>
					<target>Set the properties for the project.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This property page is available if you add a message text file (.mc) or a manifest (.man) to your solution.</source>
					<target>This property page is available if you add a message text file (.mc) or a manifest (.man) to your solution.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Option</source>
					<target>Option</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Additional Options</source>
					<target>Additional Options</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">&lt;a href="https://msdn.microsoft.com/en-us/Library/Windows/Hardware/Aa385638"&gt;&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;&lt;/a&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Specifies additional options to pass to the <ph dataRef="id1" id="ph1" />Message Compiler (MC.exe)<ph dataRef="id2" id="ph2" /> tool.</source>
					<target>Specifies additional options to pass to the <ph dataRef="id1" id="ph1" />Message Compiler (MC.exe)<ph dataRef="id2" id="ph2" /> tool.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Ansi Input File</source>
					<target>Ansi Input File</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Specifies that the input file contains ANSI content (this is the default).</source>
					<target>Specifies that the input file contains ANSI content (this is the default).</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-a<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-a<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Ansi Message In Bin File</source>
					<target>Ansi Message In Bin File</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Specifies that the messages in the output .bin file should be ANSI.</source>
					<target>Specifies that the messages in the output .bin file should be ANSI.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-A<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-A<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Baseline Path</source>
					<target>Baseline Path</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>The path must point to the folder that contains the .BIN files that the baseline operation created.</source>
					<target>The path must point to the folder that contains the .BIN files that the baseline operation created.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-t<ph dataRef="id2" id="ph2" />directory<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-t<ph dataRef="id2" id="ph2" />directory<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Baseline Resource Path</source>
					<target>Baseline Resource Path</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The folder which contains the baseline manifest files.</source>
					<target>The folder which contains the baseline manifest files.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-s<ph dataRef="id2" id="ph2" />directory<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-s<ph dataRef="id2" id="ph2" />directory<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Debug Output Path</source>
					<target>Debug Output Path</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>The path in which to place the .dbg C include file.</source>
					<target>The path in which to place the .dbg C include file.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-x<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-x<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Enable Callout Macro</source>
					<target>Enable Callout Macro</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Adds a callout macro to invoke user code at logging.</source>
					<target>Adds a callout macro to invoke user code at logging.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Not available for C#, and ignored.</source>
					<target>Not available for C#, and ignored.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-co<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-co<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Enable Debug Output Path</source>
					<target>Enable Debug Output Path</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Enables the compiler to place the .dbg C include file specified by the <ph dataRef="id1" id="ph1" />Debug Output Path<ph dataRef="id2" id="ph2" /> property.</source>
					<target>Enables the compiler to place the .dbg C include file specified by the <ph dataRef="id1" id="ph1" />Debug Output Path<ph dataRef="id2" id="ph2" /> property.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>File extension for the generated header</source>
					<target>File extension for the generated header</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Specifies the extension of the generated header file.</source>
					<target>Specifies the extension of the generated header file.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-e<ph dataRef="id2" id="ph2" />extension<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-e<ph dataRef="id2" id="ph2" />extension<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Generate Baseline Resource</source>
					<target>Generate Baseline Resource</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Creates a baseline of your instrumentation.</source>
					<target>Creates a baseline of your instrumentation.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Generate C# (managed) logging class</source>
					<target>Generate C# (managed) logging class</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Generates a C# (managed) logging class that includes methods that you would call to log events in your manifest.</source>
					<target>Generates a C# (managed) logging class that includes methods that you would call to log events in your manifest.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-cs<ph dataRef="id2" id="ph2" />namespace<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-cs<ph dataRef="id2" id="ph2" />namespace<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Generate header file for containing counter names and GUIDs</source>
					<target>Generate header file for containing counter names and GUIDs</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Use this option to specify the folder into which you want the compiler to place the generated header file.</source>
					<target>Use this option to specify the folder into which you want the compiler to place the generated header file.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Generate Kernel Mode Logging Macros</source>
					<target>Generate Kernel Mode Logging Macros</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Generates kernel-mode logging macros.</source>
					<target>Generates kernel-mode logging macros.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-km<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-km<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Generate MOF File</source>
					<target>Generate MOF File</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Generate down-level support for all functions and macros generated.</source>
					<target>Generate down-level support for all functions and macros generated.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>MOF file will be generated from the manifest.</source>
					<target>MOF file will be generated from the manifest.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
					<data id="id3">&lt;strong&gt;</data>
					<data id="id4">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>MOF file will be placed in the location specified by the <ph dataRef="id1" id="ph1" />-h<ph dataRef="id2" id="ph2" /> option (<ph dataRef="id3" id="ph3" />-mof<ph dataRef="id4" id="ph4" />).</source>
					<target>MOF file will be placed in the location specified by the <ph dataRef="id1" id="ph1" />-h<ph dataRef="id2" id="ph2" /> option (<ph dataRef="id3" id="ph3" />-mof<ph dataRef="id4" id="ph4" />).</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Generate OLE2 Header</source>
					<target>Generate OLE2 Header</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Generates an OLE2 header file.</source>
					<target>Generates an OLE2 header file.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-o<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-o<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Generate static C# (managed) logging class</source>
					<target>Generate static C# (managed) logging class</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Generates a static C# (managed) logging class that includes methods that you would call to log events in your manifest.</source>
					<target>Generates a static C# (managed) logging class that includes methods that you would call to log events in your manifest.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-css<ph dataRef="id2" id="ph2" />namespace<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-css<ph dataRef="id2" id="ph2" />namespace<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Generate User Mode Logging Macros</source>
					<target>Generate User Mode Logging Macros</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Generate user-mode logging macros.</source>
					<target>Generate user-mode logging macros.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-um<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-um<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Generated Files Base Name</source>
					<target>Generated Files Base Name</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Specifies the base name of all generated files.</source>
					<target>Specifies the base name of all generated files.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-z<ph dataRef="id2" id="ph2" />basename<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-z<ph dataRef="id2" id="ph2" />basename<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Generated RC and Binary Message Files Path</source>
					<target>Generated RC and Binary Message Files Path</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Specifies the path to the generated the RC and binary message files.</source>
					<target>Specifies the path to the generated the RC and binary message files.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Header File Path</source>
					<target>Header File Path</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Specifies the path the generated header file.</source>
					<target>Specifies the path the generated header file.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-h<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-h<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Maximum Message Length</source>
					<target>Maximum Message Length</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Use this argument to have the compiler generate a warning if any message exceeds length characters.</source>
					<target>Use this argument to have the compiler generate a warning if any message exceeds length characters.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-m<ph dataRef="id2" id="ph2" />length<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-m<ph dataRef="id2" id="ph2" />length<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Prefix Macro Name</source>
					<target>Prefix Macro Name</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Use this argument to override the default prefix that the compiler uses for the logging macro names and method names.</source>
					<target>Use this argument to override the default prefix that the compiler uses for the logging macro names and method names.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-p<ph dataRef="id2" id="ph2" />prefix<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-p<ph dataRef="id2" id="ph2" />prefix<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>RC File Path</source>
					<target>RC File Path</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>The folder into which you want the compiler to place the generated resource compiler script (.rc file) and the generated .bin files.</source>
					<target>The folder into which you want the compiler to place the generated resource compiler script (.rc file) and the generated .bin files.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-r<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-r<ph dataRef="id2" id="ph2" />path<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Remove Characters From Symbolic Name</source>
					<target>Remove Characters From Symbolic Name</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Use this argument to remove characters from the beginning of the symbolic name that you specified for the event.</source>
					<target>Use this argument to remove characters from the beginning of the symbolic name that you specified for the event.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt; &lt;em&gt;</data>
					<data id="id3">&lt;/em&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-P<ph dataRef="id2" id="ph2" />prefix<ph dataRef="id3" id="ph3" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-P<ph dataRef="id2" id="ph2" />prefix<ph dataRef="id3" id="ph3" />)</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Set Customer Bit</source>
					<target>Set Customer Bit</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Sets the Customer bit in the entire message Ids.</source>
					<target>Sets the Customer bit in the entire message Ids.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-c<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-c<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Terminate Message With Null</source>
					<target>Terminate Message With Null</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Terminates all strings with nulls in the message tables.</source>
					<target>Terminates all strings with nulls in the message tables.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-n<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-n<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Unicode Input File</source>
					<target>Unicode Input File</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Specifies that the input file contains Unicode content.</source>
					<target>Specifies that the input file contains Unicode content.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-u<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-u<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>The default is ANSI.</source>
					<target>The default is ANSI.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Unicode Message In Bin File</source>
					<target>Unicode Message In Bin File</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Specifies that the messages in the output .bin file are Unicode.</source>
					<target>Specifies that the messages in the output .bin file are Unicode.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-U<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-U<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>This is the default.</source>
					<target>This is the default.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Use Base Name Of Input</source>
					<target>Use Base Name Of Input</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Use this argument to have the compiler use the base name of the input file for the name of the output .bin files.</source>
					<target>Use this argument to have the compiler use the base name of the input file for the name of the output .bin files.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-b<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-b<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Use Decimal Values</source>
					<target>Use Decimal Values</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Use this argument to use decimal values for the Severity and Facility constants in the header file instead of hexadecimal values.</source>
					<target>Use this argument to use decimal values for the Severity and Facility constants in the header file instead of hexadecimal values.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-d<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-d<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Validate Against Baseline Resource</source>
					<target>Validate Against Baseline Resource</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>Use this argument when you create a new version of your manifest and want to check it for application compatibility against the baseline that you created using the <ph dataRef="id1" id="ph1" />-s<ph dataRef="id2" id="ph2" /> option.</source>
					<target>Use this argument when you create a new version of your manifest and want to check it for application compatibility against the baseline that you created using the <ph dataRef="id1" id="ph1" />-s<ph dataRef="id2" id="ph2" /> option.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Verbose</source>
					<target>Verbose</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Use this option to generate verbose output.</source>
					<target>Use this option to generate verbose output.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">&lt;strong&gt;</data>
					<data id="id2">&lt;/strong&gt;</data>
				</originalData>
				<segment state="initial">
					<source>(<ph dataRef="id1" id="ph1" />-v<ph dataRef="id2" id="ph2" />)</source>
					<target>(<ph dataRef="id1" id="ph1" />-v<ph dataRef="id2" id="ph2" />)</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Message Compiler (MC.exe)</source>
					<target>Message Compiler (MC.exe)</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/Library/Windows/Hardware/Hh454286)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">WDK and Visual Studio build environment</pc> Message compiler task</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">WDK and Visual Studio build environment</pc> Message compiler task</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Event Tracing for Windows (ETW)</source>
					<target>Event Tracing for Windows (ETW)</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]</data>
					<data id="id3">(mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback%20[VsDriver\vsdriver]:%20Message%20Compiler%20Properties%20for%20Driver%20Projects%20%20RELEASE:%20%289/30/2015%29&amp;body=%0A%0APRIVACY%20STATEMENT%0A%0AWe%20use%20your%20feedback%20to%20improve%20the%20documentation.%20We%20don't%20use%20your%20email%20address%20for%20any%20other%20purpose,%20and%20we'll%20remove%20your%20email%20address%20from%20our%20system%20after%20the%20issue%20that%20you're%20reporting%20is%20fixed.%20While%20we're%20working%20to%20fix%20this%20issue,%20we%20might%20send%20you%20an%20email%20message%20to%20ask%20for%20more%20info.%20Later,%20we%20might%20also%20send%20you%20an%20email%20message%20to%20let%20you%20know%20that%20we've%20addressed%20your%20feedback.%0A%0AFor%20more%20info%20about%20Microsoft's%20privacy%20policy,%20see%20http://privacy.microsoft.com/en-us/default. "</data>
					<data id="id4">")</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Send comments about this topic to Microsoft</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Send comments about this topic to Microsoft</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Send comments about this topic to Microsoft</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Send comments about this topic to Microsoft</pc></target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>