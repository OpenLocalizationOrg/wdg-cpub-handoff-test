<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">74bda267e8a8722d03ffe07faeb7a2a06f096171</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\layout\layouts-with-xaml.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">d16e825edadf8c91afbda371032959e5ac0eb574</mda:meta><mda:meta type="olxliffhash">7bf477c62dea5ace43055cf0e6b3f90d08d2f867</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>XAML gives you a flexible layout system to create a responsive UI.</source>
					<target>XAML gives you a flexible layout system to create a responsive UI.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Define layouts with XAML</source>
					<target>Define layouts with XAML</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Define page layouts with XAML</source>
					<target>Define page layouts with XAML</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>XAML gives you a flexible layout system that lets you use automatic sizing, layout panels, visual states, and even separate UI definitions, to create a responsive UI.</source>
					<target>XAML gives you a flexible layout system that lets you use automatic sizing, layout panels, visual states, and even separate UI definitions, to create a responsive UI.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>With a flexible design, you can make your app look great on screens with different app window sizes, resolutions, pixel densities, and orientations.</source>
					<target>With a flexible design, you can make your app look great on screens with different app window sizes, resolutions, pixel densities, and orientations.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Here, we discuss how to use XAML properties and layout panels to create a responsive UI for your app.</source>
					<target>Here, we discuss how to use XAML properties and layout panels to create a responsive UI for your app.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>We build on important info about responsive UI design and techniques found in  Responsive design 101 for Universal Windows Platform (UWP) apps and  UI basics for UWP apps.</source>
					<target>We build on important info about responsive UI design and techniques found in  Responsive design 101 for Universal Windows Platform (UWP) apps and  UI basics for UWP apps.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>You should understand what effective pixels are and understand each of these responsive design techniques as described in  Responsive design 101 for UWP apps: Reposition, Resize, Reflow, Reveal, Replace, and Re-architect.</source>
					<target>You should understand what effective pixels are and understand each of these responsive design techniques as described in  Responsive design 101 for UWP apps: Reposition, Resize, Reflow, Reveal, Replace, and Re-architect.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.pivot.aspx)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">[</data>
					<data id="id9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Your app layout begins with the navigation model you choose, like whether to use a <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Pivot</pc></pc> with the ‘tabs and pivot’ model or <pc dataRefEnd="id9" dataRefStart="id8" id="p4"><pc dataRefEnd="id11" dataRefStart="id10" id="p5">SplitView</pc></pc> with the ‘nav pane’ model.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Your app layout begins with the navigation model you choose, like whether to use a <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Pivot</pc></pc> with the ‘tabs and pivot’ model or <pc dataRefEnd="id9" dataRefStart="id8" id="p4"><pc dataRefEnd="id11" dataRefStart="id10" id="p5">SplitView</pc></pc> with the ‘nav pane’ model.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>For more info about that, see  Navigation design basics for UWP apps and Navigation.</source>
					<target>For more info about that, see  Navigation design basics for UWP apps and Navigation.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Here, we talk about techniques to make the layout of a single page or group of elements responsive.</source>
					<target>Here, we talk about techniques to make the layout of a single page or group of elements responsive.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This info is applicable regardless of which navigation model you choose for your app.</source>
					<target>This info is applicable regardless of which navigation model you choose for your app.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>The XAML framework provides several levels of optimization you can use to create a responsive UI.</source>
					<target>The XAML framework provides several levels of optimization you can use to create a responsive UI.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">
</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fluid layout</pc><ph dataRef="id3" id="ph1" />  Use layout properties and panels to make your default UI fluid.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fluid layout</pc><ph dataRef="id3" id="ph1" />  Use layout properties and panels to make your default UI fluid.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The foundation of an adaptive layout is the appropriate use of layout properties and panels to reposition, resize, and reflow content.</source>
					<target>The foundation of an adaptive layout is the appropriate use of layout properties and panels to reposition, resize, and reflow content.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>You can set a fixed size on an element, or use automatic sizing to let the parent layout panel size it.</source>
					<target>You can set a fixed size on an element, or use automatic sizing to let the parent layout panel size it.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.panel.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">[</data>
					<data id="id18">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
				</originalData>
				<segment state="initial">
					<source>The various <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Panel</pc></pc> classes, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Grid</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">RelativePanel</pc></pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">StackPanel</pc></pc>, provide different ways to size and position their children.</source>
					<target>The various <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Panel</pc></pc> classes, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Grid</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">RelativePanel</pc></pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">StackPanel</pc></pc>, provide different ways to size and position their children.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">
</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive layout</pc><ph dataRef="id3" id="ph1" />  Use visual states to make significant alterations to your UI based on window size or other changes.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive layout</pc><ph dataRef="id3" id="ph1" />  Use visual states to make significant alterations to your UI based on window size or other changes.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>When your app window grows or shrinks beyond a certain amount, you might want to alter layout properties to reposition, resize, reflow, reveal, or replace sections of your UI.</source>
					<target>When your app window grows or shrinks beyond a certain amount, you might want to alter layout properties to reposition, resize, reflow, reveal, or replace sections of your UI.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>You can define different visual states for your UI, and apply them when the window size crosses a specified threshold.</source>
					<target>You can define different visual states for your UI, and apply them when the window size crosses a specified threshold.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AdaptiveTrigger</pc></pc> provides an easy way to set the threshold where a state is applied.</source>
					<target>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AdaptiveTrigger</pc></pc> provides an easy way to set the threshold where a state is applied.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">
</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tailored layout</pc><ph dataRef="id3" id="ph1" />  A tailored layout is optimized for a specific device family or range of screen sizes.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tailored layout</pc><ph dataRef="id3" id="ph1" />  A tailored layout is optimized for a specific device family or range of screen sizes.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Within the device family, the layout should still respond and adapt to changes within the range of supported windows sizes.</source>
					<target>Within the device family, the layout should still respond and adapt to changes within the range of supported windows sizes.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Use separate XAML files to define distinct views for each device family.</source>
					<target>Use separate XAML files to define distinct views for each device family.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>You can use separate XAML files with the same code file to define per-device family views of the UI.</source>
					<target>You can use separate XAML files with the same code file to define per-device family views of the UI.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Use separate XAML and code to provide different implementations for each device family.</source>
					<target>Use separate XAML and code to provide different implementations for each device family.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>You can provide different implementations of a page (XAML and code), then navigate to a particular implementation based on the device family, screen size, or other factors.</source>
					<target>You can provide different implementations of a page (XAML and code), then navigate to a particular implementation based on the device family, screen size, or other factors.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Layout properties and panels</source>
					<target>Layout properties and panels</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Layout is the process of sizing and positioning objects in your UI.</source>
					<target>Layout is the process of sizing and positioning objects in your UI.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>To position visual objects, you must put them in a panel or other container object.</source>
					<target>To position visual objects, you must put them in a panel or other container object.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.canvas.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.aspx)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.stackpanel.aspx)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
				</originalData>
				<segment state="initial">
					<source>The XAML framework provides various panel classes, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Grid</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">RelativePanel</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">StackPanel</pc></pc>, which serve as containers and enable you to position and arrange the UI elements within them.</source>
					<target>The XAML framework provides various panel classes, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Grid</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">RelativePanel</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">StackPanel</pc></pc>, which serve as containers and enable you to position and arrange the UI elements within them.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>The XAML layout system supports both static and fluid layouts.</source>
					<target>The XAML layout system supports both static and fluid layouts.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>In a static layout, you give controls explicit pixel sizes and positions.</source>
					<target>In a static layout, you give controls explicit pixel sizes and positions.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>When the user changes the resolution or orientation of their device, the UI doesn't change.</source>
					<target>When the user changes the resolution or orientation of their device, the UI doesn't change.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Static layouts can become stretched, shrunken, or clipped across different form factors and display sizes.</source>
					<target>Static layouts can become stretched, shrunken, or clipped across different form factors and display sizes.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Fluid layouts shrink, grow, and reflow to adapt to the visual space available on a device.</source>
					<target>Fluid layouts shrink, grow, and reflow to adapt to the visual space available on a device.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>To create a fluid layout, use automatic or proportional sizing for elements, alignment, margins, and padding, and let layout panels position their children as needed.</source>
					<target>To create a fluid layout, use automatic or proportional sizing for elements, alignment, margins, and padding, and let layout panels position their children as needed.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>You arrange child elements by specifying how they should be arranged in relationship to each other, and how they should be sized relative to their content and/or their parent.</source>
					<target>You arrange child elements by specifying how they should be arranged in relationship to each other, and how they should be sized relative to their content and/or their parent.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>In practice, you use a combination of static and fluid elements to create your UI.</source>
					<target>In practice, you use a combination of static and fluid elements to create your UI.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>You still use static elements and values in some places, but make sure that the overall UI is responsive and adapts to different resolutions, layouts, and views.</source>
					<target>You still use static elements and values in some places, but make sure that the overall UI is responsive and adapts to different resolutions, layouts, and views.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Layout properties</source>
					<target>Layout properties</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>To control the size and position of an element, you set its layout properties.</source>
					<target>To control the size and position of an element, you set its layout properties.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Here are some common layout properties and their effect.</source>
					<target>Here are some common layout properties and their effect.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Height and Width</source>
					<target>Height and Width</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.height.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.width.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> properties to specify the size of an element.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> properties to specify the size of an element.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>You can use fixed values measured in effective pixels, or you can use auto or proportional sizing.</source>
					<target>You can use fixed values measured in effective pixels, or you can use auto or proportional sizing.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualheight.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.actualwidth.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>To get the size of an element at runtime, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ActualHeight</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActualWidth</pc></pc> properties instead of Height and Width.</source>
					<target>To get the size of an element at runtime, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ActualHeight</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ActualWidth</pc></pc> properties instead of Height and Width.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>You use auto sizing to let UI elements resize to fit their content or parent container.</source>
					<target>You use auto sizing to let UI elements resize to fit their content or parent container.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>You can also use auto sizing with the rows and columns of a grid.</source>
					<target>You can also use auto sizing with the rows and columns of a grid.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>To use auto sizing, set the Height and/or Width of UI elements to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Auto</pc>.</source>
					<target>To use auto sizing, set the Height and/or Width of UI elements to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Auto</pc>.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">[</data>
					<data id="id9">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Whether an element resizes to its content or its container depends on the value of its <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id9" dataRefStart="id8" id="p4"><pc dataRefEnd="id11" dataRefStart="id10" id="p5">VerticalAlignment</pc></pc> properties, and how the parent container handles sizing of its children.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />Whether an element resizes to its content or its container depends on the value of its <pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id9" dataRefStart="id8" id="p4"><pc dataRefEnd="id11" dataRefStart="id10" id="p5">VerticalAlignment</pc></pc> properties, and how the parent container handles sizing of its children.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
					<data id="id3">[</data>
					<data id="id4">]()</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Layout panels</pc> later in this article.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Layout panels</pc> later in this article.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>You use proportional sizing, also called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">star sizing</pc>, to distribute available space among the rows and columns of a grid by weighted proportions.</source>
					<target>You use proportional sizing, also called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">star sizing</pc>, to distribute available space among the rows and columns of a grid by weighted proportions.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>In XAML, star values are expressed as \* (or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">n</pc>\* for weighted star sizing).</source>
					<target>In XAML, star values are expressed as \* (or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">n</pc>\* for weighted star sizing).</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.width.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.columndefinition.aspx)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, to specify that one column is 5 times wider than the second column in a 2-column layout, use "5<pc dataRefEnd="id2" dataRefStart="id1" id="p1">" and "</pc>" for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Width</pc></pc> properties in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ColumnDefinition</pc></pc> elements.</source>
					<target>For example, to specify that one column is 5 times wider than the second column in a 2-column layout, use "5<pc dataRefEnd="id2" dataRefStart="id1" id="p1">" and "</pc>" for the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Width</pc></pc> properties in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">ColumnDefinition</pc></pc> elements.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example combines fixed, auto, and proportional sizing in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> with 4 columns.</source>
					<target>This example combines fixed, auto, and proportional sizing in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> with 4 columns.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Column_1</source>
					<target>Column_1</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Auto</source>
					<target>Auto</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The column will size to fit its content.</source>
					<target>The column will size to fit its content.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Column_2</source>
					<target>Column_2</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>After the Auto columns are calculated, the column gets part of the remaining width.</source>
					<target>After the Auto columns are calculated, the column gets part of the remaining width.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Column_2 will be one-half as wide as Column_4.</source>
					<target>Column_2 will be one-half as wide as Column_4.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Column_3</source>
					<target>Column_3</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>44</source>
					<target>44</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>The column will be 44 pixels wide.</source>
					<target>The column will be 44 pixels wide.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Column_4</source>
					<target>Column_4</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>2</source>
					<target>2</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>After the Auto columns are calculated, the column gets part of the remaining width.</source>
					<target>After the Auto columns are calculated, the column gets part of the remaining width.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>Column_4 will be twice as wide as Column_2.</source>
					<target>Column_4 will be twice as wide as Column_2.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>The default column width is "*", so you don't need to explicitly set this value for the second column.</source>
					<target>The default column width is "*", so you don't need to explicitly set this value for the second column.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>In the Visual Studio XAML designer, the result looks like this.</source>
					<target>In the Visual Studio XAML designer, the result looks like this.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>A 4 column grid in the Visual Studio designer</source>
					<target>A 4 column grid in the Visual Studio designer</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>Size constraints</source>
					<target>Size constraints</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>When you use auto sizing in your UI, you might still need to place constraints on the size of an element.</source>
					<target>When you use auto sizing in your UI, you might still need to place constraints on the size of an element.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minwidth.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">/</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxwidth.aspx)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">[</data>
					<data id="id11">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.minheight.aspx)</data>
					<data id="id12">**</data>
					<data id="id13">**</data>
					<data id="id14">/</data>
					<data id="id15">[</data>
					<data id="id16">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.maxheight.aspx)</data>
					<data id="id17">**</data>
					<data id="id18">**</data>
				</originalData>
				<segment state="initial">
					<source>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MinWidth</pc></pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">MaxWidth</pc></pc> and <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinHeight</pc></pc><ph dataRef="id14" id="ph2" /><pc dataRefEnd="id16" dataRefStart="id15" id="p7"><pc dataRefEnd="id18" dataRefStart="id17" id="p8">MaxHeight</pc></pc> properties to specify values that constrain the size of an element while allowing fluid resizing.</source>
					<target>You can set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MinWidth</pc></pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">MaxWidth</pc></pc> and <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">MinHeight</pc></pc><ph dataRef="id14" id="ph2" /><pc dataRefEnd="id16" dataRefStart="id15" id="p7"><pc dataRefEnd="id18" dataRefStart="id17" id="p8">MaxHeight</pc></pc> properties to specify values that constrain the size of an element while allowing fluid resizing.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>In a Grid, MinWidth/MaxWidth can also be used with column definitions, and MinHeight/MaxHeight can be used with row definitions.</source>
					<target>In a Grid, MinWidth/MaxWidth can also be used with column definitions, and MinHeight/MaxHeight can be used with row definitions.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Alignment</source>
					<target>Alignment</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VerticalAlignment</pc></pc> properties to specify how an element should be positioned within its parent container.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VerticalAlignment</pc></pc> properties to specify how an element should be positioned within its parent container.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HorizontalAlignment</pc> are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Left</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Center</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Right</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stretch</pc>.</source>
					<target>The values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HorizontalAlignment</pc> are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Left</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Center</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Right</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stretch</pc>.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VerticalAlignment</pc> are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Top</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Center</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bottom</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stretch</pc>.</source>
					<target>The values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VerticalAlignment</pc> are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Top</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Center</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bottom</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Stretch</pc>.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>With the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stretch</pc> alignment, elements fill all the space they're provided in the parent container.</source>
					<target>With the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stretch</pc> alignment, elements fill all the space they're provided in the parent container.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Stretch is the default for both alignment properties.</source>
					<target>Stretch is the default for both alignment properties.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.button.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>However, some controls, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc>, override this value in their default style.</source>
					<target>However, some controls, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc>, override this value in their default style.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Any element that can have child elements can treat the Stretch value for HorizontalAlignment and VerticalAlignment properties uniquely.</source>
					<target>Any element that can have child elements can treat the Stretch value for HorizontalAlignment and VerticalAlignment properties uniquely.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>For example, an element using the default Stretch values placed in a Grid stretches to fill the cell that contains it.</source>
					<target>For example, an element using the default Stretch values placed in a Grid stretches to fill the cell that contains it.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The same element placed in a Canvas sizes to its content.</source>
					<target>The same element placed in a Canvas sizes to its content.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](layout-panels.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about how each panel handles the Stretch value, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Layout panels</pc> article.</source>
					<target>For more info about how each panel handles the Stretch value, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Layout panels</pc> article.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](alignment-margin-padding.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.horizontalalignment.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.verticalalignment.aspx)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment, margin, and padding</pc> article, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">VerticalAlignment</pc></pc> reference pages.</source>
					<target>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment, margin, and padding</pc> article, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">HorizontalAlignment</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">VerticalAlignment</pc></pc> reference pages.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.horizontalcontentalignment.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.verticalcontentalignment.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Controls also have <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HorizontalContentAlignment</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VerticalContentAlignment</pc></pc> properties that you use to specify how they position their content.</source>
					<target>Controls also have <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HorizontalContentAlignment</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VerticalContentAlignment</pc></pc> properties that you use to specify how they position their content.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Not all controls make use of these properties.</source>
					<target>Not all controls make use of these properties.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>They only affect layout behavior for a control when its template uses the properties as the source of a HorizontalAlignment/VerticalAlignment value for presenters or content areas within it.</source>
					<target>They only affect layout behavior for a control when its template uses the properties as the source of a HorizontalAlignment/VerticalAlignment value for presenters or content areas within it.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textblock.aspx)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.textbox.aspx)</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.richtextblock.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>For <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">RichTextBlock</pc>, use the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextAlignment</pc> property to control the alignment of text in the control.</source>
					<target>For <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">RichTextBlock</pc>, use the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextAlignment</pc> property to control the alignment of text in the control.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Margins and padding</source>
					<target>Margins and padding</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Margin</pc></pc> property to control the amount of empty space around an element.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Margin</pc></pc> property to control the amount of empty space around an element.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Margin does not add pixels to the ActualHeight and ActualWidth, and is also not considered part of the element for purposes of hit testing and sourcing input events.</source>
					<target>Margin does not add pixels to the ActualHeight and ActualWidth, and is also not considered part of the element for purposes of hit testing and sourcing input events.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Padding</pc></pc> property to control the amount of space between the inner border of an element and its content.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Padding</pc></pc> property to control the amount of space between the inner border of an element and its content.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>A positive Padding value decreases the content area of the element.</source>
					<target>A positive Padding value decreases the content area of the element.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>This diagram shows how Margin and Padding are applied to an element.</source>
					<target>This diagram shows how Margin and Padding are applied to an element.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Margin and padding</source>
					<target>Margin and padding</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>The left, right, top, and bottom values for Margin and Padding do not need to be symmetrical, and they can be set to negative values.</source>
					<target>The left, right, top, and bottom values for Margin and Padding do not need to be symmetrical, and they can be set to negative values.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](alignment-margin-padding.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.margin.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.padding.aspx)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment, margin, and padding</pc>, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Margin</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Padding</pc></pc> reference pages.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Alignment, margin, and padding</pc>, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Margin</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Padding</pc></pc> reference pages.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Let's look at the effects of Margin and Padding on real controls.</source>
					<target>Let's look at the effects of Margin and Padding on real controls.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Here’s a TextBox inside of a Grid with the default Margin and Padding values of 0.</source>
					<target>Here’s a TextBox inside of a Grid with the default Margin and Padding values of 0.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>TextBox with margin and padding of 0</source>
					<target>TextBox with margin and padding of 0</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>Here’s the same TextBox and Grid with Margin and Padding values on the TextBox as shown in this XAML.</source>
					<target>Here’s the same TextBox and Grid with Margin and Padding values on the TextBox as shown in this XAML.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>TextBox with positive margin and padding values</source>
					<target>TextBox with positive margin and padding values</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Visibility</source>
					<target>Visibility</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.uielement.visibility.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visibility.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>You can reveal or hide an element by setting its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc> property to one of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visibility</pc> enumeration</pc> values: <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Visible</pc> or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Collapsed</pc>.</source>
					<target>You can reveal or hide an element by setting its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Visibility</pc></pc> property to one of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Visibility</pc> enumeration</pc> values: <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Visible</pc> or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Collapsed</pc>.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>When an element is Collapsed, it doesn't take up any space in the UI layout.</source>
					<target>When an element is Collapsed, it doesn't take up any space in the UI layout.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>You can change an element's Visibility property in code or in a visual state.</source>
					<target>You can change an element's Visibility property in code or in a visual state.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>When the Visibility of an element is changed, all of its child elements are also changed.</source>
					<target>When the Visibility of an element is changed, all of its child elements are also changed.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>You can replace sections of your UI by revealing one panel while collapsing another.</source>
					<target>You can replace sections of your UI by revealing one panel while collapsing another.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />When you have elements in your UI that are <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Collapsed</pc> by default, the objects are still created at startup, even though they aren't visible.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />When you have elements in your UI that are <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Collapsed</pc> by default, the objects are still created at startup, even though they aren't visible.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can defer loading these elements until they are shown by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc> to "Lazy".</source>
					<target>You can defer loading these elements until they are shown by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc> to "Lazy".</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>This can improve startup performance.</source>
					<target>This can improve startup performance.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](../xaml-platform/x-deferloadstrategy-attribute.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Style resources</source>
					<target>Style resources</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>You don't have to set each property value individually on a control.</source>
					<target>You don't have to set each property value individually on a control.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It's typically more efficient to group property values into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> resource and apply the Style to a control.</source>
					<target>It's typically more efficient to group property values into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> resource and apply the Style to a control.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>This is especially true when you need to apply the same property values to many controls.</source>
					<target>This is especially true when you need to apply the same property values to many controls.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>For more info about using styles, see Styling controls.</source>
					<target>For more info about using styles, see Styling controls.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>Layout panels</source>
					<target>Layout panels</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Most app content can be organized into some form of groupings or hierarchies.</source>
					<target>Most app content can be organized into some form of groupings or hierarchies.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>You use layout panels to group and arrange UI elements in your app.</source>
					<target>You use layout panels to group and arrange UI elements in your app.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>The main thing to consider when choosing a layout panel is how the panel positions and sizes its child elements.</source>
					<target>The main thing to consider when choosing a layout panel is how the panel positions and sizes its child elements.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>You might also need to consider how overlapping child elements are layered on top of each other.</source>
					<target>You might also need to consider how overlapping child elements are layered on top of each other.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Here's a comparison of the main features of the panel controls provided in the XAML framework.</source>
					<target>Here's a comparison of the main features of the panel controls provided in the XAML framework.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Panel Control</source>
					<target>Panel Control</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>Description</source>
					<target>Description</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Canvas</source>
					<target>Canvas</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> doesn’t support fluid UI; you control all aspects of positioning and sizing child elements.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> doesn’t support fluid UI; you control all aspects of positioning and sizing child elements.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>You typically use it for special cases like creating graphics or to define small static areas of a larger adaptive UI.</source>
					<target>You typically use it for special cases like creating graphics or to define small static areas of a larger adaptive UI.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>You can use code or visual states to reposition elements at runtime.</source>
					<target>You can use code or visual states to reposition elements at runtime.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>Elements are positioned absolutely using Canvas.Top and Canvas.Left attached properties.</source>
					<target>Elements are positioned absolutely using Canvas.Top and Canvas.Left attached properties.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>Layering can be explicitly specified using the Canvas.ZIndex attached property.</source>
					<target>Layering can be explicitly specified using the Canvas.ZIndex attached property.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</source>
					<target>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>If an element's size is not set explicitly, it sizes to its content.</source>
					<target>If an element's size is not set explicitly, it sizes to its content.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>Child content is not visually clipped if larger than the panel.</source>
					<target>Child content is not visually clipped if larger than the panel.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>Child content is not constrained by the bounds of the panel.</source>
					<target>Child content is not constrained by the bounds of the panel.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>Grid</source>
					<target>Grid</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> supports fluid resizing of child elements.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> supports fluid resizing of child elements.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>You can use code or visual states to reposition and reflow elements.</source>
					<target>You can use code or visual states to reposition and reflow elements.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>Elements are arranged in rows and columns using Grid.Row and Grid.Column attached properties.</source>
					<target>Elements are arranged in rows and columns using Grid.Row and Grid.Column attached properties.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Elements can span multiple rows and columns using Grid.RowSpan and Grid.ColumnSpan attached properties.</source>
					<target>Elements can span multiple rows and columns using Grid.RowSpan and Grid.ColumnSpan attached properties.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Stretch values for HorizontalAlignment/VerticalAlignment are respected.</source>
					<target>Stretch values for HorizontalAlignment/VerticalAlignment are respected.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>If an element's size is not set explicitly, it stretches to fill the available space in the grid cell.</source>
					<target>If an element's size is not set explicitly, it stretches to fill the available space in the grid cell.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>Child content is visually clipped if larger than the panel.</source>
					<target>Child content is visually clipped if larger than the panel.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
					<target>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>RelativePanel</source>
					<target>RelativePanel</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Elements are arranged in relation to the edge or center of the panel, and in relation to each other.</source>
					<target>Elements are arranged in relation to the edge or center of the panel, and in relation to each other.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>Elements are positioned using a variety of attached properties that control panel alignment, sibling alignment, and sibling position.</source>
					<target>Elements are positioned using a variety of attached properties that control panel alignment, sibling alignment, and sibling position.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored unless RelativePanel attached properties for alignment cause stretching (for example, an element is aligned to both the right and left edges of the panel).</source>
					<target>Stretch values for HorizontalAlignment/VerticalAlignment are ignored unless RelativePanel attached properties for alignment cause stretching (for example, an element is aligned to both the right and left edges of the panel).</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>If an element's size is not set explicitly and it's not stretched, it sizes to its content.</source>
					<target>If an element's size is not set explicitly and it's not stretched, it sizes to its content.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>Child content is visually clipped if larger than the panel.</source>
					<target>Child content is visually clipped if larger than the panel.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
					<target>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>StackPanel</source>
					<target>StackPanel</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>Elements are stacked in a single line either vertically or horizontally.</source>
					<target>Elements are stacked in a single line either vertically or horizontally.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>Stretch values for HorizontalAlignment/VerticalAlignment are respected in the direction opposite the Orientation property.</source>
					<target>Stretch values for HorizontalAlignment/VerticalAlignment are respected in the direction opposite the Orientation property.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>If an element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is Horizontal).</source>
					<target>If an element's size is not set explicitly, it stretches to fill the available width (or height if the Orientation is Horizontal).</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>In the direction specified by the Orientation property, an element sizes to its content.</source>
					<target>In the direction specified by the Orientation property, an element sizes to its content.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>Child content is visually clipped if larger than the panel.</source>
					<target>Child content is visually clipped if larger than the panel.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>Content size is not constrained by the bounds of the panel in the direction specified by the Orientation property, so scrollable content stretches beyond the panel bounds and doesn't show scrollbars.</source>
					<target>Content size is not constrained by the bounds of the panel in the direction specified by the Orientation property, so scrollable content stretches beyond the panel bounds and doesn't show scrollbars.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>You must explicitly constrain the height (or width) of the child content to make its scrollbars show.</source>
					<target>You must explicitly constrain the height (or width) of the child content to make its scrollbars show.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>VariableSizedWrapGrid</source>
					<target>VariableSizedWrapGrid</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>Elements are arranged in rows or columns that automatically wrap to a new row or column when the MaximumRowsOrColumns value is reached.</source>
					<target>Elements are arranged in rows or columns that automatically wrap to a new row or column when the MaximumRowsOrColumns value is reached.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>Whether elements are arranged in rows or columns is specified by the Orientation property.</source>
					<target>Whether elements are arranged in rows or columns is specified by the Orientation property.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>Elements can span multiple rows and columns using VariableSizedWrapGrid.RowSpan and VariableSizedWrapGrid.ColumnSpan attached properties.</source>
					<target>Elements can span multiple rows and columns using VariableSizedWrapGrid.RowSpan and VariableSizedWrapGrid.ColumnSpan attached properties.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</source>
					<target>Stretch values for HorizontalAlignment/VerticalAlignment are ignored.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>Elements are sized as specified by the ItemHeight and ItemWidth properties.</source>
					<target>Elements are sized as specified by the ItemHeight and ItemWidth properties.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>If these properties are not set, the item in the first cell sizes to its content, and all other cells inherit this size.</source>
					<target>If these properties are not set, the item in the first cell sizes to its content, and all other cells inherit this size.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>Child content is visually clipped if larger than the panel.</source>
					<target>Child content is visually clipped if larger than the panel.</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</source>
					<target>Content size is constrained by the bounds of the panel, so scrollable content shows scroll bars if needed.</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](layout-panels.md)</data>
				</originalData>
				<segment state="initial">
					<source>For detailed information and examples of these panels, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Layout panels</pc>.</source>
					<target>For detailed information and examples of these panels, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Layout panels</pc>.</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620024)</data>
				</originalData>
				<segment state="initial">
					<source>Also, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive techniques sample</pc>.</source>
					<target>Also, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responsive techniques sample</pc>.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>Layout panels let you organize your UI into logical groups of controls.</source>
					<target>Layout panels let you organize your UI into logical groups of controls.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>When you use them with appropriate property settings, you get some support for automatic resizing, repositioning, and reflowing of UI elements.</source>
					<target>When you use them with appropriate property settings, you get some support for automatic resizing, repositioning, and reflowing of UI elements.</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>However, most UI layouts need further modification when there are significant changes to the window size.</source>
					<target>However, most UI layouts need further modification when there are significant changes to the window size.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>For this, you can use visual states.</source>
					<target>For this, you can use visual states.</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>Visual states and state triggers</source>
					<target>Visual states and state triggers</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>Use visual states to reposition, resize, reflow, reveal, or replace sections of your UI based on screen size or other factors.</source>
					<target>Use visual states to reposition, resize, reflow, reveal, or replace sections of your UI based on screen size or other factors.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> defines property values that are applied to an element when it’s in a particular state.</source>
					<target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualState</pc></pc> defines property values that are applied to an element when it’s in a particular state.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You group visual states in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> that applies the appropriate VisualState when the specified conditions are met.</source>
					<target>You group visual states in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager</pc></pc> that applies the appropriate VisualState when the specified conditions are met.</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>Set visual states in code</source>
					<target>Set visual states in code</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstatemanager.gotostate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To apply a visual state from code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager.GoToState</pc></pc> method.</source>
					<target>To apply a visual state from code, you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager.GoToState</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.window.sizechanged.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, to apply a state when the app window is a particular size, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SizeChanged</pc></pc> event and call <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoToState</pc> to apply the appropriate state.</source>
					<target>For example, to apply a state when the app window is a particular size, handle the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SizeChanged</pc></pc> event and call <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoToState</pc> to apply the appropriate state.</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.visualstategroup.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Here, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateGroup</pc></pc> contains 2 VisualState definitions.</source>
					<target>Here, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateGroup</pc></pc> contains 2 VisualState definitions.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<originalData>
					<data id="id1">`DefaultState`</data>
				</originalData>
				<segment state="initial">
					<source>The first, <ph dataRef="id1" id="ph1" />, is empty.</source>
					<target>The first, <ph dataRef="id1" id="ph1" />, is empty.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>When it's applied, the values defined in the XAML page are applied.</source>
					<target>When it's applied, the values defined in the XAML page are applied.</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<originalData>
					<data id="id1">`WideState`</data>
					<data id="id2">[</data>
					<data id="id3">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.displaymode.aspx)</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">[</data>
					<data id="id7">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.splitview.aspx)</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
					<data id="id11">**</data>
				</originalData>
				<segment state="initial">
					<source>The second, <ph dataRef="id1" id="ph1" />, changes the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DisplayMode</pc></pc> property of the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">SplitView</pc></pc> to <pc dataRefEnd="id11" dataRefStart="id10" id="p5">Inline</pc> and opens the pane.</source>
					<target>The second, <ph dataRef="id1" id="ph1" />, changes the <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DisplayMode</pc></pc> property of the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">SplitView</pc></pc> to <pc dataRefEnd="id11" dataRefStart="id10" id="p5">Inline</pc> and opens the pane.</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>This state is applied in the SizeChanged event handler if the window width is 720 effective pixels or greater.</source>
					<target>This state is applied in the SizeChanged event handler if the window width is 720 effective pixels or greater.</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<segment state="initial">
					<source>Set visual states in XAML markup</source>
					<target>Set visual states in XAML markup</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.storyboard.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Prior to Windows 10, VisualState definitions required <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboard</pc></pc> objects for property changes, and you had to call <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoToState</pc> in code to apply the state.</source>
					<target>Prior to Windows 10, VisualState definitions required <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboard</pc></pc> objects for property changes, and you had to call <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoToState</pc> in code to apply the state.</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>This is shown in the previous example.</source>
					<target>This is shown in the previous example.</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>You will still see many examples that use this syntax, or you might have existing code that uses it.</source>
					<target>You will still see many examples that use this syntax, or you might have existing code that uses it.</target>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.setter.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Starting in Windows 10, you can use the simplified <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> syntax shown here, and you can use a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StateTrigger</pc></pc> in your XAML markup to apply the state.</source>
					<target>Starting in Windows 10, you can use the simplified <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Setter</pc></pc> syntax shown here, and you can use a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StateTrigger</pc></pc> in your XAML markup to apply the state.</target>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<segment state="initial">
					<source>You use state triggers to create simple rules that automatically trigger visual state changes in response to an app event.</source>
					<target>You use state triggers to create simple rules that automatically trigger visual state changes in response to an app event.</target>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This example does the same thing as the previous example, but uses the simplified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter</pc> syntax instead of a Storyboard to define property changes.</source>
					<target>This example does the same thing as the previous example, but uses the simplified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Setter</pc> syntax instead of a Storyboard to define property changes.</target>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.adaptivetrigger.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>And instead of calling GoToState, it uses the built in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AdaptiveTrigger</pc></pc> state trigger to apply the state.</source>
					<target>And instead of calling GoToState, it uses the built in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AdaptiveTrigger</pc></pc> state trigger to apply the state.</target>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<originalData>
					<data id="id1">`DefaultState`</data>
				</originalData>
				<segment state="initial">
					<source>When you use state triggers, you don't need to define an empty <ph dataRef="id1" id="ph1" />.</source>
					<target>When you use state triggers, you don't need to define an empty <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>The default settings are reapplied automatically when the conditions of the state trigger are no longer met.</source>
					<target>The default settings are reapplied automatically when the conditions of the state trigger are no longer met.</target>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />In the previous example, the VisualStateManager.VisualStateGroups attached property is set on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Grid</pc> element.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />In the previous example, the VisualStateManager.VisualStateGroups attached property is set on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Grid</pc> element.</target>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>When you use StateTriggers, always ensure that VisualStateGroups is attached to the first child of the root in order for the triggers to take effect automatically.</source>
					<target>When you use StateTriggers, always ensure that VisualStateGroups is attached to the first child of the root in order for the triggers to take effect automatically.</target>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>(Here, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> is the first child of the root <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc> element.)</source>
					<target>(Here, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> is the first child of the root <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Page</pc> element.)</target>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<segment state="initial">
					<source>Attached property syntax</source>
					<target>Attached property syntax</target>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>In a VisualState, you typically set a value for a control property, or for one of the attached properties of the panel that contains the control.</source>
					<target>In a VisualState, you typically set a value for a control property, or for one of the attached properties of the panel that contains the control.</target>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>When you set an attached property, use parentheses around the attached property name.</source>
					<target>When you set an attached property, use parentheses around the attached property name.</target>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.relativepanel.alignhorizontalcenterwithpanel.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`myTextBox`</data>
				</originalData>
				<segment state="initial">
					<source>This example shows how to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativePanel.AlignHorizontalCenterWithPanel</pc></pc> attached property on a TextBox named <ph dataRef="id5" id="ph1" />.</source>
					<target>This example shows how to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativePanel.AlignHorizontalCenterWithPanel</pc></pc> attached property on a TextBox named <ph dataRef="id5" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.animation.objectanimationusingkeyframes.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The first XAML uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> syntax and the second uses <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Setter</pc> syntax.</source>
					<target>The first XAML uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> syntax and the second uses <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Setter</pc> syntax.</target>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<segment state="initial">
					<source>Custom state triggers</source>
					<target>Custom state triggers</target>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.statetrigger.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can extend the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateTrigger</pc></pc> class to create custom triggers for a wide range of scenarios.</source>
					<target>You can extend the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StateTrigger</pc></pc> class to create custom triggers for a wide range of scenarios.</target>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>For example, you can create a StateTrigger to trigger different states based on input type, then increase the margins around a control when the input type is touch.</source>
					<target>For example, you can create a StateTrigger to trigger different states based on input type, then increase the margins around a control when the input type is touch.</target>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>Or create a StateTrigger to apply different states based on the device family the app is run on.</source>
					<target>Or create a StateTrigger to apply different states based on the device family the app is run on.</target>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</data>
				</originalData>
				<segment state="initial">
					<source>For examples of how to build custom triggers and use them to create optimized UI experiences from within a single XAML view, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">State triggers sample</pc>.</source>
					<target>For examples of how to build custom triggers and use them to create optimized UI experiences from within a single XAML view, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">State triggers sample</pc>.</target>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Visual states and styles</source>
					<target>Visual states and styles</target>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<segment state="initial">
					<source>You can use Style resources in visual states to apply a set of property changes to multiple controls.</source>
					<target>You can use Style resources in visual states to apply a set of property changes to multiple controls.</target>
				</segment>
			</unit>
			<unit id="316" translate="yes">
				<segment state="initial">
					<source>For more info about using styles, see Styling controls.</source>
					<target>For more info about using styles, see Styling controls.</target>
				</segment>
			</unit>
			<unit id="317" translate="yes">
				<segment state="initial">
					<source>In this simplified XAML from the State triggers sample, a Style resource is applied to a Button to adjust the size and margins for mouse or touch input.</source>
					<target>In this simplified XAML from the State triggers sample, a Style resource is applied to a Button to adjust the size and margins for mouse or touch input.</target>
				</segment>
			</unit>
			<unit id="318" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620025)</data>
				</originalData>
				<segment state="initial">
					<source>For the complete code and the definition of the custom state trigger, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">State triggers sample</pc>.</source>
					<target>For the complete code and the definition of the custom state trigger, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">State triggers sample</pc>.</target>
				</segment>
			</unit>
			<unit id="319" translate="yes">
				<segment state="initial">
					<source>Tailored layouts</source>
					<target>Tailored layouts</target>
				</segment>
			</unit>
			<unit id="320" translate="yes">
				<segment state="initial">
					<source>When you make significant changes to your UI layout on different devices, you might find it more convenient to define a separate UI file with a layout tailored to the device, rather than adapting a single UI.</source>
					<target>When you make significant changes to your UI layout on different devices, you might find it more convenient to define a separate UI file with a layout tailored to the device, rather than adapting a single UI.</target>
				</segment>
			</unit>
			<unit id="321" translate="yes">
				<segment state="initial">
					<source>If the functionality is the same across devices, you can define separate XAML views that share the same code file.</source>
					<target>If the functionality is the same across devices, you can define separate XAML views that share the same code file.</target>
				</segment>
			</unit>
			<unit id="322" translate="yes">
				<segment state="initial">
					<source>If both the view and the functionality differ significantly across devices, you can define separate Pages, and choose which Page to navigate to when the app is loaded.</source>
					<target>If both the view and the functionality differ significantly across devices, you can define separate Pages, and choose which Page to navigate to when the app is loaded.</target>
				</segment>
			</unit>
			<unit id="323" translate="yes">
				<segment state="initial">
					<source>Separate XAML views per device family</source>
					<target>Separate XAML views per device family</target>
				</segment>
			</unit>
			<unit id="324" translate="yes">
				<segment state="initial">
					<source>Use XAML views to create different UI definitions that share the same code-behind.</source>
					<target>Use XAML views to create different UI definitions that share the same code-behind.</target>
				</segment>
			</unit>
			<unit id="325" translate="yes">
				<segment state="initial">
					<source>You can provide a unique UI definition for each device family.</source>
					<target>You can provide a unique UI definition for each device family.</target>
				</segment>
			</unit>
			<unit id="326" translate="yes">
				<segment state="initial">
					<source>Follow these steps to add a XAML view to your app.</source>
					<target>Follow these steps to add a XAML view to your app.</target>
				</segment>
			</unit>
			<unit id="327" translate="yes">
				<segment state="initial">
					<source>To add a XAML view to an app</source>
					<target>To add a XAML view to an app</target>
				</segment>
			</unit>
			<unit id="328" translate="yes">
				<segment state="initial">
					<source>Select Project &gt; Add New Item.</source>
					<target>Select Project &gt; Add New Item.</target>
				</segment>
			</unit>
			<unit id="329" translate="yes">
				<segment state="initial">
					<source>The Add New Item dialog box opens.</source>
					<target>The Add New Item dialog box opens.</target>
				</segment>
			</unit>
			<unit id="330" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Make sure a folder or the project, and not the solution, is selected in Solution Explorer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Make sure a folder or the project, and not the solution, is selected in Solution Explorer.</target>
				</segment>
			</unit>
			<unit id="331" translate="yes">
				<segment state="initial">
					<source>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</source>
					<target>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</target>
				</segment>
			</unit>
			<unit id="332" translate="yes">
				<segment state="initial">
					<source>In the center pane, pick XAML View.</source>
					<target>In the center pane, pick XAML View.</target>
				</segment>
			</unit>
			<unit id="333" translate="yes">
				<segment state="initial">
					<source>Enter the name for the view.</source>
					<target>Enter the name for the view.</target>
				</segment>
			</unit>
			<unit id="334" translate="yes">
				<segment state="initial">
					<source>The view must be named correctly.</source>
					<target>The view must be named correctly.</target>
				</segment>
			</unit>
			<unit id="335" translate="yes">
				<segment state="initial">
					<source>For more info on naming, see the remainder of this section.</source>
					<target>For more info on naming, see the remainder of this section.</target>
				</segment>
			</unit>
			<unit id="336" translate="yes">
				<segment state="initial">
					<source>Click Add.</source>
					<target>Click Add.</target>
				</segment>
			</unit>
			<unit id="337" translate="yes">
				<segment state="initial">
					<source>The file is added to the project.</source>
					<target>The file is added to the project.</target>
				</segment>
			</unit>
			<unit id="338" translate="yes">
				<segment state="initial">
					<source>The previous steps create only a XAML file, but not an associated code-behind file.</source>
					<target>The previous steps create only a XAML file, but not an associated code-behind file.</target>
				</segment>
			</unit>
			<unit id="339" translate="yes">
				<segment state="initial">
					<source>Instead, the XAML view is associated with an existing code-behind file using a "DeviceName" qualifier that's part of the file or folder name.</source>
					<target>Instead, the XAML view is associated with an existing code-behind file using a "DeviceName" qualifier that's part of the file or folder name.</target>
				</segment>
			</unit>
			<unit id="340" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.applicationmodel.resources.core.resourcecontext.qualifiervalues.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This qualifier name can be mapped to a string value that represents the device family of the device that your app is currently running on, such as, "Desktop", "Mobile", and the names of the other device families (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceContext.QualifierValues</pc></pc>).</source>
					<target>This qualifier name can be mapped to a string value that represents the device family of the device that your app is currently running on, such as, "Desktop", "Mobile", and the names of the other device families (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceContext.QualifierValues</pc></pc>).</target>
				</segment>
			</unit>
			<unit id="341" translate="yes">
				<segment state="initial">
					<source>You can add the qualifier to the file name, or add the file to a folder that has the qualifier name.</source>
					<target>You can add the qualifier to the file name, or add the file to a folder that has the qualifier name.</target>
				</segment>
			</unit>
			<unit id="342" translate="yes">
				<segment state="initial">
					<source>Use file name</source>
					<target>Use file name</target>
				</segment>
			</unit>
			<unit id="343" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>To use the qualifier name with the file, use this format: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">[pageName]</pc>.DeviceFamily-<pc dataRefEnd="id4" dataRefStart="id3" id="p2">[qualifierString]</pc>.xaml.</source>
					<target>To use the qualifier name with the file, use this format: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">[pageName]</pc>.DeviceFamily-<pc dataRefEnd="id4" dataRefStart="id3" id="p2">[qualifierString]</pc>.xaml.</target>
				</segment>
			</unit>
			<unit id="344" translate="yes">
				<segment state="initial">
					<source>Let's look at an example for a file named MainPage.xaml.</source>
					<target>Let's look at an example for a file named MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="345" translate="yes">
				<segment state="initial">
					<source>To create a view for mobile devices, name the XAML view MainPage.DeviceFamily-Mobile.xaml.</source>
					<target>To create a view for mobile devices, name the XAML view MainPage.DeviceFamily-Mobile.xaml.</target>
				</segment>
			</unit>
			<unit id="346" translate="yes">
				<segment state="initial">
					<source>To create a view for PC devices, name the view MainPage.DeviceFamily-Desktop.xaml.</source>
					<target>To create a view for PC devices, name the view MainPage.DeviceFamily-Desktop.xaml.</target>
				</segment>
			</unit>
			<unit id="347" translate="yes">
				<segment state="initial">
					<source>Here's what the solution looks like in Microsoft Visual Studio.</source>
					<target>Here's what the solution looks like in Microsoft Visual Studio.</target>
				</segment>
			</unit>
			<unit id="348" translate="yes">
				<segment state="initial">
					<source>XAML views with qualified file names</source>
					<target>XAML views with qualified file names</target>
				</segment>
			</unit>
			<unit id="349" translate="yes">
				<segment state="initial">
					<source>Use folder name</source>
					<target>Use folder name</target>
				</segment>
			</unit>
			<unit id="350" translate="yes">
				<segment state="initial">
					<source>To organize the views in your Visual Studio project using folders, you can use the qualifier name with the folder.</source>
					<target>To organize the views in your Visual Studio project using folders, you can use the qualifier name with the folder.</target>
				</segment>
			</unit>
			<unit id="351" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>To do so, name your folder like this: DeviceFamily-<pc dataRefEnd="id2" dataRefStart="id1" id="p1">[qualifierString]</pc>.</source>
					<target>To do so, name your folder like this: DeviceFamily-<pc dataRefEnd="id2" dataRefStart="id1" id="p1">[qualifierString]</pc>.</target>
				</segment>
			</unit>
			<unit id="352" translate="yes">
				<segment state="initial">
					<source>In this case, each XAML view file has the same name.</source>
					<target>In this case, each XAML view file has the same name.</target>
				</segment>
			</unit>
			<unit id="353" translate="yes">
				<segment state="initial">
					<source>Don't include the qualifier in the file name.</source>
					<target>Don't include the qualifier in the file name.</target>
				</segment>
			</unit>
			<unit id="354" translate="yes">
				<segment state="initial">
					<source>Here's an example, again for a file named MainPage.xaml.</source>
					<target>Here's an example, again for a file named MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="355" translate="yes">
				<segment state="initial">
					<source>To create a view for mobile devices, create a folder named "DeviceFamily-Mobile", and place a XAML view named MainPage.xaml into it.</source>
					<target>To create a view for mobile devices, create a folder named "DeviceFamily-Mobile", and place a XAML view named MainPage.xaml into it.</target>
				</segment>
			</unit>
			<unit id="356" translate="yes">
				<segment state="initial">
					<source>To create a view for PC devices, create a folder named "DeviceFamily-Desktop", and place another XAML view named MainPage.xaml into it.</source>
					<target>To create a view for PC devices, create a folder named "DeviceFamily-Desktop", and place another XAML view named MainPage.xaml into it.</target>
				</segment>
			</unit>
			<unit id="357" translate="yes">
				<segment state="initial">
					<source>Here's what the solution looks like in Visual Studio.</source>
					<target>Here's what the solution looks like in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="358" translate="yes">
				<segment state="initial">
					<source>XAML views in folders</source>
					<target>XAML views in folders</target>
				</segment>
			</unit>
			<unit id="359" translate="yes">
				<segment state="initial">
					<source>In both cases, a unique view is used for mobile and PC devices.</source>
					<target>In both cases, a unique view is used for mobile and PC devices.</target>
				</segment>
			</unit>
			<unit id="360" translate="yes">
				<segment state="initial">
					<source>The default MainPage.xaml file is used if the device it's running on doesn't match any of the device family specific views.</source>
					<target>The default MainPage.xaml file is used if the device it's running on doesn't match any of the device family specific views.</target>
				</segment>
			</unit>
			<unit id="361" translate="yes">
				<segment state="initial">
					<source>Separate XAML pages per device family</source>
					<target>Separate XAML pages per device family</target>
				</segment>
			</unit>
			<unit id="362" translate="yes">
				<segment state="initial">
					<source>To provide unique views and functionality, you can create separate Page files (XAML and code), and then navigate to the appropriate page when the page is needed.</source>
					<target>To provide unique views and functionality, you can create separate Page files (XAML and code), and then navigate to the appropriate page when the page is needed.</target>
				</segment>
			</unit>
			<unit id="363" translate="yes">
				<segment state="initial">
					<source>To add a XAML page to an app</source>
					<target>To add a XAML page to an app</target>
				</segment>
			</unit>
			<unit id="364" translate="yes">
				<segment state="initial">
					<source>Select Project &gt; Add New Item.</source>
					<target>Select Project &gt; Add New Item.</target>
				</segment>
			</unit>
			<unit id="365" translate="yes">
				<segment state="initial">
					<source>The Add New Item dialog box opens.</source>
					<target>The Add New Item dialog box opens.</target>
				</segment>
			</unit>
			<unit id="366" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Make sure the project, and not the solution, is selected in Solution Explorer.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Make sure the project, and not the solution, is selected in Solution Explorer.</target>
				</segment>
			</unit>
			<unit id="367" translate="yes">
				<segment state="initial">
					<source>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</source>
					<target>Under Visual C# or Visual Basic in the left pane, pick the XAML template type.</target>
				</segment>
			</unit>
			<unit id="368" translate="yes">
				<segment state="initial">
					<source>In the center pane, pick Blank page.</source>
					<target>In the center pane, pick Blank page.</target>
				</segment>
			</unit>
			<unit id="369" translate="yes">
				<segment state="initial">
					<source>Enter the name for the page.</source>
					<target>Enter the name for the page.</target>
				</segment>
			</unit>
			<unit id="370" translate="yes">
				<segment state="initial">
					<source>For example, "MainPage_Mobile".</source>
					<target>For example, "MainPage_Mobile".</target>
				</segment>
			</unit>
			<unit id="371" translate="yes">
				<segment state="initial">
					<source>Both a MainPage_Mobile.xaml and MainPage_Mobile.cs/vb/cpp code file are created.</source>
					<target>Both a MainPage_Mobile.xaml and MainPage_Mobile.cs/vb/cpp code file are created.</target>
				</segment>
			</unit>
			<unit id="372" translate="yes">
				<segment state="initial">
					<source>Click Add.</source>
					<target>Click Add.</target>
				</segment>
			</unit>
			<unit id="373" translate="yes">
				<segment state="initial">
					<source>The file is added to the project.</source>
					<target>The file is added to the project.</target>
				</segment>
			</unit>
			<unit id="374" translate="yes">
				<segment state="initial">
					<source>At runtime, check the device family that the app is running on, and navigate to the correct page like this.</source>
					<target>At runtime, check the device family that the app is running on, and navigate to the correct page like this.</target>
				</segment>
			</unit>
			<unit id="375" translate="yes">
				<segment state="initial">
					<source>You can also use different criteria to determine which page to navigate to.</source>
					<target>You can also use different criteria to determine which page to navigate to.</target>
				</segment>
			</unit>
			<unit id="376" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620636)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/dn904185.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>For more examples, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tailored multiple views sample</pc>, which uses the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GetIntegratedDisplaySize</pc></pc> function to check the physical size of an integrated display.</source>
					<target>For more examples, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tailored multiple views sample</pc>, which uses the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GetIntegratedDisplaySize</pc></pc> function to check the physical size of an integrated display.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>