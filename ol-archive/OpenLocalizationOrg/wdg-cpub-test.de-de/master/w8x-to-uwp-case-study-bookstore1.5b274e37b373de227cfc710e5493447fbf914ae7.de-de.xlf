<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">31c1b67ec57f91e7000e37c0dba1075d45aaa8c0</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\porting\w8x-to-uwp-case-study-bookstore1.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">3039dd53b2b844c433b2edcc99608d7bb3f97023</mda:meta><mda:meta type="olxliffhash">15c0b558f7d970c5a2aeb8959006390eaeef2f0c</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Windows Runtime 8.x to UWP case study, Bookstore1</source>
					<target>Windows Runtime 8.x to UWP case study, Bookstore1</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</source>
					<target>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Windows Runtime 8.x to UWP case study: Bookstore1</source>
					<target>Windows Runtime 8.x to UWP case study: Bookstore1</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</source>
					<target>This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</source>
					<target>A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
					<target>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> bound to a view model.</source>
					<target>The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> bound to a view model.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>The view model has a list of books that shows title, author, and book cover.</source>
					<target>The view model has a list of books that shows title, author, and book cover.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</source>
					<target>The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</source>
					<target>The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>A case study aims to complement that guidance by showing it in action in a real example.</source>
					<target>A case study aims to complement that guidance by showing it in action in a real example.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The case studies assume you've read the guidance, which they do not repeat.</source>
					<target>The case studies assume you've read the guidance, which they do not repeat.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](w8x-to-uwp-troubleshooting.md#targetplatformversion)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Downloads</source>
					<target>Downloads</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532946)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1\_81 Universal 8.1 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1\_81 Universal 8.1 app</pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532950)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1Universal\_10 Windows 10 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1Universal\_10 Windows 10 app</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>The Universal 8.1 app</source>
					<target>The Universal 8.1 app</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Here’s what Bookstore1\_81—the app that we're going to port—looks like.</source>
					<target>Here’s what Bookstore1\_81—the app that we're going to port—looks like.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</source>
					<target>It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>how bookstore1\-81 looks on windows</source>
					<target>how bookstore1\-81 looks on windows</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81 on Windows</source>
					<target>Bookstore1\_81 on Windows</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>how bookstore1\-81 looks on windows phone</source>
					<target>how bookstore1\-81 looks on windows phone</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81 on Windows Phone</source>
					<target>Bookstore1\_81 on Windows Phone</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Porting to a Windows 10 project</source>
					<target>Porting to a Windows 10 project</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>The Bookstore1\_81 solution is an 8.1 Universal App project, and it contains these projects.</source>
					<target>The Bookstore1\_81 solution is an 8.1 Universal App project, and it contains these projects.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81.Windows.</source>
					<target>Bookstore1\_81.Windows.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>This is the project that builds the app package for Windows 8.1.</source>
					<target>This is the project that builds the app package for Windows 8.1.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81.WindowsPhone.</source>
					<target>Bookstore1\_81.WindowsPhone.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>This is the project that builds the app package for Windows Phone 8.1.</source>
					<target>This is the project that builds the app package for Windows Phone 8.1.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81.Shared.</source>
					<target>Bookstore1\_81.Shared.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</source>
					<target>This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-root.md#if-you-have-an-81-universal-windows-app)</data>
				</originalData>
				<segment state="initial">
					<source>For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">If you have a Universal 8.1 app</pc> with respect to what devices to support.</source>
					<target>For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">If you have a Universal 8.1 app</pc> with respect to what devices to support.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>The decision here is a simple one: this app has the same features, and does so mostly with the same code, in both its Windows 8.1 and Windows Phone 8.1 forms.</source>
					<target>The decision here is a simple one: this app has the same features, and does so mostly with the same code, in both its Windows 8.1 and Windows Phone 8.1 forms.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>So, we'll port the contents of the Shared project (and anything else we need from the other projects) to a Windows 10 that targets the Universal device family (one that you can install onto the widest range of devices).</source>
					<target>So, we'll port the contents of the Shared project (and anything else we need from the other projects) to a Windows 10 that targets the Universal device family (one that you can install onto the widest range of devices).</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1\_81, and include the copied files in the new project.</source>
					<target>It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1\_81, and include the copied files in the new project.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Start by creating a new Blank Application (Windows Universal) project.</source>
					<target>Start by creating a new Blank Application (Windows Universal) project.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Name it Bookstore1Universal\_10.</source>
					<target>Name it Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>These are the files to copy over from Bookstore1\_81 to Bookstore1Universal\_10.</source>
					<target>These are the files to copy over from Bookstore1\_81 to Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>From the Shared project</source>
					<target>From the Shared project</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
					<target>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</source>
					<target>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</source>
					<target>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>That command is what we mean by "including" files or folders in a project.</source>
					<target>That command is what we mean by "including" files or folders in a project.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</source>
					<target>Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>There's no need to do this for files that you're replacing in the destination.</source>
					<target>There's no need to do this for files that you're replacing in the destination.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
					<target>Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Copy MainPage.xaml and replace the file in the destination.</source>
					<target>Copy MainPage.xaml and replace the file in the destination.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>From the Windows project</source>
					<target>From the Windows project</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Copy BookstoreStyles.xaml.</source>
					<target>Copy BookstoreStyles.xaml.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</source>
					<target>We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Edit the source code and markup files that you just copied and change any references to the Bookstore1\_81 namespace to Bookstore1Universal\_10.</source>
					<target>Edit the source code and markup files that you just copied and change any references to the Bookstore1\_81 namespace to Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</source>
					<target>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>No code changes are needed in the view model, nor in any other imperative code.</source>
					<target>No code changes are needed in the view model, nor in any other imperative code.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1\_81" to "BOOKSTORE1UNIVERSAL\_10".</source>
					<target>But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1\_81" to "BOOKSTORE1UNIVERSAL\_10".</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Right now, you can build and run.</source>
					<target>Right now, you can build and run.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Here's how our new UWP app looks after having done no explicit work yet to port it to Windows 10.</source>
					<target>Here's how our new UWP app looks after having done no explicit work yet to port it to Windows 10.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>the windows 10 app with initial source code changes</source>
					<target>the windows 10 app with initial source code changes</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>The Windows 10 app with initial source code changes running on a Desktop device</source>
					<target>The Windows 10 app with initial source code changes running on a Desktop device</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>the windows 10 app with initial source code changes</source>
					<target>the windows 10 app with initial source code changes</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The Windows 10 app with initial source code changes running on a Mobile device</source>
					<target>The Windows 10 app with initial source code changes running on a Mobile device</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> is functioning.</source>
					<target>The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> is functioning.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>We just need to fix the styling.</source>
					<target>We just need to fix the styling.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>On a Mobile device, in light theme, we can see the border of the list box, but that will be easy to hide.</source>
					<target>On a Mobile device, in light theme, we can see the border of the list box, but that will be easy to hide.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>And, the typography is too big, so we'll change the styles we're using.</source>
					<target>And, the typography is too big, so we'll change the styles we're using.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>Also, the app should be light in color when running on a Desktop device if we want it to look like the default.</source>
					<target>Also, the app should be light in color when running on a Desktop device if we want it to look like the default.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>So, we'll change that.</source>
					<target>So, we'll change that.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>Universal styling</source>
					<target>Universal styling</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>The Bookstore1\_81 app used two different resource dictionaries (BookstoreStyles.xaml) to tailor its styles to the Windows 8.1 and Windows Phone 8.1 operating systems.</source>
					<target>The Bookstore1\_81 app used two different resource dictionaries (BookstoreStyles.xaml) to tailor its styles to the Windows 8.1 and Windows Phone 8.1 operating systems.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Neither of those two BookstoreStyles.xaml files contains exactly the styles we need for our Windows 10 app.</source>
					<target>Neither of those two BookstoreStyles.xaml files contains exactly the styles we need for our Windows 10 app.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>But, the good news is that what we want is actually much simpler than either of them.</source>
					<target>But, the good news is that what we want is actually much simpler than either of them.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>So, the next steps will mostly involve removing and simplifying our project files and markup.</source>
					<target>So, the next steps will mostly involve removing and simplifying our project files and markup.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>The steps are below.</source>
					<target>The steps are below.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</source>
					<target>And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
					<data id="id2">`Margin="0,0,0,8"`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To tighten up the spacing between items, find the <ph dataRef="id1" id="ph1" /> data template in MainPage.xaml and delete the <ph dataRef="id2" id="ph2" /> from the root <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Grid</pc>.</source>
					<target>To tighten up the spacing between items, find the <ph dataRef="id1" id="ph1" /> data template in MainPage.xaml and delete the <ph dataRef="id2" id="ph2" /> from the root <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Grid</pc>.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
					<data id="id2">`BookTemplateTitleTextBlockStyle`</data>
					<data id="id3">`BookTemplateAuthorTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Also, in <ph dataRef="id1" id="ph1" />, there are references to <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />.</source>
					<target>Also, in <ph dataRef="id1" id="ph1" />, there are references to <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Bookstore1\_81 used those keys as an indirection so that a single key had different implementations in the two apps.</source>
					<target>Bookstore1\_81 used those keys as an indirection so that a single key had different implementations in the two apps.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>We don't need that indirection any more; we can just reference system styles directly.</source>
					<target>We don't need that indirection any more; we can just reference system styles directly.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">`TitleTextBlockStyle`</data>
					<data id="id2">`SubtitleTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>So, replace those references with <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />, respectively.</source>
					<target>So, replace those references with <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />, respectively.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">`LayoutRoot`</data>
				</originalData>
				<segment state="initial">
					<source>Now, we need to set <ph dataRef="id1" id="ph1" />'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</source>
					<target>Now, we need to set <ph dataRef="id1" id="ph1" />'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">`"Transparent"`</data>
					<data id="id2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</data>
				</originalData>
				<segment state="initial">
					<source>Change it from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</source>
					<target>Change it from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">`TitlePanel`</data>
					<data id="id2">`TitleTextBlockStyle`</data>
					<data id="id3">`CaptionTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, change the reference to <ph dataRef="id2" id="ph2" /> (which is now a little too big) to a reference to <ph dataRef="id3" id="ph3" />.</source>
					<target>In <ph dataRef="id1" id="ph1" />, change the reference to <ph dataRef="id2" id="ph2" /> (which is now a little too big) to a reference to <ph dataRef="id3" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>is another Bookstore1\_81 indirection that we don't need any longer.</source>
					<target>is another Bookstore1\_81 indirection that we don't need any longer.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">`HeaderTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Change that to reference <ph dataRef="id1" id="ph1" /> instead.</source>
					<target>Change that to reference <ph dataRef="id1" id="ph1" /> instead.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We no longer need to set any special Background, Style, nor ItemContainerStyle on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, so just delete those three attributes and their values from the markup.</source>
					<target>We no longer need to set any special Background, Style, nor ItemContainerStyle on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, so just delete those three attributes and their values from the markup.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`BorderBrush="{x:Null}"`</data>
				</originalData>
				<segment state="initial">
					<source>We do want to hide the border of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, though, so add <ph dataRef="id3" id="ph1" /> to it.</source>
					<target>We do want to hide the border of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc>, though, so add <ph dataRef="id3" id="ph1" /> to it.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>We're not referencing any of the resources in the BookstoreStyles.xaml <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> file any longer.</source>
					<target>We're not referencing any of the resources in the BookstoreStyles.xaml <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> file any longer.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>You can delete all of those resources.</source>
					<target>You can delete all of those resources.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>But, don't delete the BookstoreStyles.xaml file itself: we still have one last use for it, as you'll see in the next section.</source>
					<target>But, don't delete the BookstoreStyles.xaml file itself: we still have one last use for it, as you'll see in the next section.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>That last sequence of styling operations leaves the app looking like this.</source>
					<target>That last sequence of styling operations leaves the app looking like this.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>the almost-ported windows 10 app</source>
					<target>the almost-ported windows 10 app</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>The almost-ported Windows 10 app running on a Desktop device</source>
					<target>The almost-ported Windows 10 app running on a Desktop device</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>the almost-ported windows 10 app</source>
					<target>the almost-ported windows 10 app</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>The almost-ported Windows 10 app running on a Mobile device</source>
					<target>The almost-ported Windows 10 app running on a Mobile device</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>An optional adjustment to the list box for Mobile devices</source>
					<target>An optional adjustment to the list box for Mobile devices</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>When the app is running on a Mobile device, the background of a list box is light by default in both themes.</source>
					<target>When the app is running on a Mobile device, the background of a list box is light by default in both themes.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>That may be the style that you prefer and, if so, then there's nothing more to do except to tidy up: delete the BookstoreStyles.xaml resource dictionary file from your project, and remove the markup that merges it into MainPage.xaml.</source>
					<target>That may be the style that you prefer and, if so, then there's nothing more to do except to tidy up: delete the BookstoreStyles.xaml resource dictionary file from your project, and remove the markup that merges it into MainPage.xaml.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>But, controls are designed so that you can customize their look while leaving their behavior unaffected.</source>
					<target>But, controls are designed so that you can customize their look while leaving their behavior unaffected.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>So, if you want the list box to be dark in the dark theme—the way the original app looked—then this section describes a way to do that.</source>
					<target>So, if you want the list box to be dark in the dark theme—the way the original app looked—then this section describes a way to do that.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>The change we make only needs to affect the app when it's running on Mobile devices.</source>
					<target>The change we make only needs to affect the app when it's running on Mobile devices.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>So, we'll use a very slightly customized list box style when we're running on the Mobile device family, and we'll continue to use the default style when we're running everywhere else.</source>
					<target>So, we'll use a very slightly customized list box style when we're running on the Mobile device family, and we'll continue to use the default style when we're running everywhere else.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>To do that, we'll make a copy of BookstoreStyles.xaml and we'll give it a special MRT-qualified name, which will cause it to be loaded only on Mobile devices.</source>
					<target>To do that, we'll make a copy of BookstoreStyles.xaml and we'll give it a special MRT-qualified name, which will cause it to be loaded only on Mobile devices.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> project item and name it BookstoreStyles.DeviceFamily-Mobile.xaml.</source>
					<target>Add a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> project item and name it BookstoreStyles.DeviceFamily-Mobile.xaml.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>You now have two files both of whose logical name is BookstoreStyles.xaml (and that's the name you use in your markup and code).</source>
					<target>You now have two files both of whose logical name is BookstoreStyles.xaml (and that's the name you use in your markup and code).</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>The files have different physical names, though, so they can contain different markup.</source>
					<target>The files have different physical names, though, so they can contain different markup.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>You can use this MRT-qualified naming scheme with any xaml file, but be aware that all xaml files with the same logical name share a single xaml.cs code-behind file (where one is applicable).</source>
					<target>You can use this MRT-qualified naming scheme with any xaml file, but be aware that all xaml files with the same logical name share a single xaml.cs code-behind file (where one is applicable).</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">`BookstoreListBoxStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Edit a copy of the control template for the list box and store that with the key of <ph dataRef="id1" id="ph1" /> in the new resource dictionary, BookstoreStyles.DeviceFamily-Mobile.xaml.</source>
					<target>Edit a copy of the control template for the list box and store that with the key of <ph dataRef="id1" id="ph1" /> in the new resource dictionary, BookstoreStyles.DeviceFamily-Mobile.xaml.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Now, we'll make simple changes to three of the setters.</source>
					<target>Now, we'll make simple changes to three of the setters.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">`"{x:Null}"`</data>
				</originalData>
				<segment state="initial">
					<source>In the Foreground setter, change the value to <ph dataRef="id1" id="ph1" />.</source>
					<target>In the Foreground setter, change the value to <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">`"{x:Null}"`</data>
					<data id="id2">`null`</data>
				</originalData>
				<segment state="initial">
					<source>Note that setting a property to <ph dataRef="id1" id="ph1" /> directly on an element is the same as setting it to <ph dataRef="id2" id="ph2" /> in code.</source>
					<target>Note that setting a property to <ph dataRef="id1" id="ph1" /> directly on an element is the same as setting it to <ph dataRef="id2" id="ph2" /> in code.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">`"{x:Null}"`</data>
				</originalData>
				<segment state="initial">
					<source>But, using a value of <ph dataRef="id1" id="ph1" /> in a setter has a unique effect: it overrides the setter in the default style (for the same property) and restores the default value of the property on the target element.</source>
					<target>But, using a value of <ph dataRef="id1" id="ph1" /> in a setter has a unique effect: it overrides the setter in the default style (for the same property) and restores the default value of the property on the target element.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">`"Transparent"`</data>
				</originalData>
				<segment state="initial">
					<source>In the Background setter, change the value to <ph dataRef="id1" id="ph1" /> to remove that light background.</source>
					<target>In the Background setter, change the value to <ph dataRef="id1" id="ph1" /> to remove that light background.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<originalData>
					<data id="id1">`Focused`</data>
				</originalData>
				<segment state="initial">
					<source>In the Template setter, find the visual state named <ph dataRef="id1" id="ph1" /> and delete its Storyboard, making it into an empty tag.</source>
					<target>In the Template setter, find the visual state named <ph dataRef="id1" id="ph1" /> and delete its Storyboard, making it into an empty tag.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Delete all the other setters from the markup.</source>
					<target>Delete all the other setters from the markup.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">`BookstoreListBoxStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Finally, copy <ph dataRef="id1" id="ph1" /> into BookstoreStyles.xaml and delete its three setters, making it into an empty tag.</source>
					<target>Finally, copy <ph dataRef="id1" id="ph1" /> into BookstoreStyles.xaml and delete its three setters, making it into an empty tag.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">`BookstoreListBoxStyle`</data>
				</originalData>
				<segment state="initial">
					<source>We do this so that on devices other than Mobile ones, our reference to BookstoreStyles.xaml and to <ph dataRef="id1" id="ph1" /> will resolve, but will have no effect.</source>
					<target>We do this so that on devices other than Mobile ones, our reference to BookstoreStyles.xaml and to <ph dataRef="id1" id="ph1" /> will resolve, but will have no effect.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app</source>
					<target>the ported windows 10 app</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device</source>
					<target>The ported Windows 10 app running on a Mobile device</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>Conclusion</source>
					<target>Conclusion</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</source>
					<target>This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>For instance, a list box can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</source>
					<target>For instance, a list box can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>This particular app does nothing with the user's selection, and it has no navigation.</source>
					<target>This particular app does nothing with the user's selection, and it has no navigation.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</source>
					<target>Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>We also saw evidence that porting view models is generally a smooth process.</source>
					<target>We also saw evidence that porting view models is generally a smooth process.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>User interface, and form factor support, are aspects that are more likely to require our attention when porting.</source>
					<target>User interface, and form factor support, are aspects that are more likely to require our attention when porting.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-case-study-bookstore2.md)</data>
				</originalData>
				<segment state="initial">
					<source>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc>, in which we look at accessing and displaying grouped data.</source>
					<target>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc>, in which we look at accessing and displaying grouped data.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>