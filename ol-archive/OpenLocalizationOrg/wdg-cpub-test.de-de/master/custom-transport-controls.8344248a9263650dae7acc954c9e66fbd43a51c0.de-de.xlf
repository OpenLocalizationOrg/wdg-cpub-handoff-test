<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">a0a86971d0c663daa7d2374ddebbb95b5ca56c3c</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\controls-and-patterns\custom-transport-controls.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">dd55148d13c0df7382026345c406730242cbe5f5</mda:meta><mda:meta type="olxliffhash">c7cf43c62f5cc51ad9df12bf904b3d13beb9609c</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>The media player has customizable XAML transport controls to manage control of audio and video content.</source>
					<target>The media player has customizable XAML transport controls to manage control of audio and video content.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Create custom media transport controls</source>
					<target>Create custom media transport controls</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Create custom transport controls</source>
					<target>Create custom transport controls</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>MediaElement has customizable XAML transport controls to manage control of audio and video content within a Universal Windows Platform (UWP) app.</source>
					<target>MediaElement has customizable XAML transport controls to manage control of audio and video content within a Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>Here, we demonstrate how to customize the MediaTransportControls template.</source>
					<target>Here, we demonstrate how to customize the MediaTransportControls template.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>We’ll show you how to work with the overflow menu, add a custom button, modify the slider, and change colors.</source>
					<target>We’ll show you how to work with the overflow menu, add a custom button, modify the slider, and change colors.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Before starting, you should be familiar with the MediaElement and the MediaTransportControls classes.</source>
					<target>Before starting, you should be familiar with the MediaElement and the MediaTransportControls classes.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>For more info, see the MediaElement control guide.</source>
					<target>For more info, see the MediaElement control guide.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">](http://go.microsoft.com/fwlink/p/?LinkId=620023)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />The examples in this topic are based on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Media Transport Controls sample</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />The examples in this topic are based on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Media Transport Controls sample</pc>.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>You can download the sample to view and run the completed code.</source>
					<target>You can download the sample to view and run the completed code.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>MediaElement</source>
					<target>MediaElement</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>MediaElement.AreTransportControlsEnabled</source>
					<target>MediaElement.AreTransportControlsEnabled</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>MediaTransportControls</source>
					<target>MediaTransportControls</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>When should you customize the template?</source>
					<target>When should you customize the template?</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> has built-in transport controls that are designed to work well without modification in most video and audio playback apps.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">MediaElement</pc> has built-in transport controls that are designed to work well without modification in most video and audio playback apps.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediatransportcontrols.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>They’re provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> class and include buttons to play, stop, and navigate media, adjust volume, toggle full screen, cast to a second device, enable captions, switch audio tracks, and adjust the playback rate.</source>
					<target>They’re provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> class and include buttons to play, stop, and navigate media, adjust volume, toggle full screen, cast to a second device, enable captions, switch audio tracks, and adjust the playback rate.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>MediaTransportControls has properties that let you control whether each button is shown and enabled.</source>
					<target>MediaTransportControls has properties that let you control whether each button is shown and enabled.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediatransportcontrols.iscompact.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can also set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsCompact</pc></pc> property to specify whether the controls are shown in one row or two.</source>
					<target>You can also set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IsCompact</pc></pc> property to specify whether the controls are shown in one row or two.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>However, there may be scenarios where you need to further customize the look of the control or change its behavior.</source>
					<target>However, there may be scenarios where you need to further customize the look of the control or change its behavior.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Here are some examples:</source>
					<target>Here are some examples:</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Change the icons, slider behavior, and colors.</source>
					<target>Change the icons, slider behavior, and colors.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Move less commonly used command buttons into an overflow menu.</source>
					<target>Move less commonly used command buttons into an overflow menu.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Change the order in which commands drop out when the control is resized.</source>
					<target>Change the order in which commands drop out when the control is resized.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Provide a command button that’s not in the default set.</source>
					<target>Provide a command button that’s not in the default set.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>You can customize the appearance of the control by modifying the default template.</source>
					<target>You can customize the appearance of the control by modifying the default template.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>To modify the control's behavior or add new commands, you can create a custom control that's derived from MediaTransportControls.</source>
					<target>To modify the control's behavior or add new commands, you can create a custom control that's derived from MediaTransportControls.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Customizable control templates are a powerful feature of the XAML platform, but there are also consequences that you should take into consideration.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc><ph dataRef="id3" id="ph1" />Customizable control templates are a powerful feature of the XAML platform, but there are also consequences that you should take into consideration.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>When you customize a template, it becomes a static part of your app and therefore will not receive any platform updates that are made to the template by Microsoft.</source>
					<target>When you customize a template, it becomes a static part of your app and therefore will not receive any platform updates that are made to the template by Microsoft.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>If template updates are made by Microsoft, you should take the new template and re-modify it in order to get the benefits of the updated template.</source>
					<target>If template updates are made by Microsoft, you should take the new template and re-modify it in order to get the benefits of the updated template.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Template structure</source>
					<target>Template structure</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.controltemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ControlTemplate</pc></pc> is part of the default style.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ControlTemplate</pc></pc> is part of the default style.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediatransportcontrols.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The transport control's default style is shown in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> class reference page.</source>
					<target>The transport control's default style is shown in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> class reference page.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>You can copy this default style into your project to modify it.</source>
					<target>You can copy this default style into your project to modify it.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>The ControlTemplate is divided into sections similar to other XAML control templates.</source>
					<target>The ControlTemplate is divided into sections similar to other XAML control templates.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The first section of the template contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> definitions for the various components of the MediaTransportControls.</source>
					<target>The first section of the template contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Style</pc></pc> definitions for the various components of the MediaTransportControls.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>The second section defines the various visual states that are used by the MediaTransportControls.</source>
					<target>The second section defines the various visual states that are used by the MediaTransportControls.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.grid.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The third section contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> that holds that various MediaTransportControls elements together and defines how the components are laid out.</source>
					<target>The third section contains the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Grid</pc></pc> that holds that various MediaTransportControls elements together and defines how the components are laid out.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
					<data id="id4">[</data>
					<data id="id5">]()</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />For more info about modifying templates, see <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Control templates</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc><ph dataRef="id3" id="ph1" />For more info about modifying templates, see <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Control templates</pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>You can use a text editor or similar editors in your IDE to open the XAML files in \(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Program Files</pc>)\Windows Kits\10\DesignTime\CommonConfiguration\Neutral\UAP\\(<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SDK version</pc>)\Generic.</source>
					<target>You can use a text editor or similar editors in your IDE to open the XAML files in \(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Program Files</pc>)\Windows Kits\10\DesignTime\CommonConfiguration\Neutral\UAP\\(<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SDK version</pc>)\Generic.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The default style and template for each control is defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">generic.xaml</pc> file.</source>
					<target>The default style and template for each control is defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">generic.xaml</pc> file.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>You can find the MediaTransportControls template in generic.xaml by searching for "MediaTransportControls".</source>
					<target>You can find the MediaTransportControls template in generic.xaml by searching for "MediaTransportControls".</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>In the following sections, you learn how to customize several of the main elements of the transport controls:</source>
					<target>In the following sections, you learn how to customize several of the main elements of the transport controls:</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.slider.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Slider</pc></pc>: allows a user to scrub through their media and also displays progress</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Slider</pc></pc>: allows a user to scrub through their media and also displays progress</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc>: contains all of the buttons.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc>: contains all of the buttons.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>For more info, see the Anatomy section of the MediaTransportControls reference topic.</source>
					<target>For more info, see the Anatomy section of the MediaTransportControls reference topic.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Customize the transport controls</source>
					<target>Customize the transport controls</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>If you want to modify only the appearance of the MediaTransportControls, you can create a copy of the default control style and template, and modify that.</source>
					<target>If you want to modify only the appearance of the MediaTransportControls, you can create a copy of the default control style and template, and modify that.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>However, if you also want to add to or modify the functionality of the control, you need to create a new class that derives from MediaTransportControls.</source>
					<target>However, if you also want to add to or modify the functionality of the control, you need to create a new class that derives from MediaTransportControls.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Re-template the control</source>
					<target>Re-template the control</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>To customize the MediaTransportControls default style and template</source>
					<target>To customize the MediaTransportControls default style and template</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Copy the default style from MediaTransportControls styles and templates into a ResourceDictionary in your project.</source>
					<target>Copy the default style from MediaTransportControls styles and templates into a ResourceDictionary in your project.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>Give the Style an x:Key value to identify it, like this.</source>
					<target>Give the Style an x:Key value to identify it, like this.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Add a MediaElement with MediaTransportControls to your UI.</source>
					<target>Add a MediaElement with MediaTransportControls to your UI.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Set the Style property of the MediaTransportControls element to your custom Style resource, as shown here.</source>
					<target>Set the Style property of the MediaTransportControls element to your custom Style resource, as shown here.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">]()</data>
					<data id="id3">[</data>
					<data id="id4">]()</data>
				</originalData>
				<segment state="initial">
					<source>For more info about modifying styles and templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Styling controls</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Control templates</pc>.</source>
					<target>For more info about modifying styles and templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Styling controls</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Control templates</pc>.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>Create a derived control</source>
					<target>Create a derived control</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>To add to or modify the functionality of the transport controls, you must create a new class that's derived from MediaTransportControls.</source>
					<target>To add to or modify the functionality of the transport controls, you must create a new class that's derived from MediaTransportControls.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">`CustomMediaTransportControls`</data>
					<data id="id2">[</data>
					<data id="id3">](http://go.microsoft.com/fwlink/p/?LinkId=620023)</data>
				</originalData>
				<segment state="initial">
					<source>A derived class called <ph dataRef="id1" id="ph1" /> is shown in the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Media Transport Controls sample</pc> and the remaining examples on this page.</source>
					<target>A derived class called <ph dataRef="id1" id="ph1" /> is shown in the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Media Transport Controls sample</pc> and the remaining examples on this page.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>To create a new class derived from MediaTransportControls</source>
					<target>To create a new class derived from MediaTransportControls</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>Add a new class file to your project.</source>
					<target>Add a new class file to your project.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>In Visual Studio, select Project &gt; Add Class.</source>
					<target>In Visual Studio, select Project &gt; Add Class.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The Add New Item dialog opens.</source>
					<target>The Add New Item dialog opens.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>In the Add New Item dialog, enter a name for the class file, then click Add.</source>
					<target>In the Add New Item dialog, enter a name for the class file, then click Add.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">`CustomMediaTransportControls`</data>
				</originalData>
				<segment state="initial">
					<source>(In the Media Transport Controls sample, the class is named <ph dataRef="id1" id="ph1" />.)</source>
					<target>(In the Media Transport Controls sample, the class is named <ph dataRef="id1" id="ph1" />.)</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Modify the class code to derive from the MediaTransportControls class.</source>
					<target>Modify the class code to derive from the MediaTransportControls class.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediatransportcontrols.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.resourcedictionary.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Copy the default style for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> into a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc> in your project.</source>
					<target>Copy the default style for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaTransportControls</pc></pc> into a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc> in your project.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>This is the style and template you modify.</source>
					<target>This is the style and template you modify.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>(In the Media Transport Controls sample, a new folder called "Themes" is created, and a ResourceDictionary file called generic.xaml is added to it.)</source>
					<target>(In the Media Transport Controls sample, a new folder called "Themes" is created, and a ResourceDictionary file called generic.xaml is added to it.)</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.style.targettype.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> of the style to the new custom control type.</source>
					<target>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetType</pc></pc> of the style to the new custom control type.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">`local:CustomMediaTransportControls`</data>
				</originalData>
				<segment state="initial">
					<source>(In the sample, the TargetType is changed to <ph dataRef="id1" id="ph1" />.)</source>
					<target>(In the sample, the TargetType is changed to <ph dataRef="id1" id="ph1" />.)</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.control.defaultstylekey.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DefaultStyleKey</pc></pc> of your custom class.</source>
					<target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DefaultStyleKey</pc></pc> of your custom class.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">`local:CustomMediaTransportControls`</data>
				</originalData>
				<segment state="initial">
					<source>This tells your custom class to use a Style with a TargetType of <ph dataRef="id1" id="ph1" />.</source>
					<target>This tells your custom class to use a Style with a TargetType of <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediaelement.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement</pc></pc> to your XAML markup and add the custom transport controls to it.</source>
					<target>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaElement</pc></pc> to your XAML markup and add the custom transport controls to it.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>One thing to note is that the APIs to hide, show, disable, and enable the default buttons still work with a customized template.</source>
					<target>One thing to note is that the APIs to hide, show, disable, and enable the default buttons still work with a customized template.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>You can now modify the control style and template to update the look of your custom control, and the control code to update its behavior.</source>
					<target>You can now modify the control style and template to update the look of your custom control, and the control code to update its behavior.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Working with the overflow menu</source>
					<target>Working with the overflow menu</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>You can move MediaTransportControls command buttons into an overflow menu, so that less commonly used commands are hidden until the user needs them.</source>
					<target>You can move MediaTransportControls command buttons into an overflow menu, so that less commonly used commands are hidden until the user needs them.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the MediaTransportControls template, the command buttons are contained in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc> element.</source>
					<target>In the MediaTransportControls template, the command buttons are contained in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CommandBar</pc></pc> element.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>The command bar has the concept of primary and secondary commands.</source>
					<target>The command bar has the concept of primary and secondary commands.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>The primary commands are the buttons that appear in the control by default and are always visible (unless you disable or hide the button).</source>
					<target>The primary commands are the buttons that appear in the control by default and are always visible (unless you disable or hide the button).</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>The secondary commands are shown in an overflow menu that appears when a user clicks the ellipsis (…) button.</source>
					<target>The secondary commands are shown in an overflow menu that appears when a user clicks the ellipsis (…) button.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](app-bars.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App bars and command bars</pc> article.</source>
					<target>For more info, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App bars and command bars</pc> article.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>To move an element from the command bar primary commands to the overflow menu, you need to edit the XAML control template.</source>
					<target>To move an element from the command bar primary commands to the overflow menu, you need to edit the XAML control template.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>To move a command to the overflow menu:</source>
					<target>To move a command to the overflow menu:</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">`MediaControlsCommandBar`</data>
				</originalData>
				<segment state="initial">
					<source>In the control template, find the CommandBar element named <ph dataRef="id1" id="ph1" />.</source>
					<target>In the control template, find the CommandBar element named <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.secondarycommands.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SecondaryCommands</pc></pc> section to the XAML for the CommandBar.</source>
					<target>Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SecondaryCommands</pc></pc> section to the XAML for the CommandBar.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.commandbar.primarycommands.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Put it after the closing tag for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryCommands</pc></pc>.</source>
					<target>Put it after the closing tag for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PrimaryCommands</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.appbarbutton.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To populate the menu with commands, cut and paste the XAML for the desired <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarButton</pc></pc> objects from the PrimaryCommands to the SecondaryCommands.</source>
					<target>To populate the menu with commands, cut and paste the XAML for the desired <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AppBarButton</pc></pc> objects from the PrimaryCommands to the SecondaryCommands.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">`PlaybackRateButton`</data>
				</originalData>
				<segment state="initial">
					<source>In this example, we move the <ph dataRef="id1" id="ph1" /> to the overflow menu.</source>
					<target>In this example, we move the <ph dataRef="id1" id="ph1" /> to the overflow menu.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Add a label to the button and remove the styling information, as shown here.</source>
					<target>Add a label to the button and remove the styling information, as shown here.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Because the overflow menu is comprised of text buttons, you must add a text label to the button and also remove the style that sets the height and width of the button.</source>
					<target>Because the overflow menu is comprised of text buttons, you must add a text label to the button and also remove the style that sets the height and width of the button.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Otherwise, it won't appear correctly in the overflow menu.</source>
					<target>Otherwise, it won't appear correctly in the overflow menu.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;nbsp;&amp;nbsp;</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />You must still make the button visible and enable it in order to use it in the overflow menu.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc><ph dataRef="id3" id="ph1" />You must still make the button visible and enable it in order to use it in the overflow menu.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>In this example, the PlaybackRateButton element isn't visible in the overflow menu unless the IsPlaybackRateButtonVisible property is true.</source>
					<target>In this example, the PlaybackRateButton element isn't visible in the overflow menu unless the IsPlaybackRateButtonVisible property is true.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>It's not enabled unless the IsPlaybackRateEnabled property is true.</source>
					<target>It's not enabled unless the IsPlaybackRateEnabled property is true.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>Setting these properties is shown in the previous section.</source>
					<target>Setting these properties is shown in the previous section.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Adding a custom button</source>
					<target>Adding a custom button</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>One reason you might want to customize MediaTransportControls is to add a custom command to the control.</source>
					<target>One reason you might want to customize MediaTransportControls is to add a custom command to the control.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Whether you add it as a primary command or a secondary command, the procedure for creating the command button and modifying its behavior is the same.</source>
					<target>Whether you add it as a primary command or a secondary command, the procedure for creating the command button and modifying its behavior is the same.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=620023)</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Media Transport Controls sample</pc>, a "rating" button is added to the primary commands.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Media Transport Controls sample</pc>, a "rating" button is added to the primary commands.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>To add a custom command button</source>
					<target>To add a custom command button</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Create an AppBarButton object and add it to the CommandBar in the control template.</source>
					<target>Create an AppBarButton object and add it to the CommandBar in the control template.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.frameworkelement.onapplytemplate.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.primitives.buttonbase.click.aspx)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnApplyTemplate</pc></pc> override, get the button from the template and register a handler for its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event.</source>
					<target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnApplyTemplate</pc></pc> override, get the button from the template and register a handler for its <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Click</pc></pc> event.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">`CustomMediaTransportControls`</data>
				</originalData>
				<segment state="initial">
					<source>This code goes in the <ph dataRef="id1" id="ph1" /> class.</source>
					<target>This code goes in the <ph dataRef="id1" id="ph1" /> class.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Add code to the Click event handler to perform the action that occurs when the button is clicked.</source>
					<target>Add code to the Click event handler to perform the action that occurs when the button is clicked.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Here's the complete code for the class.</source>
					<target>Here's the complete code for the class.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Modifying the slider</source>
					<target>Modifying the slider</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.slider.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The "seek" control of the MediaTransportControls is provided by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Slider</pc></pc> element.</source>
					<target>The "seek" control of the MediaTransportControls is provided by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Slider</pc></pc> element.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>One way you can customize it is to change the granularity of the seek behavior.</source>
					<target>One way you can customize it is to change the granularity of the seek behavior.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>The default seek slider is divided into 100 parts, so the seek behavior is limited to that many sections.</source>
					<target>The default seek slider is divided into 100 parts, so the seek behavior is limited to that many sections.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.controls.mediaelement.mediaopened.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can change the granularity of the seek slider by getting the Slider from the XAML visual tree in your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc> event handler.</source>
					<target>You can change the granularity of the seek slider by getting the Slider from the XAML visual tree in your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">MediaOpened</pc></pc> event handler.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.visualtreehelper.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This example shows how to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualTreeHelper</pc></pc> to get a reference to the Slider, then change the default step frequency of the slider from 1% to 0.1% (1000 steps) if the media is longer than 120 minutes.</source>
					<target>This example shows how to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualTreeHelper</pc></pc> to get a reference to the Slider, then change the default step frequency of the slider from 1% to 0.1% (1000 steps) if the media is longer than 120 minutes.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">`MediaElement1`</data>
				</originalData>
				<segment state="initial">
					<source>The MediaElement is named <ph dataRef="id1" id="ph1" />.</source>
					<target>The MediaElement is named <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
					<target>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://go.microsoft.com/fwlink/p/?linkid=258743)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</source>
					<target>For Windows 8.1 guidance, please download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 8.1 guidelines PDF</pc>.\]</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>Related articles</source>
					<target>Related articles</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>Media playback</source>
					<target>Media playback</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>