<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">9661b9e5622483883d4887d99076610a41aa06d9</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\gaming\tutorial--defining-the-main-game-loop.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">5cdd758e80ae07996d3425b97b3bca75e670e3ad</mda:meta><mda:meta type="olxliffhash">634906299f38e163171bc46c86514b1f3aeb7794</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Define the main game object</source>
					<target>Define the main game object</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</source>
					<target>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Define the main game object</source>
					<target>Define the main game object</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>At this point, we've laid out the basic framework of the sample game, and we implemented a state machine that handles the high-level user and system behaviors.</source>
					<target>At this point, we've laid out the basic framework of the sample game, and we implemented a state machine that handles the high-level user and system behaviors.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>But we haven't examined the part that makes the game sample an actual game: the rules and mechanics, and how they're implemented!</source>
					<target>But we haven't examined the part that makes the game sample an actual game: the rules and mechanics, and how they're implemented!</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</source>
					<target>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Objective</source>
					<target>Objective</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>To apply the basic development techniques when implementing the rules and mechanics of a simple Universal Windows Platform (UWP) game using DirectX.</source>
					<target>To apply the basic development techniques when implementing the rules and mechanics of a simple Universal Windows Platform (UWP) game using DirectX.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Considering the game's flow</source>
					<target>Considering the game's flow</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>The majority of the game's basic structure is defined in these files:</source>
					<target>The majority of the game's basic structure is defined in these files:</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>App.cpp</source>
					<target>App.cpp</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Simple3DGame.cpp</source>
					<target>Simple3DGame.cpp</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--building-the-games-metro-style-app-framework.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Defining the game's UWP app framework</pc>, we reviewed the game framework defined in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">App.cpp</pc>.</source>
					<target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Defining the game's UWP app framework</pc>, we reviewed the game framework defined in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">App.cpp</pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame.cpp</pc> provides the code for a class, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame</pc>, which specifies the implementation of the game play itself.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame.cpp</pc> provides the code for a class, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame</pc>, which specifies the implementation of the game play itself.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Earlier, we considered the treatment of the sample game as a UWP app.</source>
					<target>Earlier, we considered the treatment of the sample game as a UWP app.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Now, we look at the code that makes it a game.</source>
					<target>Now, we look at the code that makes it a game.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](#code_sample)</data>
				</originalData>
				<segment state="initial">
					<source>The complete code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame.h/.cpp</pc> is provided in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete sample code for this section</pc>.</source>
					<target>The complete code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame.h/.cpp</pc> is provided in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete sample code for this section</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Let's take a look at the definition of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc> class.</source>
					<target>Let's take a look at the definition of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc> class.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Defining the core game object</source>
					<target>Defining the core game object</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>When the app singleton starts, the view provider's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> method creates an instance of the main game class, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame</pc> object.</source>
					<target>When the app singleton starts, the view provider's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc> method creates an instance of the main game class, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame</pc> object.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>This object contains the methods that communicate changes in game state to the state machine defined in the app framework, or from the app to the game object itself.</source>
					<target>This object contains the methods that communicate changes in game state to the state machine defined in the app framework, or from the app to the game object itself.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>It also contains methods that return info for updating the game's overlay bitmap and heads-up display, and for updating the animations and physics (the dynamics) in the game.</source>
					<target>It also contains methods that return info for updating the game's overlay bitmap and heads-up display, and for updating the animations and physics (the dynamics) in the game.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--assembling-the-rendering-pipeline.md)</data>
				</originalData>
				<segment state="initial">
					<source>The code for obtaining the graphics device resources used by the game is found in GameRenderer.cpp, which we discuss next in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</source>
					<target>The code for obtaining the graphics device resources used by the game is found in GameRenderer.cpp, which we discuss next in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc> looks like this:</source>
					<target>The code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc> looks like this:</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>First, let's review the internal methods defined on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc>.</source>
					<target>First, let's review the internal methods defined on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple3DGame</pc>.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Initialize</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Sets the starting values of the global variables and initializes the game objects.</source>
					<target>Sets the starting values of the global variables and initializes the game objects.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadGame</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadGame</pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Initializes a new level and starts loading it.</source>
					<target>Initializes a new level and starts loading it.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadLevelAsync</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadLevelAsync</pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dd492418.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>Starts an async task (see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parallel Patterns Library</pc> for more details) to initialize the level and then invoke an async task on the renderer to load the device specific level resources.</source>
					<target>Starts an async task (see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parallel Patterns Library</pc> for more details) to initialize the level and then invoke an async task on the renderer to load the device specific level resources.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476379)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This method runs in a separate thread; as a result, only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device</pc></pc> methods (as opposed to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext</pc></pc> methods) can be called from this thread.</source>
					<target>This method runs in a separate thread; as a result, only <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device</pc></pc> methods (as opposed to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext</pc></pc> methods) can be called from this thread.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Any device context methods are called in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FinalizeLoadLevel</pc> method.</source>
					<target>Any device context methods are called in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FinalizeLoadLevel</pc> method.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FinalizeLoadLevel</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">FinalizeLoadLevel</pc>.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Completes any work for level loading that needs to be done on the main thread.</source>
					<target>Completes any work for level loading that needs to be done on the main thread.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This includes any calls to Direct3D 11 device context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc></pc>) methods.</source>
					<target>This includes any calls to Direct3D 11 device context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc></pc>) methods.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StartLevel</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">StartLevel</pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Starts the game play for a new level.</source>
					<target>Starts the game play for a new level.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PauseGame</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PauseGame</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Pauses the game.</source>
					<target>Pauses the game.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc>.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Runs an iteration of the game loop.</source>
					<target>Runs an iteration of the game loop.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It's called from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App::Update</pc> one time every iteration of the game loop if the game state is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Active</pc>.</source>
					<target>It's called from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App::Update</pc> one time every iteration of the game loop if the game state is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Active</pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnSuspending</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnResuming</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnSuspending</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnResuming</pc>.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Suspends and resumes the game's audio, respectively.</source>
					<target>Suspends and resumes the game's audio, respectively.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>And the private methods:</source>
					<target>And the private methods:</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadSavedState</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SaveState</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadSavedState</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SaveState</pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Loads and saves the current state of the game, respectively.</source>
					<target>Loads and saves the current state of the game, respectively.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SaveHighScore</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadHighScore</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">SaveHighScore</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LoadHighScore</pc>.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Saves and loads the high score across games, respectively.</source>
					<target>Saves and loads the high score across games, respectively.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">InitializeAmmo</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">InitializeAmmo</pc>.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Resets the state of each sphere object used as ammunition back to its original state for the beginning of each round.</source>
					<target>Resets the state of each sphere object used as ammunition back to its original state for the beginning of each round.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDynamics</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">UpdateDynamics</pc>.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>This is an important method, because it updates all the game objects based on canned animation routines, physics, and control input.</source>
					<target>This is an important method, because it updates all the game objects based on canned animation routines, physics, and control input.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>This is the heart of the interactivity that defines the game.</source>
					<target>This is the heart of the interactivity that defines the game.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#update_game)</data>
				</originalData>
				<segment state="initial">
					<source>We talk about it more in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Updating the game</pc> section.</source>
					<target>We talk about it more in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Updating the game</pc> section.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The other public methods are property getters that return game play and overlay specific information to the app framework for display.</source>
					<target>The other public methods are property getters that return game play and overlay specific information to the app framework for display.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Defining the game state variables</source>
					<target>Defining the game state variables</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>One function of the game object is to serve as a container for the data that defines a game session, level, or lifetime, depending on how you define your game at a high level.</source>
					<target>One function of the game object is to serve as a container for the data that defines a game session, level, or lifetime, depending on how you define your game at a high level.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>In this case, the game state data is for the lifetime of the game, initialized one time when a user launches the game.</source>
					<target>In this case, the game state data is for the lifetime of the game, initialized one time when a user launches the game.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Here's the complete set of definitions for the game object's state variables.</source>
					<target>Here's the complete set of definitions for the game object's state variables.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>At the top of the code example, there are four objects whose instances are updated as the game loop runs.</source>
					<target>At the top of the code example, there are four objects whose instances are updated as the game loop runs.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> object.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> object.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>This object represents the player input.</source>
					<target>This object represents the player input.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](tutorial--adding-controls.md)</data>
				</originalData>
				<segment state="initial">
					<source>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adding controls</pc>.)</source>
					<target>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adding controls</pc>.)</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GameRenderer</pc> object.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GameRenderer</pc> object.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This object represents the Direct3D 11 renderer derived from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXBase</pc> class that handles all the device-specific objects and their rendering.</source>
					<target>This object represents the Direct3D 11 renderer derived from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectXBase</pc> class that handles all the device-specific objects and their rendering.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--assembling-the-rendering-pipeline.md)</data>
				</originalData>
				<segment state="initial">
					<source>(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering pipeline</pc>).</source>
					<target>(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering pipeline</pc>).</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Camera</pc> object.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Camera</pc> object.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>This object represents the player's first-person view of the game world.</source>
					<target>This object represents the player's first-person view of the game world.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](tutorial--assembling-the-rendering-pipeline.md)</data>
				</originalData>
				<segment state="initial">
					<source>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Camera</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Assembling the rendering pipeline</pc>.)</source>
					<target>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Camera</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Assembling the rendering pipeline</pc>.)</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audio</pc> object.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audio</pc> object.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>This object controls the audio playback for the game.</source>
					<target>This object controls the audio playback for the game.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](tutorial--adding-sound.md)</data>
				</originalData>
				<segment state="initial">
					<source>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audio</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adding sound</pc>.)</source>
					<target>(For more info about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audio</pc> object, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adding sound</pc>.)</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>The rest of the game variables contain the lists of the primitives and their respective in-game amounts, and game play specific data and constraints.</source>
					<target>The rest of the game variables contain the lists of the primitives and their respective in-game amounts, and game play specific data and constraints.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Let's see how the sample configures these variables when the game is initialized.</source>
					<target>Let's see how the sample configures these variables when the game is initialized.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Initializing and starting the game</source>
					<target>Initializing and starting the game</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>When a player starts the game, the game object must initialize its state, create and add the overlay, set the variables that track the player's performance, and instantiate the objects that it will use to build the levels.</source>
					<target>When a player starts the game, the game object must initialize its state, create and add the overlay, set the variables that track the player's performance, and instantiate the objects that it will use to build the levels.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>The sample game sets up the components of the game object in this order:</source>
					<target>The sample game sets up the components of the game object in this order:</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>A new audio playback object is created.</source>
					<target>A new audio playback object is created.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>Arrays for the game's graphic primitives are created, including arrays for the level primitives, ammo, and obstacles.</source>
					<target>Arrays for the game's graphic primitives are created, including arrays for the level primitives, ammo, and obstacles.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br241619)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>A location for saving game state data is created, named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Game</pc>, and placed in the app data settings storage location specified by <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ApplicationData::Current</pc></pc>.</source>
					<target>A location for saving game state data is created, named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Game</pc>, and placed in the app data settings storage location specified by <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ApplicationData::Current</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>A game timer and the initial in-game overlay bitmap are created.</source>
					<target>A game timer and the initial in-game overlay bitmap are created.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>A new camera is created with a specific set of view and projection parameters.</source>
					<target>A new camera is created with a specific set of view and projection parameters.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>The input device (the controller) is set to the same starting pitch and yaw as the camera, so the player has a 1-to-1 correspondence between the starting control position and the camera position.</source>
					<target>The input device (the controller) is set to the same starting pitch and yaw as the camera, so the player has a 1-to-1 correspondence between the starting control position and the camera position.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>The player object is created and set to active.</source>
					<target>The player object is created and set to active.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>We use a sphere object to detect the player's proximity to walls and obstacles and to keep the camera from getting put in a position that might break immersion.</source>
					<target>We use a sphere object to detect the player's proximity to walls and obstacles and to keep the camera from getting put in a position that might break immersion.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>The game world primitive is created.</source>
					<target>The game world primitive is created.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>The cylinder obstacles are created.</source>
					<target>The cylinder obstacles are created.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The targets (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Face</pc> objects) are created and numbered.</source>
					<target>The targets (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Face</pc> objects) are created and numbered.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>The ammo spheres are created.</source>
					<target>The ammo spheres are created.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>The levels are created.</source>
					<target>The levels are created.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>The high score is loaded.</source>
					<target>The high score is loaded.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>Any prior saved game state is loaded.</source>
					<target>Any prior saved game state is loaded.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>The game now has instances of all the key components: the world, the player, the obstacles, the targets, and the ammo spheres.</source>
					<target>The game now has instances of all the key components: the world, the player, the obstacles, the targets, and the ammo spheres.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>It also has instances of the levels, which represent configurations of all of the above components and their behaviors for each specific level.</source>
					<target>It also has instances of the levels, which represent configurations of all of the above components and their behaviors for each specific level.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Let's see how the game builds the levels.</source>
					<target>Let's see how the game builds the levels.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Building and loading the game's levels</source>
					<target>Building and loading the game's levels</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Most of the heavy lifting for the level construction is done in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level.h/.cpp</pc> file, which we won't delve into, because it focuses on a very specific implementation.</source>
					<target>Most of the heavy lifting for the level construction is done in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level.h/.cpp</pc> file, which we won't delve into, because it focuses on a very specific implementation.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The important thing is that the code for each level is run as a separate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LevelN</pc> object.</source>
					<target>The important thing is that the code for each level is run as a separate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LevelN</pc> object.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you'd like to extend the game, you can create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level</pc> object that took an assigned number as a parameter and randomly placed the obstacles and targets.</source>
					<target>If you'd like to extend the game, you can create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level</pc> object that took an assigned number as a parameter and randomly placed the obstacles and targets.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Or, you can have it load level configuration data from a resource file, or even the Internet!</source>
					<target>Or, you can have it load level configuration data from a resource file, or even the Internet!</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](#code_sample)</data>
				</originalData>
				<segment state="initial">
					<source>The complete code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level.h/.cpp</pc> is provided in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete sample code for this section</pc>.</source>
					<target>The complete code for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Level.h/.cpp</pc> is provided in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Complete sample code for this section</pc>.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>Defining the game play</source>
					<target>Defining the game play</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>At this point, we have all the components we need to assemble the game.</source>
					<target>At this point, we have all the components we need to assemble the game.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>The levels have been constructed in memory from the primitives, and are ready for the player to start interacting with them in some fashion.</source>
					<target>The levels have been constructed in memory from the primitives, and are ready for the player to start interacting with them in some fashion.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Now, the best games react instantly to player input, and provide immediate feedback.</source>
					<target>Now, the best games react instantly to player input, and provide immediate feedback.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>This is true for any type of a game, from twitch-action, real-time shoot-em-ups to thoughtful, turn-based strategy games.</source>
					<target>This is true for any type of a game, from twitch-action, real-time shoot-em-ups to thoughtful, turn-based strategy games.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--building-the-games-metro-style-app-framework.md)</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Defining the game's UWP framework</pc>, we looked at the overall state machine that governs the flow of the game.</source>
					<target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Defining the game's UWP framework</pc>, we looked at the overall state machine that governs the flow of the game.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702093)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Remember, the sample implements this flow as a loop inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">App</pc> class, which itself is an implementation of a DirectX view provider.</source>
					<target>Remember, the sample implements this flow as a loop inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">App</pc> class, which itself is an implementation of a DirectX view provider.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>The important state transitions must be controlled by the player, and must provide clear feedback.</source>
					<target>The important state transitions must be controlled by the player, and must provide clear feedback.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Any delay in this feedback breaks the sense of immersion.</source>
					<target>Any delay in this feedback breaks the sense of immersion.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Here is a diagram representing the basic flow of the game and its high-level states.</source>
					<target>Here is a diagram representing the basic flow of the game and its high-level states.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>a diagram showing the main state machine for our game</source>
					<target>a diagram showing the main state machine for our game</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>When the sample game starts play, the game object can be in one of three states:</source>
					<target>When the sample game starts play, the game object can be in one of three states:</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Waiting for resources</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Waiting for resources</pc>.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>This state is activated when the game object is initialized or when the components of a level are being loaded.</source>
					<target>This state is activated when the game object is initialized or when the components of a level are being loaded.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>If this state was triggered by a request to load a prior game, the game stats overlay is displayed; if it was triggered by a request to play a level, the level start overlay is displayed.</source>
					<target>If this state was triggered by a request to load a prior game, the game stats overlay is displayed; if it was triggered by a request to play a level, the level start overlay is displayed.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The completion of resource loading causes the game to pass through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resources loaded</pc> state and then transition into the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Waiting for press</pc> state.</source>
					<target>The completion of resource loading causes the game to pass through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resources loaded</pc> state and then transition into the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Waiting for press</pc> state.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Waiting for press</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Waiting for press</pc>.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>This state is activated when the game is paused, either by the player or by the system (after, say, loading resources).</source>
					<target>This state is activated when the game is paused, either by the player or by the system (after, say, loading resources).</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>When the player is ready to exit this state, the player is prompted to load a new game state (LoadGame), start or restart the loaded level (StartLevel), or continue the current level (ContinueGame).</source>
					<target>When the player is ready to exit this state, the player is prompted to load a new game state (LoadGame), start or restart the loaded level (StartLevel), or continue the current level (ContinueGame).</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dynamics</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dynamics</pc>.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>If a player's press input is completed and the resulting action is to start or continue a level, the game object transitions into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dynamics</pc> state.</source>
					<target>If a player's press input is completed and the resulting action is to start or continue a level, the game object transitions into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dynamics</pc> state.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>The game is played in this state, and the game world and player objects are updated here based on animation routines and player input.</source>
					<target>The game is played in this state, and the game world and player objects are updated here based on animation routines and player input.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>This state is left when the player triggers a pause event, either by pressing P, by taking an action that deactivates the main window, or by completing a level or the game.</source>
					<target>This state is left when the player triggers a pause event, either by pressing P, by taking an action that deactivates the main window, or by completing a level or the game.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](tutorial--building-the-games-metro-style-app-framework.md)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>Now, let's look at specific code in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc> class (see: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Defining the game's UWP framework</pc>) for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Update</pc> method that implements this state machine.</source>
					<target>Now, let's look at specific code in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc> class (see: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Defining the game's UWP framework</pc>) for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Update</pc> method that implements this state machine.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--adding-controls.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The first thing this method does is call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> instance's own <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc> method, which updates the data from the controller.</source>
					<target>The first thing this method does is call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MoveLookController</pc> instance's own <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc> method, which updates the data from the controller.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>This data includes the direction the player's view (the camera) is facing and the velocity of the player's movement.</source>
					<target>This data includes the direction the player's view (the camera) is facing and the velocity of the player's movement.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When the game is in the Dynamics state, that is, when the player is playing, the work is handled in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc> method, with this call:</source>
					<target>When the game is in the Dynamics state, that is, when the player is playing, the work is handled in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc> method, with this call:</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc> handles the set of data that defines the current state of the game play for the current iteration of the game loop.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc> handles the set of data that defines the current state of the game play for the current iteration of the game loop.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>It flows like this:</source>
					<target>It flows like this:</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>The method updates the timer that counts down the seconds until the level is completed, and tests to see if the level's time has expired.</source>
					<target>The method updates the timer that counts down the seconds until the level is completed, and tests to see if the level's time has expired.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>This is one of the rules of the game: when time runs out without all the targets getting shot, the game is over.</source>
					<target>This is one of the rules of the game: when time runs out without all the targets getting shot, the game is over.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If time has run out, the method sets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimeExpired</pc> game state, and returns to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc> method in the previous code.</source>
					<target>If time has run out, the method sets the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TimeExpired</pc> game state, and returns to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc> method in the previous code.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>If time remains, the move-look controller is polled for an update to the camera position; specifically, an update to the angle of the view normal projecting from the camera plane (where the player is looking), and the distance that angle has moved from the previous time the controller was polled.</source>
					<target>If time remains, the move-look controller is polled for an update to the camera position; specifically, an update to the angle of the view normal projecting from the camera plane (where the player is looking), and the distance that angle has moved from the previous time the controller was polled.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>The camera is updated based on the new data from the move-look controller.</source>
					<target>The camera is updated based on the new data from the move-look controller.</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>The dynamics, or the animations and behaviors of objects in the game world independent of player control, are updated.</source>
					<target>The dynamics, or the animations and behaviors of objects in the game world independent of player control, are updated.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>In the game sample, this is the motion of the ammo spheres that have been fired, the animation of the pillar obstacles and the movement of the targets.</source>
					<target>In the game sample, this is the motion of the ammo spheres that have been fired, the animation of the pillar obstacles and the movement of the targets.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>The method checks to see if the criteria for the successful completion of a level have been met.</source>
					<target>The method checks to see if the criteria for the successful completion of a level have been met.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>If so, it finalizes the score for the level and checks to see if this is the last level (of 6).</source>
					<target>If so, it finalizes the score for the level and checks to see if this is the last level (of 6).</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If it's the last level, the method returns the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GameComplete</pc> game state; otherwise, it returns the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LevelComplete</pc> game state.</source>
					<target>If it's the last level, the method returns the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GameComplete</pc> game state; otherwise, it returns the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">LevelComplete</pc> game state.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If the level isn't complete, the method sets the game state to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Active</pc> and returns.</source>
					<target>If the level isn't complete, the method sets the game state to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Active</pc> and returns.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Here's what <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc>, found in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame.cpp</pc>, looks like in code.</source>
					<target>Here's what <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunGame</pc>, found in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Simple3DGame.cpp</pc>, looks like in code.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<originalData>
					<data id="id1">`UpdateDynamics()`</data>
				</originalData>
				<segment state="initial">
					<source>Here's the key call: <ph dataRef="id1" id="ph1" />.</source>
					<target>Here's the key call: <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>It's what brings the game world to life.</source>
					<target>It's what brings the game world to life.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<segment state="initial">
					<source>Let's review it!</source>
					<target>Let's review it!</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<segment state="initial">
					<source>Updating the game world</source>
					<target>Updating the game world</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>A fast and fluid game experience is one where the world feels <pc dataRefEnd="id2" dataRefStart="id1" id="p1">alive</pc>, where the game itself is in motion independent of player input.</source>
					<target>A fast and fluid game experience is one where the world feels <pc dataRefEnd="id2" dataRefStart="id1" id="p1">alive</pc>, where the game itself is in motion independent of player input.</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>Trees wave in the wind, waves crest along shore lines, machinery smokes and shines, and alien monsters stretch and salivate.</source>
					<target>Trees wave in the wind, waves crest along shore lines, machinery smokes and shines, and alien monsters stretch and salivate.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>Imagine what a game would be like if everything was frozen, with the graphics only moving when the player provided input.</source>
					<target>Imagine what a game would be like if everything was frozen, with the graphics only moving when the player provided input.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>It'd be weird and not very, well, immersive.</source>
					<target>It'd be weird and not very, well, immersive.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>Immersion, for the player, comes from the feeling of being an agent in a living, breathing world.</source>
					<target>Immersion, for the player, comes from the feeling of being an agent in a living, breathing world.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>The game loop should always keep updating the game world and running the animation routines, be they canned or based on physical algorithms or just plain random, except when the game is specifically paused.</source>
					<target>The game loop should always keep updating the game world and running the animation routines, be they canned or based on physical algorithms or just plain random, except when the game is specifically paused.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>In the game sample, this principle is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dynamics</pc>, and it encompasses the rise and fall of the pillar obstacles, and the motion and physical behaviors of the ammo spheres as they are fired.</source>
					<target>In the game sample, this principle is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dynamics</pc>, and it encompasses the rise and fall of the pillar obstacles, and the motion and physical behaviors of the ammo spheres as they are fired.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>It also encompasses the interaction between objects, including collisions between the player sphere and the world, or between the ammo and the obstacles and targets.</source>
					<target>It also encompasses the interaction between objects, including collisions between the player sphere and the world, or between the ammo and the obstacles and targets.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>The code that implements these dynamics looks like this:</source>
					<target>The code that implements these dynamics looks like this:</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>(This code example has been abbreviated for readability.</source>
					<target>(This code example has been abbreviated for readability.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>The full working code is found in the complete code sample at the bottom of this topic.)</source>
					<target>The full working code is found in the complete code sample at the bottom of this topic.)</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>This method deals with four sets of computations:</source>
					<target>This method deals with four sets of computations:</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>The positions of the fired ammo spheres in the world.</source>
					<target>The positions of the fired ammo spheres in the world.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<segment state="initial">
					<source>The animation of the pillar obstacles.</source>
					<target>The animation of the pillar obstacles.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>The intersection of the player and the world boundaries.</source>
					<target>The intersection of the player and the world boundaries.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>The collisions of the ammo spheres with the obstacles, the targets, other ammo spheres, and the world.</source>
					<target>The collisions of the ammo spheres with the obstacles, the targets, other ammo spheres, and the world.</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The animation of the obstacles is a loop defined in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Animate.h/.cpp</pc>.</source>
					<target>The animation of the obstacles is a loop defined in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Animate.h/.cpp</pc>.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>The behavior of the ammo and any collisions are defined by simplified physics algorithms, supplied in the previous code and parameterized by a set of global constants for the game world, including gravity and material properties.</source>
					<target>The behavior of the ammo and any collisions are defined by simplified physics algorithms, supplied in the previous code and parameterized by a set of global constants for the game world, including gravity and material properties.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>This is all computed in the game world coordinate space.</source>
					<target>This is all computed in the game world coordinate space.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>Now that we've updated all the objects in the scene and calculated any collisions, we need to use that info to draw the corresponding visual changes.</source>
					<target>Now that we've updated all the objects in the scene and calculated any collisions, we need to use that info to draw the corresponding visual changes.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>After Update completes in the current iteration of the game loop, the sample immediately calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Render</pc> to take the updated object data and generate a new scene to present to the player.</source>
					<target>After Update completes in the current iteration of the game loop, the sample immediately calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Render</pc> to take the updated object data and generate a new scene to present to the player.</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>Let's look at the render method now.</source>
					<target>Let's look at the render method now.</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>Rendering the game world's graphics</source>
					<target>Rendering the game world's graphics</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>We recommend that the graphics in a game update as often as possible, which, at maximum, is every time the main game loop iterates.</source>
					<target>We recommend that the graphics in a game update as often as possible, which, at maximum, is every time the main game loop iterates.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>As the loop iterates, the game is updated, with or without player input.</source>
					<target>As the loop iterates, the game is updated, with or without player input.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>This allows the animations and behaviors that are calculated to be displayed smoothly.</source>
					<target>This allows the animations and behaviors that are calculated to be displayed smoothly.</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<segment state="initial">
					<source>Imagine if we had a simple scene of water that only moved when the player pressed a button.</source>
					<target>Imagine if we had a simple scene of water that only moved when the player pressed a button.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>That would make for terribly boring visuals.</source>
					<target>That would make for terribly boring visuals.</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>A good game looks smooth and fluid.</source>
					<target>A good game looks smooth and fluid.</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>Recall the sample game's loop, as shown here.</source>
					<target>Recall the sample game's loop, as shown here.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>If the game's main window is visible, and isn't snapped or deactivated, the game continues to update and render the results of that update.</source>
					<target>If the game's main window is visible, and isn't snapped or deactivated, the game continues to update and render the results of that update.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The method we examine now renders a representation of that state immediately after the state is updated in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> with a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc>, which we discussed in the previous section.</source>
					<target>The method we examine now renders a representation of that state immediately after the state is updated in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> with a call to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Update</pc>, which we discussed in the previous section.</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--assembling-the-rendering-pipeline.md)</data>
				</originalData>
				<segment state="initial">
					<source>The complete code for this method is in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</source>
					<target>The complete code for this method is in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>This method draws the projection of the 3D world, and then draws the Direct2D overlay on top of it.</source>
					<target>This method draws the projection of the 3D world, and then draws the Direct2D overlay on top of it.</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>When completed, it presents the final swap chain with the combined buffers for display.</source>
					<target>When completed, it presents the final swap chain with the combined buffers for display.</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<segment state="initial">
					<source>Be aware that there are two states for the sample game's Direct2D overlay: one where the game displays the game info overlay that contains the bitmap for the pause menu, and one where the game displays the cross hairs along with the rectangles for the touchscreen move-look controller.</source>
					<target>Be aware that there are two states for the sample game's Direct2D overlay: one where the game displays the game info overlay that contains the bitmap for the pause menu, and one where the game displays the cross hairs along with the rectangles for the touchscreen move-look controller.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<segment state="initial">
					<source>The score text is drawn in both states.</source>
					<target>The score text is drawn in both states.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>Next steps</source>
					<target>Next steps</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>By now, you're probably curious about the actual rendering engine: how those calls to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Render</pc> methods on the updated primitives get turned into pixels on your screen.</source>
					<target>By now, you're probably curious about the actual rendering engine: how those calls to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Render</pc> methods on the updated primitives get turned into pixels on your screen.</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--assembling-the-rendering-pipeline.md)</data>
				</originalData>
				<segment state="initial">
					<source>We cover that in detail in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</source>
					<target>We cover that in detail in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assembling the rendering framework</pc>.</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](tutorial--adding-controls.md)</data>
				</originalData>
				<segment state="initial">
					<source>If you're more interested in how the player controls update the game state, then check out <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding controls</pc>.</source>
					<target>If you're more interested in how the player controls update the game state, then check out <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding controls</pc>.</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>Complete code sample for this section</source>
					<target>Complete code sample for this section</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>Simple3DGame.h</source>
					<target>Simple3DGame.h</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>Simple3DGame.cpp</source>
					<target>Simple3DGame.cpp</target>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<segment state="initial">
					<source>Level.h</source>
					<target>Level.h</target>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<segment state="initial">
					<source>Level.cpp</source>
					<target>Level.cpp</target>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<segment state="initial">
					<source>Level1.h</source>
					<target>Level1.h</target>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<segment state="initial">
					<source>Level1.cpp</source>
					<target>Level1.cpp</target>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>Level2.h</source>
					<target>Level2.h</target>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>Level2.cpp</source>
					<target>Level2.cpp</target>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<segment state="initial">
					<source>Level3.h</source>
					<target>Level3.h</target>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>Level3.cpp</source>
					<target>Level3.cpp</target>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>Level4.h</source>
					<target>Level4.h</target>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<segment state="initial">
					<source>Level4.cpp</source>
					<target>Level4.cpp</target>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>Level5.h</source>
					<target>Level5.h</target>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>Level5.cpp</source>
					<target>Level5.cpp</target>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>Level6.h</source>
					<target>Level6.h</target>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<segment state="initial">
					<source>Level6.cpp</source>
					<target>Level6.cpp</target>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<segment state="initial">
					<source>Animate.h</source>
					<target>Animate.h</target>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<segment state="initial">
					<source>Animate.cpp</source>
					<target>Animate.cpp</target>
				</segment>
			</unit>
			<unit id="311" translate="yes">
				<segment state="initial">
					<source>Note</source>
					<target>Note</target>
				</segment>
			</unit>
			<unit id="312" translate="yes">
				<segment state="initial">
					<source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
					<target>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
				</segment>
			</unit>
			<unit id="313" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
					<target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
				</segment>
			</unit>
			<unit id="314" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="315" translate="yes">
				<segment state="initial">
					<source>Create a simple UWP game with DirectX</source>
					<target>Create a simple UWP game with DirectX</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>