<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">54bbdc700dfec7d910db7e3b3a2fcdff9ed30d2a</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\globalizing\prepare-your-app-for-localization.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">8b19a865d018da2e8caa471eee2b790b3e8b4af4</mda:meta><mda:meta type="olxliffhash">d2cbd4f3b208479174d6555df08f6e7b96e1ddb5</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Prepare your app for localization to other markets, languages, or regions.</source>
					<target>Prepare your app for localization to other markets, languages, or regions.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Prepare your app for localization</source>
					<target>Prepare your app for localization</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Prepare your app for localization</source>
					<target>Prepare your app for localization</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Prepare your app for localization to other markets, languages, or regions.</source>
					<target>Prepare your app for localization to other markets, languages, or regions.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](guidelines-and-checklist-for-globalizing-your-app.md)</data>
				</originalData>
				<segment state="initial">
					<source>Before you get started, be sure to read through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">do's and don'ts</pc>.</source>
					<target>Before you get started, be sure to read through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">do's and don'ts</pc>.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>Use resource files and qualifiers.</source>
					<target>Use resource files and qualifiers.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Be sure to specify the UI strings of your app in resource files, instead of placing them in your code.</source>
					<target>Be sure to specify the UI strings of your app in resource files, instead of placing them in your code.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](put-ui-strings-into-resources.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more detail, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Put UI strings into resources</pc>.</source>
					<target>For more detail, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Put UI strings into resources</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Specify images or other file resources with the appropriate language tag in their file or folder.</source>
					<target>Specify images or other file resources with the appropriate language tag in their file or folder.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Be aware that it takes a significant amount of system resources to localize images, audio, and video, so it’s best to use neutral media assets whenever you can.</source>
					<target>Be aware that it takes a significant amount of system resources to localize images, audio, and video, so it’s best to use neutral media assets whenever you can.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</data>
				</originalData>
				<segment state="initial">
					<source>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc>.</source>
					<target>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Add contextual comments.</source>
					<target>Add contextual comments.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Add localization comments to your app resource files.</source>
					<target>Add localization comments to your app resource files.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>The comments are visible to the localizer, and should provide contextual information that helps the localizer to accurately translate the resources.</source>
					<target>The comments are visible to the localizer, and should provide contextual information that helps the localizer to accurately translate the resources.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>The comments should also provide sufficient constraint information on the resource, so that translation does not break the software.</source>
					<target>The comments should also provide sufficient constraint information on the resource, so that translation does not break the software.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>Optionally, the comments can be logged by the Makepri.exe tool.</source>
					<target>Optionally, the comments can be logged by the Makepri.exe tool.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Resw files (resources created in Visual Studio for apps using XAML) have a comment element.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Resw files (resources created in Visual Studio for apps using XAML) have a comment element.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>For example:</source>
					<target>For example:</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Resjson files (resources created in Visual Studio for apps using HTML) allow metadata in fields that begin with an underscore, such as comments:</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Resjson files (resources created in Visual Studio for apps using HTML) allow metadata in fields that begin with an underscore, such as comments:</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>Localize sentences instead of words.</source>
					<target>Localize sentences instead of words.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Consider the following string: "The {0} could not be synchronized."</source>
					<target>Consider the following string: "The {0} could not be synchronized."</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>A variety of words could replace {0}, such as appointment, task, or document.</source>
					<target>A variety of words could replace {0}, such as appointment, task, or document.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>While this example would appear to work for the English language, it will not work in all cases for the corresponding sentence in German.</source>
					<target>While this example would appear to work for the English language, it will not work in all cases for the corresponding sentence in German.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Notice that in the following German sentences, some of the words in the template string ("Der", "Die", "Das") need to match the parameterized word:</source>
					<target>Notice that in the following German sentences, some of the words in the template string ("Der", "Die", "Das") need to match the parameterized word:</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>English</source>
					<target>English</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>German</source>
					<target>German</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The appointment could not be synchronized.</source>
					<target>The appointment could not be synchronized.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>Der Termin konnte nicht synchronisiert werden.</source>
					<target>Der Termin konnte nicht synchronisiert werden.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>The task could not be synchronized.</source>
					<target>The task could not be synchronized.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Die Aufgabe konnte nicht synchronisiert werden.</source>
					<target>Die Aufgabe konnte nicht synchronisiert werden.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>The document could not be synchronized.</source>
					<target>The document could not be synchronized.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Das Dokument konnte nicht synchronisiert werden.</source>
					<target>Das Dokument konnte nicht synchronisiert werden.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>As another example, consider the sentence "Remind me in {0} minute(s)."</source>
					<target>As another example, consider the sentence "Remind me in {0} minute(s)."</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>While using "minute(s)" works for the English language, other languages might use different terms.</source>
					<target>While using "minute(s)" works for the English language, other languages might use different terms.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>For example, the Polish language uses "minuta", "minuty", or "minut" depending on the context.</source>
					<target>For example, the Polish language uses "minuta", "minuty", or "minut" depending on the context.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>To solve this problem, localize the entire sentence, rather than a single word.</source>
					<target>To solve this problem, localize the entire sentence, rather than a single word.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>Doing this may seem like extra work and an inelegant solution, but it is the best solution because:</source>
					<target>Doing this may seem like extra work and an inelegant solution, but it is the best solution because:</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>A clean error message will be displayed for all languages.</source>
					<target>A clean error message will be displayed for all languages.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>Your localizer will not need to ask about what the strings will be replaced with.</source>
					<target>Your localizer will not need to ask about what the strings will be replaced with.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>You will not need to implement a costly code fix when a problem like this surfaces after your app is completed.</source>
					<target>You will not need to implement a costly code fix when a problem like this surfaces after your app is completed.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Ensure the correct parameter order.</source>
					<target>Ensure the correct parameter order.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Don't assume that all languages use parameters in the same order.</source>
					<target>Don't assume that all languages use parameters in the same order.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>For example, consider the string "Every %s %s", where the first %s is replaced by the name of a month, and the second %s is replaced by the date of a month.</source>
					<target>For example, consider the string "Every %s %s", where the first %s is replaced by the name of a month, and the second %s is replaced by the date of a month.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>This example works for the English language, but will fail when the app is localized into the German language, where the date and month are displayed in the reverse order.</source>
					<target>This example works for the English language, but will fail when the app is localized into the German language, where the date and month are displayed in the reverse order.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>To solve this problem, change the string to "Every %1 %2", so that the order is interchangeable depending on the language.</source>
					<target>To solve this problem, change the string to "Every %1 %2", so that the order is interchangeable depending on the language.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Don’t over localize.</source>
					<target>Don’t over localize.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Localize specific strings, not tags.</source>
					<target>Localize specific strings, not tags.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Consider the following examples:</source>
					<target>Consider the following examples:</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Over-localized string</source>
					<target>Over-localized string</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Correctly-localized string</source>
					<target>Correctly-localized string</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
					<data id="id2">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>link<ph dataRef="id1" id="ph1" />terms of use<ph dataRef="id2" id="ph2" />/link</source>
					<target>link<ph dataRef="id1" id="ph1" />terms of use<ph dataRef="id2" id="ph2" />/link</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>terms of use</source>
					<target>terms of use</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">&amp;gt;</data>
					<data id="id2">&amp;lt;</data>
				</originalData>
				<segment state="initial">
					<source>link<ph dataRef="id1" id="ph1" />privacy policy<ph dataRef="id2" id="ph2" />/link</source>
					<target>link<ph dataRef="id1" id="ph1" />privacy policy<ph dataRef="id2" id="ph2" />/link</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>privacy policy</source>
					<target>privacy policy</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">&amp;lt;</data>
					<data id="id2">&amp;gt;</data>
				</originalData>
				<segment state="initial">
					<source>Including the above <ph dataRef="id1" id="ph1" />link<ph dataRef="id2" id="ph2" /> tag in the resources means that it too will be localized.</source>
					<target>Including the above <ph dataRef="id1" id="ph1" />link<ph dataRef="id2" id="ph2" /> tag in the resources means that it too will be localized.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>This renders the tag not valid.</source>
					<target>This renders the tag not valid.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Only the strings themselves should be localized.</source>
					<target>Only the strings themselves should be localized.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Generally, you should think of tags as code that should be kept separate from localizable content.</source>
					<target>Generally, you should think of tags as code that should be kept separate from localizable content.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>However, some long strings should include markup to keep context and ensure ordering.</source>
					<target>However, some long strings should include markup to keep context and ensure ordering.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>Do not use the same strings in dissimilar contexts.</source>
					<target>Do not use the same strings in dissimilar contexts.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>Reusing a string may seem like the best solution, but it can cause localization problems if the same word or phrase can have different meanings or contexts.</source>
					<target>Reusing a string may seem like the best solution, but it can cause localization problems if the same word or phrase can have different meanings or contexts.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>You can reuse strings if the two contexts are the same.</source>
					<target>You can reuse strings if the two contexts are the same.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>For instance, you can reuse the string "Volume" for both sound effect volume and music volume because both refer to intensity of sound.</source>
					<target>For instance, you can reuse the string "Volume" for both sound effect volume and music volume because both refer to intensity of sound.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>You should not reuse that same string when referring to a hard disk volume because the context and meaning are different, and the word might be translated differently.</source>
					<target>You should not reuse that same string when referring to a hard disk volume because the context and meaning are different, and the word might be translated differently.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Another example is the use of the strings "on" and "off".</source>
					<target>Another example is the use of the strings "on" and "off".</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>In the English language, "on" and "off" can be used for a toggle for Flight Mode, Bluetooth, and devices.</source>
					<target>In the English language, "on" and "off" can be used for a toggle for Flight Mode, Bluetooth, and devices.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>But in Italian, the translation depends on the context of what is being turned on and off.</source>
					<target>But in Italian, the translation depends on the context of what is being turned on and off.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>You would need to create a pair of strings for each context.</source>
					<target>You would need to create a pair of strings for each context.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Additionally, a string like "text" or "fax" could be used as both a verb and a noun in the English language, which can confuse the translation process.</source>
					<target>Additionally, a string like "text" or "fax" could be used as both a verb and a noun in the English language, which can confuse the translation process.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Instead, create a separate string for both the verb and noun format.</source>
					<target>Instead, create a separate string for both the verb and noun format.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>When you're not sure whether the contexts are the same, err on the safe side and use a distinct string.</source>
					<target>When you're not sure whether the contexts are the same, err on the safe side and use a distinct string.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>Identify resources with unique attributes.</source>
					<target>Identify resources with unique attributes.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Resource identifiers are case insensitive and must be unique per resource file.</source>
					<target>Resource identifiers are case insensitive and must be unique per resource file.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>When accessing a resource, use the resource identifier, not the actual value of the resource.</source>
					<target>When accessing a resource, use the resource identifier, not the actual value of the resource.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Resource identifiers don't change, but the actual values of the resources do change depending on the language.</source>
					<target>Resource identifiers don't change, but the actual values of the resources do change depending on the language.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Be sure to use meaningful resource identifiers to provide additional context for translation.</source>
					<target>Be sure to use meaningful resource identifiers to provide additional context for translation.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Don't change the resource identifiers after the string resources are sent to translation.</source>
					<target>Don't change the resource identifiers after the string resources are sent to translation.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Localization teams use the resource identifier to track additions, deletions, and updates in the resources.</source>
					<target>Localization teams use the resource identifier to track additions, deletions, and updates in the resources.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>Changes in resource identifiers—also known as "resource identifiers shift"—require strings to be retranslated, because it will appear as though strings were deleted and others added.</source>
					<target>Changes in resource identifiers—also known as "resource identifiers shift"—require strings to be retranslated, because it will appear as though strings were deleted and others added.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>Choose an appropriate translation approach.</source>
					<target>Choose an appropriate translation approach.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>After strings are separated into resource files, they can be translated.</source>
					<target>After strings are separated into resource files, they can be translated.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>The ideal time to translate strings is after the strings in your project are finalized, which usually happens toward the end of a project.</source>
					<target>The ideal time to translate strings is after the strings in your project are finalized, which usually happens toward the end of a project.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>You can approach the translation process in number of ways.</source>
					<target>You can approach the translation process in number of ways.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>This may depend on the volume of strings to be translated, the number of languages to be translated, and how the translation will be done (such as in-house versus hiring an external vendor).</source>
					<target>This may depend on the volume of strings to be translated, the number of languages to be translated, and how the translation will be done (such as in-house versus hiring an external vendor).</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Consider the following options:</source>
					<target>Consider the following options:</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>The resource files can be translated by opening them directly in the project.</source>
					<target>The resource files can be translated by opening them directly in the project.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>This approach works well for a project that has a small volume of strings and that needs to be translated into two or three languages.</source>
					<target>This approach works well for a project that has a small volume of strings and that needs to be translated into two or three languages.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>It could be suitable for a scenario where a developer speaks more than one language and is willing to handle the translation process.</source>
					<target>It could be suitable for a scenario where a developer speaks more than one language and is willing to handle the translation process.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>This approach benefits by being quick, requires no tools, and minimizes the risk of mistranslations, but it is not scalable.</source>
					<target>This approach benefits by being quick, requires no tools, and minimizes the risk of mistranslations, but it is not scalable.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>In particular, the resources in different languages can easily get out of sync, causing bad user experiences and maintenance headaches.</source>
					<target>In particular, the resources in different languages can easily get out of sync, causing bad user experiences and maintenance headaches.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>The string resource files are in XML or ResJSON text format, so could be handed off for translation using any text editor.</source>
					<target>The string resource files are in XML or ResJSON text format, so could be handed off for translation using any text editor.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>The translated files would then be copied back into the project.</source>
					<target>The translated files would then be copied back into the project.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>This approach carries a risk of translators accidentally editing the XML tags, but it lets translation work take place outside of the Microsoft Visual Studio project.</source>
					<target>This approach carries a risk of translators accidentally editing the XML tags, but it lets translation work take place outside of the Microsoft Visual Studio project.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>This approach could work well for projects that need to be translated into a small number of languages.</source>
					<target>This approach could work well for projects that need to be translated into a small number of languages.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>The XLIFF format is an XML format specifically designed for use in localization, and should be well supported by some localization vendors or localization tools.</source>
					<target>The XLIFF format is an XML format specifically designed for use in localization, and should be well supported by some localization vendors or localization tools.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/jj572370.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multilingual App Toolkit</pc> to generate XLIFF files from other resource files, such as .resw or .resjson.</source>
					<target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multilingual App Toolkit</pc> to generate XLIFF files from other resource files, such as .resw or .resjson.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Handoffs to localizers may need to occur for other files, such as images or audio files.</source>
					<target>Handoffs to localizers may need to occur for other files, such as images or audio files.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>Typically, we don't recommend creating culturally dependent files because they can be difficult to localize.</source>
					<target>Typically, we don't recommend creating culturally dependent files because they can be difficult to localize.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>Additionally, consider the following suggestions:</source>
					<target>Additionally, consider the following suggestions:</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Use a localization tool.</source>
					<target>Use a localization tool.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>A number of localization tools are available for parsing resource files and allowing only the translatable strings to be edited by translators.</source>
					<target>A number of localization tools are available for parsing resource files and allowing only the translatable strings to be edited by translators.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>This approach reduces the risk of a translator accidentally editing the XML tags.</source>
					<target>This approach reduces the risk of a translator accidentally editing the XML tags.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>But it has the drawback of introducing a new tool and process to the localization process.</source>
					<target>But it has the drawback of introducing a new tool and process to the localization process.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>A localization tool is good for projects with a large volume of strings, but a small number of languages.</source>
					<target>A localization tool is good for projects with a large volume of strings, but a small number of languages.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/jj572370.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to use the Multilingual App Toolkit</pc>.</source>
					<target>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to use the Multilingual App Toolkit</pc>.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Use a localization vendor.</source>
					<target>Use a localization vendor.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Consider using a localization vendor if your project contains a large volume of strings and needs to be translated for many languages.</source>
					<target>Consider using a localization vendor if your project contains a large volume of strings and needs to be translated for many languages.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>A localization vendor can give advice about tools and processes, as well as translating your resource files.</source>
					<target>A localization vendor can give advice about tools and processes, as well as translating your resource files.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>This is an ideal solution, but is also the most costly option, and may increase the turnaround time for your translated content.</source>
					<target>This is an ideal solution, but is also the most costly option, and may increase the turnaround time for your translated content.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Keep your localizers informed.</source>
					<target>Keep your localizers informed.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Inform localizers of strings that can be considered a noun or a verb.</source>
					<target>Inform localizers of strings that can be considered a noun or a verb.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Explain fabricated words to your localizers by using terminology tools.</source>
					<target>Explain fabricated words to your localizers by using terminology tools.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Keep strings grammatically correct, unambiguous, and as nontechnical as possible to avoid confusion.</source>
					<target>Keep strings grammatically correct, unambiguous, and as nontechnical as possible to avoid confusion.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Keep access keys and labels consistent.</source>
					<target>Keep access keys and labels consistent.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>It is a challenge to "synchronize" the access keys used in accessibility with the display of the localized access keys, because the two string resources are categorized in two separate sections.</source>
					<target>It is a challenge to "synchronize" the access keys used in accessibility with the display of the localized access keys, because the two string resources are categorized in two separate sections.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>Be sure to provide comments for the label string such as:</source>
					<target>Be sure to provide comments for the label string such as:</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>HTML:</source>
					<target>HTML:</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>You can follow the implementation shown below.</source>
					<target>You can follow the implementation shown below.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>Again, be sure to properly comment the label string to link it to the access key definition.</source>
					<target>Again, be sure to properly comment the label string to link it to the access key definition.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>Support Furigana for Japanese strings that can be sorted.</source>
					<target>Support Furigana for Japanese strings that can be sorted.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>Japanese Kanji characters have the unique property of having more than one pronunciation depending on the word and context they are used in.</source>
					<target>Japanese Kanji characters have the unique property of having more than one pronunciation depending on the word and context they are used in.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>This leads to problems when you try to sort Japanese named objects, such as application names, files, songs, and so on.</source>
					<target>This leads to problems when you try to sort Japanese named objects, such as application names, files, songs, and so on.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>Japanese Kanji have, in the past, usually been sorted in a machine-understandable order called XJIS.</source>
					<target>Japanese Kanji have, in the past, usually been sorted in a machine-understandable order called XJIS.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>Unfortunately, because this sorting order is not phonetic it is not very useful for humans.</source>
					<target>Unfortunately, because this sorting order is not phonetic it is not very useful for humans.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>Furigana works around this problem by allowing the user or creator to specify the phonetics for the characters they are using.</source>
					<target>Furigana works around this problem by allowing the user or creator to specify the phonetics for the characters they are using.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>If you use the following procedure to add Furigana to your app name, you can ensure that it is sorted in the proper location in the app list.</source>
					<target>If you use the following procedure to add Furigana to your app name, you can ensure that it is sorted in the proper location in the app list.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>If your app name contains Kanji characters and Furigana is not provided when the user’s UI language or the sort order is set to Japanese, Windows makes its best effort to generate the appropriate pronunciation.</source>
					<target>If your app name contains Kanji characters and Furigana is not provided when the user’s UI language or the sort order is set to Japanese, Windows makes its best effort to generate the appropriate pronunciation.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>However, there is a possibility for app names containing rare or unique readings to be sorted under a more common reading instead.</source>
					<target>However, there is a possibility for app names containing rare or unique readings to be sorted under a more common reading instead.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>Therefore, the best practice for Japanese applications (especially those containing Kanji characters in their names) is to provide a Furigana version of their app name as part of the Japanese localization process.</source>
					<target>Therefore, the best practice for Japanese applications (especially those containing Kanji characters in their names) is to provide a Furigana version of their app name as part of the Japanese localization process.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Add "ms-resource:Appname" as the Package Display Name and the Application Display Name.</source>
					<target>Add "ms-resource:Appname" as the Package Display Name and the Application Display Name.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>Create a ja-JP folder under strings, and add two resource files as follows:</source>
					<target>Create a ja-JP folder under strings, and add two resource files as follows:</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>In Resources.resw for general ja-JP: Add a string resource for Appname "希蒼"</source>
					<target>In Resources.resw for general ja-JP: Add a string resource for Appname "希蒼"</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>In Resources.altform-msft-phonetic.resw for Japanese furigana resources: Add Furigana value for AppName "のあ"</source>
					<target>In Resources.altform-msft-phonetic.resw for Japanese furigana resources: Add Furigana value for AppName "のあ"</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The user can search for the app name "希蒼" using both the Furigana value "のあ" (noa),　and the phonetic value (using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetPhonetic</pc> function from Input Method Editor (IME)) "まれあお" (mare-ao).</source>
					<target>The user can search for the app name "希蒼" using both the Furigana value "のあ" (noa),　and the phonetic value (using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetPhonetic</pc> function from Input Method Editor (IME)) "まれあお" (mare-ao).</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Sorting follows the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regional Control Panel</pc> format:</source>
					<target>Sorting follows the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regional Control Panel</pc> format:</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>Under Japanese user locale,</source>
					<target>Under Japanese user locale,</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>If Furigana is enabled, the "希蒼" is sorted under "の".</source>
					<target>If Furigana is enabled, the "希蒼" is sorted under "の".</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>If Furigana is missing, the "希蒼" is sorted under "ま".</source>
					<target>If Furigana is missing, the "希蒼" is sorted under "ま".</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>Under non-Japanese user locale,</source>
					<target>Under non-Japanese user locale,</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>If Furigana is enabled, the "希蒼" is sorted under "の".</source>
					<target>If Furigana is enabled, the "希蒼" is sorted under "の".</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>If Furigana is missing, the "希蒼" is sorted under "漢字".</source>
					<target>If Furigana is missing, the "希蒼" is sorted under "漢字".</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Globalization and localization do's and don'ts</source>
					<target>Globalization and localization do's and don'ts</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<segment state="initial">
					<source>Put UI strings into resources</source>
					<target>Put UI strings into resources</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>How to name resources using qualifiers</source>
					<target>How to name resources using qualifiers</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>