<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="de-de" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">14107627c99a420608d42a7b08768f8220f31fca</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci2\globalizing\put-ui-strings-into-resources.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">a4364e838611a6164d87f44ef8b0c38096d1f41d</mda:meta><mda:meta type="olxliffhash">74173c7f488ccf0c8bbca5b8015c061cf8598dda</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Put string resources for your UI into resource files.</source>
					<target>Put string resources for your UI into resource files.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>You can then reference those strings from your code or markup.</source>
					<target>You can then reference those strings from your code or markup.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Put UI strings into resources</source>
					<target>Put UI strings into resources</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Put UI strings into resources</source>
					<target>Put UI strings into resources</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Important APIs</source>
					<target>Important APIs</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>ApplicationModel.Resources.ResourceLoader</source>
					<target>ApplicationModel.Resources.ResourceLoader</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>WinJS.Resources.processAll</source>
					<target>WinJS.Resources.processAll</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>Put string resources for your UI into resource files.</source>
					<target>Put string resources for your UI into resource files.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>You can then reference those strings from your code or markup.</source>
					<target>You can then reference those strings from your code or markup.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>This topic shows the steps to add several language string resources to your Universal Windows app, and how to briefly test it.</source>
					<target>This topic shows the steps to add several language string resources to your Universal Windows app, and how to briefly test it.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Put strings into resource files, instead of putting them directly in code or markup.</source>
					<target>Put strings into resource files, instead of putting them directly in code or markup.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Open your solution (or create a new one) in Visual Studio.</source>
					<target>Open your solution (or create a new one) in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open package.appxmanifest in Visual Studio, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab, and (for this example) set the Default language to "en-US".</source>
					<target>Open package.appxmanifest in Visual Studio, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab, and (for this example) set the Default language to "en-US".</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>If there are multiple package.appxmanifest files in your solution, do this for each one.</source>
					<target>If there are multiple package.appxmanifest files in your solution, do this for each one.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This specifies the default language for the project.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This specifies the default language for the project.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>The default language resources are used if the user's preferred language or display languages do not match the language resources provided in the application.</source>
					<target>The default language resources are used if the user's preferred language or display languages do not match the language resources provided in the application.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>Create a folder to contain the resource files.</source>
					<target>Create a folder to contain the resource files.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>In the Solution Explorer, right-click the project (the Shared project if your solution contains multiple projects) and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">New Folder</pc>.</source>
					<target>In the Solution Explorer, right-click the project (the Shared project if your solution contains multiple projects) and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">New Folder</pc>.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Name the new folder "Strings".</source>
					<target>Name the new folder "Strings".</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>If the new folder is not visible in Solution Explorer, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Show All Files</pc> from the Microsoft Visual Studio menu while the project is still selected.</source>
					<target>If the new folder is not visible in Solution Explorer, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Show All Files</pc> from the Microsoft Visual Studio menu while the project is still selected.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Create a sub-folder and a resource file for English (United States).</source>
					<target>Create a sub-folder and a resource file for English (United States).</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>Right-click the Strings folder and add a new folder beneath it.</source>
					<target>Right-click the Strings folder and add a new folder beneath it.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Name it "en-US".</source>
					<target>Name it "en-US".</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=227302)</data>
				</originalData>
				<segment state="initial">
					<source>The resource file is to be placed in a folder that has been named for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCP-47</pc> language tag.</source>
					<target>The resource file is to be placed in a folder that has been named for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCP-47</pc> language tag.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc> for details on the language qualifier and a list of common language tags.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc> for details on the language qualifier and a list of common language tags.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">&amp;gt;</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the en-US folder and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">New Item…</pc>.</source>
					<target>Right-click the en-US folder and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> <ph dataRef="id3" id="ph1" /> <pc dataRefEnd="id5" dataRefStart="id4" id="p2">New Item…</pc>.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Select "Resources File (.resw)".</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Select "Resources File (.resw)".</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Select "Resources File (.resjson)".</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Select "Resources File (.resjson)".</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>.</source>
					<target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This adds a resource file with the default name "Resources.resw" (for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc>) or "resources.rejson" (for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HTML</pc>).</source>
					<target>This adds a resource file with the default name "Resources.resw" (for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc>) or "resources.rejson" (for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HTML</pc>).</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>We recommend that you use this default filename.</source>
					<target>We recommend that you use this default filename.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965323)</data>
				</originalData>
				<segment state="initial">
					<source>Apps can partition their resources into other files, but you must be careful to refer to them correctly (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to load string resources</pc>).</source>
					<target>Apps can partition their resources into other files, but you must be careful to refer to them correctly (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to load string resources</pc>).</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;gt;</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML only:</pc> If you have .resx files with only string resources from previous .NET projects, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> <ph dataRef="id5" id="ph1" /> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Existing Item…</pc>, add the .resx file, and rename it to .resw.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML only:</pc> If you have .resx files with only string resources from previous .NET projects, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> <ph dataRef="id5" id="ph1" /> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Existing Item…</pc>, add the .resx file, and rename it to .resw.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>Open the file and use the editor to add these resources:</source>
					<target>Open the file and use the editor to add these resources:</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>XAML:</source>
					<target>XAML:</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">![</data>
					<data id="id2">](images/addresource-en-us.png)</data>
				</originalData>
				<segment state="initial">
					<source>Strings/en-US/Resources.resw <ph dataRef="id1" id="ph1" />add resource, english<ph dataRef="id2" id="ph2" /> In this example, "Greeting.Text" and "Farewell" identify the strings that are to be displayed.</source>
					<target>Strings/en-US/Resources.resw <ph dataRef="id1" id="ph1" />add resource, english<ph dataRef="id2" id="ph2" /> In this example, "Greeting.Text" and "Farewell" identify the strings that are to be displayed.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>"Greeting.Width" identifies the Width property of the "Greeting" string.</source>
					<target>"Greeting.Width" identifies the Width property of the "Greeting" string.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</source>
					<target>The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>HTML:</source>
					<target>HTML:</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>The new file contains default content.</source>
					<target>The new file contains default content.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Replace the content with the following (which may be similar to the default):</source>
					<target>Replace the content with the following (which may be similar to the default):</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Strings/en-US/resources.resjson</source>
					<target>Strings/en-US/resources.resjson</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>This is strict JavaScript Object Notation (JSON) syntax where a comma must be placed after each name/value pair, except the last one.</source>
					<target>This is strict JavaScript Object Notation (JSON) syntax where a comma must be placed after each name/value pair, except the last one.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>In this sample, "greeting" and "farewell" identify the strings that are to be displayed.</source>
					<target>In this sample, "greeting" and "farewell" identify the strings that are to be displayed.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>The other pairs ("\_greeting.comment" and "\_farewell.comment") are comments that describe the strings.</source>
					<target>The other pairs ("\_greeting.comment" and "\_farewell.comment") are comments that describe the strings.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</source>
					<target>The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Associate controls to resources.</source>
					<target>Associate controls to resources.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>XAML only:</source>
					<target>XAML only:</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>You need to associate every control that needs localized text with the .resw file.</source>
					<target>You need to associate every control that needs localized text with the .resw file.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You do this using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements like this:</source>
					<target>You do this using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements like this:</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For the resource name, you give the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> attribute value, plus you specify what property is to get the translated string (in this case the Text property).</source>
					<target>For the resource name, you give the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> attribute value, plus you specify what property is to get the translated string (in this case the Text property).</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>You can specify other properties/values for different languages such as Greeting.Width, but be careful with such layout-related properties.</source>
					<target>You can specify other properties/values for different languages such as Greeting.Width, but be careful with such layout-related properties.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>You should strive to allow the controls to lay out dynamically based on the device's screen.</source>
					<target>You should strive to allow the controls to lay out dynamically based on the device's screen.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Note that attached properties are handled differently in resw files such as AutomationPeer.Name.</source>
					<target>Note that attached properties are handled differently in resw files such as AutomationPeer.Name.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>You need to explicitly write out the namespace like this:</source>
					<target>You need to explicitly write out the namespace like this:</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Add string resource identifiers to code and markup.</source>
					<target>Add string resource identifiers to code and markup.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>XAML:</source>
					<target>XAML:</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>In your code, you can dynamically reference strings:</source>
					<target>In your code, you can dynamically reference strings:</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>C</source>
					<target>C</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>C++</source>
					<target>C++</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>HTML:</source>
					<target>HTML:</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Add references to the Windows Library for JavaScript to your HTML file, if they aren't already there.</source>
					<target>Add references to the Windows Library for JavaScript to your HTML file, if they aren't already there.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The following code shows the HTML for the default.html file of the Windows project that is generated when you create a new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc> JavaScript project in Visual Studio.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The following code shows the HTML for the default.html file of the Windows project that is generated when you create a new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc> JavaScript project in Visual Studio.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Note that the file already contains references to the WinJS.</source>
					<target>Note that the file already contains references to the WinJS.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211864)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the JavaScript code that accompanies your HTML file, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.Resources.processAll</pc></pc> function when your HTML is loaded.</source>
					<target>In the JavaScript code that accompanies your HTML file, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.Resources.processAll</pc></pc> function when your HTML is loaded.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/jj126158)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br211864)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">*</data>
					<data id="id10">*</data>
					<data id="id11">[</data>
					<data id="id12">](https://msdn.microsoft.com/library/windows/apps/hh770590)</data>
					<data id="id13">**</data>
					<data id="id14">**</data>
					<data id="id15">*</data>
					<data id="id16">*</data>
				</originalData>
				<segment state="initial">
					<source>If additional HTML is loaded into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.Pages.PageControl</pc></pc> object, call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.Resources.processAll</pc></pc>(<pc dataRefEnd="id10" dataRefStart="id9" id="p5">element</pc>) in the page control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">IPageControlMembers.ready</pc></pc> method, where <pc dataRefEnd="id16" dataRefStart="id15" id="p8">element</pc> is the HTML element (and its child elements) being loaded.</source>
					<target>If additional HTML is loaded into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.Pages.PageControl</pc></pc> object, call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.Resources.processAll</pc></pc>(<pc dataRefEnd="id10" dataRefStart="id9" id="p5">element</pc>) in the page control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">IPageControlMembers.ready</pc></pc> method, where <pc dataRefEnd="id16" dataRefStart="id15" id="p8">element</pc> is the HTML element (and its child elements) being loaded.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=227301)</data>
				</originalData>
				<segment state="initial">
					<source>This example is based on scenario 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application resources and localization sample</pc>:</source>
					<target>This example is based on scenario 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application resources and localization sample</pc>:</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>In the HTML, refer to the string resources using the resource identifiers ('greeting' and 'farewell') from the resource files.</source>
					<target>In the HTML, refer to the string resources using the resource identifiers ('greeting' and 'farewell') from the resource files.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Refer to string resources for attributes.</source>
					<target>Refer to string resources for attributes.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">*</data>
					<data id="id8">*</data>
				</originalData>
				<segment state="initial">
					<source>The general pattern of the data-win-res attribute for HTML replacement is data-win-res="{<pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyname1</pc>: '<pc dataRefEnd="id4" dataRefStart="id3" id="p2">resource ID</pc>', <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyname2</pc>: '<pc dataRefEnd="id8" dataRefStart="id7" id="p4">resource ID2</pc>'}".</source>
					<target>The general pattern of the data-win-res attribute for HTML replacement is data-win-res="{<pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyname1</pc>: '<pc dataRefEnd="id4" dataRefStart="id3" id="p2">resource ID</pc>', <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyname2</pc>: '<pc dataRefEnd="id8" dataRefStart="id7" id="p4">resource ID2</pc>'}".</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the string does not contain any markup, then bind the resource wherever possible to the textContent property instead of innerHTML.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the string does not contain any markup, then bind the resource wherever possible to the textContent property instead of innerHTML.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>The textContent property is much faster to replace than innerHTML.</source>
					<target>The textContent property is much faster to replace than innerHTML.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Refer to string resources in JavaScript.</source>
					<target>Refer to string resources in JavaScript.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>Add folders and resource files for two additional languages.</source>
					<target>Add folders and resource files for two additional languages.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Add another folder under the Strings folder for German.</source>
					<target>Add another folder under the Strings folder for German.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Name the folder "de-DE" for Deutsch (Deutschland).</source>
					<target>Name the folder "de-DE" for Deutsch (Deutschland).</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Create another resources file in the de-DE folder, and add the following:</source>
					<target>Create another resources file in the de-DE folder, and add the following:</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>XAML:</source>
					<target>XAML:</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>strings/de-DE/Resources.resw</source>
					<target>strings/de-DE/Resources.resw</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>add resource, german</source>
					<target>add resource, german</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>HTML:</source>
					<target>HTML:</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>strings/de-DE/resources.resjson</source>
					<target>strings/de-DE/resources.resjson</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Create one more folder named "fr-FR", for français (France).</source>
					<target>Create one more folder named "fr-FR", for français (France).</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Create a new resources file and add the following:</source>
					<target>Create a new resources file and add the following:</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>XAML:</source>
					<target>XAML:</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<originalData>
					<data id="id1">![</data>
					<data id="id2">](images/addresource-fr-fr.png)
</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>strings/fr-FR/Resources.resw <ph dataRef="id1" id="ph1" />add resource, french<ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">HTML:</pc></source>
					<target>strings/fr-FR/Resources.resw <ph dataRef="id1" id="ph1" />add resource, french<ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">HTML:</pc></target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>strings/fr-FR/resources.resjson</source>
					<target>strings/fr-FR/resources.resjson</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Build and run the app.</source>
					<target>Build and run the app.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Test the app for your default display language.</source>
					<target>Test the app for your default display language.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>Press F5 to build and run the app.</source>
					<target>Press F5 to build and run the app.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>Note that the greeting and farewell are displayed in the user's preferred language.</source>
					<target>Note that the greeting and farewell are displayed in the user's preferred language.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Exit the app.</source>
					<target>Exit the app.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Test the app for the other languages.</source>
					<target>Test the app for the other languages.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Bring up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> on your device.</source>
					<target>Bring up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> on your device.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time &amp; language</pc>.</source>
					<target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time &amp; language</pc>.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Region &amp; language</pc> (or on a phone or phone emulator, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Language</pc>).</source>
					<target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Region &amp; language</pc> (or on a phone or phone emulator, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Language</pc>).</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Note that the language that was displayed when you ran the app is the top language listed that is English, German, or French.</source>
					<target>Note that the language that was displayed when you ran the app is the top language listed that is English, German, or French.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>If your top language is not one of these three, the app falls back to the next one on the list that the app supports.</source>
					<target>If your top language is not one of these three, the app falls back to the next one on the list that the app supports.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you do not have all three of these languages on your machine, add the missing ones by clicking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a language</pc> and adding them to the list.</source>
					<target>If you do not have all three of these languages on your machine, add the missing ones by clicking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a language</pc> and adding them to the list.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To test the app with another language, select the language in the list and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as default</pc> (or on a phone or phone emulator, tap and hold the language in the list and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Move up</pc> until it is at the top).</source>
					<target>To test the app with another language, select the language in the list and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as default</pc> (or on a phone or phone emulator, tap and hold the language in the list and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Move up</pc> until it is at the top).</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<segment state="initial">
					<source>Then run the app.</source>
					<target>Then run the app.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>How to name resources using qualifiers</source>
					<target>How to name resources using qualifiers</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<segment state="initial">
					<source>How to load string resources</source>
					<target>How to load string resources</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>The BCP-47 language tag</source>
					<target>The BCP-47 language tag</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>