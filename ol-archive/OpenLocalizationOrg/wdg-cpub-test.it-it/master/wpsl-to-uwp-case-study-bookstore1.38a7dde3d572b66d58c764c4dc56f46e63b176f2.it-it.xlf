<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">e3fdba68a49a24162a7d3485b6c6fd77c5f72983</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-case-study-bookstore1.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">8f1e07faffdfd9b67b713e5d2bbad67a2e3c6175</mda:meta><mda:meta type="olxliffhash">0f3252055dd0140632828890afced33eabb417ca</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10&amp;\#160;Universal Windows Platform (UWP) app.</source>
					<target>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10&amp;\#160;Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight to UWP case study: Bookstore1</source>
					<target>Windows Phone Silverlight to UWP case study: Bookstore1</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight to UWP case study: Bookstore1</source>
					<target>Windows Phone Silverlight to UWP case study: Bookstore1</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 Universal Windows Platform (UWP) app.</source>
					<target>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
					<target>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn894631)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Guide to UWP apps</pc>.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> bound to a view model.</source>
					<target>The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> bound to a view model.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>The view model has a list of books that shows title, author, and book cover.</source>
					<target>The view model has a list of books that shows title, author, and book cover.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</source>
					<target>The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Do not copy</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</source>
					<target>The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>A case study aims to complement that guidance by showing it in action in a real example.</source>
					<target>A case study aims to complement that guidance by showing it in action in a real example.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The case studies assume you've read the guidance, which they do not repeat.</source>
					<target>The case studies assume you've read the guidance, which they do not repeat.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](wpsl-to-uwp-troubleshooting.md#targetplatformversion)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Downloads</source>
					<target>Downloads</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=517053)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1WPSL8 Windows Phone Silverlight app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1WPSL8 Windows Phone Silverlight app</pc>.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532950)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1Universal\_10 Windows 10 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore1Universal\_10 Windows 10 app</pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>The Windows Phone Silverlight app</source>
					<target>The Windows Phone Silverlight app</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Here’s what Bookstore1WPSL8—the app that we're going to port—looks like.</source>
					<target>Here’s what Bookstore1WPSL8—the app that we're going to port—looks like.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</source>
					<target>It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>how bookstore1wpsl8 looks</source>
					<target>how bookstore1wpsl8 looks</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Porting to a Windows 10 project</source>
					<target>Porting to a Windows 10 project</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1WPSL8, and include the copied files in the new project.</source>
					<target>It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1WPSL8, and include the copied files in the new project.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Start by creating a new Blank Application (Windows Universal) project.</source>
					<target>Start by creating a new Blank Application (Windows Universal) project.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Name it Bookstore1Universal\_10.</source>
					<target>Name it Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>These are the files to copy over from Bookstore1WPSL8 to Bookstore1Universal\_10.</source>
					<target>These are the files to copy over from Bookstore1WPSL8 to Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
					<target>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</source>
					<target>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</source>
					<target>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>That command is what we mean by "including" files or folders in a project.</source>
					<target>That command is what we mean by "including" files or folders in a project.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</source>
					<target>Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>There's no need to do this for files that you're replacing in the destination.</source>
					<target>There's no need to do this for files that you're replacing in the destination.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
					<target>Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Copy MainPage.xaml and replace the file in the destination.</source>
					<target>Copy MainPage.xaml and replace the file in the destination.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</source>
					<target>We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Edit the source code and markup files that you just copied and change any references to the Bookstore1WPSL8 namespace to Bookstore1Universal\_10.</source>
					<target>Edit the source code and markup files that you just copied and change any references to the Bookstore1WPSL8 namespace to Bookstore1Universal\_10.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</source>
					<target>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>In the imperative code in the view model source file, these porting changes are needed:</source>
					<target>In the imperative code in the view model source file, these porting changes are needed:</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<originalData>
					<data id="id1">`System.ComponentModel.DesignerProperties`</data>
					<data id="id2">`DesignMode`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> and then use the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Resolve</pc> command on it.</source>
					<target>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> and then use the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Resolve</pc> command on it.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">`IsInDesignTool`</data>
					<data id="id2">`DesignModeEnabled`</data>
				</originalData>
				<segment state="initial">
					<source>Delete the <ph dataRef="id1" id="ph1" /> property and use IntelliSense to add the correct property name: <ph dataRef="id2" id="ph2" />.</source>
					<target>Delete the <ph dataRef="id1" id="ph1" /> property and use IntelliSense to add the correct property name: <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`ImageSource`</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`BitmapImage`</data>
				</originalData>
				<segment state="initial">
					<source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</source>
					<target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Resolve</pc> command on <ph dataRef="id3" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">`System.Windows.Media;`</data>
					<data id="id2">`using System.Windows.Media.Imaging;`</data>
				</originalData>
				<segment state="initial">
					<source>Delete using <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</source>
					<target>Delete using <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1WPSL8" to "BOOKSTORE1UNIVERSAL".</source>
					<target>Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1WPSL8" to "BOOKSTORE1UNIVERSAL".</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>In MainPage.xaml, these porting changes are needed:</source>
					<target>In MainPage.xaml, these porting changes are needed:</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<originalData>
					<data id="id1">`phone:PhoneApplicationPage`</data>
					<data id="id2">`Page`</data>
				</originalData>
				<segment state="initial">
					<source>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (don't forget the occurrences in property element syntax).</source>
					<target>Change <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (don't forget the occurrences in property element syntax).</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<originalData>
					<data id="id1">`phone`</data>
					<data id="id2">`shell`</data>
				</originalData>
				<segment state="initial">
					<source>Delete the <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> namespace prefix declarations.</source>
					<target>Delete the <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" /> namespace prefix declarations.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</source>
					<target>Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>We can choose to correct markup compilation errors very cheaply if we want to see results soonest, even if that means temporarily removing markup.</source>
					<target>We can choose to correct markup compilation errors very cheaply if we want to see results soonest, even if that means temporarily removing markup.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>But, let's keep a record of the debt we accrue by doing so.</source>
					<target>But, let's keep a record of the debt we accrue by doing so.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>Here it is in this case.</source>
					<target>Here it is in this case.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`SupportedOrientations="Portrait"`</data>
				</originalData>
				<segment state="initial">
					<source>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</source>
					<target>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`Orientation="Portrait"`</data>
				</originalData>
				<segment state="initial">
					<source>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</source>
					<target>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`shell:SystemTray.IsVisible="True"`</data>
				</originalData>
				<segment state="initial">
					<source>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</source>
					<target>In the root <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page</pc> element in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MainPage.xaml</pc>, delete <ph dataRef="id5" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
					<data id="id2">`PhoneTextExtraLargeStyle`</data>
					<data id="id3">`PhoneTextSubtleStyle`</data>
					<data id="id4"> **</data>
					<data id="id5">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <ph dataRef="id1" id="ph1" /> data template, delete the references to the <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" /><pc dataRefEnd="id5" dataRefStart="id4" id="p1">TextBlock</pc> styles.</source>
					<target>In the <ph dataRef="id1" id="ph1" /> data template, delete the references to the <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" /><pc dataRefEnd="id5" dataRefStart="id4" id="p1">TextBlock</pc> styles.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">`TitlePanel`</data>
					<data id="id2"> **</data>
					<data id="id3">**</data>
					<data id="id4">`PhoneTextNormalStyle`</data>
					<data id="id5">`PhoneTextTitle1Style`</data>
					<data id="id6"> **</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>In the <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">StackPanel</pc>, delete the references to the <ph dataRef="id4" id="ph2" /> and <ph dataRef="id5" id="ph3" /><pc dataRefEnd="id7" dataRefStart="id6" id="p2">TextBlock</pc> styles.</source>
					<target>In the <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">StackPanel</pc>, delete the references to the <ph dataRef="id4" id="ph2" /> and <ph dataRef="id5" id="ph3" /><pc dataRefEnd="id7" dataRefStart="id6" id="p2">TextBlock</pc> styles.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Let's work on the UI for the mobile device family first, and we can consider other form factors after that.</source>
					<target>Let's work on the UI for the mobile device family first, and we can consider other form factors after that.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>You can build and run the app now.</source>
					<target>You can build and run the app now.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>Here's how it looks on the mobile emulator.</source>
					<target>Here's how it looks on the mobile emulator.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>the uwp app on mobile with initial source code changes</source>
					<target>the uwp app on mobile with initial source code changes</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> is functioning.</source>
					<target>The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> is functioning.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>We mostly just need to fix the styling and get the images to show up.</source>
					<target>We mostly just need to fix the styling and get the images to show up.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Paying off the debt items, and some initial styling</source>
					<target>Paying off the debt items, and some initial styling</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>By default, all orientations are supported.</source>
					<target>By default, all orientations are supported.</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The Windows Phone Silverlight app explicitly constrains itself to portrait-only, though, so debt items \#1 and \#2 are paid off by going into the app package manifest in the new project and checking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Portrait</pc> under <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supported orientations</pc>.</source>
					<target>The Windows Phone Silverlight app explicitly constrains itself to portrait-only, though, so debt items \#1 and \#2 are paid off by going into the app package manifest in the new project and checking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Portrait</pc> under <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supported orientations</pc>.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>For this app, item \#3 is not a debt since the status bar (formerly called the system tray) is shown by default.</source>
					<target>For this app, item \#3 is not a debt since the status bar (formerly called the system tray) is shown by default.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1"> **</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>For items \#4 and \#5, we need to find four Universal Windows Platform (UWP)<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> styles that correspond to the Windows Phone Silverlight styles that we were using.</source>
					<target>For items \#4 and \#5, we need to find four Universal Windows Platform (UWP)<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> styles that correspond to the Windows Phone Silverlight styles that we were using.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-porting-xaml-and-ui.md#text)</data>
				</originalData>
				<segment state="initial">
					<source>You can run the Windows Phone Silverlight app in the emulator and compare it side-by-side with the illustration in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> section.</source>
					<target>You can run the Windows Phone Silverlight app in the emulator and compare it side-by-side with the illustration in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Text</pc> section.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>From doing that, and from looking at the properties of the Windows Phone Silverlight system styles, we can make this table.</source>
					<target>From doing that, and from looking at the properties of the Windows Phone Silverlight system styles, we can make this table.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Windows Phone Silverlight style key</source>
					<target>Windows Phone Silverlight style key</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>UWP style key</source>
					<target>UWP style key</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>PhoneTextExtraLargeStyle</source>
					<target>PhoneTextExtraLargeStyle</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>TitleTextBlockStyle</source>
					<target>TitleTextBlockStyle</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>PhoneTextSubtleStyle</source>
					<target>PhoneTextSubtleStyle</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>SubtitleTextBlockStyle</source>
					<target>SubtitleTextBlockStyle</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>PhoneTextNormalStyle</source>
					<target>PhoneTextNormalStyle</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>CaptionTextBlockStyle</source>
					<target>CaptionTextBlockStyle</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>PhoneTextTitle1Style</source>
					<target>PhoneTextTitle1Style</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>HeaderTextBlockStyle</source>
					<target>HeaderTextBlockStyle</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>To set those styles, you can just type them into the markup editor or you can use the Visual Studio XAML Tools and set them without typing a thing.</source>
					<target>To set those styles, you can just type them into the markup editor or you can use the Visual Studio XAML Tools and set them without typing a thing.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">&amp;gt;</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>To do that, you right-click a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit Style</pc> <ph dataRef="id5" id="ph1" /> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Apply Resource</pc>.</source>
					<target>To do that, you right-click a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc> and click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit Style</pc> <ph dataRef="id5" id="ph1" /> <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Apply Resource</pc>.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">&amp;gt;</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
				</originalData>
				<segment state="initial">
					<source>To do that with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>s in the item template, right click the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Edit Additional Templates</pc> <ph dataRef="id7" id="ph1" /> <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Edit Generated Items (ItemTemplate)</pc>.</source>
					<target>To do that with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>s in the item template, right click the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListBox</pc> and click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Edit Additional Templates</pc> <ph dataRef="id7" id="ph1" /> <pc dataRefEnd="id9" dataRefStart="id8" id="p4">Edit Generated Items (ItemTemplate)</pc>.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">`ListBoxBackgroundThemeBrush`</data>
				</originalData>
				<segment state="initial">
					<source>There is an 80% opaque white background behind the items, because the default style of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> control sets its background to the <ph dataRef="id3" id="ph1" /> system resource.</source>
					<target>There is an 80% opaque white background behind the items, because the default style of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListBox</pc> control sets its background to the <ph dataRef="id3" id="ph1" /> system resource.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">`Background="Transparent"`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>Set <ph dataRef="id1" id="ph1" /> on the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">ListBox</pc> to clear that background.</source>
					<target>Set <ph dataRef="id1" id="ph1" /> on the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">ListBox</pc> to clear that background.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`"9.6,0"`</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>To left-align the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>s in the item template, edit it again the same way as described above and set a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Margin</pc> of <ph dataRef="id5" id="ph1" /> on both <pc dataRefEnd="id7" dataRefStart="id6" id="p3">TextBlock</pc>s.</source>
					<target>To left-align the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock</pc>s in the item template, edit it again the same way as described above and set a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Margin</pc> of <ph dataRef="id5" id="ph1" /> on both <pc dataRefEnd="id7" dataRefStart="id6" id="p3">TextBlock</pc>s.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</data>
				</originalData>
				<segment state="initial">
					<source>After that is done, because of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">changes related to view pixels</pc>, we need to go through and multiply any fixed size dimension that we haven’t yet changed (margins, width, height, etc) by 0.8.</source>
					<target>After that is done, because of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">changes related to view pixels</pc>, we need to go through and multiply any fixed size dimension that we haven’t yet changed (margins, width, height, etc) by 0.8.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>So, for example, the images should change from 70x70px to 56x56px.</source>
					<target>So, for example, the images should change from 70x70px to 56x56px.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>But, let’s get those images to render before we show the results of our styling.</source>
					<target>But, let’s get those images to render before we show the results of our styling.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>Binding an Image to a view model</source>
					<target>Binding an Image to a view model</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>In Bookstore1WPSL8, we did this:</source>
					<target>In Bookstore1WPSL8, we did this:</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/jj655406)</data>
				</originalData>
				<segment state="initial">
					<source>In Bookstore1Universal, we use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="p1">URI scheme</pc>.</source>
					<target>In Bookstore1Universal, we use the ms-appx <pc dataRefEnd="id2" dataRefStart="id1" id="p1">URI scheme</pc>.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>So that we can keep the rest of our code the same, we can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</source>
					<target>So that we can keep the rest of our code the same, we can use a different overload of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Uri</pc> constructor to put the ms-appx URI scheme in a base URI and append the rest of the path onto that.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>Like this:</source>
					<target>Like this:</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>Universal styling</source>
					<target>Universal styling</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>Now, we just need to make some final styling tweaks and confirm that the app looks good on desktop (and other) form factors as well as mobile.</source>
					<target>Now, we just need to make some final styling tweaks and confirm that the app looks good on desktop (and other) form factors as well as mobile.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<segment state="initial">
					<source>The steps are below.</source>
					<target>The steps are below.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</source>
					<target>And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">`BookTemplate`</data>
					<data id="id2">`Margin`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>To tighten up the spacing between items, find the <ph dataRef="id1" id="ph1" /> data template in MainPage.xaml and delete the <ph dataRef="id2" id="ph2" /> attribute from the root <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Grid</pc>.</source>
					<target>To tighten up the spacing between items, find the <ph dataRef="id1" id="ph1" /> data template in MainPage.xaml and delete the <ph dataRef="id2" id="ph2" /> attribute from the root <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Grid</pc>.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">`-5.6`</data>
					<data id="id2">`0`</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you want to give the page title a little more breathing room, you can reset the bottom margin of <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> on the page title <pc dataRefEnd="id4" dataRefStart="id3" id="p1">TextBlock</pc>.</source>
					<target>If you want to give the page title a little more breathing room, you can reset the bottom margin of <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> on the page title <pc dataRefEnd="id4" dataRefStart="id3" id="p1">TextBlock</pc>.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">`LayoutRoot`</data>
				</originalData>
				<segment state="initial">
					<source>Now, we need to set <ph dataRef="id1" id="ph1" />'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</source>
					<target>Now, we need to set <ph dataRef="id1" id="ph1" />'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">`"Transparent"`</data>
					<data id="id2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</data>
				</originalData>
				<segment state="initial">
					<source>Change it from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</source>
					<target>Change it from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-form-factors-and-ux.md)</data>
				</originalData>
				<segment state="initial">
					<source>With a more sophisticated app, this would be the point at which we'd use the guidance in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting for form factor and user experience</pc> and really make optimal use of the form factor of each of the many devices the app can now run on.</source>
					<target>With a more sophisticated app, this would be the point at which we'd use the guidance in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Porting for form factor and user experience</pc> and really make optimal use of the form factor of each of the many devices the app can now run on.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>But, for this simple app, we can stop here and see how the app looks after that last sequence of styling operations.</source>
					<target>But, for this simple app, we can stop here and see how the app looks after that last sequence of styling operations.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>It actually looks the same on mobile and desktop devices, although it's not making best use of space on wide form factors (but we'll investigate how to do that in a later case study).</source>
					<target>It actually looks the same on mobile and desktop devices, although it's not making best use of space on wide form factors (but we'll investigate how to do that in a later case study).</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-porting-xaml-and-ui.md#theme-changes)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Theme changes</pc> to see how to control the theme of your app.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Theme changes</pc> to see how to control the theme of your app.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app</source>
					<target>the ported windows 10 app</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device</source>
					<target>The ported Windows 10 app running on a Mobile device</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>An optional adjustment to the list box for Mobile devices</source>
					<target>An optional adjustment to the list box for Mobile devices</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>When the app is running on a Mobile device, the background of a list box is light by default in both themes.</source>
					<target>When the app is running on a Mobile device, the background of a list box is light by default in both themes.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>That may be the style that you prefer and, if so, then there's nothing more to do.</source>
					<target>That may be the style that you prefer and, if so, then there's nothing more to do.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>But, controls are designed so that you can customize their look while leaving their behavior unaffected.</source>
					<target>But, controls are designed so that you can customize their look while leaving their behavior unaffected.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-case-study-bookstore1.md#an-optional-adjustment)</data>
				</originalData>
				<segment state="initial">
					<source>So, if you want the list box to be dark in the dark theme—the way the original app looked—then follow <pc dataRefEnd="id2" dataRefStart="id1" id="p1">these instructions</pc>.</source>
					<target>So, if you want the list box to be dark in the dark theme—the way the original app looked—then follow <pc dataRefEnd="id2" dataRefStart="id1" id="p1">these instructions</pc>.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>Conclusion</source>
					<target>Conclusion</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</source>
					<target>This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>For instance, list controls can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</source>
					<target>For instance, list controls can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>This particular app does nothing with the user's selection, and it has no navigation.</source>
					<target>This particular app does nothing with the user's selection, and it has no navigation.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</source>
					<target>Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](wpsl-to-uwp-case-study-bookstore2.md)</data>
				</originalData>
				<segment state="initial">
					<source>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc>, in which we look at accessing and displaying grouped data.</source>
					<target>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc>, in which we look at accessing and displaying grouped data.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>