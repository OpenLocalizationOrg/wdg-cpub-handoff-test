<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">7b5f758ab4270c9d5c13376133fac89c3d4faff1</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\porting\w8x-to-uwp-case-study-bookstore2.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">420795bad120f6bb21f427ba48f6e49a2c6b02ed</mda:meta><mda:meta type="olxliffhash">9f277c72cee82cb6f57eae4624eb30ec47a02e9d</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>This case study&amp;\#8212;which builds on the info given in Bookstore1&amp;\#8212;begins with a Universal 8.1 app that displays grouped data in a SemanticZoom control.</source>
					<target>This case study&amp;\#8212;which builds on the info given in Bookstore1&amp;\#8212;begins with a Universal 8.1 app that displays grouped data in a SemanticZoom control.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Windows Runtime 8.x to UWP case study: Bookstore2</source>
					<target>Windows Runtime 8.x to UWP case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Windows Runtime 8.x to UWP case study: Bookstore2</source>
					<target>Windows Runtime 8.x to UWP case study: Bookstore2</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-case-study-bookstore1.md)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Universal 8.1 app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom</pc></pc> control.</source>
					<target>This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc>—begins with a Universal 8.1 app that displays grouped data in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom</pc></pc> control.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
					<target>In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>The jump list affords much quicker navigation than scrolling through the list of books.</source>
					<target>The jump list affords much quicker navigation than scrolling through the list of books.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</source>
					<target>We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](w8x-to-uwp-troubleshooting.md#targetplatformversion)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TargetPlatformVersion</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Downloads</source>
					<target>Downloads</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532951)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2\_81 Universal 8.1 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2\_81 Universal 8.1 app</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/?linkid=532952)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2Universal\_10 Windows 10 app</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Download the Bookstore2Universal\_10 Windows 10 app</pc>.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>The Universal 8.1 app</source>
					<target>The Universal 8.1 app</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>Here’s what Bookstore2\_81—the app that we're going to port—looks like.</source>
					<target>Here’s what Bookstore2\_81—the app that we're going to port—looks like.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>It's a horizontally-scrolling (vertically-scrolling on Windows Phone) <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> showing books grouped by author.</source>
					<target>It's a horizontally-scrolling (vertically-scrolling on Windows Phone) <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> showing books grouped by author.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>You can zoom out to the jump list and from there you can navigate back into any group.</source>
					<target>You can zoom out to the jump list and from there you can navigate back into any group.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</source>
					<target>There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>As we'll see, both of these pieces port easily from WinRT 8.1 technology to Windows 10.</source>
					<target>As we'll see, both of these pieces port easily from WinRT 8.1 technology to Windows 10.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>bookstore2\-81 on windows, zoomed-in view</source>
					<target>bookstore2\-81 on windows, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Bookstore2\_81 on Windows, zoomed-in view</source>
					<target>Bookstore2\_81 on Windows, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>bookstore2\-81 on windows, zoomed-out view</source>
					<target>bookstore2\-81 on windows, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>Bookstore2\_81 on Windows, zoomed-out view</source>
					<target>Bookstore2\_81 on Windows, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>bookstore2\-81 on windows phone, zoomed-in view</source>
					<target>bookstore2\-81 on windows phone, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Bookstore2\_81 on Windows Phone, zoomed-in view</source>
					<target>Bookstore2\_81 on Windows Phone, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>bookstore2\-81 on windows phone, zoomed-out view</source>
					<target>bookstore2\-81 on windows phone, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Bookstore2\_81 on Windows Phone, zoomed-out view</source>
					<target>Bookstore2\_81 on Windows Phone, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Porting to a Windows 10 project</source>
					<target>Porting to a Windows 10 project</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The Bookstore2\_81 solution is an 8.1 Universal App project.</source>
					<target>The Bookstore2\_81 solution is an 8.1 Universal App project.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>The Bookstore2\_81.Windows project builds the app package for Windows 8.1, and the Bookstore2\_81.WindowsPhone project builds the app package for Windows Phone 8.1.</source>
					<target>The Bookstore2\_81.Windows project builds the app package for Windows 8.1, and the Bookstore2\_81.WindowsPhone project builds the app package for Windows Phone 8.1.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Bookstore2\_81.Shared is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</source>
					<target>Bookstore2\_81.Shared is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-root.md#if-you-have-a-universal-81-app)</data>
				</originalData>
				<segment state="initial">
					<source>Just like with the previous case study, the option we'll take (of the ones described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">If you have a Universal 8.1 app</pc>) is to port the contents of the Shared project to a Windows 10 that targets the Universal device family.</source>
					<target>Just like with the previous case study, the option we'll take (of the ones described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">If you have a Universal 8.1 app</pc>) is to port the contents of the Shared project to a Windows 10 that targets the Universal device family.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>Begin by creating a new Blank Application (Windows Universal) project.</source>
					<target>Begin by creating a new Blank Application (Windows Universal) project.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Name it Bookstore2Universal\_10.</source>
					<target>Name it Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>These are the files to copy over from Bookstore2\_81 to Bookstore2Universal\_10.</source>
					<target>These are the files to copy over from Bookstore2\_81 to Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>From the Shared project</source>
					<target>From the Shared project</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
					<target>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</source>
					<target>After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> is toggled on.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</source>
					<target>Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Include In Project</pc>.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>That command is what we mean by "including" files or folders in a project.</source>
					<target>That command is what we mean by "including" files or folders in a project.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</source>
					<target>Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Solution Explorer</pc> and then include the file or folder in the project.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>There's no need to do this for files that you're replacing in the destination.</source>
					<target>There's no need to do this for files that you're replacing in the destination.</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
					<target>Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>Copy MainPage.xaml and replace the file in the destination.</source>
					<target>Copy MainPage.xaml and replace the file in the destination.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>From the Windows project</source>
					<target>From the Windows project</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>Copy BookstoreStyles.xaml.</source>
					<target>Copy BookstoreStyles.xaml.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</source>
					<target>We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Copy SeZoUC.xaml and SeZoUC.xaml.cs.</source>
					<target>Copy SeZoUC.xaml and SeZoUC.xaml.cs.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>We'll start with the Windows version of this view, which is appropriate for wide windows, and then later we'll make it adapt to smaller windows and, consequently, smaller devices.</source>
					<target>We'll start with the Windows version of this view, which is appropriate for wide windows, and then later we'll make it adapt to smaller windows and, consequently, smaller devices.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>Edit the source code and markup files that you just copied and change any references to the Bookstore2\_81 namespace to Bookstore2Universal\_10.</source>
					<target>Edit the source code and markup files that you just copied and change any references to the Bookstore2\_81 namespace to Bookstore2Universal\_10.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</source>
					<target>A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>No code changes are needed in the view model, nor in any other imperative code.</source>
					<target>No code changes are needed in the view model, nor in any other imperative code.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "Bookstore2\_81" to "BOOKSTORE2UNIVERSAL\_10".</source>
					<target>But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "Bookstore2\_81" to "BOOKSTORE2UNIVERSAL\_10".</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Right now, you can build and run.</source>
					<target>Right now, you can build and run.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>Here's how our new UWP app looks after having done no work yet to port it to Windows 10.</source>
					<target>Here's how our new UWP app looks after having done no work yet to port it to Windows 10.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>the windows 10 app with initial source code changes running on a desktop device, zoomed-in view</source>
					<target>the windows 10 app with initial source code changes running on a desktop device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>The Windows 10 app with initial source code changes running on a Desktop device, zoomed-in view</source>
					<target>The Windows 10 app with initial source code changes running on a Desktop device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>the windows 10 app with initial source code changes running on a desktop device, zoomed-out view</source>
					<target>the windows 10 app with initial source code changes running on a desktop device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>The Windows 10 app with initial source code changes running on a Desktop device, zoomed-out view</source>
					<target>The Windows 10 app with initial source code changes running on a Desktop device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>The view model and the zoomed-in and zoomed-out views are working together correctly, although there are issues that make that a little hard to see.</source>
					<target>The view model and the zoomed-in and zoomed-out views are working together correctly, although there are issues that make that a little hard to see.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>One issue is that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> doesn't scroll.</source>
					<target>One issue is that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> doesn't scroll.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This is because, in Windows 10, the default style of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> causes it to be laid out vertically (and the Windows 10 design guidelines recommend that we use it that way in new and in ported apps).</source>
					<target>This is because, in Windows 10, the default style of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> causes it to be laid out vertically (and the Windows 10 design guidelines recommend that we use it that way in new and in ported apps).</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>But, horizontal scrolling settings in the custom items panel template that we copied from the Bookstore2\_81 project (which was designed for the 8.1 app) are in conflict with vertical scrolling settings in the Windows 10 default style that is being applied as a result of us having ported to a Windows 10 app.</source>
					<target>But, horizontal scrolling settings in the custom items panel template that we copied from the Bookstore2\_81 project (which was designed for the 8.1 app) are in conflict with vertical scrolling settings in the Windows 10 default style that is being applied as a result of us having ported to a Windows 10 app.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>A second thing is that the app doesn't yet adapt its user-interface to give the best experience in different-sized windows and on small devices.</source>
					<target>A second thing is that the app doesn't yet adapt its user-interface to give the best experience in different-sized windows and on small devices.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>And, thirdly, the correct styles and brushes are not yet being used, resulting in much of the text being invisible (including the group headers that you can click to zoom out).</source>
					<target>And, thirdly, the correct styles and brushes are not yet being used, resulting in much of the text being invisible (including the group headers that you can click to zoom out).</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](#semanticzoom-and-gridview-design-changes)</data>
					<data id="id3">[</data>
					<data id="id4">](#adaptive-ui)</data>
					<data id="id5">[</data>
					<data id="id6">](#universal-styling)</data>
				</originalData>
				<segment state="initial">
					<source>So, in the next three sections (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom and GridView design changes</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adaptive UI</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Universal styling</pc>) we'll remedy those three issues.</source>
					<target>So, in the next three sections (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom and GridView design changes</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Adaptive UI</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Universal styling</pc>) we'll remedy those three issues.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>SemanticZoom and GridView design changes</source>
					<target>SemanticZoom and GridView design changes</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](w8x-to-uwp-porting-xaml-and-ui.md#semantic-zoom)</data>
				</originalData>
				<segment state="initial">
					<source>The design changes in Windows 10 to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> control are described in the section <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom changes</pc>.</source>
					<target>The design changes in Windows 10 to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> control are described in the section <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SemanticZoom changes</pc>.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>We have no work to do in this section in response to those changes.</source>
					<target>We have no work to do in this section in response to those changes.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](w8x-to-uwp-porting-xaml-and-ui.md#gridview-listview-changes)</data>
				</originalData>
				<segment state="initial">
					<source>The changes to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> are described in the section <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GridView/ListView changes</pc>.</source>
					<target>The changes to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> are described in the section <pc dataRefEnd="id6" dataRefStart="id5" id="p3">GridView/ListView changes</pc>.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>We have some very minor adjustments to make to adapt to those changes, as described below.</source>
					<target>We have some very minor adjustments to make to adapt to those changes, as described below.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<originalData>
					<data id="id1">`ZoomedInItemsPanelTemplate`</data>
					<data id="id2">`Orientation="Horizontal"`</data>
					<data id="id3">`GroupPadding="0,0,0,20"`</data>
				</originalData>
				<segment state="initial">
					<source>In SeZoUC.xaml, in <ph dataRef="id1" id="ph1" />, set <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />.</source>
					<target>In SeZoUC.xaml, in <ph dataRef="id1" id="ph1" />, set <ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<originalData>
					<data id="id1">`ZoomedOutItemsPanelTemplate`</data>
					<data id="id2">`ItemsPanel`</data>
				</originalData>
				<segment state="initial">
					<source>In SeZoUC.xaml, delete <ph dataRef="id1" id="ph1" /> and remove the <ph dataRef="id2" id="ph2" /> attribute from the zoomed-out view.</source>
					<target>In SeZoUC.xaml, delete <ph dataRef="id1" id="ph1" /> and remove the <ph dataRef="id2" id="ph2" /> attribute from the zoomed-out view.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>And that's it!</source>
					<target>And that's it!</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Adaptive UI</source>
					<target>Adaptive UI</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>After that change, the UI layout that SeZoUC.xaml gives us is great for when the app is running in a wide window (which is only possible on a device with a large screen).</source>
					<target>After that change, the UI layout that SeZoUC.xaml gives us is great for when the app is running in a wide window (which is only possible on a device with a large screen).</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI that we had in the Windows Phone Store app is arguably most appropriate.</source>
					<target>When the app's window is narrow, though (which happens on a small device, and can also happen on a large device), the UI that we had in the Windows Phone Store app is arguably most appropriate.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>We can use the adaptive Visual State Manager feature to achieve this.</source>
					<target>We can use the adaptive Visual State Manager feature to achieve this.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the smaller templates that we were using in the Windows Phone Store app.</source>
					<target>We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the smaller templates that we were using in the Windows Phone Store app.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-porting-xaml-and-ui.md#effective-pixels-viewing-distance-and-scale-factors)</data>
				</originalData>
				<segment state="initial">
					<source>Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective pixels</pc>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</source>
					<target>Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">effective pixels</pc>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</source>
					<target>We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>We're triggering on window width in this case, but it's possible to trigger on window height, too.</source>
					<target>We're triggering on window width in this case, but it's possible to trigger on window height, too.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</source>
					<target>A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Phones are typically smaller than 548 epx so on a small device like that we'd remain in the default narrow layout.</source>
					<target>Phones are typically smaller than 548 epx so on a small device like that we'd remain in the default narrow layout.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>On a PC, the window will launch by default wide enough to trigger the switch to the wide state.</source>
					<target>On a PC, the window will launch by default wide enough to trigger the switch to the wide state.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>From there, you'll be able to drag the window narrow enough to display two columns of the 250x250-sized items.</source>
					<target>From there, you'll be able to drag the window narrow enough to display two columns of the 250x250-sized items.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>A little narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</source>
					<target>A little narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>So, what properties do we need to set—and change—to achieve these two different layouts?</source>
					<target>So, what properties do we need to set—and change—to achieve these two different layouts?</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>There are two alternatives and each entails a different approach.</source>
					<target>There are two alternatives and each entails a different approach.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>We can put two <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> controls in our markup.</source>
					<target>We can put two <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> controls in our markup.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>One would be a copy of the markup that we were using in the Windows Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> controls inside it), and collapsed by default.</source>
					<target>One would be a copy of the markup that we were using in the Windows Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> controls inside it), and collapsed by default.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242878)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The other would be a copy of the markup that we were using in the Windows Phone Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> controls inside it), and visible by default.</source>
					<target>The other would be a copy of the markup that we were using in the Windows Phone Store app (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> controls inside it), and visible by default.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The visual state would switch the visibility properties of the two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom</pc> controls.</source>
					<target>The visual state would switch the visibility properties of the two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SemanticZoom</pc> controls.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>This would require very little effort to achieve but this not, in general, a high-performance technique.</source>
					<target>This would require very little effort to achieve but this not, in general, a high-performance technique.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<segment state="initial">
					<source>So, if you use it, you should profile your app and make sure it is still meeting your performance goals.</source>
					<target>So, if you use it, you should profile your app and make sure it is still meeting your performance goals.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br242878)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>We can use a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> containing <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> controls.</source>
					<target>We can use a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> containing <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> controls.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242705)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>To achieve our two layouts, in the wide visual state, we would change the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> controls, including the templates that are applied to them, to cause them to lay out in the same way as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GridView</pc></pc> does.</source>
					<target>To achieve our two layouts, in the wide visual state, we would change the properties of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView</pc> controls, including the templates that are applied to them, to cause them to lay out in the same way as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GridView</pc></pc> does.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>This might perform better, but there are so many small differences between the various styles and templates of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc> and between their various item types that this is the more difficult solution to achieve.</source>
					<target>This might perform better, but there are so many small differences between the various styles and templates of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GridView</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc> and between their various item types that this is the more difficult solution to achieve.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>This solution is also tightly coupled to the way the default styles and templates are designed at this moment in time, giving us a solution that's fragile and sensitive to any future changes to the defaults.</source>
					<target>This solution is also tightly coupled to the way the default styles and templates are designed at this moment in time, giving us a solution that's fragile and sensitive to any future changes to the defaults.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>In this case study, we're going to go with the first alternative.</source>
					<target>In this case study, we're going to go with the first alternative.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>But, if you like, you can try the second one and see if that works better for you.</source>
					<target>But, if you like, you can try the second one and see if that works better for you.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<segment state="initial">
					<source>Here are the steps to take to implement that first alternative.</source>
					<target>Here are the steps to take to implement that first alternative.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`x:Name="wideSeZo"`</data>
					<data id="id6">`Visibility="Collapsed"`</data>
				</originalData>
				<segment state="initial">
					<source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> in the markup in your new project, set <ph dataRef="id5" id="ph1" /> and <ph dataRef="id6" id="ph2" />.</source>
					<target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> in the markup in your new project, set <ph dataRef="id5" id="ph1" /> and <ph dataRef="id6" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>Go back to the Bookstore2\_81.WindowsPhone project and open SeZoUC.xaml.</source>
					<target>Go back to the Bookstore2\_81.WindowsPhone project and open SeZoUC.xaml.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">`wideSeZo`</data>
				</originalData>
				<segment state="initial">
					<source>Copy the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> element markup out of that file and paste it immediately after <ph dataRef="id5" id="ph1" /> in your new project.</source>
					<target>Copy the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> element markup out of that file and paste it immediately after <ph dataRef="id5" id="ph1" /> in your new project.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">`x:Name="narrowSeZo"`</data>
				</originalData>
				<segment state="initial">
					<source>Set <ph dataRef="id1" id="ph1" /> on element that you just pasted.</source>
					<target>Set <ph dataRef="id1" id="ph1" /> on element that you just pasted.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<originalData>
					<data id="id1">`narrowSeZo`</data>
				</originalData>
				<segment state="initial">
					<source>But <ph dataRef="id1" id="ph1" /> needs a couple of styles that we haven't copied yet.</source>
					<target>But <ph dataRef="id1" id="ph1" /> needs a couple of styles that we haven't copied yet.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderContainerStyle`</data>
					<data id="id2">`ZoomedOutAuthorItemContainerStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Again in Bookstore2\_81.WindowsPhone, copy the two styles (<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />) out of SeZoUC.xaml and paste them into BookstoreStyles.xaml in your new project.</source>
					<target>Again in Bookstore2\_81.WindowsPhone, copy the two styles (<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />) out of SeZoUC.xaml and paste them into BookstoreStyles.xaml in your new project.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You now have two <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> elements in your new SeZoUC.xaml.</source>
					<target>You now have two <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SemanticZoom</pc></pc> elements in your new SeZoUC.xaml.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Wrap those two elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc>.</source>
					<target>Wrap those two elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc>.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<originalData>
					<data id="id1">`Wide`</data>
					<data id="id2">`wideSeZo`</data>
					<data id="id3">`AuthorGroupHeaderTemplate`</data>
					<data id="id4">`ZoomedOutAuthorTemplate`</data>
					<data id="id5">`BookTemplate`</data>
				</originalData>
				<segment state="initial">
					<source>In BookstoreStyles.xaml in your new project, append the word <ph dataRef="id1" id="ph1" /> to these three resource keys (and to their references in SeZoUC.xaml, but only to the references inside <ph dataRef="id2" id="ph2" />): <ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />.</source>
					<target>In BookstoreStyles.xaml in your new project, append the word <ph dataRef="id1" id="ph1" /> to these three resource keys (and to their references in SeZoUC.xaml, but only to the references inside <ph dataRef="id2" id="ph2" />): <ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>In the Bookstore2\_81.WindowsPhone project, open BookstoreStyles.xaml.</source>
					<target>In the Bookstore2\_81.WindowsPhone project, open BookstoreStyles.xaml.</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>From this file, copy those same three resources (mentioned above), and the two jump list item converters, and the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives, and paste them all into BookstoreStyles.xaml in your new project.</source>
					<target>From this file, copy those same three resources (mentioned above), and the two jump list item converters, and the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives, and paste them all into BookstoreStyles.xaml in your new project.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Finally, in SeZoUC.xaml in your new project, add the appropriate Visual State Manager markup to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> that you added above.</source>
					<target>Finally, in SeZoUC.xaml in your new project, add the appropriate Visual State Manager markup to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Grid</pc> that you added above.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>Universal styling</source>
					<target>Universal styling</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>Now, let's fix up some styling issues, including one that we introduced above while copying from the old project.</source>
					<target>Now, let's fix up some styling issues, including one that we introduced above while copying from the old project.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<originalData>
					<data id="id1">`LayoutRoot`</data>
					<data id="id2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</data>
				</originalData>
				<segment state="initial">
					<source>In MainPage.xaml, change <ph dataRef="id1" id="ph1" />'s Background to <ph dataRef="id2" id="ph2" />.</source>
					<target>In MainPage.xaml, change <ph dataRef="id1" id="ph1" />'s Background to <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<originalData>
					<data id="id1">`TitlePanelMargin`</data>
					<data id="id2">`0`</data>
				</originalData>
				<segment state="initial">
					<source>In BookstoreStyles.xaml, set the value of the resource <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you).</source>
					<target>In BookstoreStyles.xaml, set the value of the resource <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you).</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<originalData>
					<data id="id1">`wideSeZo`</data>
					<data id="id2">`0`</data>
				</originalData>
				<segment state="initial">
					<source>In SeZoUC.xaml, set the Margin of <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you).</source>
					<target>In SeZoUC.xaml, set the Margin of <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" /> (or whatever value looks good to you).</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplateWide`</data>
				</originalData>
				<segment state="initial">
					<source>In BookstoreStyles.xaml, remove the Margin attribute from <ph dataRef="id1" id="ph1" />.</source>
					<target>In BookstoreStyles.xaml, remove the Margin attribute from <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplate`</data>
					<data id="id2">`ZoomedOutAuthorTemplate`</data>
				</originalData>
				<segment state="initial">
					<source>Remove the FontFamily attribute from <ph dataRef="id1" id="ph1" /> and from <ph dataRef="id2" id="ph2" />.</source>
					<target>Remove the FontFamily attribute from <ph dataRef="id1" id="ph1" /> and from <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<originalData>
					<data id="id1">`BookTemplateTitleTextBlockStyle`</data>
					<data id="id2">`BookTemplateAuthorTextBlockStyle`</data>
					<data id="id3">`PageTitleTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>Bookstore2\_81 used the <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> resource keys as an indirection so that a single key had different implementations in the two apps.</source>
					<target>Bookstore2\_81 used the <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> resource keys as an indirection so that a single key had different implementations in the two apps.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>We don't need that indirection any more; we can just reference system styles directly.</source>
					<target>We don't need that indirection any more; we can just reference system styles directly.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<originalData>
					<data id="id1">`TitleTextBlockStyle`</data>
					<data id="id2">`CaptionTextBlockStyle`</data>
					<data id="id3">`HeaderTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>So, replace those references throughout the app with <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> respectively.</source>
					<target>So, replace those references throughout the app with <ph dataRef="id1" id="ph1" />, <ph dataRef="id2" id="ph2" />, and <ph dataRef="id3" id="ph3" /> respectively.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>You can use the Visual Studio <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature to do this quickly and accurately.</source>
					<target>You can use the Visual Studio <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Replace In Files</pc> feature to do this quickly and accurately.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>You can then delete those three unused resources.</source>
					<target>You can then delete those three unused resources.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<originalData>
					<data id="id1">`AuthorGroupHeaderTemplate`</data>
					<data id="id2">`PhoneAccentBrush`</data>
					<data id="id3">`SystemControlBackgroundAccentBrush`</data>
					<data id="id4">`Foreground="White"`</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, replace <ph dataRef="id2" id="ph2" /> with <ph dataRef="id3" id="ph3" />, and set <ph dataRef="id4" id="ph4" /> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p1">TextBlock</pc> so that it looks correct when running on the mobile device family.</source>
					<target>In <ph dataRef="id1" id="ph1" />, replace <ph dataRef="id2" id="ph2" /> with <ph dataRef="id3" id="ph3" />, and set <ph dataRef="id4" id="ph4" /> on the <pc dataRefEnd="id6" dataRefStart="id5" id="p1">TextBlock</pc> so that it looks correct when running on the mobile device family.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<originalData>
					<data id="id1">`BookTemplateWide`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, copy the Foreground attribute from the second <pc dataRefEnd="id3" dataRefStart="id2" id="p1">TextBlock</pc> to the first.</source>
					<target>In <ph dataRef="id1" id="ph1" />, copy the Foreground attribute from the second <pc dataRefEnd="id3" dataRefStart="id2" id="p1">TextBlock</pc> to the first.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<originalData>
					<data id="id1">`ZoomedOutAuthorTemplateWide`</data>
					<data id="id2">`SubheaderTextBlockStyle`</data>
					<data id="id3">`SubtitleTextBlockStyle`</data>
				</originalData>
				<segment state="initial">
					<source>In <ph dataRef="id1" id="ph1" />, change the reference to <ph dataRef="id2" id="ph2" /> (which is now a little too big) to a reference to <ph dataRef="id3" id="ph3" />.</source>
					<target>In <ph dataRef="id1" id="ph1" />, change the reference to <ph dataRef="id2" id="ph2" /> (which is now a little too big) to a reference to <ph dataRef="id3" id="ph3" />.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<originalData>
					<data id="id1">`Background`</data>
					<data id="id2">`narrowSeZo`</data>
				</originalData>
				<segment state="initial">
					<source>The zoomed-out view (the jump list) no longer overlays the zoomed-in view in the new platform, so we can remove the <ph dataRef="id1" id="ph1" /> attribute from the zoomed-out view of <ph dataRef="id2" id="ph2" />.</source>
					<target>The zoomed-out view (the jump list) no longer overlays the zoomed-in view in the new platform, so we can remove the <ph dataRef="id1" id="ph1" /> attribute from the zoomed-out view of <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<originalData>
					<data id="id1">`ZoomedInItemsPanelTemplate`</data>
				</originalData>
				<segment state="initial">
					<source>So that all the styles and templates are in one file, move <ph dataRef="id1" id="ph1" /> out of SeZoUC.xaml and into BookstoreStyles.xaml.</source>
					<target>So that all the styles and templates are in one file, move <ph dataRef="id1" id="ph1" /> out of SeZoUC.xaml and into BookstoreStyles.xaml.</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>That last sequence of styling operations leaves the app looking like this.</source>
					<target>That last sequence of styling operations leaves the app looking like this.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</source>
					<target>the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</source>
					<target>The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</source>
					<target>the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</source>
					<target>The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a mobile device, zoomed-in view</source>
					<target>the ported windows 10 app running on a mobile device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device, zoomed-in view</source>
					<target>The ported Windows 10 app running on a Mobile device, zoomed-in view</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>the ported windows 10 app running on a mobile device, zoomed-out view</source>
					<target>the ported windows 10 app running on a mobile device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>The ported Windows 10 app running on a Mobile device, zoomed-out view</source>
					<target>The ported Windows 10 app running on a Mobile device, zoomed-out view</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<segment state="initial">
					<source>Conclusion</source>
					<target>Conclusion</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<segment state="initial">
					<source>This case study involved a more ambitious user interface than the previous one.</source>
					<target>This case study involved a more ambitious user interface than the previous one.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>As with the previous case study, this particular view model required no work at all, and our efforts went primarily into refactoring the user interface.</source>
					<target>As with the previous case study, this particular view model required no work at all, and our efforts went primarily into refactoring the user interface.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>Some of the changes were a necessary result of combining two projects into one while still supporting many form factors (in fact, many more than we could before).</source>
					<target>Some of the changes were a necessary result of combining two projects into one while still supporting many form factors (in fact, many more than we could before).</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>A few of the changes were to do with changes that have been made to the platform.</source>
					<target>A few of the changes were to do with changes that have been made to the platform.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](w8x-to-uwp-case-study-quizgame.md)</data>
				</originalData>
				<segment state="initial">
					<source>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuizGame</pc>, in which we look at accessing and displaying grouped data.</source>
					<target>The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuizGame</pc>, in which we look at accessing and displaying grouped data.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>