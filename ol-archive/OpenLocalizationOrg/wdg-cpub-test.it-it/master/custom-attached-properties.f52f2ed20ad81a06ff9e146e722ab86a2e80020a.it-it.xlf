<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">4433307ce4ea0a0e9f43328bfab0c594e4bbad0d</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\xaml-platform\custom-attached-properties.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">e2ceef36719f330204b43de4f6e779d7f7b25317</mda:meta><mda:meta type="olxliffhash">00759fdd437eb28941025d0d51146f2e4cd9ba74</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</source>
					<target>Explains how to implement a XAML attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Custom attached properties</source>
					<target>Custom attached properties</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Custom attached properties</source>
					<target>Custom attached properties</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">attached property</pc> is a XAML concept.</source>
					<target>An <pc dataRefEnd="id2" dataRefStart="id1" id="p1">attached property</pc> is a XAML concept.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Attached properties are typically defined as a specialized form of dependency property.</source>
					<target>Attached properties are typically defined as a specialized form of dependency property.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>This topic explains how to implement an attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</source>
					<target>This topic explains how to implement an attached property as a dependency property and how to define the accessor convention that is necessary for your attached property to be usable in XAML.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>Prerequisites</source>
					<target>Prerequisites</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](dependency-properties-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>We assume that you understand dependency properties from the perspective of a consumer of existing dependency properties, and that you have read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</source>
					<target>We assume that you understand dependency properties from the perspective of a consumer of existing dependency properties, and that you have read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dependency properties overview</pc>.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](attached-properties-overview.md)</data>
				</originalData>
				<segment state="initial">
					<source>You should also have read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Attached properties overview</pc>.</source>
					<target>You should also have read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Attached properties overview</pc>.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.</source>
					<target>To follow the examples in this topic, you should also understand XAML and know how to write a basic Windows Runtime app using C++, C#, or Visual Basic.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>Scenarios for attached properties</source>
					<target>Scenarios for attached properties</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>You might create an attached property when there is a reason to have a property-setting mechanism available for classes other than the defining class.</source>
					<target>You might create an attached property when there is a reason to have a property-setting mechanism available for classes other than the defining class.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>The most common scenarios for this are layout and services support.</source>
					<target>The most common scenarios for this are layout and services support.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh759773)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh759772)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Examples of existing layout properties are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.ZIndex</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas.Top</pc></pc>.</source>
					<target>Examples of existing layout properties are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.ZIndex</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Canvas.Top</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>In a layout scenario, elements that exist as child elements to layout-controlling elements can express layout requirements to their parent elements individually, each setting a property value that the parent defines as an attached property.</source>
					<target>In a layout scenario, elements that exist as child elements to layout-controlling elements can express layout requirements to their parent elements individually, each setting a property value that the parent defines as an attached property.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209527)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209561)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>An example of the services-support scenario in the Windows Runtime API is set of the attached properties of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ScrollViewer</pc></pc>, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ScrollViewer.IsZoomChainingEnabled</pc></pc>.</source>
					<target>An example of the services-support scenario in the Windows Runtime API is set of the attached properties of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ScrollViewer</pc></pc>, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ScrollViewer.IsZoomChainingEnabled</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate your custom attached property.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Caution</pc>  An existing limitation of the Windows Runtime XAML implementation is that you cannot animate your custom attached property.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Registering a custom attached property</source>
					<target>Registering a custom attached property</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>If you are defining the attached property strictly for use on other types, the class where the property is registered does not have to derive from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>.</source>
					<target>If you are defining the attached property strictly for use on other types, the class where the property is registered does not have to derive from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>But you do need to have the target parameter for accessors use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DependencyObject</pc> if you follow the typical model of having your attached property also be a dependency property, so that you can use the backing property store.</source>
					<target>But you do need to have the target parameter for accessors use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DependencyObject</pc> if you follow the typical model of having your attached property also be a dependency property, so that you can use the backing property store.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br242362)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>Define your attached property as a dependency property by declaring a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">static</pc> <pc dataRefEnd="id6" dataRefStart="id5" id="p3">readonly</pc> property of type <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">DependencyProperty</pc></pc>.</source>
					<target>Define your attached property as a dependency property by declaring a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">public</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">static</pc> <pc dataRefEnd="id6" dataRefStart="id5" id="p3">readonly</pc> property of type <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">DependencyProperty</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You define this property by using the return value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RegisterAttached</pc></pc> method.</source>
					<target>You define this property by using the return value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RegisterAttached</pc></pc> method.</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>The property name must match the attached property name you specify as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegisterAttached</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">name</pc> parameter, with the string "Property" added to the end.</source>
					<target>The property name must match the attached property name you specify as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegisterAttached</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">name</pc> parameter, with the string "Property" added to the end.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>This is the established convention for naming the identifiers of dependency properties in relation to the properties that they represent.</source>
					<target>This is the established convention for naming the identifiers of dependency properties in relation to the properties that they represent.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The main area where defining a custom attached property differs from a custom dependency property is in how you define the accessors or wrappers.</source>
					<target>The main area where defining a custom attached property differs from a custom dependency property is in how you define the accessors or wrappers.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](custom-dependency-properties.md)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">*</data>
					<data id="id10">*</data>
				</originalData>
				<segment state="initial">
					<source>Instead of the using the wrapper technique described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom dependency properties</pc>, you must also provide static <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Get</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyName</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Set</pc><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PropertyName</pc> methods as accessors for the attached property.</source>
					<target>Instead of the using the wrapper technique described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom dependency properties</pc>, you must also provide static <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Get</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyName</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Set</pc><pc dataRefEnd="id10" dataRefStart="id9" id="p5">PropertyName</pc> methods as accessors for the attached property.</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>The accessors are used mostly by the XAML parser, although any other caller can also use them to set values in non-XAML scenarios.</source>
					<target>The accessors are used mostly by the XAML parser, although any other caller can also use them to set values in non-XAML scenarios.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  If you don't define the accessors correctly, the XAML processor can't access your attached property and anyone who tries to use it will probably get a XAML parser error.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>  If you don't define the accessors correctly, the XAML processor can't access your attached property and anyone who tries to use it will probably get a XAML parser error.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Also, design and coding tools often rely on the "\*Property" conventions for naming identifiers when they encounter a custom dependency property in a referenced assembly.</source>
					<target>Also, design and coding tools often rely on the "\*Property" conventions for naming identifiers when they encounter a custom dependency property in a referenced assembly.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>Accessors</source>
					<target>Accessors</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">_</data>
					<data id="id4">_</data>
				</originalData>
				<segment state="initial">
					<source>The signature for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> accessor must be this.</source>
					<target>The signature for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> accessor must be this.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">_</data>
					<data id="id6">_</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">valueType</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Get</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyName</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">valueType</pc> <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Get</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">PropertyName</pc></target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>For Microsoft Visual Basic, it is this.</source>
					<target>For Microsoft Visual Basic, it is this.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">`(ByVal target As DependencyObject) As `</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">target</pc> object can be of a more specific type in your implementation, but must derive from <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DependencyObject</pc></pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">target</pc> object can be of a more specific type in your implementation, but must derive from <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DependencyObject</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">valueType</pc> return value can also be of a more specific type in your implementation.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">valueType</pc> return value can also be of a more specific type in your implementation.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The basic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type is acceptable, but often you'll want your attached property to enforce type safety.</source>
					<target>The basic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type is acceptable, but often you'll want your attached property to enforce type safety.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>The use of typing in the getter and setter signatures is a recommended type-safety technique.</source>
					<target>The use of typing in the getter and setter signatures is a recommended type-safety technique.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>The signature for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> accessor must be this.</source>
					<target>The signature for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PropertyName</pc> accessor must be this.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">` (DependencyObject target , `</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>For Visual Basic, it is this.</source>
					<target>For Visual Basic, it is this.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">` (ByVal target As DependencyObject, ByVal value As `</data>
					<data id="id4">_</data>
					<data id="id5">_</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyName</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">valueType</pc></target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242356)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">target</pc> object can be of a more specific type in your implementation, but must derive from <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DependencyObject</pc></pc>.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">target</pc> object can be of a more specific type in your implementation, but must derive from <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DependencyObject</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<originalData>
					<data id="id1">*</data>
					<data id="id2">*</data>
					<data id="id3">*</data>
					<data id="id4">*</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">value</pc> object and its <pc dataRefEnd="id4" dataRefStart="id3" id="p2">valueType</pc> can be of a more specific type in your implementation.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">value</pc> object and its <pc dataRefEnd="id4" dataRefStart="id3" id="p2">valueType</pc> can be of a more specific type in your implementation.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Remember that the value for this method is the input that comes from the XAML processor when it encounters your attached property in markup.</source>
					<target>Remember that the value for this method is the input that comes from the XAML processor when it encounters your attached property in markup.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>There must be type conversion or existing markup extension support for the type you use, so that the appropriate type can be created from an attribute value (which is ultimately just a string).</source>
					<target>There must be type conversion or existing markup extension support for the type you use, so that the appropriate type can be created from an attribute value (which is ultimately just a string).</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>The basic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type is acceptable, but often you'll want further type safety.</source>
					<target>The basic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Object</pc> type is acceptable, but often you'll want further type safety.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>To accomplish that, put type enforcement in the accessors.</source>
					<target>To accomplish that, put type enforcement in the accessors.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  It's also possible to define an attached property where the intended usage is through property element syntax.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  It's also possible to define an attached property where the intended usage is through property element syntax.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>In that case you don't need type conversion for the values, but you do need to assure that the values you intend can be constructed in XAML.</source>
					<target>In that case you don't need type conversion for the values, but you do need to assure that the values you intend can be constructed in XAML.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh738505)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager.VisualStateGroups</pc></pc> is an example of an existing attached property that only supports property element usage.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">VisualStateManager.VisualStateGroups</pc></pc> is an example of an existing attached property that only supports property element usage.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>Code example</source>
					<target>Code example</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701833)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>This example shows the dependency property registration (using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RegisterAttached</pc></pc> method), as well as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Get</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Set</pc> accessors, for a custom attached property.</source>
					<target>This example shows the dependency property registration (using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RegisterAttached</pc></pc> method), as well as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Get</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Set</pc> accessors, for a custom attached property.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<originalData>
					<data id="id1">`IsMovable`</data>
				</originalData>
				<segment state="initial">
					<source>In the example, the attached property name is <ph dataRef="id1" id="ph1" />.</source>
					<target>In the example, the attached property name is <ph dataRef="id1" id="ph1" />.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<originalData>
					<data id="id1">`GetIsMovable`</data>
					<data id="id2">`SetIsMovable`</data>
				</originalData>
				<segment state="initial">
					<source>Therefore, the accessors must be named <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</source>
					<target>Therefore, the accessors must be named <ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">`GameService`</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
				</originalData>
				<segment state="initial">
					<source>The owner of the attached property is a service class named <ph dataRef="id1" id="ph1" /> that doesn't have a UI of its own; its purpose is only to provide the attached property services when the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">GameService.IsMovable</pc> attached property is used.</source>
					<target>The owner of the attached property is a service class named <ph dataRef="id1" id="ph1" /> that doesn't have a UI of its own; its purpose is only to provide the attached property services when the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">GameService.IsMovable</pc> attached property is used.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>Defining the attached property in C++ is a bit more complex.</source>
					<target>Defining the attached property in C++ is a bit more complex.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>You have to decide how to factor between the header and code file.</source>
					<target>You have to decide how to factor between the header and code file.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](custom-dependency-properties.md)</data>
				</originalData>
				<segment state="initial">
					<source>Also, you should expose the identifier as a property with only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get</pc> accessor, for reasons discussed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Custom dependency properties</pc>.</source>
					<target>Also, you should expose the identifier as a property with only a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">get</pc> accessor, for reasons discussed in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Custom dependency properties</pc>.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In C++ you must define this property-field relationship explicitly rather than relying on .NET <pc dataRefEnd="id2" dataRefStart="id1" id="p1">readonly</pc> keywording and implicit backing of simple properties.</source>
					<target>In C++ you must define this property-field relationship explicitly rather than relying on .NET <pc dataRefEnd="id2" dataRefStart="id1" id="p1">readonly</pc> keywording and implicit backing of simple properties.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>You also need to perform the registration of the attached property within a helper function that only gets run once, when the app first starts but before any XAML pages that need the attached property are loaded.</source>
					<target>You also need to perform the registration of the attached property within a helper function that only gets run once, when the app first starts but before any XAML pages that need the attached property are loaded.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3"> / </data>
					<data id="id4">[</data>
					<data id="id5">](https://msdn.microsoft.com/library/windows/apps/br242325)</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
				</originalData>
				<segment state="initial">
					<source>The typical place to call your property registration helper functions for any and all dependency or attached properties is from within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Application</pc></pc> constructor in the code for your app.xaml file.</source>
					<target>The typical place to call your property registration helper functions for any and all dependency or attached properties is from within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App</pc><ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2"><pc dataRefEnd="id7" dataRefStart="id6" id="p3">Application</pc></pc> constructor in the code for your app.xaml file.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Using your custom attached property in XAML</source>
					<target>Using your custom attached property in XAML</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>After you have defined your attached property and included its support members as part of a custom type, you must then make the definitions available for XAML usage.</source>
					<target>After you have defined your attached property and included its support members as part of a custom type, you must then make the definitions available for XAML usage.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>To do this, you must map a XAML namespace that will reference the code namespace that contains the relevant class.</source>
					<target>To do this, you must map a XAML namespace that will reference the code namespace that contains the relevant class.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>In cases where you have defined the attached property as part of a library, you must include that library as part of the app package for the app.</source>
					<target>In cases where you have defined the attached property as part of a library, you must include that library as part of the app package for the app.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>An XML namespace mapping for XAML is typically placed in the root element of a XAML page.</source>
					<target>An XML namespace mapping for XAML is typically placed in the root element of a XAML page.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">`GameService`</data>
					<data id="id2">`UserAndCustomControls`</data>
				</originalData>
				<segment state="initial">
					<source>For example, for the class named <ph dataRef="id1" id="ph1" /> in the namespace <ph dataRef="id2" id="ph2" /> that contains the attached property definitions shown in preceding snippets, the mapping might look like this.</source>
					<target>For example, for the class named <ph dataRef="id1" id="ph1" /> in the namespace <ph dataRef="id2" id="ph2" /> that contains the attached property definitions shown in preceding snippets, the mapping might look like this.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">`GameService.IsMovable`</data>
				</originalData>
				<segment state="initial">
					<source>Using the mapping, you can set your <ph dataRef="id1" id="ph1" /> attached property on any element that matches your target definition, including an existing type that Windows Runtime defines.</source>
					<target>Using the mapping, you can set your <ph dataRef="id1" id="ph1" /> attached property on any element that matches your target definition, including an existing type that Windows Runtime defines.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>If you are setting the property on an element that is also within the same mapped XML namespace, you still must include the prefix on the attached property name.</source>
					<target>If you are setting the property on an element that is also within the same mapped XML namespace, you still must include the prefix on the attached property name.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>This is because the prefix qualifies the owner type.</source>
					<target>This is because the prefix qualifies the owner type.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>The attached property's attribute cannot be assumed to be within the same XML namespace as the element where the attribute is included, even though, by normal XML rules, attributes can inherit namespace from elements.</source>
					<target>The attached property's attribute cannot be assumed to be within the same XML namespace as the element where the attribute is included, even though, by normal XML rules, attributes can inherit namespace from elements.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<originalData>
					<data id="id1">`GameService.IsMovable`</data>
					<data id="id2">`ImageWithLabelControl`</data>
				</originalData>
				<segment state="initial">
					<source>For example, if you are setting <ph dataRef="id1" id="ph1" /> on a custom type of <ph dataRef="id2" id="ph2" /> (definition not shown), and even if both were defined in the same code namespace mapped to same prefix, the XAML would still be this.</source>
					<target>For example, if you are setting <ph dataRef="id1" id="ph1" /> on a custom type of <ph dataRef="id2" id="ph2" /> (definition not shown), and even if both were defined in the same code namespace mapped to same prefix, the XAML would still be this.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you are writing a XAML UI with C++, you must include the header for the custom type that defines the attached property, any time that a XAML page uses that type.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you are writing a XAML UI with C++, you must include the header for the custom type that defines the attached property, any time that a XAML page uses that type.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Each XAML page has an associated .xaml.h code-behind header.</source>
					<target>Each XAML page has an associated .xaml.h code-behind header.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This is where you should include (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">\#include</pc>) the header for the definition of the attached property's owner type.</source>
					<target>This is where you should include (using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">\#include</pc>) the header for the definition of the attached property's owner type.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Value type of a custom attached property</source>
					<target>Value type of a custom attached property</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>The type that is used as the value type of a custom attached property affects the usage, the definition, or both the usage and definition.</source>
					<target>The type that is used as the value type of a custom attached property affects the usage, the definition, or both the usage and definition.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">*</data>
					<data id="id6">*</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh701833)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>The attached property's value type is declared in several places: in the signatures of both the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc> accessor methods, and also as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyType</pc> parameter of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">RegisterAttached</pc></pc> call.</source>
					<target>The attached property's value type is declared in several places: in the signatures of both the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc> accessor methods, and also as the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyType</pc> parameter of the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">RegisterAttached</pc></pc> call.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>The most common value type for attached properties (custom or otherwise) is a simple string.</source>
					<target>The most common value type for attached properties (custom or otherwise) is a simple string.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>This is because attached properties are generally intended for XAML attribute usage, and using a string as the value type keeps the properties lightweight.</source>
					<target>This is because attached properties are generally intended for XAML attribute usage, and using a string as the value type keeps the properties lightweight.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Other primitives that have native conversion to string methods, such as integer, double, or an enumeration value, are also common as value types for attached properties.</source>
					<target>Other primitives that have native conversion to string methods, such as integer, double, or an enumeration value, are also common as value types for attached properties.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>You can use other value types—ones that don't support native string conversion—as the attached property value.</source>
					<target>You can use other value types—ones that don't support native string conversion—as the attached property value.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>However, this entails making a choice about either the usage or the implementation:</source>
					<target>However, this entails making a choice about either the usage or the implementation:</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>You can leave the attached property as it is, but the attached property can support usage only where the attached property is a property element, and the value is declared as an object element.</source>
					<target>You can leave the attached property as it is, but the attached property can support usage only where the attached property is a property element, and the value is declared as an object element.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>In this case, the property type does have to support XAML usage as an object element.</source>
					<target>In this case, the property type does have to support XAML usage as an object element.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>For existing Windows Runtime reference classes, check the XAML syntax to make sure that the type supports XAML object element usage.</source>
					<target>For existing Windows Runtime reference classes, check the XAML syntax to make sure that the type supports XAML object element usage.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>You can leave the attached property as it is, but use it only in an attribute usage through a XAML reference technique such as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Binding</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StaticResource</pc> that can be expressed as a string.</source>
					<target>You can leave the attached property as it is, but use it only in an attribute usage through a XAML reference technique such as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Binding</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">StaticResource</pc> that can be expressed as a string.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>More about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> example</source>
					<target>More about the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas.Left</pc> example</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh759771)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In earlier examples of attached property usages we showed different ways to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> attached property.</source>
					<target>In earlier examples of attached property usages we showed different ways to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas.Left</pc></pc> attached property.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>But what does that change about how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> interacts with your object, and when does that happen?</source>
					<target>But what does that change about how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> interacts with your object, and when does that happen?</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>We'll examine this particular example further, because if you implement an attached property, it's interesting to see what else a typical attached property owner class intends to do with its attached property values if it finds them on other objects.</source>
					<target>We'll examine this particular example further, because if you implement an attached property, it's interesting to see what else a typical attached property owner class intends to do with its attached property values if it finds them on other objects.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The main function of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> is to be an absolute-positioned layout container in UI.</source>
					<target>The main function of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> is to be an absolute-positioned layout container in UI.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br227514)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>The children of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> are stored in a base-class defined property <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Children</pc></pc>.</source>
					<target>The children of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> are stored in a base-class defined property <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Children</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Of all the panels <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> is the only one that uses absolute positioning.</source>
					<target>Of all the panels <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> is the only one that uses absolute positioning.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208911)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>It would've bloated the object model of the common <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc></pc> type to add properties that might only be of concern to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc> and those particular <pc dataRefEnd="id8" dataRefStart="id7" id="p4">UIElement</pc> cases where they are child elements of a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">UIElement</pc>.</source>
					<target>It would've bloated the object model of the common <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc></pc> type to add properties that might only be of concern to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas</pc> and those particular <pc dataRefEnd="id8" dataRefStart="id7" id="p4">UIElement</pc> cases where they are child elements of a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">UIElement</pc>.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Defining the layout control properties of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> to be attached properties that any <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc> can use keeps the object model cleaner.</source>
					<target>Defining the layout control properties of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> to be attached properties that any <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIElement</pc> can use keeps the object model cleaner.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209267)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208952)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/br208914)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
				</originalData>
				<segment state="initial">
					<source>In order to be a practical panel, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> has behavior that overrides the framework-level <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Measure</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Arrange</pc></pc> methods.</source>
					<target>In order to be a practical panel, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Canvas</pc></pc> has behavior that overrides the framework-level <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Measure</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Arrange</pc></pc> methods.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>This is where <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> actually checks for attached property values on its children.</source>
					<target>This is where <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> actually checks for attached property values on its children.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227514)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>Part of both the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Measure</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Arrange</pc> patterns is a loop that iterates over any content, and a panel has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Children</pc></pc> property that makes it explicit what's supposed to be considered the child of a panel.</source>
					<target>Part of both the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Measure</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Arrange</pc> patterns is a loop that iterates over any content, and a panel has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Children</pc></pc> property that makes it explicit what's supposed to be considered the child of a panel.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209269)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">[</data>
					<data id="id8">](https://msdn.microsoft.com/library/windows/apps/br209270)</data>
					<data id="id9">**</data>
					<data id="id10">**</data>
				</originalData>
				<segment state="initial">
					<source>So the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> layout behavior iterates through these children, and makes static <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.GetLeft</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Canvas.GetTop</pc></pc> calls on each child to see whether those attached properties contain a non-default value (default is 0).</source>
					<target>So the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> layout behavior iterates through these children, and makes static <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Canvas.GetLeft</pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Canvas.GetTop</pc></pc> calls on each child to see whether those attached properties contain a non-default value (default is 0).</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>These values are then used to absolutely position each child in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> available layout space according to the specific values provided by each child, and committed using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Arrange</pc>.</source>
					<target>These values are then used to absolutely position each child in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Canvas</pc> available layout space according to the specific values provided by each child, and committed using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Arrange</pc>.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>The code looks something like this pseudocode:</source>
					<target>The code looks something like this pseudocode:</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt228351)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For more info on how panels work, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML custom panels overview</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For more info on how panels work, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML custom panels overview</pc>.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>RegisterAttached</source>
					<target>RegisterAttached</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Attached properties overview</source>
					<target>Attached properties overview</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Custom dependency properties</source>
					<target>Custom dependency properties</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>XAML overview</source>
					<target>XAML overview</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>