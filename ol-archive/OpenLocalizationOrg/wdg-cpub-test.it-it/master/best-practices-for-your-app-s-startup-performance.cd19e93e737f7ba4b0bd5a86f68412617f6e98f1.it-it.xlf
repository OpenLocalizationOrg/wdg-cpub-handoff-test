<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">b17d11b6904840a2c8b242fa4f3781347ef0bd9c</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolci1\debug-test-perf\best-practices-for-your-app-s-startup-performance.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">d2ff18ead2ff5bd3b9c9ea533331a405642e99e1</mda:meta><mda:meta type="olxliffhash">7c1f8e5679bdcbb48d5747373c10a02b01c886be</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Best practices for your app's startup performance</source>
					<target>Best practices for your app's startup performance</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</source>
					<target>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>Best practices for your app's startup performance</source>
					<target>Best practices for your app's startup performance</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>\[ Updated for UWP apps on Windows 10.</source>
					<target>\[ Updated for UWP apps on Windows 10.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
				</originalData>
				<segment state="initial">
					<source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
					<target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</source>
					<target>Create Universal Windows Platform (UWP) apps with optimal startup times by improving the way you handle launch and activation.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>Best practices for your app's startup performance</source>
					<target>Best practices for your app's startup performance</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>In part, users perceive whether your app is fast or slow based on how long it takes to start up.</source>
					<target>In part, users perceive whether your app is fast or slow based on how long it takes to start up.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</source>
					<target>For the purposes of this topic, an app's startup time begins when the user starts the app, and ends when the user can interact with the app in some meaningful way.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>This section provides suggestions on how to get better performance out of your app when it starts.</source>
					<target>This section provides suggestions on how to get better performance out of your app when it starts.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<segment state="initial">
					<source>Measuring your app's startup time</source>
					<target>Measuring your app's startup time</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<segment state="initial">
					<source>Be sure to start your app a few times before you actually measure its startup time.</source>
					<target>Be sure to start your app a few times before you actually measure its startup time.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</source>
					<target>This gives you a baseline for your measurement and ensures that you're measuring as reasonably short a startup time as possible.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</source>
					<target>By the time your UWP app arrives on your customers' computers, your app has been compiled with the .NET Native toolchain.</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<segment state="initial">
					<source>.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
					<target>.NET Native is an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
					<target>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<segment state="initial">
					<source>Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</source>
					<target>Applications built with .NET Native statically link in a custom runtime and the new converged .NET Core that can run on all devices, so they don’t depend on the in-box .NET implementation.</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<segment state="initial">
					<source>On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</source>
					<target>On your development machine, by default your app uses .NET Native if you’re building it in “Release” mode, and it uses CoreCLR if you’re building it in “Debug” mode.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<segment state="initial">
					<source>You can configure this in Visual Studio from the Build page in “Properties” (C#) or Compile-&gt;Advanced in "My Project" (VB).</source>
					<target>You can configure this in Visual Studio from the Build page in “Properties” (C#) or Compile-&gt;Advanced in "My Project" (VB).</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<segment state="initial">
					<source>Look for a checkbox that says “Compile with .NET Native Toolchain”.</source>
					<target>Look for a checkbox that says “Compile with .NET Native Toolchain”.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<segment state="initial">
					<source>Of course, you should take measurements that are representative of what the end user will experience.</source>
					<target>Of course, you should take measurements that are representative of what the end user will experience.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<segment state="initial">
					<source>So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</source>
					<target>So, if you're not sure you're compiling your app to native code on your development machine, you could run the Native Image Generator (Ngen.exe) tool to precompile your app before you measure its startup time.</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<segment state="initial">
					<source>The following procedure describes how to run Ngen.exe to precompile your app.</source>
					<target>The following procedure describes how to run Ngen.exe to precompile your app.</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<segment state="initial">
					<source>To run Ngen.exe</source>
					<target>To run Ngen.exe</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<segment state="initial">
					<source>Run your app at least one time to ensure that Ngen.exe detects it.</source>
					<target>Run your app at least one time to ensure that Ngen.exe detects it.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc> by doing one of the following:</source>
					<target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc> by doing one of the following:</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>Search for "Task Scheduler" from the start screen.</source>
					<target>Search for "Task Scheduler" from the start screen.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>Run "taskschd.msc."</source>
					<target>Run "taskschd.msc."</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>In the left-hand pane of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc>, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Scheduler Library</pc>.</source>
					<target>In the left-hand pane of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Scheduler</pc>, expand <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Scheduler Library</pc>.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.</pc></source>
					<target>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft.</pc></target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.</pc></source>
					<target>Expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows.</pc></target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework</pc>.</source>
					<target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework</pc>.</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN 4.x</pc> from the task list.</source>
					<target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN 4.x</pc> from the task list.</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you are using a 64-bit computer, there is also a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN v4.x 64</pc>.</source>
					<target>If you are using a 64-bit computer, there is also a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">.NET Framework NGEN v4.x 64</pc>.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you are building a 64-bit app, select .<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NET Framework NGEN v4.x 64</pc>.</source>
					<target>If you are building a 64-bit app, select .<pc dataRefEnd="id2" dataRefStart="id1" id="p1">NET Framework NGEN v4.x 64</pc>.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc>.</source>
					<target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Action</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Run</pc>.</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</source>
					<target>Ngen.exe precompiles all the apps on the machine that have been used and do not have native images.</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<segment state="initial">
					<source>If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</source>
					<target>If there are a lot of apps that need to be precompiled, this can take a long time, but subsequent runs are much faster.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>When you recompile your app, the native image is no longer used.</source>
					<target>When you recompile your app, the native image is no longer used.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</source>
					<target>Instead, the app is just-in-time compiled, which means that it is compiled as the app runs.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<segment state="initial">
					<source>You must rerun Ngen.exe to get a new native image.</source>
					<target>You must rerun Ngen.exe to get a new native image.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<segment state="initial">
					<source>Defer work as long as possible</source>
					<target>Defer work as long as possible</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<segment state="initial">
					<source>To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</source>
					<target>To increase your app's startup time, do only the work that absolutely needs to be done to let the user start interacting with the app.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>This can be especially beneficial if you can delay loading additional assemblies.</source>
					<target>This can be especially beneficial if you can delay loading additional assemblies.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>The common language runtime loads an assembly the first time it is used.</source>
					<target>The common language runtime loads an assembly the first time it is used.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</source>
					<target>If you can minimize the number of assemblies that are loaded, you might be able to improve your app's startup time and its memory consumption.</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>Do long-running work independently</source>
					<target>Do long-running work independently</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>Your app can be interactive even though there are parts of the app that aren't fully functional.</source>
					<target>Your app can be interactive even though there are parts of the app that aren't fully functional.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<segment state="initial">
					<source>For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</source>
					<target>For example, if your app displays data that takes a while to retrieve, you can make that code execute independently of the app's startup code by retrieving the data asynchronously.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<segment state="initial">
					<source>When the data is available, populate the app's user interface with the data.</source>
					<target>When the data is available, populate the app's user interface with the data.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</source>
					<target>Many of the Universal Windows Platform (UWP) APIs that retrieve data are asynchronous, so you will probably be retrieving data asynchronously anyway.</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</data>
				</originalData>
				<segment state="initial">
					<source>For more info about asynchronous APIs, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</source>
					<target>For more info about asynchronous APIs, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call asynchronous APIs in C# or Visual Basic</pc>.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</source>
					<target>If you do work that doesn't use asynchronous APIs, you can use the Task class to do long running work so that you don't block the user from interacting with the app.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<segment state="initial">
					<source>This will keep your app responsive to the user while the data loads.</source>
					<target>This will keep your app responsive to the user while the data loads.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</source>
					<target>If your app takes an especially long time to load part of its UI, consider adding a string in that area that says something like, "Getting latest data," so that your users know that the app is still processing.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>Minimize startup time</source>
					<target>Minimize startup time</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</source>
					<target>All but the simplest apps require a perceivable amount of time to load resources, parse XAML, set up data structures, and run logic at activation.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<segment state="initial">
					<source>Here, we analyze the process of activation by breaking it into three phases.</source>
					<target>Here, we analyze the process of activation by breaking it into three phases.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<segment state="initial">
					<source>We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</source>
					<target>We also provide tips for reducing the time spent in each phase, and techniques for making each phase of your app's startup more palatable to the user.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>The activation period is the time between the moment a user starts the app and the moment the app is functional.</source>
					<target>The activation period is the time between the moment a user starts the app and the moment the app is functional.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<segment state="initial">
					<source>This is a critical time because it’s a user’s first impression of your app.</source>
					<target>This is a critical time because it’s a user’s first impression of your app.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>They expect instant and continuous feedback from the system and apps.</source>
					<target>They expect instant and continuous feedback from the system and apps.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</source>
					<target>The system and the app are perceived to be broken or poorly designed when apps don't start quickly.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<segment state="initial">
					<source>Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</source>
					<target>Even worse, if an app takes too long to activate, the Process Lifetime Manager (PLM) might kill it, or the user might uninstall it.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>Introduction to the stages of startup</source>
					<target>Introduction to the stages of startup</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</source>
					<target>Startup involves a number of moving pieces, and all of them need to be correctly coordinated for the best user experience.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>The following steps occur between your user clicking on your app tile and the application content being shown.</source>
					<target>The following steps occur between your user clicking on your app tile and the application content being shown.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>The Windows shell starts the process and Main is called.</source>
					<target>The Windows shell starts the process and Main is called.</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>The Application object is created.</source>
					<target>The Application object is created.</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<segment state="initial">
					<source>(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</source>
					<target>(Project template) Constructor calls InitializeComponent, which causes App.xaml to be parsed and objects created.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<segment state="initial">
					<source>Application.OnLaunched event is raised.</source>
					<target>Application.OnLaunched event is raised.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>(ProjectTemplate) App code creates a Frame and navigates to MainPage.</source>
					<target>(ProjectTemplate) App code creates a Frame and navigates to MainPage.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</source>
					<target>(ProjectTemplate) Mainpage constructor calls InitializeComponent which causes MainPage.xaml to be parsed and objects created.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>ProjectTemplate) Window.Current.Activate() is called.</source>
					<target>ProjectTemplate) Window.Current.Activate() is called.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>XAML Platform runs the Layout pass including Measure &amp; Arrange.</source>
					<target>XAML Platform runs the Layout pass including Measure &amp; Arrange.</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<segment state="initial">
					<source>ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</source>
					<target>ApplyTemplate will cause control template content to be created for each control, which is typically the bulk of Layout time for startup.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<segment state="initial">
					<source>Render is called to create visuals for all the window contents.</source>
					<target>Render is called to create visuals for all the window contents.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<segment state="initial">
					<source>Frame is presented to the Desktop Windows Manager (DWM).</source>
					<target>Frame is presented to the Desktop Windows Manager (DWM).</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<segment state="initial">
					<source>Do less in your Startup path</source>
					<target>Do less in your Startup path</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<segment state="initial">
					<source>Keep your startup code path free from anything that is not needed for your first frame.</source>
					<target>Keep your startup code path free from anything that is not needed for your first frame.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</source>
					<target>If you have user dlls containing controls that are not needed during first frame, consider delay loading them.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<segment state="initial">
					<source>If you have a portion of your UI dependent on data from the cloud, then split that UI.</source>
					<target>If you have a portion of your UI dependent on data from the cloud, then split that UI.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<segment state="initial">
					<source>First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</source>
					<target>First, bring up the UI that is not dependent on cloud data and asynchronously bring up the cloud-dependent UI.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</source>
					<target>You should also consider caching data locally so that the application will work offline or not be affected by slow network connectivity.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<segment state="initial">
					<source>Show progress UI if your UI is waiting for data.</source>
					<target>Show progress UI if your UI is waiting for data.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</source>
					<target>Be cautious of app designs that involve a lot of parsing of configuration files, or UI that is dynamically generated by code.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Reduce element count</source>
					<target>Reduce element count</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</source>
					<target>Startup performance in a XAML app is directly correlated to the number of elements you create during startup.</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>The fewer elements you create, the less time your app will take to start up.</source>
					<target>The fewer elements you create, the less time your app will take to start up.</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>As a rough benchmark, consider each element to take 1ms to create.</source>
					<target>As a rough benchmark, consider each element to take 1ms to create.</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>Templates used in items controls can have the biggest impact, as they are repeated multiple times.</source>
					<target>Templates used in items controls can have the biggest impact, as they are repeated multiple times.</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](optimize-gridview-and-listview.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>UserControls and control templates will be expanded, so those should also be taken into account.</source>
					<target>UserControls and control templates will be expanded, so those should also be taken into account.</target>
				</segment>
			</unit>
			<unit id="194" translate="yes">
				<segment state="initial">
					<source>If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</source>
					<target>If you create any XAML that does not appear on the screen, then you should justify whether those pieces of XAML should be created during your startup.</target>
				</segment>
			</unit>
			<unit id="195" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://blogs.msdn.com/b/visualstudio/archive/2015/02/24/introducing-the-ui-debugging-tools-for-xaml.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Live Visual Tree</pc> window shows the child element counts for each node in the tree.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visual Studio Live Visual Tree</pc> window shows the child element counts for each node in the tree.</target>
				</segment>
			</unit>
			<unit id="196" translate="yes">
				<segment state="initial">
					<source>Live visual tree.</source>
					<target>Live visual tree.</target>
				</segment>
			</unit>
			<unit id="197" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use x:DeferLoadStrategy</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use x:DeferLoadStrategy</pc>.</target>
				</segment>
			</unit>
			<unit id="198" translate="yes">
				<segment state="initial">
					<source>Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</source>
					<target>Collapsing an element, or setting its opacity to 0, will not prevent the element from being created.</target>
				</segment>
			</unit>
			<unit id="199" translate="yes">
				<segment state="initial">
					<source>Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</source>
					<target>Using x:DeferLoadStrategy, you can delay the loading of a piece of UI, and load it when needed.</target>
				</segment>
			</unit>
			<unit id="200" translate="yes">
				<segment state="initial">
					<source>This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</source>
					<target>This is good way to delay processing UI that is not visible during the startup screen, so that you can load it when needed, or as part of a set of delayed logic.</target>
				</segment>
			</unit>
			<unit id="201" translate="yes">
				<segment state="initial">
					<source>To trigger the loading, you need only call FindName for the element.</source>
					<target>To trigger the loading, you need only call FindName for the element.</target>
				</segment>
			</unit>
			<unit id="202" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</data>
				</originalData>
				<segment state="initial">
					<source>For an example and more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</source>
					<target>For an example and more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:DeferLoadStrategy attribute</pc>.</target>
				</segment>
			</unit>
			<unit id="203" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Virtualization</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Virtualization</pc>.</target>
				</segment>
			</unit>
			<unit id="204" translate="yes">
				<segment state="initial">
					<source>If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</source>
					<target>If you have list or repeater content in your UI then it’s highly advised that you use UI virtualization.</target>
				</segment>
			</unit>
			<unit id="205" translate="yes">
				<segment state="initial">
					<source>If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</source>
					<target>If list UI is not virtualized then you are paying the cost of creating all the elements up front, and that can slow down your startup.</target>
				</segment>
			</unit>
			<unit id="206" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](optimize-gridview-and-listview.md)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ListView and GridView UI optimization</pc>.</target>
				</segment>
			</unit>
			<unit id="207" translate="yes">
				<segment state="initial">
					<source>Application performance is not only about raw performance, it’s also about perception.</source>
					<target>Application performance is not only about raw performance, it’s also about perception.</target>
				</segment>
			</unit>
			<unit id="208" translate="yes">
				<segment state="initial">
					<source>Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</source>
					<target>Changing the order of operations so that visual aspects occur first will commonly make the user feel like the application is faster.</target>
				</segment>
			</unit>
			<unit id="209" translate="yes">
				<segment state="initial">
					<source>Users will consider the application loaded when the content is on the screen.</source>
					<target>Users will consider the application loaded when the content is on the screen.</target>
				</segment>
			</unit>
			<unit id="210" translate="yes">
				<segment state="initial">
					<source>Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</source>
					<target>Commonly, applications need to do multiple things as part of the startup, and not all of that is required to bring up the UI, so those should be delayed or prioritized lower than the UI.</target>
				</segment>
			</unit>
			<unit id="211" translate="yes">
				<segment state="initial">
					<source>This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</source>
					<target>This topic talks about the “first frame” which comes from animation/TV, and is a measure of how long until content is seen by the end user.</target>
				</segment>
			</unit>
			<unit id="212" translate="yes">
				<segment state="initial">
					<source>Improve startup perception</source>
					<target>Improve startup perception</target>
				</segment>
			</unit>
			<unit id="213" translate="yes">
				<segment state="initial">
					<source>Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</source>
					<target>Let’s use the example of a simple online game to identify each phase of startup and different techniques to give the user feedback throughout the process.</target>
				</segment>
			</unit>
			<unit id="214" translate="yes">
				<segment state="initial">
					<source>For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</source>
					<target>For this example, the first phase of activation is the time between the user tapping the game’s tile and the game starting to run its code.</target>
				</segment>
			</unit>
			<unit id="215" translate="yes">
				<segment state="initial">
					<source>During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</source>
					<target>During this time, the system doesn’t have any content to display to the user to even indicate that the correct game has started.</target>
				</segment>
			</unit>
			<unit id="216" translate="yes">
				<segment state="initial">
					<source>But providing a splash screen gives that content to the system.</source>
					<target>But providing a splash screen gives that content to the system.</target>
				</segment>
			</unit>
			<unit id="217" translate="yes">
				<segment state="initial">
					<source>The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</source>
					<target>The game then informs the user that the first phase of activation has completed by replacing the static splash screen with its own UI when it begins running code.</target>
				</segment>
			</unit>
			<unit id="218" translate="yes">
				<segment state="initial">
					<source>The second phase of activation encompasses creating and initializing structures critical for the game.</source>
					<target>The second phase of activation encompasses creating and initializing structures critical for the game.</target>
				</segment>
			</unit>
			<unit id="219" translate="yes">
				<segment state="initial">
					<source>If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</source>
					<target>If an app can quickly create its initial UI with the data available after the first phase of activation, then the second phase is trivial and you can display the UI immediately.</target>
				</segment>
			</unit>
			<unit id="220" translate="yes">
				<segment state="initial">
					<source>Otherwise we recommend that the app display a loading page while it is initialized.</source>
					<target>Otherwise we recommend that the app display a loading page while it is initialized.</target>
				</segment>
			</unit>
			<unit id="221" translate="yes">
				<segment state="initial">
					<source>What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</source>
					<target>What the loading page looks like is up to you and it can be as simple as displaying a progress bar or a progress ring.</target>
				</segment>
			</unit>
			<unit id="222" translate="yes">
				<segment state="initial">
					<source>The key point is that the app indicates that it is performing tasks before becoming responsive.</source>
					<target>The key point is that the app indicates that it is performing tasks before becoming responsive.</target>
				</segment>
			</unit>
			<unit id="223" translate="yes">
				<segment state="initial">
					<source>In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</source>
					<target>In the case of the game, it would like to display its initial screen but that UI requires that some images and sounds be loaded from disk into memory.</target>
				</segment>
			</unit>
			<unit id="224" translate="yes">
				<segment state="initial">
					<source>These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</source>
					<target>These tasks take a couple of seconds, so the app keeps the user informed by replacing the splash screen with a loading page, which shows a simple animation related to the theme of the game.</target>
				</segment>
			</unit>
			<unit id="225" translate="yes">
				<segment state="initial">
					<source>The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</source>
					<target>The third stage begins after the game has a minimal set of info to create an interactive UI, which replaces the loading page.</target>
				</segment>
			</unit>
			<unit id="226" translate="yes">
				<segment state="initial">
					<source>At this point the only info available to the online game is the content that the app loaded from disk.</source>
					<target>At this point the only info available to the online game is the content that the app loaded from disk.</target>
				</segment>
			</unit>
			<unit id="227" translate="yes">
				<segment state="initial">
					<source>The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</source>
					<target>The game can ship with enough content to create an interactive UI; but because it’s an online game it won’t be functional until it connects to the internet and downloads some additional info.</target>
				</segment>
			</unit>
			<unit id="228" translate="yes">
				<segment state="initial">
					<source>Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</source>
					<target>Until it has all the info it needs to be functional, the user can interact with the UI, but features that need additional data from the web should give feedback that content is still loading.</target>
				</segment>
			</unit>
			<unit id="229" translate="yes">
				<segment state="initial">
					<source>It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</source>
					<target>It may take some time for an app to become fully functional, so it’s important that functionality be made available as soon as possible.</target>
				</segment>
			</unit>
			<unit id="230" translate="yes">
				<segment state="initial">
					<source>Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</source>
					<target>Now that we identified the three stages of activation in the online game, let’s tie them to actual code.</target>
				</segment>
			</unit>
			<unit id="231" translate="yes">
				<segment state="initial">
					<source>Phase 1</source>
					<target>Phase 1</target>
				</segment>
			</unit>
			<unit id="232" translate="yes">
				<segment state="initial">
					<source>Before an app starts, it needs to tell the system what it wants to display as the splash screen.</source>
					<target>Before an app starts, it needs to tell the system what it wants to display as the splash screen.</target>
				</segment>
			</unit>
			<unit id="233" translate="yes">
				<segment state="initial">
					<source>It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</source>
					<target>It does so by providing an image and background color to the SplashScreen element in an app’s manifest, as in the example.</target>
				</segment>
			</unit>
			<unit id="234" translate="yes">
				<segment state="initial">
					<source>Windows displays this after the app begins activation.</source>
					<target>Windows displays this after the app begins activation.</target>
				</segment>
			</unit>
			<unit id="235" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt187306)</data>
				</originalData>
				<segment state="initial">
					<source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a splash screen</pc>.</source>
					<target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a splash screen</pc>.</target>
				</segment>
			</unit>
			<unit id="236" translate="yes">
				<segment state="initial">
					<source>Use the app’s constructor only to initialize data structures that are critical to the app.</source>
					<target>Use the app’s constructor only to initialize data structures that are critical to the app.</target>
				</segment>
			</unit>
			<unit id="237" translate="yes">
				<segment state="initial">
					<source>The constructor is called only the first time the app is run and not necessarily each time the app is activated.</source>
					<target>The constructor is called only the first time the app is run and not necessarily each time the app is activated.</target>
				</segment>
			</unit>
			<unit id="238" translate="yes">
				<segment state="initial">
					<source>For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</source>
					<target>For example, the constructor isn't called for an app that has been run, placed in the background, and then activated via the search contract.</target>
				</segment>
			</unit>
			<unit id="239" translate="yes">
				<segment state="initial">
					<source>Phase 2</source>
					<target>Phase 2</target>
				</segment>
			</unit>
			<unit id="240" translate="yes">
				<segment state="initial">
					<source>There are a number of reasons for an app to be activated, each of which you may want to handle differently.</source>
					<target>There are a number of reasons for an app to be activated, each of which you may want to handle differently.</target>
				</segment>
			</unit>
			<unit id="241" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242330)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701797)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
					<data id="id9">[</data>
					<data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR242331)</data>
					<data id="id11">**</data>
					<data id="id12">**</data>
					<data id="id13">[</data>
					<data id="id14">](https://msdn.microsoft.com/library/windows/apps/Hh701799)</data>
					<data id="id15">**</data>
					<data id="id16">**</data>
					<data id="id17">[</data>
					<data id="id18">](https://msdn.microsoft.com/library/windows/apps/Hh701801)</data>
					<data id="id19">**</data>
					<data id="id20">**</data>
					<data id="id21">[</data>
					<data id="id22">](https://msdn.microsoft.com/library/windows/apps/BR242335)</data>
					<data id="id23">**</data>
					<data id="id24">**</data>
					<data id="id25">[</data>
					<data id="id26">](https://msdn.microsoft.com/library/windows/apps/BR242336)</data>
					<data id="id27">**</data>
					<data id="id28">**</data>
					<data id="id29">[</data>
					<data id="id30">](https://msdn.microsoft.com/library/windows/apps/Hh701806)</data>
					<data id="id31">**</data>
					<data id="id32">**</data>
				</originalData>
				<segment state="initial">
					<source>You can override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnCachedFileUpdaterActivated</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">OnFileActivated</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">OnFileOpenPickerActivated</pc></pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">OnFileSavePickerActivated</pc></pc>, <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">OnLaunched</pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">OnSearchActivated</pc></pc>, and <pc dataRefEnd="id30" dataRefStart="id29" id="p15"><pc dataRefEnd="id32" dataRefStart="id31" id="p16">OnShareTargetActivated</pc></pc> methods to handle each reason of activation.</source>
					<target>You can override <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">OnActivated</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">OnCachedFileUpdaterActivated</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">OnFileActivated</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">OnFileOpenPickerActivated</pc></pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">OnFileSavePickerActivated</pc></pc>, <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">OnLaunched</pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">OnSearchActivated</pc></pc>, and <pc dataRefEnd="id30" dataRefStart="id29" id="p15"><pc dataRefEnd="id32" dataRefStart="id31" id="p16">OnShareTargetActivated</pc></pc> methods to handle each reason of activation.</target>
				</segment>
			</unit>
			<unit id="242" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209051)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209046)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>One of the things that an app must do in these methods is create a UI, assign it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Content</pc></pc>, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Window.Activate</pc></pc>.</source>
					<target>One of the things that an app must do in these methods is create a UI, assign it to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Content</pc></pc>, and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Window.Activate</pc></pc>.</target>
				</segment>
			</unit>
			<unit id="243" translate="yes">
				<segment state="initial">
					<source>At this point the splash screen is replaced by the UI that the app created.</source>
					<target>At this point the splash screen is replaced by the UI that the app created.</target>
				</segment>
			</unit>
			<unit id="244" translate="yes">
				<segment state="initial">
					<source>This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</source>
					<target>This visual could either be loading screen or the app's actual UI if enough info is available at activation to create it.</target>
				</segment>
			</unit>
			<unit id="245" translate="yes">
				<segment state="initial">
					<source>Apps that display a loading page in the activation handler begin work to create the UI in the background.</source>
					<target>Apps that display a loading page in the activation handler begin work to create the UI in the background.</target>
				</segment>
			</unit>
			<unit id="246" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208723)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>After that element has been created, its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Loaded</pc></pc> event occurs.</source>
					<target>After that element has been created, its <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Loaded</pc></pc> event occurs.</target>
				</segment>
			</unit>
			<unit id="247" translate="yes">
				<segment state="initial">
					<source>In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</source>
					<target>In the event handler you replace the window's content, which is currently the loading screen, with the newly created home page.</target>
				</segment>
			</unit>
			<unit id="248" translate="yes">
				<segment state="initial">
					<source>It’s critical that an app with an extended initialization period show a loading page.</source>
					<target>It’s critical that an app with an extended initialization period show a loading page.</target>
				</segment>
			</unit>
			<unit id="249" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209046)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Aside from providing the sure feedback about the activation process, the process will be terminated if <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Activate</pc></pc> is not called within 15 seconds of the start of the activation process.</source>
					<target>Aside from providing the sure feedback about the activation process, the process will be terminated if <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Window.Activate</pc></pc> is not called within 15 seconds of the start of the activation process.</target>
				</segment>
			</unit>
			<unit id="250" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=234889)</data>
				</originalData>
				<segment state="initial">
					<source>For an example of using extended splash screens, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Splash screen sample</pc>.</source>
					<target>For an example of using extended splash screens, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Splash screen sample</pc>.</target>
				</segment>
			</unit>
			<unit id="251" translate="yes">
				<segment state="initial">
					<source>Phase 3</source>
					<target>Phase 3</target>
				</segment>
			</unit>
			<unit id="252" translate="yes">
				<segment state="initial">
					<source>Just because the app displayed the UI doesn't mean it is completely ready for use.</source>
					<target>Just because the app displayed the UI doesn't mean it is completely ready for use.</target>
				</segment>
			</unit>
			<unit id="253" translate="yes">
				<segment state="initial">
					<source>In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</source>
					<target>In the case of our game, the UI is displayed with placeholders for features that require data from the internet.</target>
				</segment>
			</unit>
			<unit id="254" translate="yes">
				<segment state="initial">
					<source>At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</source>
					<target>At this point the game downloads the additional data needed to make the app fully functional and progressively enables features as data is acquired.</target>
				</segment>
			</unit>
			<unit id="255" translate="yes">
				<segment state="initial">
					<source>Sometimes much of the content needed for activation can be packaged with the app.</source>
					<target>Sometimes much of the content needed for activation can be packaged with the app.</target>
				</segment>
			</unit>
			<unit id="256" translate="yes">
				<segment state="initial">
					<source>Such is the case with a simple game.</source>
					<target>Such is the case with a simple game.</target>
				</segment>
			</unit>
			<unit id="257" translate="yes">
				<segment state="initial">
					<source>This makes the activation process quite simple.</source>
					<target>This makes the activation process quite simple.</target>
				</segment>
			</unit>
			<unit id="258" translate="yes">
				<segment state="initial">
					<source>But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</source>
					<target>But many programs (such as news readers and photo viewers) must pull info from the web to become functional.</target>
				</segment>
			</unit>
			<unit id="259" translate="yes">
				<segment state="initial">
					<source>This data can be large and take a fair amount of time to download.</source>
					<target>This data can be large and take a fair amount of time to download.</target>
				</segment>
			</unit>
			<unit id="260" translate="yes">
				<segment state="initial">
					<source>How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</source>
					<target>How the app gets this data during the activation process can have a huge impact on the perceived performance of an app.</target>
				</segment>
			</unit>
			<unit id="261" translate="yes">
				<segment state="initial">
					<source>You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</source>
					<target>You could display a loading page, or worse, a splash screen, for minutes if an app tried to download an entire data set it needs for functionality in phase one or two of activation.</target>
				</segment>
			</unit>
			<unit id="262" translate="yes">
				<segment state="initial">
					<source>This makes an app look like it’s hung or cause it to be terminated by the system.</source>
					<target>This makes an app look like it’s hung or cause it to be terminated by the system.</target>
				</segment>
			</unit>
			<unit id="263" translate="yes">
				<segment state="initial">
					<source>We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</source>
					<target>We recommend that an app download the minimal amount of data to show an interactive UI with placeholder elements in phase 2 and then progressively load data, which replaces the placeholder elements, in phase 3.</target>
				</segment>
			</unit>
			<unit id="264" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](optimize-gridview-and-listview.md)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on dealing with data, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize ListView and GridView</pc>.</source>
					<target>For more info on dealing with data, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optimize ListView and GridView</pc>.</target>
				</segment>
			</unit>
			<unit id="265" translate="yes">
				<segment state="initial">
					<source>How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</source>
					<target>How exactly an app reacts to each phase of startup is completely up to you, but providing the user as much feedback as possible (splash screen, loading screen, UI while data loads) makes the user feel as though an app, and the system as a whole, are fast.</target>
				</segment>
			</unit>
			<unit id="266" translate="yes">
				<segment state="initial">
					<source>Minimize managed assemblies in the startup path</source>
					<target>Minimize managed assemblies in the startup path</target>
				</segment>
			</unit>
			<unit id="267" translate="yes">
				<segment state="initial">
					<source>Reusable code often comes in the form of modules (DLLs) included in a project.</source>
					<target>Reusable code often comes in the form of modules (DLLs) included in a project.</target>
				</segment>
			</unit>
			<unit id="268" translate="yes">
				<segment state="initial">
					<source>Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</source>
					<target>Loading these modules requires accessing the disk, and as you can imagine, the cost of doing so can add up.</target>
				</segment>
			</unit>
			<unit id="269" translate="yes">
				<segment state="initial">
					<source>This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</source>
					<target>This has the greatest impact on cold startup, but it can have an impact on warm startup, too.</target>
				</segment>
			</unit>
			<unit id="270" translate="yes">
				<segment state="initial">
					<source>In the case of C# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</source>
					<target>In the case of C# and Visual Basic, the CLR tries to delay that cost as much as possible by loading assemblies on demand.</target>
				</segment>
			</unit>
			<unit id="271" translate="yes">
				<segment state="initial">
					<source>That is, the CLR doesn’t load a module until an executed method references it.</source>
					<target>That is, the CLR doesn’t load a module until an executed method references it.</target>
				</segment>
			</unit>
			<unit id="272" translate="yes">
				<segment state="initial">
					<source>So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</source>
					<target>So, reference only assemblies that are necessary to the launch of your app in startup code so that the CLR doesn’t load unnecessary modules.</target>
				</segment>
			</unit>
			<unit id="273" translate="yes">
				<segment state="initial">
					<source>If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</source>
					<target>If you have unused code paths in your startup path that have unnecessary references, you can move these code paths to other methods to avoid the unnecessary loads.</target>
				</segment>
			</unit>
			<unit id="274" translate="yes">
				<segment state="initial">
					<source>Another way to reduce module loads is to combine your app modules.</source>
					<target>Another way to reduce module loads is to combine your app modules.</target>
				</segment>
			</unit>
			<unit id="275" translate="yes">
				<segment state="initial">
					<source>Loading one large assembly typically takes less time than loading two small ones.</source>
					<target>Loading one large assembly typically takes less time than loading two small ones.</target>
				</segment>
			</unit>
			<unit id="276" translate="yes">
				<segment state="initial">
					<source>This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</source>
					<target>This is not always possible, and you should combine modules only if it doesn't make a material difference to developer productivity or code reusability.</target>
				</segment>
			</unit>
			<unit id="277" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=251609)</data>
					<data id="id3">[</data>
					<data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/ff191077.aspx)</data>
				</originalData>
				<segment state="initial">
					<source>You can use tools such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PerfView</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Analyzer (WPA)</pc> to find out what modules are loaded on startup.</source>
					<target>You can use tools such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PerfView</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Analyzer (WPA)</pc> to find out what modules are loaded on startup.</target>
				</segment>
			</unit>
			<unit id="278" translate="yes">
				<segment state="initial">
					<source>Make smart web requests</source>
					<target>Make smart web requests</target>
				</segment>
			</unit>
			<unit id="279" translate="yes">
				<segment state="initial">
					<source>You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</source>
					<target>You can dramatically improve the loading time of an app by packaging its contents locally, including XAML, images, and any other files important to the app.</target>
				</segment>
			</unit>
			<unit id="280" translate="yes">
				<segment state="initial">
					<source>Disk operations are faster than network operations.</source>
					<target>Disk operations are faster than network operations.</target>
				</segment>
			</unit>
			<unit id="281" translate="yes">
				<segment state="initial">
					<source>If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</source>
					<target>If an app needs a particular file at initialization, you can reduce the overall startup time by loading it from disk instead of retrieving it from a remote server.</target>
				</segment>
			</unit>
			<unit id="282" translate="yes">
				<segment state="initial">
					<source>Journal and Cache Pages Efficiently</source>
					<target>Journal and Cache Pages Efficiently</target>
				</segment>
			</unit>
			<unit id="283" translate="yes">
				<segment state="initial">
					<source>The Frame control provides navigation features.</source>
					<target>The Frame control provides navigation features.</target>
				</segment>
			</unit>
			<unit id="284" translate="yes">
				<segment state="initial">
					<source>It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</source>
					<target>It offers navigation to a Page (Navigate method), navigation journaling (BackStack/ForwardStack properties, GoForward/GoBack method), Page caching (Page.NavigationCacheMode), and serialization support (GetNavigationState method).</target>
				</segment>
			</unit>
			<unit id="285" translate="yes">
				<segment state="initial">
					<source>The performance to be aware of with Frame is primarily around the journaling and page caching.</source>
					<target>The performance to be aware of with Frame is primarily around the journaling and page caching.</target>
				</segment>
			</unit>
			<unit id="286" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame journaling</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame journaling</pc>.</target>
				</segment>
			</unit>
			<unit id="287" translate="yes">
				<segment state="initial">
					<source>When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</source>
					<target>When you navigate to a page with Frame.Navigate(), a PageStackEntry for the current page is added to Frame.BackStack collection.</target>
				</segment>
			</unit>
			<unit id="288" translate="yes">
				<segment state="initial">
					<source>PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</source>
					<target>PageStackEntry is relatively small, but there’s no built-in limit to the size of the BackStack collection.</target>
				</segment>
			</unit>
			<unit id="289" translate="yes">
				<segment state="initial">
					<source>Potentially, a user could navigate in a loop and grow this collection indefinitely.</source>
					<target>Potentially, a user could navigate in a loop and grow this collection indefinitely.</target>
				</segment>
			</unit>
			<unit id="290" translate="yes">
				<segment state="initial">
					<source>The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</source>
					<target>The PageStackEntry also includes the parameter that was passed to the Frame.Navigate() method.</target>
				</segment>
			</unit>
			<unit id="291" translate="yes">
				<segment state="initial">
					<source>It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</source>
					<target>It’s recommended that that parameter be a primitive serializable type (such as an int or string), in order to allow the Frame.GetNavigationState() method to work.</target>
				</segment>
			</unit>
			<unit id="292" translate="yes">
				<segment state="initial">
					<source>But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</source>
					<target>But that parameter could potentially reference an object that accounts for more significant amounts of working set or other resources, making each entry in the BackStack that much more expensive.</target>
				</segment>
			</unit>
			<unit id="293" translate="yes">
				<segment state="initial">
					<source>For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</source>
					<target>For example, you could potentially use a StorageFile as a parameter, and consequently the BackStack is keeping an indefinite number of files open.</target>
				</segment>
			</unit>
			<unit id="294" translate="yes">
				<segment state="initial">
					<source>Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</source>
					<target>Therefore it’s recommended to keep the navigation parameters small, and to limit the size of the BackStack.</target>
				</segment>
			</unit>
			<unit id="295" translate="yes">
				<segment state="initial">
					<source>The BackStack is a standard vector (IList in C#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</source>
					<target>The BackStack is a standard vector (IList in C#, Platform::Vector in C++/CX), and so can be trimmed simply by removing entries.</target>
				</segment>
			</unit>
			<unit id="296" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page caching</pc>.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">Page caching</pc>.</target>
				</segment>
			</unit>
			<unit id="297" translate="yes">
				<segment state="initial">
					<source>By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</source>
					<target>By default, when you navigate to a page with the Frame.Navigate method, a new instance of the page is instantiated.</target>
				</segment>
			</unit>
			<unit id="298" translate="yes">
				<segment state="initial">
					<source>Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</source>
					<target>Similarly, if you then navigate back to the previous page with Frame.GoBack, a new instance of the previous page is allocated.</target>
				</segment>
			</unit>
			<unit id="299" translate="yes">
				<segment state="initial">
					<source>Frame, though, offers an optional page cache that can avoid these instantiations.</source>
					<target>Frame, though, offers an optional page cache that can avoid these instantiations.</target>
				</segment>
			</unit>
			<unit id="300" translate="yes">
				<segment state="initial">
					<source>To get a page put into the cache, use the Page.NavigationCacheMode property.</source>
					<target>To get a page put into the cache, use the Page.NavigationCacheMode property.</target>
				</segment>
			</unit>
			<unit id="301" translate="yes">
				<segment state="initial">
					<source>Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</source>
					<target>Setting that mode to Required will force the page to be cached, setting it to Enabled will allow it to be cached.</target>
				</segment>
			</unit>
			<unit id="302" translate="yes">
				<segment state="initial">
					<source>By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</source>
					<target>By default the cache size is 10 pages, but this can be overridden with the Frame.CacheSize property.</target>
				</segment>
			</unit>
			<unit id="303" translate="yes">
				<segment state="initial">
					<source>All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</source>
					<target>All Required pages will be cached, and if there are fewer than CacheSize Required pages, Enabled pages can be cached as well.</target>
				</segment>
			</unit>
			<unit id="304" translate="yes">
				<segment state="initial">
					<source>Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</source>
					<target>Page caching can help performance by avoiding instantiations, and therefore improving navigation performance.</target>
				</segment>
			</unit>
			<unit id="305" translate="yes">
				<segment state="initial">
					<source>Page caching can hurt performance by over-caching and therefore impacting working set.</source>
					<target>Page caching can hurt performance by over-caching and therefore impacting working set.</target>
				</segment>
			</unit>
			<unit id="306" translate="yes">
				<segment state="initial">
					<source>Therefore it’s recommend to use page caching as appropriate for your application.</source>
					<target>Therefore it’s recommend to use page caching as appropriate for your application.</target>
				</segment>
			</unit>
			<unit id="307" translate="yes">
				<segment state="initial">
					<source>For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</source>
					<target>For example, say you have an app that shows a list of items in a Frame, and when you tap on an item, it navigates the frame to a detail page for that item.</target>
				</segment>
			</unit>
			<unit id="308" translate="yes">
				<segment state="initial">
					<source>The list page should probably be set to cache.</source>
					<target>The list page should probably be set to cache.</target>
				</segment>
			</unit>
			<unit id="309" translate="yes">
				<segment state="initial">
					<source>If the detail page is the same for all items, it should probably be cached as well.</source>
					<target>If the detail page is the same for all items, it should probably be cached as well.</target>
				</segment>
			</unit>
			<unit id="310" translate="yes">
				<segment state="initial">
					<source>But if the detail page is more heterogeneous, it might be better to leave caching off.</source>
					<target>But if the detail page is more heterogeneous, it might be better to leave caching off.</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>