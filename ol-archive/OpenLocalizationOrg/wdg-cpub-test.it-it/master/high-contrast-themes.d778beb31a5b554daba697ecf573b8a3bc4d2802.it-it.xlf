<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="it-it" version="2.0" xml:space="preserve" xmlns="urn:oasis:names:tc:xliff:document:2.0">
	<file id="1">
		<mda:metadata>
			<mda:metaGroup>
				<mda:meta type="tool-id">mdxliff</mda:meta>
				<mda:meta type="tool-name">mdxliff</mda:meta>
				<mda:meta type="tool-version">1.0-00ddeee</mda:meta>
				<mda:meta type="tool-company">Microsoft</mda:meta>
			</mda:metaGroup>
		<mda:metaGroup><mda:meta type="olfilehash">44562de02c52e4d44cc5559d8d74425a620477be</mda:meta><mda:meta type="olfilepath">wdg-cpub-test\ndolciTestTDReach\accessibility\high-contrast-themes.md</mda:meta><mda:meta type="oltranslationpriority"></mda:meta><mda:meta type="oltranslationtype">Human Translation</mda:meta><mda:meta type="olskeletonhash">296c43179cc5976535b1c4137b1ceba857a0f587</mda:meta><mda:meta type="olxliffhash">a1842f4617a5d4661783c8bc44ff0028a008427b</mda:meta></mda:metaGroup></mda:metadata>
		<group id="content">
			<unit id="101" translate="yes">
				<segment state="initial">
					<source>Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</source>
					<target>Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</target>
				</segment>
			</unit>
			<unit id="102" translate="yes">
				<segment state="initial">
					<source>High-contrast themes</source>
					<target>High-contrast themes</target>
				</segment>
			</unit>
			<unit id="103" translate="yes">
				<segment state="initial">
					<source>High-contrast themes</source>
					<target>High-contrast themes</target>
				</segment>
			</unit>
			<unit id="104" translate="yes">
				<segment state="initial">
					<source>Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</source>
					<target>Describes the steps needed to ensure your Universal Windows Platform (UWP) app is usable when a high-contrast theme is active.</target>
				</segment>
			</unit>
			<unit id="105" translate="yes">
				<segment state="initial">
					<source>A UWP app supports high-contrast themes by default.</source>
					<target>A UWP app supports high-contrast themes by default.</target>
				</segment>
			</unit>
			<unit id="106" translate="yes">
				<segment state="initial">
					<source>If a user has chosen that they want the system to use a high-contrast theme from system settings or accessibility tools, the framework automatically uses colors and style settings that produce a high-contrast layout and rendering for controls and components in the UI.</source>
					<target>If a user has chosen that they want the system to use a high-contrast theme from system settings or accessibility tools, the framework automatically uses colors and style settings that produce a high-contrast layout and rendering for controls and components in the UI.</target>
				</segment>
			</unit>
			<unit id="107" translate="yes">
				<segment state="initial">
					<source>This default support is based on using the default themes and templates.</source>
					<target>This default support is based on using the default themes and templates.</target>
				</segment>
			</unit>
			<unit id="108" translate="yes">
				<segment state="initial">
					<source>These themes and templates make references to system colors as resource definitions, and the resource sources change automatically when the system is using a high-contrast mode.</source>
					<target>These themes and templates make references to system colors as resource definitions, and the resource sources change automatically when the system is using a high-contrast mode.</target>
				</segment>
			</unit>
			<unit id="109" translate="yes">
				<segment state="initial">
					<source>However, if you use custom templates, themes, and styles for your control, be careful that you do not disable the built-in support for high contrast.</source>
					<target>However, if you use custom templates, themes, and styles for your control, be careful that you do not disable the built-in support for high contrast.</target>
				</segment>
			</unit>
			<unit id="110" translate="yes">
				<segment state="initial">
					<source>If you use one of the XAML designers for Microsoft Visual Studio for styling, the designer generates a separate, high-contrast theme alongside the primary theme whenever you define a template that is significantly different from the default template.</source>
					<target>If you use one of the XAML designers for Microsoft Visual Studio for styling, the designer generates a separate, high-contrast theme alongside the primary theme whenever you define a template that is significantly different from the default template.</target>
				</segment>
			</unit>
			<unit id="111" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.resourcedictionary.themedictionaries.aspx)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR208794)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>The separate theme dictionaries go into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc></pc> collection, a dedicated property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc></pc> element.</source>
					<target>The separate theme dictionaries go into the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc></pc> collection, a dedicated property of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ResourceDictionary</pc></pc> element.</target>
				</segment>
			</unit>
			<unit id="112" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/Hh465374)</data>
				</originalData>
				<segment state="initial">
					<source>For more info on themes and control templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</source>
					<target>For more info on themes and control templates, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</target>
				</segment>
			</unit>
			<unit id="113" translate="yes">
				<segment state="initial">
					<source>It's often very informative to look at the XAML resource dictionaries and themes for specific controls and see how the themes are constructed and how they reference resources that are similar but different for each possible high-contrast setting.</source>
					<target>It's often very informative to look at the XAML resource dictionaries and themes for specific controls and see how the themes are constructed and how they reference resources that are similar but different for each possible high-contrast setting.</target>
				</segment>
			</unit>
			<unit id="114" translate="yes">
				<segment state="initial">
					<source>Theme dictionaries</source>
					<target>Theme dictionaries</target>
				</segment>
			</unit>
			<unit id="115" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>When you need to change a color from its system default or need to add images as decoration, such as a background image, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeDictionaries</pc> collection for your app.</source>
					<target>When you need to change a color from its system default or need to add images as decoration, such as a background image, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeDictionaries</pc> collection for your app.</target>
				</segment>
			</unit>
			<unit id="116" translate="yes">
				<segment state="initial">
					<source>Start by creating the proper plumbing, if it doesn't already exist.</source>
					<target>Start by creating the proper plumbing, if it doesn't already exist.</target>
				</segment>
			</unit>
			<unit id="117" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In App.xaml, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeDictionaries</pc> collection :</source>
					<target>In App.xaml, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeDictionaries</pc> collection :</target>
				</segment>
			</unit>
			<unit id="118" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is not the only available key name.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is not the only available key name.</target>
				</segment>
			</unit>
			<unit id="119" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>There's also <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastBlack</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrastWhite</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">HighContrastCustom</pc>.</source>
					<target>There's also <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastBlack</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrastWhite</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">HighContrastCustom</pc>.</target>
				</segment>
			</unit>
			<unit id="120" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In most cases, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is all you need.</source>
					<target>In most cases, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is all you need.</target>
				</segment>
			</unit>
			<unit id="121" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">[</data>
					<data id="id4">](http://msdn.microsoft.com/library/windows/apps/xaml/windows.ui.xaml.media.brush.aspx)</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>, create the type of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Brush</pc></pc> you need, usually a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SolidColorBrush</pc>.</source>
					<target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>, create the type of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Brush</pc></pc> you need, usually a <pc dataRefEnd="id8" dataRefStart="id7" id="p4">SolidColorBrush</pc>.</target>
				</segment>
			</unit>
			<unit id="122" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Give it a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key</pc> name specific to what it is being used for:</source>
					<target>Give it a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Key</pc> name specific to what it is being used for:</target>
				</segment>
			</unit>
			<unit id="123" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Assign the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color</pc> you want for it:</source>
					<target>Assign the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color</pc> you want for it:</target>
				</segment>
			</unit>
			<unit id="124" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Copy that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> into <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc> :</source>
					<target>Copy that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> into <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc> :</target>
				</segment>
			</unit>
			<unit id="125" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Determine what color your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> should be and modify it in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc>.</source>
					<target>Determine what color your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> should be and modify it in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc>.</target>
				</segment>
			</unit>
			<unit id="126" translate="yes">
				<segment state="initial">
					<source>Determining a color for high contrast requires a bit of learning.</source>
					<target>Determining a color for high contrast requires a bit of learning.</target>
				</segment>
			</unit>
			<unit id="127" translate="yes">
				<segment state="initial">
					<source>The plumbing you've created above makes it easy to update.</source>
					<target>The plumbing you've created above makes it easy to update.</target>
				</segment>
			</unit>
			<unit id="128" translate="yes">
				<segment state="initial">
					<source>High-contrast colors</source>
					<target>High-contrast colors</target>
				</segment>
			</unit>
			<unit id="129" translate="yes">
				<segment state="initial">
					<source>Users can switch to high-contrast using the settings page.</source>
					<target>Users can switch to high-contrast using the settings page.</target>
				</segment>
			</unit>
			<unit id="130" translate="yes">
				<segment state="initial">
					<source>There are 4 high-contrast themes by default.</source>
					<target>There are 4 high-contrast themes by default.</target>
				</segment>
			</unit>
			<unit id="131" translate="yes">
				<segment state="initial">
					<source>Once the user selects an option, the page shows a preview of how apps will likely look.</source>
					<target>Once the user selects an option, the page shows a preview of how apps will likely look.</target>
				</segment>
			</unit>
			<unit id="132" translate="yes">
				<segment state="initial">
					<source>High-contrast settings</source>
					<target>High-contrast settings</target>
				</segment>
			</unit>
			<unit id="133" translate="yes">
				<segment state="initial">
					<source>High-contrast settings</source>
					<target>High-contrast settings</target>
				</segment>
			</unit>
			<unit id="134" translate="yes">
				<segment state="initial">
					<source>Every square on the preview can be clicked to change its value.</source>
					<target>Every square on the preview can be clicked to change its value.</target>
				</segment>
			</unit>
			<unit id="135" translate="yes">
				<segment state="initial">
					<source>Every square also directly maps to a system resource.</source>
					<target>Every square also directly maps to a system resource.</target>
				</segment>
			</unit>
			<unit id="136" translate="yes">
				<segment state="initial">
					<source>High-contrast resources</source>
					<target>High-contrast resources</target>
				</segment>
			</unit>
			<unit id="137" translate="yes">
				<segment state="initial">
					<source>High-contrast resources</source>
					<target>High-contrast resources</target>
				</segment>
			</unit>
			<unit id="138" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
					<data id="id3">_</data>
					<data id="id4">_</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
				</originalData>
				<segment state="initial">
					<source>If you prefix the names called out above with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemColor</pc> and postfix them with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color</pc>, for example: <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SystemColorWindowTextColor</pc>, these will dynamically update to match what the user specified.</source>
					<target>If you prefix the names called out above with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemColor</pc> and postfix them with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Color</pc>, for example: <pc dataRefEnd="id6" dataRefStart="id5" id="p3">SystemColorWindowTextColor</pc>, these will dynamically update to match what the user specified.</target>
				</segment>
			</unit>
			<unit id="139" translate="yes">
				<segment state="initial">
					<source>This frees you from having to pick a specific color for high contrast.</source>
					<target>This frees you from having to pick a specific color for high contrast.</target>
				</segment>
			</unit>
			<unit id="140" translate="yes">
				<segment state="initial">
					<source>Instead, pick a system resource that corresponds to what the color is being used for.</source>
					<target>Instead, pick a system resource that corresponds to what the color is being used for.</target>
				</segment>
			</unit>
			<unit id="141" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>In the above example, we named our page background color to be <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrushBrandedPageBackground</pc>.</source>
					<target>In the above example, we named our page background color to be <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrushBrandedPageBackground</pc>.</target>
				</segment>
			</unit>
			<unit id="142" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Since this will be used for a background, we can map this to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemColorWindowColor</pc> in high contrast:</source>
					<target>Since this will be used for a background, we can map this to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SystemColorWindowColor</pc> in high contrast:</target>
				</segment>
			</unit>
			<unit id="143" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>If you stick to the palette of 8 high contrast colors, you don't have to create any additional high contrast <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionaries</pc>.</source>
					<target>If you stick to the palette of 8 high contrast colors, you don't have to create any additional high contrast <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionaries</pc>.</target>
				</segment>
			</unit>
			<unit id="144" translate="yes">
				<segment state="initial">
					<source>This limited palette can often present difficult challenges in representing complex visual states.</source>
					<target>This limited palette can often present difficult challenges in representing complex visual states.</target>
				</segment>
			</unit>
			<unit id="145" translate="yes">
				<segment state="initial">
					<source>Often, adding a border to an area only in high contrast can help clarify a situation.</source>
					<target>Often, adding a border to an area only in high contrast can help clarify a situation.</target>
				</segment>
			</unit>
			<unit id="146" translate="yes">
				<segment state="initial">
					<source>DO's and DON'Ts</source>
					<target>DO's and DON'Ts</target>
				</segment>
			</unit>
			<unit id="147" translate="yes">
				<segment state="initial">
					<source>DO test in high-contrast mode early and often.</source>
					<target>DO test in high-contrast mode early and often.</target>
				</segment>
			</unit>
			<unit id="148" translate="yes">
				<segment state="initial">
					<source>DO use the named colors for their intended purpose.</source>
					<target>DO use the named colors for their intended purpose.</target>
				</segment>
			</unit>
			<unit id="149" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">**</data>
					<data id="id6">**</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>DO put primitives like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Brush</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Thickness</pc> inside of <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ThemeDictionaries</pc>.</source>
					<target>DO put primitives like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Color</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Brush</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Thickness</pc> inside of <pc dataRefEnd="id8" dataRefStart="id7" id="p4">ThemeDictionaries</pc>.</target>
				</segment>
			</unit>
			<unit id="150" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Avoid putting more complex resources like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Style</pc> elements in them.</source>
					<target>Avoid putting more complex resources like <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Style</pc> elements in them.</target>
				</segment>
			</unit>
			<unit id="151" translate="yes">
				<segment state="initial">
					<source>The following example works fine:</source>
					<target>The following example works fine:</target>
				</segment>
			</unit>
			<unit id="152" translate="yes">
				<segment state="initial">
					<source>DO use high-contrast foreground colors for foreground UI elements.</source>
					<target>DO use high-contrast foreground colors for foreground UI elements.</target>
				</segment>
			</unit>
			<unit id="153" translate="yes">
				<segment state="initial">
					<source>DO use high-contrast colors with their defined color pair.</source>
					<target>DO use high-contrast colors with their defined color pair.</target>
				</segment>
			</unit>
			<unit id="154" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>For example, always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BUTTONTEXT</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BUTTONFACE</pc>, especially in a foreground/background situation.</source>
					<target>For example, always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BUTTONTEXT</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BUTTONFACE</pc>, especially in a foreground/background situation.</target>
				</segment>
			</unit>
			<unit id="155" translate="yes">
				<segment state="initial">
					<source>DO use the recommended high-contrast color pairing for a particular UI element to ensure the required 14:1 contrast ratio is met.</source>
					<target>DO use the recommended high-contrast color pairing for a particular UI element to ensure the required 14:1 contrast ratio is met.</target>
				</segment>
			</unit>
			<unit id="156" translate="yes">
				<segment state="initial">
					<source>DON'T break apart high-contrast color pairs or arbitrarily mix and match high-contrast colors.</source>
					<target>DON'T break apart high-contrast color pairs or arbitrarily mix and match high-contrast colors.</target>
				</segment>
			</unit>
			<unit id="157" translate="yes">
				<segment state="initial">
					<source>This will often create invisible UI for at least one of the pre-installed high contrast themes.</source>
					<target>This will often create invisible UI for at least one of the pre-installed high contrast themes.</target>
				</segment>
			</unit>
			<unit id="158" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>DON'T put any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> objects that you create outside a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc> collection.</source>
					<target>DON'T put any <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc> objects that you create outside a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc> collection.</target>
				</segment>
			</unit>
			<unit id="159" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>DON'T ever use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> to reference a resource in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc> collection.</source>
					<target>DON'T ever use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc> to reference a resource in a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThemeDictionaries</pc> collection.</target>
				</segment>
			</unit>
			<unit id="160" translate="yes">
				<segment state="initial">
					<source>This will appear to work until the user changes themes while your app is running.</source>
					<target>This will appear to work until the user changes themes while your app is running.</target>
				</segment>
			</unit>
			<unit id="161" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeResource</pc> instead.</source>
					<target>Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ThemeResource</pc> instead.</target>
				</segment>
			</unit>
			<unit id="162" translate="yes">
				<segment state="initial">
					<source>DON'T use hard coded color values.</source>
					<target>DON'T use hard coded color values.</target>
				</segment>
			</unit>
			<unit id="163" translate="yes">
				<segment state="initial">
					<source>DON'T use a color just because you like it.</source>
					<target>DON'T use a color just because you like it.</target>
				</segment>
			</unit>
			<unit id="164" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/windows/uwp/controls-and-patterns/xaml-theme-resources)</data>
				</originalData>
				<segment state="initial">
					<source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML theme resources</pc> for more information.</source>
					<target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML theme resources</pc> for more information.</target>
				</segment>
			</unit>
			<unit id="165" translate="yes">
				<segment state="initial">
					<source>When to use borders</source>
					<target>When to use borders</target>
				</segment>
			</unit>
			<unit id="166" translate="yes">
				<segment state="initial">
					<source>In high-contrast mode, add a borders to a UI element where it is necessary to keep a recognizable boundary shape on the item.</source>
					<target>In high-contrast mode, add a borders to a UI element where it is necessary to keep a recognizable boundary shape on the item.</target>
				</segment>
			</unit>
			<unit id="167" translate="yes">
				<segment state="initial">
					<source>Use borders to differentiate between the content areas of navigation, actions, and content.</source>
					<target>Use borders to differentiate between the content areas of navigation, actions, and content.</target>
				</segment>
			</unit>
			<unit id="168" translate="yes">
				<segment state="initial">
					<source>A navigation pane separated from the rest of the page</source>
					<target>A navigation pane separated from the rest of the page</target>
				</segment>
			</unit>
			<unit id="169" translate="yes">
				<segment state="initial">
					<source>A navigation pane separated from the rest of the page</source>
					<target>A navigation pane separated from the rest of the page</target>
				</segment>
			</unit>
			<unit id="170" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
				</originalData>
				<segment state="initial">
					<source>If a UI element <pc dataRefEnd="id2" dataRefStart="id1" id="p1">does not</pc> have a border or background by default, do not add a border or background to the default state in high-contrast mode.</source>
					<target>If a UI element <pc dataRefEnd="id2" dataRefStart="id1" id="p1">does not</pc> have a border or background by default, do not add a border or background to the default state in high-contrast mode.</target>
				</segment>
			</unit>
			<unit id="171" translate="yes">
				<originalData>
					<data id="id1">_</data>
					<data id="id2">_</data>
				</originalData>
				<segment state="initial">
					<source>If a UI element <pc dataRefEnd="id2" dataRefStart="id1" id="p1">does</pc> have a border by default, then retain the border in high-contrast mode.</source>
					<target>If a UI element <pc dataRefEnd="id2" dataRefStart="id1" id="p1">does</pc> have a border by default, then retain the border in high-contrast mode.</target>
				</segment>
			</unit>
			<unit id="172" translate="yes">
				<segment state="initial">
					<source>Overlapping or adjacent colors should be distinguishable from one another, but they do not necessarily have to meet the color contrast ratio of 14:1.</source>
					<target>Overlapping or adjacent colors should be distinguishable from one another, but they do not necessarily have to meet the color contrast ratio of 14:1.</target>
				</segment>
			</unit>
			<unit id="173" translate="yes">
				<segment state="initial">
					<source>However, best practice is a 3:1 contrast ratio for these types of scenarios.</source>
					<target>However, best practice is a 3:1 contrast ratio for these types of scenarios.</target>
				</segment>
			</unit>
			<unit id="174" translate="yes">
				<segment state="initial">
					<source>If high-contrast background colors are used to differentiate overlapping UI elements, the only guaranteed method for ensuring contrast between these elements is to introduce borders.</source>
					<target>If high-contrast background colors are used to differentiate overlapping UI elements, the only guaranteed method for ensuring contrast between these elements is to introduce borders.</target>
				</segment>
			</unit>
			<unit id="175" translate="yes">
				<segment state="initial">
					<source>Detecting when a high-contrast theme is enabled</source>
					<target>Detecting when a high-contrast theme is enabled</target>
				</segment>
			</unit>
			<unit id="176" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242237)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Use members of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> class to detect the current settings for high-contrast themes.</source>
					<target>Use members of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> class to detect the current settings for high-contrast themes.</target>
				</segment>
			</unit>
			<unit id="177" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242237_highcontrast)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc></pc> property determines whether a high-contrast theme is currently selected.</source>
					<target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HighContrast</pc></pc> property determines whether a high-contrast theme is currently selected.</target>
				</segment>
			</unit>
			<unit id="178" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
					<data id="id5">[</data>
					<data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242237_highcontrastscheme)</data>
					<data id="id7">**</data>
					<data id="id8">**</data>
				</originalData>
				<segment state="initial">
					<source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>, then the next step is to check the value of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HighContrastScheme</pc></pc> property to get the name of the high-contrast theme that is used.</source>
					<target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrast</pc> is set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">true</pc>, then the next step is to check the value of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">HighContrastScheme</pc></pc> property to get the name of the high-contrast theme that is used.</target>
				</segment>
			</unit>
			<unit id="179" translate="yes">
				<originalData>
					<data id="id1">**</data>
					<data id="id2">**</data>
				</originalData>
				<segment state="initial">
					<source>"High Contrast White" and "High Contrast Black" are typically values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastScheme</pc> that your code should respond to.</source>
					<target>"High Contrast White" and "High Contrast Black" are typically values for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HighContrastScheme</pc> that your code should respond to.</target>
				</segment>
			</unit>
			<unit id="180" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208794)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>XAML-defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> keys can't have spaces, so the keys for these themes in a resource dictionary are typically "HighContrastWhite" and "HighContrastBlack" respectively.</source>
					<target>XAML-defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ResourceDictionary</pc></pc> keys can't have spaces, so the keys for these themes in a resource dictionary are typically "HighContrastWhite" and "HighContrastBlack" respectively.</target>
				</segment>
			</unit>
			<unit id="181" translate="yes">
				<segment state="initial">
					<source>You should also have fallback logic for a default high-contrast theme in case the value is some other string.</source>
					<target>You should also have fallback logic for a default high-contrast theme in case the value is some other string.</target>
				</segment>
			</unit>
			<unit id="182" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=254993)</data>
				</originalData>
				<segment state="initial">
					<source><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML high contrast sample</pc> shows the logic for this.</source>
					<target><pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML high contrast sample</pc> shows the logic for this.</target>
				</segment>
			</unit>
			<unit id="183" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242237)</data>
					<data id="id3">**</data>
					<data id="id4">**</data>
				</originalData>
				<segment state="initial">
					<source>Make sure you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> constructor from a scope where the app is initialized and is already displaying content.</source>
					<target>Make sure you call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">AccessibilitySettings</pc></pc> constructor from a scope where the app is initialized and is already displaying content.</target>
				</segment>
			</unit>
			<unit id="184" translate="yes">
				<segment state="initial">
					<source>Apps can switch to using high-contrast resource values while the app is running.</source>
					<target>Apps can switch to using high-contrast resource values while the app is running.</target>
				</segment>
			</unit>
			<unit id="185" translate="yes">
				<originalData>
					<data id="id1">[</data>
					<data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185591)</data>
				</originalData>
				<segment state="initial">
					<source>This works so long as the resources are requested using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in the style or template XAML.</source>
					<target>This works so long as the resources are requested using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{ThemeResource} markup extension</pc> in the style or template XAML.</target>
				</segment>
			</unit>
			<unit id="186" translate="yes">
				<segment state="initial">
					<source>The default themes (generic.xaml) all use this {ThemeResource} markup extension technique, so you'll get this behavior if you're using default control themes.</source>
					<target>The default themes (generic.xaml) all use this {ThemeResource} markup extension technique, so you'll get this behavior if you're using default control themes.</target>
				</segment>
			</unit>
			<unit id="187" translate="yes">
				<segment state="initial">
					<source>Custom controls or custom control styling can do this if you've used this {ThemeResource} markup extension resource technique in your custom templates and styles also.</source>
					<target>Custom controls or custom control styling can do this if you've used this {ThemeResource} markup extension resource technique in your custom templates and styles also.</target>
				</segment>
			</unit>
			<unit id="188" translate="yes">
				<segment state="initial">
					<source>Related topics</source>
					<target>Related topics</target>
				</segment>
			</unit>
			<unit id="189" translate="yes">
				<segment state="initial">
					<source>Accessibility</source>
					<target>Accessibility</target>
				</segment>
			</unit>
			<unit id="190" translate="yes">
				<segment state="initial">
					<source>UI contrast and settings sample</source>
					<target>UI contrast and settings sample</target>
				</segment>
			</unit>
			<unit id="191" translate="yes">
				<segment state="initial">
					<source>XAML accessibility sample</source>
					<target>XAML accessibility sample</target>
				</segment>
			</unit>
			<unit id="192" translate="yes">
				<segment state="initial">
					<source>XAML high contrast sample</source>
					<target>XAML high contrast sample</target>
				</segment>
			</unit>
			<unit id="193" translate="yes">
				<segment state="initial">
					<source>AccessibilitySettings</source>
					<target>AccessibilitySettings</target>
				</segment>
			</unit>
		</group>
	</file>
</xliff>